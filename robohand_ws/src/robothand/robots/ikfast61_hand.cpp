/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2018-06-19 21:46:59.015405
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65;
x0=IKsin(j[0]);
x1=IKcos(j[5]);
x2=IKsin(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[1]);
x5=IKcos(j[2]);
x6=IKcos(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[3]);
x9=IKsin(j[5]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=((0.00698996902996244)*x1);
x13=((0.14675)*x5);
x14=((3.5e-7)*x0);
x15=((0.999975569868064)*x9);
x16=((0.999975569868064)*x1);
x17=((0.02349986)*x5);
x18=((0.00698996902996244)*x9);
x19=((0.16085006)*x0);
x20=((1.0)*x7);
x21=((3.5e-7)*x5);
x22=((1.0)*x11);
x23=((3.5e-7)*x6);
x24=((1.0)*x0);
x25=((1.0)*x5);
x26=((1.0)*x10);
x27=((0.14675)*x7);
x28=((0.16085006)*x5);
x29=((0.0008)*x5);
x30=((0.0008)*x0);
x31=(x4*x6);
x32=(x2*x3);
x33=(x11*x8);
x34=(x2*x6);
x35=(x10*x8);
x36=(x4*x5);
x37=(x0*x2);
x38=(x6*x8);
x39=(x3*x4);
x40=(x0*x4);
x41=(x20*x6);
x42=(x0*x20);
x43=((((-1.0)*x32))+((x25*x4)));
x44=(((x2*x25))+(((1.0)*x39)));
x45=(x43*x7);
x46=(((x34*x5))+((x3*x31)));
x47=(x11*x44);
x48=(x24*(((((-1.0)*x36))+x32)));
x49=((((-1.0)*x32*x6))+((x25*x31)));
x50=(x35*x43);
x51=(((x2*x24*x5))+((x24*x39)));
x52=((-1.0)*x51);
x53=(x46*x8);
x54=(x11*x48);
x55=(x52*x8);
x56=(x42+(((-1.0)*x53)));
x57=((((-1.0)*x38))+((x51*x7)));
x58=((((-1.0)*x24*x8))+((x7*(((((-1.0)*x25*x34))+(((-1.0)*x3*x31)))))));
x59=(x41+(((-1.0)*x55)));
x60=(x10*x59);
x61=(x47+x50);
x62=((((-1.0)*x47))+(((-1.0)*x50)));
x63=(((x11*x49))+((x10*x56)));
x64=(x54+x60);
x65=((((-1.0)*x26*x56))+(((-1.0)*x22*x49)));
IkReal x66=((1.0)*x57);
eerot[0]=((((-1.0)*x15*(((((-1.0)*x54))+(((-1.0)*x60))))))+(((-1.0)*x16*x66))+(((-1.0)*x12*x64))+(((-1.0)*x18*x66)));
eerot[1]=(((x12*x57))+(((-1.0)*x15*x57))+(((-1.0)*x16*x64))+((x18*(((((-1.0)*x26*x59))+(((-1.0)*x22*x48)))))));
eerot[2]=(((x11*(((((-1.0)*x41))+x55))))+((x10*x48)));
IkReal x67=((1.0)*x36);
eetrans[0]=((((-7.7e-7)*x40))+((x19*x32))+((x17*x37))+(((0.02349986)*x0*x39))+((x10*(((((0.14675)*x0*x32))+(((-1.0)*x13*x40))))))+(((-1.0)*x19*x67))+((x11*(((((-1.0)*x14*x67))+((x14*x32))))))+((x7*(((((-1.0)*x30*x39))+(((-1.0)*x29*x37))))))+((x10*((((x23*x7))+(((-3.5e-7)*x55))))))+(((0.0008)*x38))+((x11*(((((0.14675)*x55))+(((-1.0)*x27*x6))))))+(((0.16)*x37)));
eerot[3]=(((x12*x61))+((x15*x62))+((x18*x45))+((x16*x45)));
eerot[4]=((((-1.0)*x12*x45))+(((-1.0)*x18*x62))+((x16*x61))+((x15*x45)));
eerot[5]=((((-1.0)*x10*x44))+((x33*x43)));
IkReal x68=((1.0)*x4);
IkReal x69=((1.0)*x2);
eetrans[1]=((-0.05669)+(((-7.7e-7)*x2))+(((-1.0)*x17*x68))+((x33*((((x13*x4))+(((-0.14675)*x32))))))+((x10*(((((-1.0)*x13*x69))+(((-0.14675)*x39))))))+((x35*(((((-1.0)*x21*x68))+(((3.5e-7)*x32))))))+(((-0.16)*x4))+((x11*(((((-3.5e-7)*x39))+(((-1.0)*x21*x69))))))+(((-1.0)*x28*x69))+((x7*((((x29*x4))+(((-0.0008)*x32))))))+(((-0.16085006)*x39))+(((0.02349986)*x32)));
IkReal x70=((1.0)*x58);
eerot[6]=((((-1.0)*x18*x70))+(((-1.0)*x12*x63))+(((-1.0)*x16*x70))+(((-1.0)*x15*x65)));
eerot[7]=(((x12*x58))+((x18*x65))+(((-1.0)*x15*x58))+(((-1.0)*x16*x63)));
eerot[8]=(((x11*(((((-1.0)*x42))+x53))))+((x10*x49)));
IkReal x71=(x32*x6);
IkReal x72=(x3*x31);
eetrans[2]=(((x7*((((x29*x34))+(((0.0008)*x72))))))+((x30*x8))+((x28*x31))+(((-1.0)*x17*x34))+((x10*((((x14*x7))+(((-3.5e-7)*x53))))))+(((-0.16085006)*x71))+((x11*(((((-1.0)*x0*x27))+(((0.14675)*x53))))))+((x11*((((x21*x31))+(((-1.0)*x23*x32))))))+((x10*(((((-0.14675)*x71))+((x13*x31))))))+(((-0.02349986)*x72))+(((-0.16)*x34))+(((7.7e-7)*x31)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-0.999975569868064)*r01))+(((-0.00698996902996244)*r00)));
new_r01=((((0.00698996902996244)*r01))+(((-0.999975569868064)*r00)));
new_r02=((-1.0)*r02);
new_px=((((-0.14675)*r02))+px);
new_r10=((((-0.00698996902996244)*r20))+(((-0.999975569868064)*r21)));
new_r11=((((0.00698996902996244)*r21))+(((-0.999975569868064)*r20)));
new_r12=((-1.0)*r22);
new_py=((((-0.14675)*r22))+pz);
new_r20=((((0.00698996902996244)*r10))+(((0.999975569868064)*r11)));
new_r21=((((0.999975569868064)*r10))+(((-0.00698996902996244)*r11)));
new_r22=r12;
new_pz=((-0.05669)+(((0.14675)*r12))+(((-1.0)*py)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x73=((1.0)*px);
IkReal x74=((1.0)*pz);
IkReal x75=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x75))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x74)));
rxp0_2=((((-1.0)*r10*x73))+((py*r00)));
rxp1_0=((((-1.0)*r21*x75))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x74)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x73)));
rxp2_0=((((-1.0)*r22*x75))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x74)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x73)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x76=((2.0)*rxp1_2);
IkReal x77=((0.0008)*r22);
IkReal x78=((((-1.0)*x77))+rxp0_2);
IkReal x79=((0.0016)*npy);
IkReal x80=((0.04699972)*npz);
IkReal x81=((0.32170082)*npx);
IkReal x82=((1.0)*pp);
IkReal x83=((0.04699972)*npy);
IkReal x84=((0.09399944)*npx);
IkReal x85=((3.7599776e-5)+(((-1.0)*x83)));
IkReal x86=((0.0016)*r20);
IkReal x87=((7.0e-7)*r21);
IkReal x88=((2.0)*rxp2_2);
IkReal x89=((0.64340024)*npz);
IkReal x90=((1.0)*rxp0_2);
IkReal x91=((0.0032)*npx);
IkReal x92=((0.32169942)*npx);
IkReal x93=((3.7599776e-5)+x83);
IkReal x94=((((-1.4e-6)*r20))+(((0.0032)*r21)));
IkReal x95=(rxp0_2+x77);
IkReal x96=((-2.0)*rxp1_2);
IkReal x97=(x77+(((-1.0)*x90)));
IkReal x98=((((0.64339884)*npy))+(((-1.0)*x91)));
IkReal x99=((-0.0008257378165948)+x81);
IkReal x100=((-0.0008257378165948)+x79);
IkReal x101=((-0.0008255126265108)+x80);
IkReal x102=((((-1.0)*x77))+(((-1.0)*x90)));
IkReal x103=((((-0.64340164)*npy))+(((-1.0)*x91)));
IkReal x104=(x89+x84);
IkReal x105=(x82+x80);
IkReal x106=(x86+x87);
IkReal x107=(x79+x92);
IkReal x108=((((-1.0)*x106))+x88);
IkReal x109=(x106+x88);
op[0]=x102;
op[1]=x102;
op[2]=x76;
op[3]=x76;
op[4]=x78;
op[5]=x78;
op[6]=((((-1.0)*x79))+x80+x99+(((-1.0)*x82)));
op[7]=x93;
op[8]=x103;
op[9]=x84;
op[10]=(x100+x80+(((-1.0)*x81))+(((-1.0)*x82)));
op[11]=x85;
op[12]=x93;
op[13]=((((-1.0)*x79))+(((-1.0)*x105))+x99);
op[14]=x84;
op[15]=x103;
op[16]=x85;
op[17]=((((-1.0)*x105))+x100+(((-1.0)*x81)));
op[18]=0;
op[19]=x102;
op[20]=0;
op[21]=x76;
op[22]=0;
op[23]=x78;
op[24]=x108;
op[25]=x108;
op[26]=x94;
op[27]=x94;
op[28]=x109;
op[29]=x109;
op[30]=((-3.2899804e-8)+x84+(((-1.0)*x89)));
op[31]=0;
op[32]=((-0.18799888)*npy);
op[33]=0;
op[34]=((-3.2899804e-8)+(((-1.0)*x104)));
op[35]=0;
op[36]=0;
op[37]=((3.2899804e-8)+(((-1.0)*x104)));
op[38]=0;
op[39]=((0.18799888)*npy);
op[40]=0;
op[41]=((3.2899804e-8)+x84+(((-1.0)*x89)));
op[42]=0;
op[43]=x108;
op[44]=0;
op[45]=x94;
op[46]=0;
op[47]=x109;
op[48]=x95;
op[49]=x95;
op[50]=x96;
op[51]=x96;
op[52]=x97;
op[53]=x97;
op[54]=((-0.0008255126265108)+(((-1.0)*x107))+(((-1.0)*x105)));
op[55]=x93;
op[56]=x98;
op[57]=x84;
op[58]=((-0.0008255126265108)+(((-1.0)*x105))+x107);
op[59]=x85;
op[60]=x93;
op[61]=((((-1.0)*x107))+x101+(((-1.0)*x82)));
op[62]=x84;
op[63]=x98;
op[64]=x85;
op[65]=(x107+x101+(((-1.0)*x82)));
op[66]=0;
op[67]=x95;
op[68]=0;
op[69]=x96;
op[70]=0;
op[71]=x97;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj3 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj3)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x110=htj4*htj4;
CheckValue<IkReal> x111=IKPowWithIntegerCheck(((1.0)+x110),-1);
if(!x111.valid){
continue;
}
cj4array[numsolutions]=((x111.value)*(((1.0)+(((-1.0)*x110)))));
CheckValue<IkReal> x112=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x112.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x112.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x113=htj5*htj5;
CheckValue<IkReal> x114=IKPowWithIntegerCheck(((1.0)+x113),-1);
if(!x114.valid){
continue;
}
cj5array[numsolutions]=((x114.value)*(((1.0)+(((-1.0)*x113)))));
CheckValue<IkReal> x115=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x115.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x115.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x116=htj3*htj3;
CheckValue<IkReal> x117=IKPowWithIntegerCheck(((1.0)+x116),-1);
if(!x117.valid){
continue;
}
cj3array[numsolutions]=((x117.value)*(((1.0)+(((-1.0)*x116)))));
CheckValue<IkReal> x118=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x118.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x118.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj3 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij4]-cj3array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij4]-sj3array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij3[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j3 = j3array[ij4]; cj3 = cj3array[ij4]; sj3 = sj3array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j0eval[3];
IkReal x119=(cj4*sj3);
IkReal x120=((1.0)*cj5);
IkReal x121=(sj3*sj4);
IkReal x122=((1.0)*sj5);
IkReal x123=((((-1.0)*r20*x122))+(((-1.0)*r21*x120)));
j0eval[0]=x123;
j0eval[1]=((IKabs(((((-1.0)*r10*x119*x120))+((r11*sj5*x119))+((r12*x121)))))+(IKabs(((((-1.0)*r01*x119*x122))+(((-1.0)*r02*x121))+((cj5*r00*x119))))));
j0eval[2]=IKsign(x123);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x124=(cj3*cj4);
IkReal x125=(cj3*sj4);
IkReal x126=((1.0)*cj5);
IkReal x127=(((r21*sj4*sj5))+(((-1.0)*r20*sj4*x126))+(((-1.0)*cj4*r22)));
j0eval[0]=x127;
j0eval[1]=((IKabs((((cj5*r00*x124))+(((-1.0)*r02*x125))+(((-1.0)*r01*sj5*x124)))))+(IKabs(((((-1.0)*r10*x124*x126))+((r11*sj5*x124))+((r12*x125))))));
j0eval[2]=IKsign(x127);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x128=((7.0)*cj3);
IkReal x129=((20000000.0)*cj3);
IkReal x130=(cj5*rxp1_2);
IkReal x131=(rxp0_2*sj5);
IkReal x132=((16000.0)*cj3*sj5);
IkReal x133=((16000.0)*cj3*cj5);
j0eval[0]=((((-1.0)*r22))+(((-2857142.85714286)*x130))+(((-2857142.85714286)*x131)));
j0eval[1]=((IKabs((((cj5*r00*x128))+(((-1.0)*r01*x133))+(((-1.0)*r01*sj5*x128))+(((-1.0)*px*x129))+(((-1.0)*r00*x132)))))+(IKabs(((((-1.0)*cj5*r10*x128))+((py*x129))+((r11*sj5*x128))+((r11*x133))+((r10*x132))))));
j0eval[2]=IKsign(((((-3.5e-7)*r22))+(((-1.0)*x131))+(((-1.0)*x130))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x134=((((8163265306122.45)*(rxp0_2*rxp0_2)))+(((8163265306122.45)*(rxp1_2*rxp1_2))));
if((x134) < -0.00001)
continue;
IkReal x135=IKabs(IKsqrt(x134));
IkReal x142 = x134;
if(IKabs(x142)==0){
continue;
}
IkReal x136=pow(x142,-0.5);
IkReal x137=((2857142.85714286)*x136);
CheckValue<IkReal> x143=IKPowWithIntegerCheck(x135,-1);
if(!x143.valid){
continue;
}
IkReal x138=x143.value;
IkReal x139=(r22*x138);
if((((1.0)+(((-1.0)*(x139*x139))))) < -0.00001)
continue;
IkReal x140=IKsqrt(((1.0)+(((-1.0)*(x139*x139)))));
IkReal x141=(x137*x140);
CheckValue<IkReal> x144 = IKatan2WithCheck(IkReal(((-2857142.85714286)*rxp1_2)),IkReal(((-2857142.85714286)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x144.valid){
continue;
}
if( (x139) < -1-IKFAST_SINCOS_THRESH || (x139) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*(x144.value)))+(IKasin(x139)));
IkReal gconst1=((((-1.0)*rxp0_2*x137*x139))+((rxp1_2*x141)));
IkReal gconst2=((((-1.0)*rxp1_2*x137*x139))+(((-1.0)*rxp0_2*x141)));
if((((((8163265306122.45)*(rxp0_2*rxp0_2)))+(((8163265306122.45)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x145=IKPowWithIntegerCheck(IKabs(IKsqrt(((((8163265306122.45)*(rxp0_2*rxp0_2)))+(((8163265306122.45)*(rxp1_2*rxp1_2)))))),-1);
if(!x145.valid){
continue;
}
if( ((r22*(x145.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x145.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x146 = IKatan2WithCheck(IkReal(((-2857142.85714286)*rxp1_2)),IkReal(((-2857142.85714286)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x146.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin((r22*(x145.value))))))+j5+(x146.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x147=((1.0)*gconst1);
IkReal x148=(cj4*sj3);
IkReal x149=(sj3*sj4);
IkReal x150=(gconst2*x148);
CheckValue<IkReal> x151=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r21))+(((-1.0)*r20*x147)))),-1);
if(!x151.valid){
continue;
}
CheckValue<IkReal> x152 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x149))+(((-1.0)*r01*x147*x148))+((r00*x150)))),IkReal((((gconst1*r11*x148))+(((-1.0)*r10*x150))+((r12*x149)))),IKFAST_ATAN2_MAGTHRESH);
if(!x152.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x151.value)))+(x152.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x153=IKcos(j0);
IkReal x154=IKsin(j0);
IkReal x155=((1.0)*sj4);
IkReal x156=((0.0008)*gconst2);
IkReal x157=(gconst1*r01);
IkReal x158=(r12*x154);
IkReal x159=((1.0)*x153);
IkReal x160=(r01*x153);
IkReal x161=(r11*x154);
IkReal x162=(cj4*x153);
IkReal x163=(gconst1*x161);
IkReal x164=(gconst2*r10*x154);
IkReal x165=(gconst1*r00*x153);
IkReal x166=(gconst1*r10*x154);
IkReal x167=(gconst2*r00*x153);
evalcond[0]=(cj3+x166+x165+((gconst2*x161))+((gconst2*x160)));
evalcond[1]=(((cj4*x164))+((gconst2*r00*x162))+(((-1.0)*cj4*x163))+(((-1.0)*r02*x153*x155))+(((-1.0)*x155*x158))+(((-1.0)*cj4*x157*x159)));
evalcond[2]=(((cj4*x158))+(((-1.0)*sj3))+(((-1.0)*x153*x155*x157))+((sj4*x164))+((sj4*x167))+(((-1.0)*x155*x163))+((r02*x162)));
evalcond[3]=((((3.5e-7)*x167))+(((3.5e-7)*x164))+(((-3.5e-7)*x163))+(((-1.0)*px*x159))+(((-1.0)*py*x154))+(((-0.0008)*x165))+(((-0.0008)*x166))+(((-1.0)*x156*x160))+(((-1.0)*x156*x161))+(((-3.5e-7)*x153*x157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x168=((0.64)*cj3);
IkReal x169=((6.16e-6)*cj3);
IkReal x170=((0.64340024)*cj3);
IkReal x171=(gconst2*r20);
IkReal x172=(r22*sj4);
IkReal x173=(cj3*gconst1);
IkReal x174=(cj4*r22);
IkReal x175=(cj4*r21);
IkReal x176=((1.93020072)*cj3);
IkReal x177=(cj3*pz);
IkReal x178=((0.28199832)*x174);
IkReal x179=((12.0)*x177);
IkReal x180=((0.09399944)*x174);
IkReal x181=((4.0)*x177);
IkReal x182=(gconst1*r21*sj4);
IkReal x183=(cj3*gconst2*r21);
IkReal x184=((4.2e-6)*cj3*x171);
IkReal x185=((0.28199832)*sj4*x171);
IkReal x186=((0.0096)*x183);
IkReal x187=((0.28199832)*x182);
IkReal x188=(x172*x176);
IkReal x189=((4.2e-6)*r21*x173);
IkReal x190=((0.0096)*r20*x173);
IkReal x191=((1.4e-6)*cj3*x171);
IkReal x192=((0.09399944)*sj4*x171);
IkReal x193=((1.4e-6)*r21*x173);
IkReal x194=((0.0032)*x183);
IkReal x195=((0.09399944)*x182);
IkReal x196=(x170*x172);
IkReal x197=((0.0032)*r20*x173);
IkReal x198=(cj4*x171*x176);
IkReal x199=((1.93020072)*x173*x175);
IkReal x200=(cj4*x170*x171);
IkReal x201=(gconst1*x170*x175);
IkReal x202=(x192+x191+x180+x200);
IkReal x203=(x178+x198+x184+x185);
IkReal x204=(x193+x197+x196+x195+x194+x181+x201);
IkReal x205=(x179+x199+x190+x186+x187+x188+x189);
op[0]=((((-1.0)*x168))+(((-1.0)*x204))+x202);
op[1]=x169;
op[2]=((((-1.0)*x168))+(((-1.0)*x205))+x203);
op[3]=((1.232e-5)*cj3);
op[4]=(x168+(((-1.0)*x205))+x203);
op[5]=x169;
op[6]=(x168+(((-1.0)*x204))+x202);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((0.0032)*gconst2*r21*(cj3*cj3)))+(((-1.4e-6)*gconst2*r20*(cj3*cj3)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((0.0032)*gconst2*r21*(cj3*cj3)))+(((-1.4e-6)*gconst2*r20*(cj3*cj3)))+(((-0.64340024)*cj3*gconst2*r00*sj0*sj4))+(((1.4e-6)*gconst1*r21*(cj3*cj3)))+(((0.64340024)*cj0*cj3*gconst2*r10*sj4))+(((0.64340024)*cj0*cj3*cj4*r12))+(((0.64340024)*cj3*gconst1*r01*sj0*sj4))+(((-0.09399944)*cj3*gconst2*r20*sj4))+(((-0.64340024)*cj0*cj3*gconst1*r11*sj4))+(((-0.09399944)*cj3*cj4*r22))+(((0.0032)*gconst1*r20*(cj3*cj3)))+(((-0.64340024)*cj3*cj4*r02*sj0))+(((4.0)*pz*(cj3*cj3)))+(((0.09399944)*cj3*gconst1*r21*sj4))+(((0.64)*(cj3*cj3)))))))+(((htj1*htj1*htj1*htj1)*(((((1.93020072)*cj3*gconst1*r01*sj0*sj4))+(((-4.2e-6)*gconst2*r20*(cj3*cj3)))+(((1.93020072)*cj0*cj3*cj4*r12))+(((-1.93020072)*cj3*cj4*r02*sj0))+(((12.0)*pz*(cj3*cj3)))+(((0.28199832)*cj3*gconst1*r21*sj4))+(((-1.93020072)*cj3*gconst2*r00*sj0*sj4))+(((4.2e-6)*gconst1*r21*(cj3*cj3)))+(((1.93020072)*cj0*cj3*gconst2*r10*sj4))+(((-0.28199832)*cj3*cj4*r22))+(((0.0096)*gconst1*r20*(cj3*cj3)))+(((-1.93020072)*cj0*cj3*gconst1*r11*sj4))+(((0.0096)*gconst2*r21*(cj3*cj3)))+(((-0.28199832)*cj3*gconst2*r20*sj4))+(((0.64)*(cj3*cj3)))))))+(((-0.64340024)*cj3*gconst2*r00*sj0*sj4))+(((1.4e-6)*gconst1*r21*(cj3*cj3)))+(((0.64340024)*cj0*cj3*gconst2*r10*sj4))+(((-1.232e-5)*(cj3*cj3)*(htj1*htj1*htj1)))+(((0.64340024)*cj0*cj3*cj4*r12))+(((-6.16e-6)*(cj3*cj3)*(htj1*htj1*htj1*htj1*htj1)))+(((0.64340024)*cj3*gconst1*r01*sj0*sj4))+(((-6.16e-6)*htj1*(cj3*cj3)))+(((-0.09399944)*cj3*gconst2*r20*sj4))+(((-0.64340024)*cj0*cj3*gconst1*r11*sj4))+(((-0.09399944)*cj3*cj4*r22))+(((0.0032)*gconst1*r20*(cj3*cj3)))+(((-0.64340024)*cj3*cj4*r02*sj0))+(((-0.64)*(cj3*cj3)))+(((4.0)*pz*(cj3*cj3)))+(((0.09399944)*cj3*gconst1*r21*sj4))+(((htj1*htj1)*(((((1.93020072)*cj3*gconst1*r01*sj0*sj4))+(((-4.2e-6)*gconst2*r20*(cj3*cj3)))+(((1.93020072)*cj0*cj3*cj4*r12))+(((-1.93020072)*cj3*cj4*r02*sj0))+(((12.0)*pz*(cj3*cj3)))+(((0.28199832)*cj3*gconst1*r21*sj4))+(((-1.93020072)*cj3*gconst2*r00*sj0*sj4))+(((4.2e-6)*gconst1*r21*(cj3*cj3)))+(((-0.64)*(cj3*cj3)))+(((1.93020072)*cj0*cj3*gconst2*r10*sj4))+(((-0.28199832)*cj3*cj4*r22))+(((0.0096)*gconst1*r20*(cj3*cj3)))+(((-1.93020072)*cj0*cj3*gconst1*r11*sj4))+(((0.0096)*gconst2*r21*(cj3*cj3)))+(((-0.28199832)*cj3*gconst2*r20*sj4)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x206=x134;
if((x206) < -0.00001)
continue;
IkReal x207=IKabs(IKsqrt(x206));
IkReal x215 = x206;
if(IKabs(x215)==0){
continue;
}
IkReal x208=pow(x215,-0.5);
IkReal x209=((2857142.85714286)*x208);
CheckValue<IkReal> x216=IKPowWithIntegerCheck(x207,-1);
if(!x216.valid){
continue;
}
IkReal x210=x216.value;
IkReal x211=(r22*x210);
if((((1.0)+(((-1.0)*(x211*x211))))) < -0.00001)
continue;
IkReal x212=IKsqrt(((1.0)+(((-1.0)*(x211*x211)))));
CheckValue<IkReal> x217 = IKatan2WithCheck(IkReal(((-2857142.85714286)*rxp1_2)),IkReal(((-2857142.85714286)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x217.valid){
continue;
}
if( (x211) < -1-IKFAST_SINCOS_THRESH || (x211) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x213=((((-1.0)*(x217.value)))+(IKasin(x211)));
IkReal x214=(x209*x212);
sj5=gconst1;
cj5=gconst2;
j5=x213;
IkReal gconst0=x213;
IkReal gconst1=((((-1.0)*rxp0_2*x209*x211))+((rxp1_2*x214)));
IkReal gconst2=((((-1.0)*rxp0_2*x214))+(((-1.0)*rxp1_2*x209*x211)));
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x218=x134;
if((x218) < -0.00001)
continue;
IkReal x219=IKabs(IKsqrt(x218));
IkReal x227 = x218;
if(IKabs(x227)==0){
continue;
}
IkReal x220=pow(x227,-0.5);
IkReal x221=((2857142.85714286)*x220);
CheckValue<IkReal> x228=IKPowWithIntegerCheck(x219,-1);
if(!x228.valid){
continue;
}
IkReal x222=x228.value;
IkReal x223=(r22*x222);
if((((1.0)+(((-1.0)*(x223*x223))))) < -0.00001)
continue;
IkReal x224=IKsqrt(((1.0)+(((-1.0)*(x223*x223)))));
CheckValue<IkReal> x229 = IKatan2WithCheck(IkReal(((-2857142.85714286)*rxp1_2)),IkReal(((-2857142.85714286)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x229.valid){
continue;
}
if( (x223) < -1-IKFAST_SINCOS_THRESH || (x223) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x225=((((-1.0)*(x229.value)))+(IKasin(x223)));
IkReal x226=(x221*x224);
sj5=gconst1;
cj5=gconst2;
j5=x225;
IkReal gconst0=x225;
IkReal gconst1=((((-1.0)*rxp0_2*x221*x223))+((rxp1_2*x226)));
IkReal gconst2=((((-1.0)*rxp0_2*x226))+(((-1.0)*rxp1_2*x221*x223)));
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x230=x134;
if((x230) < -0.00001)
continue;
IkReal x231=IKabs(IKsqrt(x230));
IkReal x239 = x230;
if(IKabs(x239)==0){
continue;
}
IkReal x232=pow(x239,-0.5);
IkReal x233=((2857142.85714286)*x232);
CheckValue<IkReal> x240=IKPowWithIntegerCheck(x231,-1);
if(!x240.valid){
continue;
}
IkReal x234=x240.value;
IkReal x235=(r22*x234);
if((((1.0)+(((-1.0)*(x235*x235))))) < -0.00001)
continue;
IkReal x236=IKsqrt(((1.0)+(((-1.0)*(x235*x235)))));
CheckValue<IkReal> x241 = IKatan2WithCheck(IkReal(((-2857142.85714286)*rxp1_2)),IkReal(((-2857142.85714286)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x241.valid){
continue;
}
if( (x235) < -1-IKFAST_SINCOS_THRESH || (x235) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x237=((((-1.0)*(x241.value)))+(IKasin(x235)));
IkReal x238=(x233*x236);
sj5=gconst1;
cj5=gconst2;
j5=x237;
IkReal gconst0=x237;
IkReal gconst1=(((rxp1_2*x238))+(((-1.0)*rxp0_2*x233*x235)));
IkReal gconst2=((((-1.0)*rxp0_2*x238))+(((-1.0)*rxp1_2*x233*x235)));
IkReal x242=(cj3*sj3);
j2eval[0]=x242;
j2eval[1]=IKsign(x242);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x243=(sj1*sj4);
IkReal x244=(gconst1*r21);
IkReal x245=((1.0)*r22);
IkReal x246=(cj4*sj1);
IkReal x247=(cj1*sj4);
IkReal x248=(gconst2*r20);
IkReal x249=(cj1*cj4);
IkReal x250=(cj4*x248);
if( IKabs(((((-1.0)*x244*x249))+((x248*x249))+(((-1.0)*x243*x248))+(((-1.0)*x245*x246))+(((-1.0)*x245*x247))+((x243*x244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x244*x246))+(((-1.0)*x244*x247))+((r22*x249))+(((-1.0)*x243*x245))+((x246*x248))+((x247*x248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x244*x249))+((x248*x249))+(((-1.0)*x243*x248))+(((-1.0)*x245*x246))+(((-1.0)*x245*x247))+((x243*x244))))+IKsqr(((((-1.0)*x244*x246))+(((-1.0)*x244*x247))+((r22*x249))+(((-1.0)*x243*x245))+((x246*x248))+((x247*x248))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x244*x249))+((x248*x249))+(((-1.0)*x243*x248))+(((-1.0)*x245*x246))+(((-1.0)*x245*x247))+((x243*x244))), ((((-1.0)*x244*x246))+(((-1.0)*x244*x247))+((r22*x249))+(((-1.0)*x243*x245))+((x246*x248))+((x247*x248))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x251=IKcos(j2);
IkReal x252=IKsin(j2);
IkReal x253=(r01*sj0);
IkReal x254=((3.5e-7)*gconst1);
IkReal x255=((0.0008)*gconst2);
IkReal x256=((0.02349986)*sj1);
IkReal x257=(cj0*sj4);
IkReal x258=((0.0008)*gconst1);
IkReal x259=(cj0*r10);
IkReal x260=(cj4*gconst1);
IkReal x261=((1.0)*r21);
IkReal x262=(r00*sj0);
IkReal x263=((1.0)*sj0);
IkReal x264=(gconst2*r20);
IkReal x265=((1.0)*sj1);
IkReal x266=((1.0)*gconst2);
IkReal x267=(cj0*r11);
IkReal x268=((1.0)*sj4);
IkReal x269=((3.5e-7)*gconst2);
IkReal x270=(cj1*x251);
IkReal x271=((0.16085006)*x252);
IkReal x272=(cj1*x252);
IkReal x273=(x251*x265);
IkReal x274=((1.0)*x272);
IkReal x275=(x274+x273);
evalcond[0]=(((cj4*r22))+(((-1.0)*x270))+((sj1*x252))+(((-1.0)*gconst1*sj4*x261))+((sj4*x264)));
evalcond[1]=(((cj4*x264))+(((-1.0)*x275))+(((-1.0)*r22*x268))+(((-1.0)*x260*x261)));
evalcond[2]=((((-1.0)*cj4*x259*x266))+((cj4*gconst2*x262))+((x260*x267))+(((-1.0)*r02*sj4*x263))+((r12*x257))+x270+(((-1.0)*x253*x260))+(((-1.0)*x252*x265)));
evalcond[3]=((((-1.0)*r10*x257*x266))+(((-1.0)*cj0*cj4*r12))+((cj4*r02*sj0))+((gconst1*r11*x257))+(((-1.0)*x275))+(((-1.0)*gconst1*x253*x268))+((gconst2*sj4*x262)));
CheckValue<IkReal> x276=IKPowWithIntegerCheck(gconst2,-1);
if(!x276.valid){
continue;
}
evalcond[4]=((((-1.0)*x252*x256))+(((0.16)*cj1))+((cj1*x271))+((gconst1*r20*x254*(x276.value)))+(((3.5e-7)*x264))+(((0.02349986)*x270))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*sj1*x251)));
evalcond[5]=((((-0.16085006)*x270))+(((-1.0)*x258*x262))+((x251*x256))+((x262*x269))+(((-1.0)*x259*x269))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.02349986)*x272))+((x254*x267))+((x255*x267))+(((-1.0)*px*x263))+((cj0*py))+(((-1.0)*x253*x255))+(((-1.0)*x253*x254))+((sj1*x271))+((x258*x259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x277=(cj1*gconst2);
IkReal x278=(cj4*r20);
IkReal x279=(gconst2*sj1);
IkReal x280=(gconst1*r20);
IkReal x281=((1.0)*sj1);
IkReal x282=((1.0)*r22*sj4);
IkReal x283=(cj4*gconst1*r21);
if( IKabs(((((-1.0)*x280*x281))+(((-1.0)*r21*x279))+(((-1.0)*cj1*x282))+((x277*x278))+(((-1.0)*cj1*x283)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x281*x283))+(((-1.0)*r22*sj4*x281))+((r21*x277))+((x278*x279))+((cj1*x280)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x280*x281))+(((-1.0)*r21*x279))+(((-1.0)*cj1*x282))+((x277*x278))+(((-1.0)*cj1*x283))))+IKsqr(((((-1.0)*x281*x283))+(((-1.0)*r22*sj4*x281))+((r21*x277))+((x278*x279))+((cj1*x280))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x280*x281))+(((-1.0)*r21*x279))+(((-1.0)*cj1*x282))+((x277*x278))+(((-1.0)*cj1*x283))), ((((-1.0)*x281*x283))+(((-1.0)*r22*sj4*x281))+((r21*x277))+((x278*x279))+((cj1*x280))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x284=IKcos(j2);
IkReal x285=IKsin(j2);
IkReal x286=((3.5e-7)*gconst1);
IkReal x287=(r01*sj0);
IkReal x288=((0.0008)*gconst2);
IkReal x289=((0.0008)*gconst1);
IkReal x290=(cj0*r10);
IkReal x291=(cj4*gconst1);
IkReal x292=(r00*sj0);
IkReal x293=((1.0)*sj0);
IkReal x294=(gconst2*r20);
IkReal x295=(cj0*r11);
IkReal x296=((1.0)*gconst2);
IkReal x297=((3.5e-7)*gconst2);
IkReal x298=(cj1*x284);
IkReal x299=(sj1*x284);
IkReal x300=(sj1*x285);
IkReal x301=(cj1*x285);
IkReal x302=((1.0)*x299);
IkReal x303=((1.0)*x301);
IkReal x304=(x302+x303);
evalcond[0]=((((-1.0)*x298))+x300+((gconst2*r21))+((gconst1*r20)));
evalcond[1]=((((-1.0)*r21*x291))+((cj4*x294))+(((-1.0)*r22*sj4))+(((-1.0)*x304)));
evalcond[2]=((((-1.0)*gconst1*x290))+((gconst1*x292))+(((-1.0)*x295*x296))+((gconst2*x287))+(((-1.0)*x304)));
evalcond[3]=(((x291*x295))+(((-1.0)*x300))+((cj0*r12*sj4))+x298+((cj4*gconst2*x292))+(((-1.0)*x287*x291))+(((-1.0)*r02*sj4*x293))+(((-1.0)*cj4*x290*x296)));
evalcond[4]=((((0.16)*cj1))+(((-1.0)*r21*x288))+(((-1.0)*r21*x286))+(((-1.0)*r20*x289))+(((3.5e-7)*x294))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x301))+(((-0.02349986)*x300))+(((0.16085006)*x299))+(((0.02349986)*x298)));
evalcond[5]=(((x289*x290))+(((-1.0)*x287*x288))+(((-1.0)*x290*x297))+(((-1.0)*x289*x292))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((x286*x295))+(((0.16085006)*x300))+(((0.02349986)*x301))+((cj0*py))+(((-1.0)*x286*x287))+(((-1.0)*px*x293))+((x292*x297))+(((0.02349986)*x299))+((x288*x295))+(((-0.16085006)*x298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x305=((1.0)*r22);
IkReal x306=(cj1*cj4);
IkReal x307=(gconst2*r20);
IkReal x308=(cj4*sj1);
IkReal x309=(sj1*sj4);
IkReal x310=(cj1*sj4);
IkReal x311=((1.0)*gconst1*r21);
if( IKabs((((r22*x308))+(((-1.0)*x306*x311))+(((-1.0)*x305*x310))+(((-1.0)*x309*x311))+((x307*x309))+((x306*x307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((gconst1*r21*x310))+(((-1.0)*x308*x311))+(((-1.0)*x307*x310))+(((-1.0)*x305*x306))+(((-1.0)*x305*x309))+((x307*x308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x308))+(((-1.0)*x306*x311))+(((-1.0)*x305*x310))+(((-1.0)*x309*x311))+((x307*x309))+((x306*x307))))+IKsqr((((gconst1*r21*x310))+(((-1.0)*x308*x311))+(((-1.0)*x307*x310))+(((-1.0)*x305*x306))+(((-1.0)*x305*x309))+((x307*x308))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x308))+(((-1.0)*x306*x311))+(((-1.0)*x305*x310))+(((-1.0)*x309*x311))+((x307*x309))+((x306*x307))), (((gconst1*r21*x310))+(((-1.0)*x308*x311))+(((-1.0)*x307*x310))+(((-1.0)*x305*x306))+(((-1.0)*x305*x309))+((x307*x308))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x312=IKcos(j2);
IkReal x313=IKsin(j2);
IkReal x314=(r01*sj0);
IkReal x315=((3.5e-7)*gconst1);
IkReal x316=((0.0008)*gconst2);
IkReal x317=((0.02349986)*sj1);
IkReal x318=((0.0008)*gconst1);
IkReal x319=(cj0*r10);
IkReal x320=(cj0*sj4);
IkReal x321=(cj4*gconst1);
IkReal x322=((1.0)*r21);
IkReal x323=(r00*sj0);
IkReal x324=((1.0)*sj0);
IkReal x325=(gconst2*r20);
IkReal x326=((1.0)*sj1);
IkReal x327=((1.0)*sj4);
IkReal x328=(cj0*r11);
IkReal x329=((3.5e-7)*gconst2);
IkReal x330=((1.0)*cj4);
IkReal x331=(cj1*x312);
IkReal x332=(cj1*x313);
IkReal x333=(sj1*x312);
IkReal x334=(x313*x326);
evalcond[0]=(((sj4*x325))+((cj4*r22))+(((-1.0)*gconst1*sj4*x322))+x331+(((-1.0)*x334)));
evalcond[1]=((((-1.0)*x321*x322))+(((-1.0)*r22*x327))+(((-1.0)*x332))+((cj4*x325))+(((-1.0)*x312*x326)));
evalcond[2]=((((-1.0)*cj0*r12*x330))+((gconst2*sj4*x323))+(((-1.0)*gconst2*x319*x327))+(((-1.0)*gconst1*x314*x327))+x333+x332+((gconst1*r11*x320))+((cj4*r02*sj0)));
evalcond[3]=((((-1.0)*x314*x321))+((r12*x320))+(((-1.0)*r02*sj4*x324))+(((-1.0)*gconst2*x319*x330))+x331+(((-1.0)*x334))+((cj4*gconst2*x323))+((x321*x328)));
CheckValue<IkReal> x335=IKPowWithIntegerCheck(gconst2,-1);
if(!x335.valid){
continue;
}
evalcond[4]=((((-1.0)*x313*x317))+(((0.16)*cj1))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x332))+(((0.16085006)*x333))+(((0.02349986)*x331))+(((3.5e-7)*x325))+((gconst1*r20*x315*(x335.value))));
evalcond[5]=(((x323*x329))+((x312*x317))+(((-0.16085006)*x331))+(((-1.0)*px*x324))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*x319*x329))+(((0.16085006)*sj1*x313))+((x315*x328))+(((-1.0)*x318*x323))+((x316*x328))+(((-1.0)*x314*x316))+(((-1.0)*x314*x315))+(((0.02349986)*x332))+((cj0*py))+((x318*x319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x336=((1.0)*r21);
IkReal x337=(gconst1*sj1);
IkReal x338=(cj1*gconst1);
IkReal x339=(cj4*gconst2*r20);
IkReal x340=((1.0)*r22*sj4);
if( IKabs((((gconst2*r21*sj1))+(((-1.0)*cj1*x340))+((cj1*x339))+(((-1.0)*cj4*x336*x338))+((r20*x337)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x338))+(((-1.0)*cj4*x336*x337))+(((-1.0)*sj1*x340))+(((-1.0)*cj1*gconst2*x336))+((sj1*x339)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst2*r21*sj1))+(((-1.0)*cj1*x340))+((cj1*x339))+(((-1.0)*cj4*x336*x338))+((r20*x337))))+IKsqr(((((-1.0)*r20*x338))+(((-1.0)*cj4*x336*x337))+(((-1.0)*sj1*x340))+(((-1.0)*cj1*gconst2*x336))+((sj1*x339))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((gconst2*r21*sj1))+(((-1.0)*cj1*x340))+((cj1*x339))+(((-1.0)*cj4*x336*x338))+((r20*x337))), ((((-1.0)*r20*x338))+(((-1.0)*cj4*x336*x337))+(((-1.0)*sj1*x340))+(((-1.0)*cj1*gconst2*x336))+((sj1*x339))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x341=IKcos(j2);
IkReal x342=IKsin(j2);
IkReal x343=((3.5e-7)*gconst1);
IkReal x344=(r01*sj0);
IkReal x345=((0.0008)*gconst2);
IkReal x346=((0.0008)*gconst1);
IkReal x347=(cj0*r10);
IkReal x348=(cj4*gconst1);
IkReal x349=(r00*sj0);
IkReal x350=((1.0)*sj0);
IkReal x351=(gconst2*r20);
IkReal x352=(cj0*r11);
IkReal x353=((1.0)*gconst2);
IkReal x354=((3.5e-7)*gconst2);
IkReal x355=(cj1*x341);
IkReal x356=(cj1*x342);
IkReal x357=(sj1*x341);
IkReal x358=(sj1*x342);
IkReal x359=((1.0)*x358);
evalcond[0]=((((-1.0)*x359))+x355+((gconst2*r21))+((gconst1*r20)));
evalcond[1]=((((-1.0)*r21*x348))+((cj4*x351))+(((-1.0)*x357))+(((-1.0)*x356))+(((-1.0)*r22*sj4)));
evalcond[2]=((((-1.0)*gconst1*x347))+x357+x356+((gconst1*x349))+(((-1.0)*x352*x353))+((gconst2*x344)));
evalcond[3]=((((-1.0)*x359))+(((-1.0)*r02*sj4*x350))+((cj4*gconst2*x349))+(((-1.0)*cj4*x347*x353))+x355+((cj0*r12*sj4))+((x348*x352))+(((-1.0)*x344*x348)));
evalcond[4]=((((-1.0)*r20*x346))+(((0.16085006)*x356))+(((0.16085006)*x357))+(((0.16)*cj1))+(((-0.02349986)*x358))+(((0.02349986)*x355))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((3.5e-7)*x351))+(((-1.0)*r21*x343))+(((-1.0)*r21*x345)));
evalcond[5]=((((0.16085006)*x358))+((x345*x352))+(((-1.0)*px*x350))+(((-0.16085006)*x355))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.02349986)*x356))+(((0.02349986)*x357))+(((-1.0)*x344*x345))+(((-1.0)*x347*x354))+((x343*x352))+((x349*x354))+((x346*x347))+(((-1.0)*x346*x349))+(((-1.0)*x343*x344))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x360=(cj1*gconst1);
IkReal x361=(gconst2*r20);
IkReal x362=(cj1*sj3);
IkReal x363=(gconst2*r11);
IkReal x364=(cj3*sj0);
IkReal x365=(cj4*r22);
IkReal x366=(gconst1*sj1);
IkReal x367=(gconst2*r01);
IkReal x368=((1.0)*sj3*sj4);
IkReal x369=((1.0)*cj0*cj3);
CheckValue<IkReal> x370 = IKatan2WithCheck(IkReal((((cj1*x364*x367))+(((-1.0)*r10*x360*x369))+((r00*x360*x364))+(((-1.0)*sj1*sj3*x365))+(((-1.0)*cj1*x363*x369))+((r21*sj3*sj4*x366))+(((-1.0)*sj1*x361*x368)))),IkReal(((((-1.0)*sj1*x363*x369))+(((-1.0)*r10*x366*x369))+(((-1.0)*r21*x360*x368))+((sj4*x361*x362))+((sj1*x364*x367))+((r00*x364*x366))+((x362*x365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x370.valid){
continue;
}
CheckValue<IkReal> x371=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x371.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x370.value)+(((1.5707963267949)*(x371.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x372=IKcos(j2);
IkReal x373=IKsin(j2);
IkReal x374=((3.5e-7)*gconst1);
IkReal x375=(r01*sj0);
IkReal x376=((0.0008)*gconst2);
IkReal x377=(cj0*sj4);
IkReal x378=((0.0008)*gconst1);
IkReal x379=(cj0*r10);
IkReal x380=(cj4*gconst1);
IkReal x381=((1.0)*r21);
IkReal x382=(r00*sj0);
IkReal x383=((1.0)*sj0);
IkReal x384=(gconst2*r20);
IkReal x385=((1.0)*sj3);
IkReal x386=((1.0)*gconst2);
IkReal x387=(cj0*r11);
IkReal x388=((1.0)*gconst1);
IkReal x389=((3.5e-7)*gconst2);
IkReal x390=((1.0)*cj3);
IkReal x391=(cj1*x372);
IkReal x392=(sj1*x373);
IkReal x393=(sj1*x372);
IkReal x394=(cj1*x373);
evalcond[0]=((((-1.0)*x385*x391))+((sj3*x392))+((gconst2*r21))+((gconst1*r20)));
evalcond[1]=((((-1.0)*x393))+(((-1.0)*x394))+(((-1.0)*x380*x381))+(((-1.0)*r22*sj4))+((cj4*x384)));
evalcond[2]=(((cj4*r22))+(((-1.0)*gconst1*sj4*x381))+((sj4*x384))+((cj3*x392))+(((-1.0)*x390*x391)));
evalcond[3]=((((-1.0)*x385*x393))+(((-1.0)*x385*x394))+(((-1.0)*x379*x388))+((gconst2*x375))+(((-1.0)*x386*x387))+((gconst1*x382)));
evalcond[4]=((((-1.0)*x392))+((cj4*gconst2*x382))+x391+(((-1.0)*r02*sj4*x383))+((r12*x377))+(((-1.0)*x375*x380))+(((-1.0)*cj4*x379*x386))+((x380*x387)));
evalcond[5]=((((-1.0)*sj4*x375*x388))+(((-1.0)*cj0*cj4*r12))+((gconst2*sj4*x382))+((cj4*r02*sj0))+(((-1.0)*x390*x393))+(((-1.0)*x390*x394))+(((-1.0)*r10*x377*x386))+((gconst1*r11*x377)));
evalcond[6]=((((-0.02349986)*x392))+(((-1.0)*r20*x378))+(((0.16)*cj1))+(((-1.0)*r21*x376))+(((-1.0)*r21*x374))+(((0.16085006)*x394))+(((0.16085006)*x393))+(((0.02349986)*x391))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((3.5e-7)*x384)));
evalcond[7]=(((x376*x387))+(((-1.0)*x379*x389))+(((0.16085006)*x392))+(((0.02349986)*x394))+(((0.02349986)*x393))+((x374*x387))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*px*x383))+(((-1.0)*x374*x375))+(((-0.16085006)*x391))+((x382*x389))+((x378*x379))+(((-1.0)*x378*x382))+(((-1.0)*x375*x376))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x395=(gconst1*r21);
IkReal x396=(sj1*sj4);
IkReal x397=(cj1*sj4);
IkReal x398=(cj4*r22);
IkReal x399=((1.0)*sj1);
IkReal x400=(gconst2*r20);
IkReal x401=(cj3*cj4);
IkReal x402=((1.0)*cj1*cj3);
CheckValue<IkReal> x403=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x403.valid){
continue;
}
CheckValue<IkReal> x404 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*r22*x397))+(((-1.0)*x396*x400))+((x395*x396))+(((-1.0)*x398*x399))+((cj1*x400*x401))+(((-1.0)*cj1*x395*x401)))),IkReal(((((-1.0)*cj3*r22*x396))+((x397*x400))+(((-1.0)*x395*x397))+(((-1.0)*x395*x399*x401))+((sj1*x400*x401))+((cj1*x398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x404.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x403.value)))+(x404.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x405=IKcos(j2);
IkReal x406=IKsin(j2);
IkReal x407=((3.5e-7)*gconst1);
IkReal x408=(r01*sj0);
IkReal x409=((0.0008)*gconst2);
IkReal x410=(cj0*sj4);
IkReal x411=((0.0008)*gconst1);
IkReal x412=(cj0*r10);
IkReal x413=(cj4*gconst1);
IkReal x414=((1.0)*r21);
IkReal x415=(r00*sj0);
IkReal x416=((1.0)*sj0);
IkReal x417=(gconst2*r20);
IkReal x418=((1.0)*sj3);
IkReal x419=((1.0)*gconst2);
IkReal x420=(cj0*r11);
IkReal x421=((1.0)*gconst1);
IkReal x422=((3.5e-7)*gconst2);
IkReal x423=((1.0)*cj3);
IkReal x424=(cj1*x405);
IkReal x425=(sj1*x406);
IkReal x426=(sj1*x405);
IkReal x427=(cj1*x406);
evalcond[0]=(((gconst2*r21))+((sj3*x425))+((gconst1*r20))+(((-1.0)*x418*x424)));
evalcond[1]=((((-1.0)*x427))+(((-1.0)*x426))+((cj4*x417))+(((-1.0)*r22*sj4))+(((-1.0)*x413*x414)));
evalcond[2]=(((cj4*r22))+(((-1.0)*gconst1*sj4*x414))+((cj3*x425))+(((-1.0)*x423*x424))+((sj4*x417)));
evalcond[3]=((((-1.0)*x412*x421))+((gconst2*x408))+((gconst1*x415))+(((-1.0)*x419*x420))+(((-1.0)*x418*x426))+(((-1.0)*x418*x427)));
evalcond[4]=((((-1.0)*cj4*x412*x419))+(((-1.0)*x425))+((r12*x410))+((x413*x420))+((cj4*gconst2*x415))+(((-1.0)*r02*sj4*x416))+x424+(((-1.0)*x408*x413)));
evalcond[5]=((((-1.0)*r10*x410*x419))+(((-1.0)*cj0*cj4*r12))+((gconst1*r11*x410))+((cj4*r02*sj0))+((gconst2*sj4*x415))+(((-1.0)*x423*x426))+(((-1.0)*x423*x427))+(((-1.0)*sj4*x408*x421)));
evalcond[6]=((((3.5e-7)*x417))+(((0.16)*cj1))+(((-1.0)*r20*x411))+(((-1.0)*r21*x407))+(((-1.0)*r21*x409))+(((-1.0)*pz))+(((-0.02349986)*x425))+(((7.7e-7)*sj1))+(((0.02349986)*x424))+(((0.16085006)*x426))+(((0.16085006)*x427)));
evalcond[7]=((((-1.0)*x412*x422))+(((-1.0)*px*x416))+(((-0.16085006)*x424))+((x411*x412))+((x415*x422))+(((0.16)*sj1))+((x409*x420))+(((-7.7e-7)*cj1))+((x407*x420))+(((-1.0)*x407*x408))+(((-1.0)*x411*x415))+((cj0*py))+(((0.02349986)*x426))+(((0.02349986)*x427))+(((0.16085006)*x425))+(((-1.0)*x408*x409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x428=(cj1*r21);
IkReal x429=(r21*sj1);
IkReal x430=(cj1*sj3);
IkReal x431=(gconst1*r20);
IkReal x432=(sj1*sj3);
IkReal x433=((1.0)*r22*sj4);
IkReal x434=(cj4*gconst2*r20);
IkReal x435=((1.0)*cj4*gconst1*sj3);
CheckValue<IkReal> x436=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x436.valid){
continue;
}
CheckValue<IkReal> x437 = IKatan2WithCheck(IkReal(((((-1.0)*x430*x433))+(((-1.0)*sj1*x431))+(((-1.0)*gconst2*x429))+((x430*x434))+(((-1.0)*x428*x435)))),IkReal((((cj1*x431))+(((-1.0)*x432*x433))+(((-1.0)*x429*x435))+((gconst2*x428))+((x432*x434)))),IKFAST_ATAN2_MAGTHRESH);
if(!x437.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x436.value)))+(x437.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x438=IKcos(j2);
IkReal x439=IKsin(j2);
IkReal x440=((3.5e-7)*gconst1);
IkReal x441=(r01*sj0);
IkReal x442=((0.0008)*gconst2);
IkReal x443=(cj0*sj4);
IkReal x444=((0.0008)*gconst1);
IkReal x445=(cj0*r10);
IkReal x446=(cj4*gconst1);
IkReal x447=((1.0)*r21);
IkReal x448=(r00*sj0);
IkReal x449=((1.0)*sj0);
IkReal x450=(gconst2*r20);
IkReal x451=((1.0)*sj3);
IkReal x452=((1.0)*gconst2);
IkReal x453=(cj0*r11);
IkReal x454=((1.0)*gconst1);
IkReal x455=((3.5e-7)*gconst2);
IkReal x456=((1.0)*cj3);
IkReal x457=(cj1*x438);
IkReal x458=(sj1*x439);
IkReal x459=(sj1*x438);
IkReal x460=(cj1*x439);
evalcond[0]=(((sj3*x458))+((gconst2*r21))+(((-1.0)*x451*x457))+((gconst1*r20)));
evalcond[1]=(((cj4*x450))+(((-1.0)*x459))+(((-1.0)*x460))+(((-1.0)*r22*sj4))+(((-1.0)*x446*x447)));
evalcond[2]=(((cj4*r22))+(((-1.0)*x456*x457))+((cj3*x458))+((sj4*x450))+(((-1.0)*gconst1*sj4*x447)));
evalcond[3]=(((gconst1*x448))+((gconst2*x441))+(((-1.0)*x452*x453))+(((-1.0)*x451*x460))+(((-1.0)*x451*x459))+(((-1.0)*x445*x454)));
evalcond[4]=((((-1.0)*x458))+((x446*x453))+x457+((cj4*gconst2*x448))+(((-1.0)*r02*sj4*x449))+(((-1.0)*cj4*x445*x452))+(((-1.0)*x441*x446))+((r12*x443)));
evalcond[5]=((((-1.0)*cj0*cj4*r12))+(((-1.0)*x456*x460))+(((-1.0)*r10*x443*x452))+(((-1.0)*x456*x459))+(((-1.0)*sj4*x441*x454))+((cj4*r02*sj0))+((gconst1*r11*x443))+((gconst2*sj4*x448)));
evalcond[6]=((((0.16)*cj1))+(((0.16085006)*x460))+(((0.16085006)*x459))+(((-0.02349986)*x458))+(((-1.0)*pz))+(((0.02349986)*x457))+(((7.7e-7)*sj1))+(((-1.0)*r21*x440))+(((-1.0)*r21*x442))+(((-1.0)*r20*x444))+(((3.5e-7)*x450)));
evalcond[7]=((((-1.0)*x444*x448))+((x440*x453))+(((0.16085006)*x458))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.16085006)*x457))+(((0.02349986)*x460))+(((0.02349986)*x459))+((x444*x445))+((x448*x455))+((x442*x453))+(((-1.0)*x445*x455))+((cj0*py))+(((-1.0)*x440*x441))+(((-1.0)*px*x449))+(((-1.0)*x441*x442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x461=((((8163265306122.45)*(rxp0_2*rxp0_2)))+(((8163265306122.45)*(rxp1_2*rxp1_2))));
IkReal x469 = x461;
if(IKabs(x469)==0){
continue;
}
IkReal x462=pow(x469,-0.5);
if((x461) < -0.00001)
continue;
IkReal x463=IKabs(IKsqrt(x461));
CheckValue<IkReal> x470=IKPowWithIntegerCheck(x463,-1);
if(!x470.valid){
continue;
}
IkReal x464=x470.value;
IkReal x465=((2857142.85714286)*rxp0_2*x462);
IkReal x466=(r22*x464);
IkReal x467=((2857142.85714286)*rxp1_2*x462);
if((((1.0)+(((-1.0)*(x466*x466))))) < -0.00001)
continue;
IkReal x468=IKsqrt(((1.0)+(((-1.0)*(x466*x466)))));
CheckValue<IkReal> x471 = IKatan2WithCheck(IkReal(((-2857142.85714286)*rxp1_2)),IkReal(((-2857142.85714286)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x471.valid){
continue;
}
if( (x466) < -1-IKFAST_SINCOS_THRESH || (x466) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x471.value)))+(((-1.0)*(IKasin(x466)))));
IkReal gconst4=((((-1.0)*x465*x466))+(((-1.0)*x467*x468)));
IkReal gconst5=((((-1.0)*x466*x467))+((x465*x468)));
if((((((8163265306122.45)*(rxp0_2*rxp0_2)))+(((8163265306122.45)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x472=IKPowWithIntegerCheck(IKabs(IKsqrt(((((8163265306122.45)*(rxp0_2*rxp0_2)))+(((8163265306122.45)*(rxp1_2*rxp1_2)))))),-1);
if(!x472.valid){
continue;
}
if( ((r22*(x472.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x472.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x473 = IKatan2WithCheck(IkReal(((-2857142.85714286)*rxp1_2)),IkReal(((-2857142.85714286)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x473.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin((r22*(x472.value))))+j5+(x473.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x474=((1.0)*gconst5);
IkReal x475=(sj3*sj4);
IkReal x476=(cj4*sj3);
IkReal x477=(gconst4*x476);
CheckValue<IkReal> x478 = IKatan2WithCheck(IkReal((((gconst5*r00*x476))+(((-1.0)*r02*x475))+(((-1.0)*r01*x477)))),IkReal(((((-1.0)*r10*x474*x476))+((r11*x477))+((r12*x475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x478.valid){
continue;
}
CheckValue<IkReal> x479=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x474))+(((-1.0)*gconst4*r20)))),-1);
if(!x479.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x478.value)+(((1.5707963267949)*(x479.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x480=IKsin(j0);
IkReal x481=IKcos(j0);
IkReal x482=(gconst4*r01);
IkReal x483=(cj4*x480);
IkReal x484=((1.0)*x481);
IkReal x485=((1.0)*gconst4*r11);
IkReal x486=((1.0)*x480);
IkReal x487=(gconst5*x480);
IkReal x488=(gconst4*x481);
IkReal x489=(gconst5*x481);
IkReal x490=(gconst4*r10*x480);
evalcond[0]=(cj3+((r11*x487))+x490+((r01*x489))+((r00*x488)));
evalcond[1]=((((-1.0)*x483*x485))+(((-1.0)*cj4*x482*x484))+(((-1.0)*r02*sj4*x484))+((cj4*r00*x489))+((gconst5*r10*x483))+(((-1.0)*r12*sj4*x486)));
evalcond[2]=((((-1.0)*sj3))+((r10*sj4*x487))+((r12*x483))+(((-1.0)*sj4*x482*x484))+((r00*sj4*x489))+((cj4*r02*x481))+(((-1.0)*sj4*x480*x485)));
evalcond[3]=((((3.5e-7)*r10*x487))+(((3.5e-7)*r00*x489))+(((-0.0008)*r11*x487))+(((-3.5e-7)*gconst4*r11*x480))+(((-0.0008)*x490))+(((-1.0)*px*x484))+(((-0.0008)*r00*x488))+(((-3.5e-7)*x481*x482))+(((-1.0)*py*x486))+(((-0.0008)*r01*x489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x491=((0.64)*cj3);
IkReal x492=((6.16e-6)*cj3);
IkReal x493=(gconst5*r20);
IkReal x494=((0.09399944)*sj4);
IkReal x495=(cj4*r22);
IkReal x496=(cj3*cj4);
IkReal x497=(cj3*r21);
IkReal x498=((0.28199832)*sj4);
IkReal x499=(gconst4*r21);
IkReal x500=(cj3*pz);
IkReal x501=((0.28199832)*x495);
IkReal x502=((12.0)*x500);
IkReal x503=((0.09399944)*x495);
IkReal x504=((4.0)*x500);
IkReal x505=(cj3*r22*sj4);
IkReal x506=(cj3*gconst4*r20);
IkReal x507=(x493*x498);
IkReal x508=((4.2e-6)*cj3*x493);
IkReal x509=((1.93020072)*x505);
IkReal x510=(x498*x499);
IkReal x511=((0.0096)*x506);
IkReal x512=((0.0096)*gconst5*x497);
IkReal x513=((4.2e-6)*gconst4*x497);
IkReal x514=(x493*x494);
IkReal x515=((1.4e-6)*cj3*x493);
IkReal x516=((1.4e-6)*gconst4*x497);
IkReal x517=((0.0032)*x506);
IkReal x518=(x494*x499);
IkReal x519=((0.0032)*gconst5*x497);
IkReal x520=((0.64340024)*x505);
IkReal x521=(x496*x499);
IkReal x522=((1.93020072)*x493*x496);
IkReal x523=((1.93020072)*x521);
IkReal x524=((0.64340024)*x493*x496);
IkReal x525=((0.64340024)*x521);
IkReal x526=(x508+x501+x507+x522);
IkReal x527=(x503+x524+x515+x514);
IkReal x528=(x504+x520+x525+x519+x518+x517+x516);
IkReal x529=(x509+x502+x523+x513+x512+x511+x510);
op[0]=((((-1.0)*x491))+(((-1.0)*x528))+x527);
op[1]=x492;
op[2]=((((-1.0)*x491))+(((-1.0)*x529))+x526);
op[3]=((1.232e-5)*cj3);
op[4]=((((-1.0)*x529))+x491+x526);
op[5]=x492;
op[6]=((((-1.0)*x528))+x491+x527);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((1.4e-6)*gconst4*r21*(cj3*cj3)))+(((0.09399944)*cj3*gconst4*r21*sj4))+(((0.64340024)*cj0*cj3*gconst5*r10*sj4))+(((htj1*htj1*htj1*htj1)*(((((0.0096)*gconst5*r21*(cj3*cj3)))+(((1.93020072)*cj0*cj3*cj4*r12))+(((-1.93020072)*cj3*cj4*r02*sj0))+(((-0.28199832)*cj3*gconst5*r20*sj4))+(((12.0)*pz*(cj3*cj3)))+(((-1.93020072)*cj3*gconst5*r00*sj0*sj4))+(((-1.93020072)*cj0*cj3*gconst4*r11*sj4))+(((4.2e-6)*gconst4*r21*(cj3*cj3)))+(((-4.2e-6)*gconst5*r20*(cj3*cj3)))+(((-0.28199832)*cj3*cj4*r22))+(((0.0096)*gconst4*r20*(cj3*cj3)))+(((1.93020072)*cj0*cj3*gconst5*r10*sj4))+(((1.93020072)*cj3*gconst4*r01*sj0*sj4))+(((0.64)*(cj3*cj3)))+(((0.28199832)*cj3*gconst4*r21*sj4))))))+(((-1.232e-5)*(cj3*cj3)*(htj1*htj1*htj1)))+(((0.64340024)*cj0*cj3*cj4*r12))+(((-6.16e-6)*(cj3*cj3)*(htj1*htj1*htj1*htj1*htj1)))+(((-6.16e-6)*htj1*(cj3*cj3)))+(((-0.09399944)*cj3*cj4*r22))+(((-0.09399944)*cj3*gconst5*r20*sj4))+(((0.64340024)*cj3*gconst4*r01*sj0*sj4))+(((-1.4e-6)*gconst5*r20*(cj3*cj3)))+(((-0.64340024)*cj3*gconst5*r00*sj0*sj4))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((1.4e-6)*gconst4*r21*(cj3*cj3)))+(((0.09399944)*cj3*gconst4*r21*sj4))+(((0.64340024)*cj0*cj3*gconst5*r10*sj4))+(((0.64340024)*cj0*cj3*cj4*r12))+(((-0.09399944)*cj3*cj4*r22))+(((-0.09399944)*cj3*gconst5*r20*sj4))+(((0.64340024)*cj3*gconst4*r01*sj0*sj4))+(((-1.4e-6)*gconst5*r20*(cj3*cj3)))+(((-0.64340024)*cj3*gconst5*r00*sj0*sj4))+(((-0.64340024)*cj3*cj4*r02*sj0))+(((-0.64340024)*cj0*cj3*gconst4*r11*sj4))+(((4.0)*pz*(cj3*cj3)))+(((0.0032)*gconst5*r21*(cj3*cj3)))+(((0.0032)*gconst4*r20*(cj3*cj3)))+(((0.64)*(cj3*cj3)))))))+(((-0.64340024)*cj3*cj4*r02*sj0))+(((-0.64340024)*cj0*cj3*gconst4*r11*sj4))+(((-0.64)*(cj3*cj3)))+(((4.0)*pz*(cj3*cj3)))+(((0.0032)*gconst5*r21*(cj3*cj3)))+(((0.0032)*gconst4*r20*(cj3*cj3)))+(((htj1*htj1)*(((((0.0096)*gconst5*r21*(cj3*cj3)))+(((1.93020072)*cj0*cj3*cj4*r12))+(((-1.93020072)*cj3*cj4*r02*sj0))+(((-0.28199832)*cj3*gconst5*r20*sj4))+(((12.0)*pz*(cj3*cj3)))+(((-1.93020072)*cj3*gconst5*r00*sj0*sj4))+(((-1.93020072)*cj0*cj3*gconst4*r11*sj4))+(((4.2e-6)*gconst4*r21*(cj3*cj3)))+(((-4.2e-6)*gconst5*r20*(cj3*cj3)))+(((-0.64)*(cj3*cj3)))+(((-0.28199832)*cj3*cj4*r22))+(((0.0096)*gconst4*r20*(cj3*cj3)))+(((1.93020072)*cj0*cj3*gconst5*r10*sj4))+(((1.93020072)*cj3*gconst4*r01*sj0*sj4))+(((0.28199832)*cj3*gconst4*r21*sj4)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x530=x461;
IkReal x539 = x530;
if(IKabs(x539)==0){
continue;
}
IkReal x531=pow(x539,-0.5);
if((x530) < -0.00001)
continue;
IkReal x532=IKabs(IKsqrt(x530));
CheckValue<IkReal> x540=IKPowWithIntegerCheck(x532,-1);
if(!x540.valid){
continue;
}
IkReal x533=x540.value;
IkReal x534=((2857142.85714286)*rxp0_2*x531);
IkReal x535=(r22*x533);
IkReal x536=((2857142.85714286)*rxp1_2*x531);
if((((1.0)+(((-1.0)*(x535*x535))))) < -0.00001)
continue;
IkReal x537=IKsqrt(((1.0)+(((-1.0)*(x535*x535)))));
CheckValue<IkReal> x541 = IKatan2WithCheck(IkReal(((-2857142.85714286)*rxp1_2)),IkReal(((-2857142.85714286)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x541.valid){
continue;
}
if( (x535) < -1-IKFAST_SINCOS_THRESH || (x535) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x538=((((1.0)*(x541.value)))+(((1.0)*(IKasin(x535)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x538)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x538)));
IkReal gconst4=((((-1.0)*x534*x535))+(((-1.0)*x536*x537)));
IkReal gconst5=(((x534*x537))+(((-1.0)*x535*x536)));
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x542=x461;
IkReal x551 = x542;
if(IKabs(x551)==0){
continue;
}
IkReal x543=pow(x551,-0.5);
if((x542) < -0.00001)
continue;
IkReal x544=IKabs(IKsqrt(x542));
CheckValue<IkReal> x552=IKPowWithIntegerCheck(x544,-1);
if(!x552.valid){
continue;
}
IkReal x545=x552.value;
IkReal x546=((2857142.85714286)*rxp0_2*x543);
IkReal x547=(r22*x545);
IkReal x548=((2857142.85714286)*rxp1_2*x543);
if((((1.0)+(((-1.0)*(x547*x547))))) < -0.00001)
continue;
IkReal x549=IKsqrt(((1.0)+(((-1.0)*(x547*x547)))));
CheckValue<IkReal> x553 = IKatan2WithCheck(IkReal(((-2857142.85714286)*rxp1_2)),IkReal(((-2857142.85714286)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x553.valid){
continue;
}
if( (x547) < -1-IKFAST_SINCOS_THRESH || (x547) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x550=((((1.0)*(x553.value)))+(((1.0)*(IKasin(x547)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x550)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x550)));
IkReal gconst4=((((-1.0)*x548*x549))+(((-1.0)*x546*x547)));
IkReal gconst5=((((-1.0)*x547*x548))+((x546*x549)));
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x554=x461;
IkReal x563 = x554;
if(IKabs(x563)==0){
continue;
}
IkReal x555=pow(x563,-0.5);
if((x554) < -0.00001)
continue;
IkReal x556=IKabs(IKsqrt(x554));
CheckValue<IkReal> x564=IKPowWithIntegerCheck(x556,-1);
if(!x564.valid){
continue;
}
IkReal x557=x564.value;
IkReal x558=((2857142.85714286)*rxp0_2*x555);
IkReal x559=(r22*x557);
IkReal x560=((2857142.85714286)*rxp1_2*x555);
if((((1.0)+(((-1.0)*(x559*x559))))) < -0.00001)
continue;
IkReal x561=IKsqrt(((1.0)+(((-1.0)*(x559*x559)))));
CheckValue<IkReal> x565 = IKatan2WithCheck(IkReal(((-2857142.85714286)*rxp1_2)),IkReal(((-2857142.85714286)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x565.valid){
continue;
}
if( (x559) < -1-IKFAST_SINCOS_THRESH || (x559) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x562=((((1.0)*(x565.value)))+(((1.0)*(IKasin(x559)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x562)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x562)));
IkReal gconst4=((((-1.0)*x560*x561))+(((-1.0)*x558*x559)));
IkReal gconst5=(((x558*x561))+(((-1.0)*x559*x560)));
IkReal x566=(cj3*sj3);
j2eval[0]=x566;
j2eval[1]=IKsign(x566);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x567=(cj4*r22);
IkReal x568=((1.0)*sj1);
IkReal x569=(gconst5*r20);
IkReal x570=(gconst4*r21);
IkReal x571=(cj1*x569);
IkReal x572=((1.0)*cj1*sj4);
if( IKabs(((((-1.0)*sj4*x568*x569))+((sj1*sj4*x570))+(((-1.0)*x567*x568))+(((-1.0)*r22*x572))+(((-1.0)*cj1*cj4*x570))+((cj4*x571)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x567))+((sj4*x571))+(((-1.0)*x570*x572))+((cj4*sj1*x569))+(((-1.0)*r22*sj4*x568))+(((-1.0)*cj4*x568*x570)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x568*x569))+((sj1*sj4*x570))+(((-1.0)*x567*x568))+(((-1.0)*r22*x572))+(((-1.0)*cj1*cj4*x570))+((cj4*x571))))+IKsqr((((cj1*x567))+((sj4*x571))+(((-1.0)*x570*x572))+((cj4*sj1*x569))+(((-1.0)*r22*sj4*x568))+(((-1.0)*cj4*x568*x570))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x568*x569))+((sj1*sj4*x570))+(((-1.0)*x567*x568))+(((-1.0)*r22*x572))+(((-1.0)*cj1*cj4*x570))+((cj4*x571))), (((cj1*x567))+((sj4*x571))+(((-1.0)*x570*x572))+((cj4*sj1*x569))+(((-1.0)*r22*sj4*x568))+(((-1.0)*cj4*x568*x570))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x573=IKcos(j2);
IkReal x574=IKsin(j2);
IkReal x575=(gconst5*sj4);
IkReal x576=((1.0)*sj0);
IkReal x577=(gconst4*r01);
IkReal x578=((3.5e-7)*r20);
IkReal x579=(r00*sj0);
IkReal x580=(cj0*r12);
IkReal x581=((0.0008)*gconst4);
IkReal x582=((0.02349986)*sj1);
IkReal x583=((1.0)*sj1);
IkReal x584=(cj4*gconst5);
IkReal x585=(cj0*r10);
IkReal x586=((3.5e-7)*gconst5);
IkReal x587=((0.0008)*gconst5);
IkReal x588=(cj1*x573);
IkReal x589=(cj0*gconst4*r11);
IkReal x590=((1.0)*gconst4*r21);
IkReal x591=((0.16085006)*x574);
IkReal x592=(cj1*x574);
IkReal x593=(x573*x583);
IkReal x594=((1.0)*x592);
IkReal x595=(x594+x593);
evalcond[0]=((((-1.0)*x588))+((sj1*x574))+((cj4*r22))+((r20*x575))+(((-1.0)*sj4*x590)));
evalcond[1]=(((r20*x584))+(((-1.0)*cj4*x590))+(((-1.0)*x595))+(((-1.0)*r22*sj4)));
evalcond[2]=(((x579*x584))+(((-1.0)*r02*sj4*x576))+((cj4*x589))+x588+(((-1.0)*x584*x585))+(((-1.0)*x574*x583))+((sj4*x580))+(((-1.0)*cj4*x576*x577)));
evalcond[3]=((((-1.0)*x575*x585))+((x575*x579))+(((-1.0)*sj4*x576*x577))+(((-1.0)*x595))+((cj4*r02*sj0))+((sj4*x589))+(((-1.0)*cj4*x580)));
CheckValue<IkReal> x596=IKPowWithIntegerCheck(gconst5,-1);
if(!x596.valid){
continue;
}
evalcond[4]=((((0.02349986)*x588))+(((0.16)*cj1))+((x578*(gconst4*gconst4)*(x596.value)))+((cj1*x591))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-1.0)*x574*x582))+((gconst5*x578))+(((0.16085006)*sj1*x573)));
evalcond[5]=(((x581*x585))+(((-1.0)*px*x576))+((x579*x586))+((cj0*r11*x587))+(((-1.0)*x579*x581))+(((-1.0)*r01*sj0*x587))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*x585*x586))+((x573*x582))+(((-3.5e-7)*sj0*x577))+(((0.02349986)*x592))+((sj1*x591))+(((-0.16085006)*x588))+((cj0*py))+(((3.5e-7)*x589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x597=((1.0)*sj1);
IkReal x598=(gconst4*r20);
IkReal x599=(r22*sj4);
IkReal x600=(gconst5*r21);
IkReal x601=((1.0)*cj1);
IkReal x602=(cj4*gconst5*r20);
IkReal x603=(cj4*gconst4*r21);
if( IKabs(((((-1.0)*x597*x598))+(((-1.0)*x597*x600))+(((-1.0)*x599*x601))+((cj1*x602))+(((-1.0)*x601*x603)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x602))+(((-1.0)*x597*x599))+(((-1.0)*x597*x603))+((cj1*x598))+((cj1*x600)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x597*x598))+(((-1.0)*x597*x600))+(((-1.0)*x599*x601))+((cj1*x602))+(((-1.0)*x601*x603))))+IKsqr((((sj1*x602))+(((-1.0)*x597*x599))+(((-1.0)*x597*x603))+((cj1*x598))+((cj1*x600))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x597*x598))+(((-1.0)*x597*x600))+(((-1.0)*x599*x601))+((cj1*x602))+(((-1.0)*x601*x603))), (((sj1*x602))+(((-1.0)*x597*x599))+(((-1.0)*x597*x603))+((cj1*x598))+((cj1*x600))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x604=IKcos(j2);
IkReal x605=IKsin(j2);
IkReal x606=(cj0*gconst4);
IkReal x607=((1.0)*r10);
IkReal x608=(r00*sj0);
IkReal x609=((3.5e-7)*gconst5);
IkReal x610=((0.0008)*gconst4);
IkReal x611=((1.0)*sj0);
IkReal x612=(cj4*gconst4);
IkReal x613=(cj4*gconst5);
IkReal x614=((3.5e-7)*gconst4);
IkReal x615=(gconst5*r21);
IkReal x616=(cj1*x604);
IkReal x617=(cj1*x605);
IkReal x618=(sj1*x605);
IkReal x619=(gconst5*r01*sj0);
IkReal x620=(sj1*x604);
IkReal x621=(cj0*gconst5*r11);
IkReal x622=((1.0)*x620);
IkReal x623=((1.0)*x617);
IkReal x624=(x623+x622);
evalcond[0]=((((-1.0)*x616))+((gconst4*r20))+x618+x615);
evalcond[1]=(((r20*x613))+(((-1.0)*x624))+(((-1.0)*r22*sj4))+(((-1.0)*r21*x612)));
evalcond[2]=(((gconst4*x608))+(((-1.0)*x624))+x619+(((-1.0)*x621))+(((-1.0)*x606*x607)));
evalcond[3]=((((-1.0)*r02*sj4*x611))+(((-1.0)*r01*x611*x612))+((x608*x613))+((cj4*r11*x606))+(((-1.0)*cj0*x607*x613))+(((-1.0)*x618))+((cj0*r12*sj4))+x616);
evalcond[4]=((((-1.0)*r20*x610))+(((0.16085006)*x617))+(((-1.0)*r21*x614))+(((0.16)*cj1))+((r20*x609))+(((-0.0008)*x615))+(((-1.0)*pz))+(((-0.02349986)*x618))+(((7.7e-7)*sj1))+(((0.16085006)*x620))+(((0.02349986)*x616)));
evalcond[5]=((((-1.0)*cj0*r10*x609))+((x608*x609))+(((0.16085006)*x618))+(((0.02349986)*x620))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.0008)*x619))+(((-0.16085006)*x616))+(((3.5e-7)*r11*x606))+(((-1.0)*r01*sj0*x614))+(((0.0008)*r10*x606))+((cj0*py))+(((-1.0)*px*x611))+(((0.0008)*x621))+(((-1.0)*x608*x610))+(((0.02349986)*x617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x625=((1.0)*r22);
IkReal x626=(cj1*cj4);
IkReal x627=(sj1*sj4);
IkReal x628=(gconst5*r20);
IkReal x629=(cj1*sj4);
IkReal x630=(cj4*sj1);
IkReal x631=((1.0)*gconst4*r21);
if( IKabs((((r22*x630))+(((-1.0)*x627*x631))+(((-1.0)*x625*x629))+(((-1.0)*x626*x631))+((x627*x628))+((x626*x628)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x630*x631))+((x628*x630))+((gconst4*r21*x629))+(((-1.0)*x625*x626))+(((-1.0)*x625*x627))+(((-1.0)*x628*x629)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x630))+(((-1.0)*x627*x631))+(((-1.0)*x625*x629))+(((-1.0)*x626*x631))+((x627*x628))+((x626*x628))))+IKsqr(((((-1.0)*x630*x631))+((x628*x630))+((gconst4*r21*x629))+(((-1.0)*x625*x626))+(((-1.0)*x625*x627))+(((-1.0)*x628*x629))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x630))+(((-1.0)*x627*x631))+(((-1.0)*x625*x629))+(((-1.0)*x626*x631))+((x627*x628))+((x626*x628))), ((((-1.0)*x630*x631))+((x628*x630))+((gconst4*r21*x629))+(((-1.0)*x625*x626))+(((-1.0)*x625*x627))+(((-1.0)*x628*x629))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x632=IKcos(j2);
IkReal x633=IKsin(j2);
IkReal x634=(gconst5*sj4);
IkReal x635=((1.0)*sj0);
IkReal x636=(gconst4*r01);
IkReal x637=((3.5e-7)*r20);
IkReal x638=(r00*sj0);
IkReal x639=(cj0*r12);
IkReal x640=((0.0008)*gconst4);
IkReal x641=((0.02349986)*sj1);
IkReal x642=((1.0)*cj4);
IkReal x643=(gconst4*r21);
IkReal x644=(cj4*gconst5);
IkReal x645=((1.0)*sj4);
IkReal x646=(cj0*r10);
IkReal x647=((3.5e-7)*gconst5);
IkReal x648=((0.0008)*gconst5);
IkReal x649=(cj1*x632);
IkReal x650=(cj0*gconst4*r11);
IkReal x651=(cj1*x633);
IkReal x652=(sj1*x632);
IkReal x653=(sj1*x633);
IkReal x654=((1.0)*x653);
evalcond[0]=(((cj4*r22))+(((-1.0)*x654))+(((-1.0)*x643*x645))+x649+((r20*x634)));
evalcond[1]=((((-1.0)*x642*x643))+((r20*x644))+(((-1.0)*x651))+(((-1.0)*x652))+(((-1.0)*r22*x645)));
evalcond[2]=(((sj4*x650))+((x634*x638))+(((-1.0)*sj4*x635*x636))+(((-1.0)*x634*x646))+(((-1.0)*x639*x642))+((cj4*r02*sj0))+x651+x652);
evalcond[3]=(((cj4*x650))+((x638*x644))+((sj4*x639))+(((-1.0)*r02*sj4*x635))+(((-1.0)*x654))+x649+(((-1.0)*gconst5*x642*x646))+(((-1.0)*cj4*x635*x636)));
CheckValue<IkReal> x655=IKPowWithIntegerCheck(gconst5,-1);
if(!x655.valid){
continue;
}
evalcond[4]=((((0.16)*cj1))+((x637*(gconst4*gconst4)*(x655.value)))+(((-1.0)*x633*x641))+((gconst5*x637))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x652))+(((0.16085006)*x651))+(((0.02349986)*x649)));
evalcond[5]=(((x638*x647))+(((0.02349986)*x651))+(((-1.0)*x646*x647))+(((-0.16085006)*x649))+(((0.16)*sj1))+(((3.5e-7)*x650))+(((-7.7e-7)*cj1))+((x640*x646))+(((-3.5e-7)*sj0*x636))+((x632*x641))+(((-1.0)*px*x635))+(((-1.0)*r01*sj0*x648))+((cj0*py))+(((-1.0)*x638*x640))+(((0.16085006)*x653))+((cj0*r11*x648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x656=((1.0)*sj1);
IkReal x657=(r22*sj4);
IkReal x658=(gconst5*r21);
IkReal x659=((1.0)*cj1);
IkReal x660=(gconst4*r20);
IkReal x661=(cj4*gconst5*r20);
IkReal x662=(cj4*gconst4*r21);
if( IKabs(((((-1.0)*x657*x659))+(((-1.0)*x659*x662))+((sj1*x660))+((sj1*x658))+((cj1*x661)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x659*x660))+((sj1*x661))+(((-1.0)*x656*x657))+(((-1.0)*x656*x662))+(((-1.0)*x658*x659)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x657*x659))+(((-1.0)*x659*x662))+((sj1*x660))+((sj1*x658))+((cj1*x661))))+IKsqr(((((-1.0)*x659*x660))+((sj1*x661))+(((-1.0)*x656*x657))+(((-1.0)*x656*x662))+(((-1.0)*x658*x659))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x657*x659))+(((-1.0)*x659*x662))+((sj1*x660))+((sj1*x658))+((cj1*x661))), ((((-1.0)*x659*x660))+((sj1*x661))+(((-1.0)*x656*x657))+(((-1.0)*x656*x662))+(((-1.0)*x658*x659))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x663=IKcos(j2);
IkReal x664=IKsin(j2);
IkReal x665=(cj0*gconst4);
IkReal x666=((1.0)*r10);
IkReal x667=(r00*sj0);
IkReal x668=((3.5e-7)*gconst5);
IkReal x669=((0.0008)*gconst4);
IkReal x670=((1.0)*sj0);
IkReal x671=(cj4*gconst4);
IkReal x672=(cj4*gconst5);
IkReal x673=((3.5e-7)*gconst4);
IkReal x674=(gconst5*r21);
IkReal x675=(cj1*x663);
IkReal x676=(cj1*x664);
IkReal x677=(sj1*x664);
IkReal x678=(sj1*x663);
IkReal x679=(gconst5*r01*sj0);
IkReal x680=(cj0*gconst5*r11);
IkReal x681=((1.0)*x677);
evalcond[0]=((((-1.0)*x681))+((gconst4*r20))+x674+x675);
evalcond[1]=((((-1.0)*r21*x671))+((r20*x672))+(((-1.0)*x676))+(((-1.0)*x678))+(((-1.0)*r22*sj4)));
evalcond[2]=((((-1.0)*x665*x666))+((gconst4*x667))+x678+x679+x676+(((-1.0)*x680)));
evalcond[3]=(((cj4*r11*x665))+(((-1.0)*x681))+((cj0*r12*sj4))+((x667*x672))+x675+(((-1.0)*r01*x670*x671))+(((-1.0)*r02*sj4*x670))+(((-1.0)*cj0*x666*x672)));
evalcond[4]=(((r20*x668))+(((0.16)*cj1))+(((-1.0)*r20*x669))+(((-1.0)*r21*x673))+(((0.16085006)*x676))+(((0.16085006)*x678))+(((-0.02349986)*x677))+(((0.02349986)*x675))+(((-1.0)*pz))+(((-0.0008)*x674))+(((7.7e-7)*sj1)));
evalcond[5]=((((0.0008)*x680))+((x667*x668))+(((-1.0)*r01*sj0*x673))+(((-1.0)*cj0*r10*x668))+(((0.16085006)*x677))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.02349986)*x676))+(((0.02349986)*x678))+(((-0.0008)*x679))+(((0.0008)*r10*x665))+(((-1.0)*px*x670))+(((-1.0)*x667*x669))+((cj0*py))+(((3.5e-7)*r11*x665))+(((-0.16085006)*x675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x682=((1.0)*sj1);
IkReal x683=(cj3*gconst4);
IkReal x684=(cj0*r10);
IkReal x685=((1.0)*cj1);
IkReal x686=(r00*sj0);
IkReal x687=(cj4*r22*sj3);
IkReal x688=(gconst5*r20*sj3*sj4);
IkReal x689=(cj3*gconst5*r01*sj0);
IkReal x690=(gconst4*r21*sj3*sj4);
IkReal x691=(cj0*cj3*gconst5*r11);
CheckValue<IkReal> x692 = IKatan2WithCheck(IkReal((((cj1*x689))+((sj1*x690))+(((-1.0)*x685*x691))+(((-1.0)*x682*x687))+(((-1.0)*x682*x688))+((cj1*x683*x686))+(((-1.0)*x683*x684*x685)))),IkReal((((cj1*x688))+((cj1*x687))+(((-1.0)*x682*x683*x684))+(((-1.0)*x682*x691))+((sj1*x683*x686))+(((-1.0)*x685*x690))+((sj1*x689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x692.valid){
continue;
}
CheckValue<IkReal> x693=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x693.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x692.value)+(((1.5707963267949)*(x693.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x694=IKcos(j2);
IkReal x695=IKsin(j2);
IkReal x696=(gconst5*sj4);
IkReal x697=((1.0)*gconst4);
IkReal x698=(r01*sj0);
IkReal x699=(cj0*r10);
IkReal x700=(r00*sj0);
IkReal x701=((3.5e-7)*gconst5);
IkReal x702=(gconst4*r20);
IkReal x703=(cj0*r12);
IkReal x704=((1.0)*sj0);
IkReal x705=((3.5e-7)*gconst4);
IkReal x706=((1.0)*sj3);
IkReal x707=((0.0008)*gconst5);
IkReal x708=(cj0*r11);
IkReal x709=((0.0008)*gconst4);
IkReal x710=(cj4*gconst5);
IkReal x711=((1.0)*cj3);
IkReal x712=(cj1*x694);
IkReal x713=(gconst4*x708);
IkReal x714=(sj1*x695);
IkReal x715=(sj1*x694);
IkReal x716=(cj1*x695);
evalcond[0]=((((-1.0)*x706*x712))+((sj3*x714))+((gconst5*r21))+x702);
evalcond[1]=((((-1.0)*x716))+(((-1.0)*x715))+((r20*x710))+(((-1.0)*cj4*r21*x697))+(((-1.0)*r22*sj4)));
evalcond[2]=((((-1.0)*x711*x712))+((cj4*r22))+((r20*x696))+(((-1.0)*r21*sj4*x697))+((cj3*x714)));
evalcond[3]=((((-1.0)*x706*x715))+(((-1.0)*x706*x716))+(((-1.0)*x697*x699))+(((-1.0)*gconst5*x708))+((gconst4*x700))+((gconst5*x698)));
evalcond[4]=(((x700*x710))+((cj4*x713))+(((-1.0)*x714))+(((-1.0)*x699*x710))+x712+(((-1.0)*r02*sj4*x704))+(((-1.0)*cj4*x697*x698))+((sj4*x703)));
evalcond[5]=(((sj4*x713))+(((-1.0)*cj4*x703))+(((-1.0)*x711*x715))+(((-1.0)*x711*x716))+(((-1.0)*x696*x699))+((cj4*r02*sj0))+((x696*x700))+(((-1.0)*sj4*x697*x698)));
evalcond[6]=((((-0.0008)*x702))+(((0.02349986)*x712))+(((0.16)*cj1))+(((-0.02349986)*x714))+(((0.16085006)*x715))+(((0.16085006)*x716))+((r20*x701))+(((-1.0)*pz))+(((-1.0)*r21*x707))+(((-1.0)*r21*x705))+(((7.7e-7)*sj1)));
evalcond[7]=((((0.02349986)*x715))+(((0.02349986)*x716))+((x707*x708))+((x700*x701))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.16085006)*x714))+(((-1.0)*px*x704))+(((-1.0)*x699*x701))+(((-1.0)*x698*x707))+(((-1.0)*x698*x705))+((cj0*py))+(((-0.16085006)*x712))+((x705*x708))+((x699*x709))+(((-1.0)*x700*x709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x717=(cj1*sj4);
IkReal x718=((1.0)*cj3);
IkReal x719=(gconst5*r20);
IkReal x720=(cj4*sj1);
IkReal x721=(gconst4*r21);
IkReal x722=(cj1*cj4);
IkReal x723=(sj1*sj4);
CheckValue<IkReal> x724=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x724.valid){
continue;
}
CheckValue<IkReal> x725 = IKatan2WithCheck(IkReal((((x721*x723))+(((-1.0)*x718*x721*x722))+((cj3*x719*x722))+(((-1.0)*r22*x717*x718))+(((-1.0)*x719*x723))+(((-1.0)*r22*x720)))),IkReal(((((-1.0)*r22*x718*x723))+((cj3*x719*x720))+(((-1.0)*x718*x720*x721))+((x717*x719))+(((-1.0)*x717*x721))+((r22*x722)))),IKFAST_ATAN2_MAGTHRESH);
if(!x725.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x724.value)))+(x725.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x726=IKcos(j2);
IkReal x727=IKsin(j2);
IkReal x728=(gconst5*sj4);
IkReal x729=((1.0)*gconst4);
IkReal x730=(r01*sj0);
IkReal x731=(cj0*r10);
IkReal x732=(r00*sj0);
IkReal x733=((3.5e-7)*gconst5);
IkReal x734=(gconst4*r20);
IkReal x735=(cj0*r12);
IkReal x736=((1.0)*sj0);
IkReal x737=((3.5e-7)*gconst4);
IkReal x738=((1.0)*sj3);
IkReal x739=((0.0008)*gconst5);
IkReal x740=(cj0*r11);
IkReal x741=((0.0008)*gconst4);
IkReal x742=(cj4*gconst5);
IkReal x743=((1.0)*cj3);
IkReal x744=(cj1*x726);
IkReal x745=(gconst4*x740);
IkReal x746=(sj1*x727);
IkReal x747=(sj1*x726);
IkReal x748=(cj1*x727);
evalcond[0]=((((-1.0)*x738*x744))+((sj3*x746))+((gconst5*r21))+x734);
evalcond[1]=(((r20*x742))+(((-1.0)*r22*sj4))+(((-1.0)*x747))+(((-1.0)*x748))+(((-1.0)*cj4*r21*x729)));
evalcond[2]=(((cj4*r22))+((r20*x728))+((cj3*x746))+(((-1.0)*r21*sj4*x729))+(((-1.0)*x743*x744)));
evalcond[3]=((((-1.0)*gconst5*x740))+((gconst4*x732))+((gconst5*x730))+(((-1.0)*x738*x747))+(((-1.0)*x738*x748))+(((-1.0)*x729*x731)));
evalcond[4]=((((-1.0)*x731*x742))+(((-1.0)*r02*sj4*x736))+((x732*x742))+(((-1.0)*x746))+(((-1.0)*cj4*x729*x730))+x744+((sj4*x735))+((cj4*x745)));
evalcond[5]=(((sj4*x745))+((x728*x732))+(((-1.0)*x728*x731))+(((-1.0)*sj4*x729*x730))+((cj4*r02*sj0))+(((-1.0)*x743*x747))+(((-1.0)*x743*x748))+(((-1.0)*cj4*x735)));
evalcond[6]=((((0.16)*cj1))+(((-0.0008)*x734))+((r20*x733))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-1.0)*r21*x737))+(((-1.0)*r21*x739))+(((-0.02349986)*x746))+(((0.16085006)*x748))+(((0.16085006)*x747))+(((0.02349986)*x744)));
evalcond[7]=((((-0.16085006)*x744))+(((-1.0)*x731*x733))+((x739*x740))+((x731*x741))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*x732*x741))+(((-1.0)*px*x736))+((x737*x740))+(((-1.0)*x730*x737))+(((-1.0)*x730*x739))+((cj0*py))+((x732*x733))+(((0.16085006)*x746))+(((0.02349986)*x748))+(((0.02349986)*x747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x749=(cj4*sj3);
IkReal x750=(cj1*r20);
IkReal x751=(gconst5*r21);
IkReal x752=((1.0)*gconst4*sj1);
IkReal x753=((1.0)*r22*sj3*sj4);
CheckValue<IkReal> x754=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x754.valid){
continue;
}
CheckValue<IkReal> x755 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x751))+(((-1.0)*cj1*gconst4*r21*x749))+(((-1.0)*cj1*x753))+((gconst5*x749*x750))+(((-1.0)*r20*x752)))),IkReal(((((-1.0)*sj1*x753))+((cj1*x751))+((gconst5*r20*sj1*x749))+(((-1.0)*r21*x749*x752))+((gconst4*x750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x755.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x754.value)))+(x755.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x756=IKcos(j2);
IkReal x757=IKsin(j2);
IkReal x758=(gconst5*sj4);
IkReal x759=((1.0)*gconst4);
IkReal x760=(r01*sj0);
IkReal x761=(cj0*r10);
IkReal x762=(r00*sj0);
IkReal x763=((3.5e-7)*gconst5);
IkReal x764=(gconst4*r20);
IkReal x765=(cj0*r12);
IkReal x766=((1.0)*sj0);
IkReal x767=((3.5e-7)*gconst4);
IkReal x768=((1.0)*sj3);
IkReal x769=((0.0008)*gconst5);
IkReal x770=(cj0*r11);
IkReal x771=((0.0008)*gconst4);
IkReal x772=(cj4*gconst5);
IkReal x773=((1.0)*cj3);
IkReal x774=(cj1*x756);
IkReal x775=(gconst4*x770);
IkReal x776=(sj1*x757);
IkReal x777=(sj1*x756);
IkReal x778=(cj1*x757);
evalcond[0]=((((-1.0)*x768*x774))+((sj3*x776))+((gconst5*r21))+x764);
evalcond[1]=((((-1.0)*cj4*r21*x759))+((r20*x772))+(((-1.0)*r22*sj4))+(((-1.0)*x778))+(((-1.0)*x777)));
evalcond[2]=(((cj4*r22))+(((-1.0)*r21*sj4*x759))+((cj3*x776))+((r20*x758))+(((-1.0)*x773*x774)));
evalcond[3]=((((-1.0)*x768*x777))+(((-1.0)*x768*x778))+(((-1.0)*gconst5*x770))+((gconst4*x762))+((gconst5*x760))+(((-1.0)*x759*x761)));
evalcond[4]=((((-1.0)*x761*x772))+((sj4*x765))+(((-1.0)*cj4*x759*x760))+((x762*x772))+x774+(((-1.0)*x776))+((cj4*x775))+(((-1.0)*r02*sj4*x766)));
evalcond[5]=(((sj4*x775))+(((-1.0)*sj4*x759*x760))+((x758*x762))+((cj4*r02*sj0))+(((-1.0)*x758*x761))+(((-1.0)*x773*x778))+(((-1.0)*x773*x777))+(((-1.0)*cj4*x765)));
evalcond[6]=((((0.16)*cj1))+((r20*x763))+(((-1.0)*r21*x769))+(((-1.0)*r21*x767))+(((-1.0)*pz))+(((-0.0008)*x764))+(((7.7e-7)*sj1))+(((-0.02349986)*x776))+(((0.16085006)*x778))+(((0.16085006)*x777))+(((0.02349986)*x774)));
evalcond[7]=((((-0.16085006)*x774))+((x767*x770))+(((-1.0)*px*x766))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((x769*x770))+((x762*x763))+(((-1.0)*x762*x771))+((x761*x771))+((cj0*py))+(((-1.0)*x760*x767))+(((-1.0)*x760*x769))+(((0.16085006)*x776))+(((0.02349986)*x778))+(((0.02349986)*x777))+(((-1.0)*x761*x763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x779=((1.0)*sj5);
IkReal x780=((((-1.0)*cj4*r21*x779))+((cj4*cj5*r20))+(((-1.0)*r22*sj4)));
j0eval[0]=x780;
j0eval[1]=IKsign(x780);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x779))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x781=(cj4*sj5);
IkReal x782=(cj4*cj5);
IkReal x783=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j0eval[0]=x783;
j0eval[1]=((IKabs((((r12*sj4))+((r11*x781))+(((-1.0)*r10*x782)))))+(IKabs((((r00*x782))+(((-1.0)*r01*x781))+(((-1.0)*r02*sj4))))));
j0eval[2]=IKsign(x783);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x784=(r22*sj4);
IkReal x785=((0.0008)*cj5);
IkReal x786=(cj4*cj5);
IkReal x787=((1.0)*sj5);
IkReal x788=(cj4*r20);
IkReal x789=(rxp1_2*sj4);
IkReal x790=((3.5e-7)*cj5);
IkReal x791=((3.5e-7)*sj5);
IkReal x792=((0.0008)*sj5);
IkReal x793=(cj4*r21);
IkReal x794=(cj4*rxp2_2);
IkReal x795=(cj5*rxp0_2*sj4);
j0eval[0]=((((2285.71428571429)*x784))+(((-1.0)*r21*x786))+(((2285.71428571429)*sj5*x793))+(((-2857142.85714286)*sj5*x789))+(((-1.0)*x787*x788))+(((-2285.71428571429)*r20*x786))+(((2857142.85714286)*x794))+(((2857142.85714286)*x795)));
j0eval[1]=IKsign(((((-3.5e-7)*r21*x786))+(((-1.0)*x788*x791))+(((0.0008)*x784))+(((-1.0)*x787*x789))+((x792*x793))+x795+x794+(((-1.0)*x785*x788))));
j0eval[2]=((IKabs((((r00*x790))+(((-1.0)*r00*x792))+(((-1.0)*r01*x785))+(((-1.0)*r01*x791))+(((-1.0)*px)))))+(IKabs((((r10*x792))+py+(((-1.0)*r10*x790))+((r11*x785))+((r11*x791))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x796=((-1.0)*r20);
IkReal x798 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x798)==0){
continue;
}
IkReal x797=pow(x798,-0.5);
CheckValue<IkReal> x799 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x796),IKFAST_ATAN2_MAGTHRESH);
if(!x799.valid){
continue;
}
IkReal gconst12=((-1.0)*(x799.value));
IkReal gconst13=(r21*x797);
IkReal gconst14=(x796*x797);
CheckValue<IkReal> x800 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x800.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x800.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x801=((-1.0)*r20);
IkReal x802=x797;
CheckValue<IkReal> x804 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x801),IKFAST_ATAN2_MAGTHRESH);
if(!x804.valid){
continue;
}
IkReal x803=((-1.0)*(x804.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst13;
cj5=gconst14;
j5=x803;
IkReal gconst12=x803;
IkReal gconst13=(r21*x802);
IkReal gconst14=(x801*x802);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x805=((-1.0)*r20);
IkReal x806=x797;
CheckValue<IkReal> x808 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x805),IKFAST_ATAN2_MAGTHRESH);
if(!x808.valid){
continue;
}
IkReal x807=((-1.0)*(x808.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst13;
cj5=gconst14;
j5=x807;
IkReal gconst12=x807;
IkReal gconst13=(r21*x806);
IkReal gconst14=(x805*x806);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x809=((-1.0)*r20);
IkReal x810=x797;
CheckValue<IkReal> x812 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x809),IKFAST_ATAN2_MAGTHRESH);
if(!x812.valid){
continue;
}
IkReal x811=((-1.0)*(x812.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst13;
cj5=gconst14;
j5=x811;
IkReal gconst12=x811;
IkReal gconst13=(r21*x810);
IkReal gconst14=(x809*x810);
IkReal x813=r21*r21;
IkReal x814=r20*r20;
IkReal x815=(cj4*rxp2_2);
IkReal x816=((1.0)+(((-1.0)*(r22*r22))));
IkReal x817=((2285.71428571429)*x814);
IkReal x818=((0.0008)*x814);
CheckValue<IkReal> x829=IKPowWithIntegerCheck(x816,-1);
if(!x829.valid){
continue;
}
IkReal x819=x829.value;
IkReal x820=(r22*sj4*x819);
IkReal x821=((0.0008)*x820);
IkReal x822=x797;
IkReal x823=(x814*x820);
IkReal x824=(cj4*x822);
IkReal x825=(x813*x820);
IkReal x826=(x813*x824);
IkReal x827=(r21*rxp1_2*sj4*x822);
IkReal x828=(r20*rxp0_2*sj4*x822);
j0eval[0]=((((2857142.85714286)*x815))+((x817*x820))+((x817*x824))+(((-2857142.85714286)*x827))+(((-2857142.85714286)*x828))+(((2285.71428571429)*x826))+(((2285.71428571429)*x825)));
j0eval[1]=IKsign(((((0.0008)*x826))+((x813*x821))+(((-1.0)*x827))+(((-1.0)*x828))+((x818*x824))+((x818*x820))+x815));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x830=((3.5e-7)*gconst13);
IkReal x831=((0.0008)*gconst13);
IkReal x832=((3.5e-7)*gconst14);
IkReal x833=((0.0008)*gconst14);
IkReal x834=((0.0008)*sj4);
CheckValue<IkReal> x835=IKPowWithIntegerCheck(IKsign((((r22*((((gconst13*sj4*x831))+((gconst14*sj4*x833))))))+((gconst14*rxp0_2*sj4))+((r20*(((((-1.0)*cj4*x833))+(((-1.0)*cj4*x830))))))+((cj4*rxp2_2))+((r21*(((((-1.0)*cj4*x832))+((cj4*x831))))))+(((-1.0)*gconst13*rxp1_2*sj4)))),-1);
if(!x835.valid){
continue;
}
CheckValue<IkReal> x836 = IKatan2WithCheck(IkReal((((r00*x832))+(((-1.0)*px))+(((-1.0)*r00*x831))+(((-1.0)*r01*x830))+(((-1.0)*r01*x833)))),IkReal(((((-1.0)*r10*x832))+((r10*x831))+py+((r11*x830))+((r11*x833)))),IKFAST_ATAN2_MAGTHRESH);
if(!x836.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x835.value)))+(x836.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x837=IKsin(j0);
IkReal x838=IKcos(j0);
IkReal x839=(gconst14*r10);
IkReal x840=((1.0)*gconst13);
IkReal x841=(r00*sj4);
IkReal x842=((3.5e-7)*gconst13);
IkReal x843=((1.0)*sj4);
IkReal x844=((1.0)*r12);
IkReal x845=(cj4*x837);
IkReal x846=(r01*x838);
IkReal x847=(gconst14*x837);
IkReal x848=(r02*x838);
IkReal x849=(sj4*x837);
IkReal x850=(gconst13*x838);
IkReal x851=(gconst14*x838);
IkReal x852=(gconst13*r10*x837);
evalcond[0]=(((r00*x850))+((gconst14*x846))+x852+((r11*x847)));
evalcond[1]=((-1.0)+((x839*x849))+(((-1.0)*r11*x840*x849))+((cj4*x848))+((x841*x851))+((r12*x845))+(((-1.0)*sj4*x840*x846)));
evalcond[2]=((((-1.0)*r01*x840*x849))+((r02*x845))+((r11*sj4*x850))+(((-1.0)*cj4*x838*x844))+(((-1.0)*x838*x839*x843))+((x841*x847)));
evalcond[3]=((((-1.0)*cj4*x840*x846))+((cj4*r00*x851))+((x839*x845))+(((-1.0)*r11*x840*x845))+(((-1.0)*r12*x837*x843))+(((-1.0)*x843*x848)));
evalcond[4]=((((-0.0008)*x852))+(((-1.0)*r11*x837*x842))+(((-1.0)*px*x838))+(((-0.0008)*r00*x850))+(((-1.0)*x842*x846))+(((-0.0008)*r11*x847))+(((-0.0008)*gconst14*x846))+(((3.5e-7)*x837*x839))+(((-1.0)*py*x837))+(((3.5e-7)*r00*x851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x853=(gconst14*r21);
IkReal x854=(gconst13*r20);
IkReal x855=((-1.0)*r20);
IkReal x856=(x853+x854);
IkReal x857=((-1.0)+x856);
IkReal x858=((1.0)+x856);
IkReal x859=x797;
CheckValue<IkReal> x862 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x855),IKFAST_ATAN2_MAGTHRESH);
if(!x862.valid){
continue;
}
IkReal x860=((-1.0)*(x862.value));
IkReal x861=(((cj4*gconst14*r20))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*gconst13*r21)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst13;
cj5=gconst14;
j5=x860;
IkReal gconst12=x860;
IkReal gconst13=(r21*x859);
IkReal gconst14=(x855*x859);
IkReal gconst18=x857;
IkReal gconst19=x858;
IkReal gconst20=x861;
IkReal gconst21=x861;
IkReal gconst22=x857;
IkReal gconst23=x858;
IkReal gconst24=x861;
IkReal gconst25=x861;
IkReal gconst26=x858;
IkReal gconst27=x857;
IkReal gconst28=x861;
IkReal gconst29=x861;
IkReal gconst30=x858;
IkReal gconst31=x857;
IkReal gconst32=x861;
IkReal gconst33=x861;
IkReal x863=cj4*cj4;
IkReal x864=r21*r21;
IkReal x865=gconst13*gconst13;
IkReal x866=gconst14*gconst14;
IkReal x867=r20*r20;
IkReal x868=r22*r22;
IkReal x869=sj4*sj4;
IkReal x870=(gconst13*r21);
IkReal x871=(gconst14*r20);
IkReal x872=((16.0)*x866);
IkReal x873=((24.0)*x866);
IkReal x874=((4.0)*x866);
IkReal x875=((32.0)*cj4*r22*sj4);
IkReal x876=((48.0)*cj4*r22*sj4);
IkReal x877=(x868*x869);
IkReal x878=(x863*x867);
IkReal x879=(x865*x867);
IkReal x880=((8.0)*cj4*r22*sj4);
IkReal x881=(x863*x864*x865);
j1eval[0]=((((0.5)*(IKabs(((24.0)+(((48.0)*x863*x870*x871))+((x871*x876))+(((-48.0)*x870*x871))+(((-24.0)*x879))+(((-24.0)*x877))+(((-1.0)*x873*x878))+(((-1.0)*x864*x873))+(((-1.0)*x870*x876))+(((-24.0)*x881)))))))+(((0.5)*(IKabs(((4.0)+(((-1.0)*x870*x880))+(((-4.0)*x879))+(((-4.0)*x877))+(((8.0)*x863*x870*x871))+(((-1.0)*x864*x874))+(((-4.0)*x881))+((x871*x880))+(((-1.0)*x874*x878))+(((-8.0)*x870*x871)))))))+(IKabs(((16.0)+(((-1.0)*x872*x878))+((x871*x875))+(((-16.0)*x879))+(((-16.0)*x877))+(((32.0)*x863*x870*x871))+(((-16.0)*x881))+(((-1.0)*x864*x872))+(((-1.0)*x870*x875))+(((-32.0)*x870*x871))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x882=((16.0)*gconst27);
IkReal x883=((16.0)*gconst30);
IkReal x884=((16.0)*gconst19);
IkReal x885=((16.0)*gconst22);
IkReal x886=(gconst27*gconst28);
IkReal x887=(gconst22*gconst25);
IkReal x888=(gconst29*gconst30);
IkReal x889=(gconst18*gconst25);
IkReal x890=((2.0)*gconst26);
IkReal x891=(gconst23*gconst32);
IkReal x892=(gconst26*gconst29);
IkReal x893=(gconst21*gconst22);
IkReal x894=((2.0)*gconst30);
IkReal x895=((16.0)*gconst29);
IkReal x896=(gconst19*gconst28);
IkReal x897=(gconst22*gconst33);
IkReal x898=(gconst19*gconst20);
IkReal x899=((2.0)*gconst19);
IkReal x900=((4.0)*gconst26);
IkReal x901=(gconst27*gconst31);
IkReal x902=((2.0)*gconst22);
IkReal x903=(gconst23*gconst24);
IkReal x904=((8.0)*gconst32);
IkReal x905=(gconst18*gconst21);
IkReal x906=((2.0)*gconst23);
IkReal x907=((2.0)*gconst31);
IkReal x908=(gconst18*gconst29);
IkReal x909=(gconst30*gconst33);
IkReal x910=(gconst24*gconst31);
IkReal x911=(gconst25*gconst27);
IkReal x912=((1.0)*gconst33);
IkReal x913=((1.0)*gconst20);
IkReal x914=(gconst21*gconst26);
IkReal x915=(gconst21*gconst30);
IkReal x916=((4.0)*gconst27);
IkReal x917=(gconst20*gconst27);
IkReal x918=(gconst31*gconst32);
IkReal x919=((2.0)*gconst18);
IkReal x920=((16.0)*gconst21);
IkReal x921=(gconst25*gconst30);
IkReal x922=((2.0)*gconst27);
IkReal x923=((4.0)*gconst18);
IkReal x924=((8.0)*gconst24);
IkReal x925=((4.0)*gconst19);
IkReal x926=(gconst22*gconst29);
IkReal x927=(gconst30*x916);
IkReal x928=((8.0)*x888);
IkReal x929=(gconst27*x904);
IkReal x930=(gconst30*x925);
IkReal x931=(gconst22*x916);
IkReal x932=(gconst27*x924);
IkReal x933=((8.0)*x915);
IkReal x934=(gconst19*x904);
IkReal x935=((8.0)*x926);
IkReal x936=(gconst22*x925);
IkReal x937=(gconst19*x924);
IkReal x938=((8.0)*x893);
IkReal x939=((1.0)*x918);
IkReal x940=(x883+x927);
IkReal x941=(x884+x936);
IkReal x942=(x928+x929);
IkReal x943=(x931+x930);
IkReal x944=(x938+x937);
IkReal x945=(x935+x934+x933+x932);
op[0]=((((-1.0)*x927))+(((-1.0)*x886*x939))+((x886*x909))+((x892*x918))+(((-1.0)*gconst26*x888*x912)));
op[1]=(((x886*x894))+(((-1.0)*x890*x909))+(((-1.0)*gconst27*gconst33*x894))+((x886*x907))+((x890*x918))+(((-1.0)*x888*x890))+(((-1.0)*gconst29*gconst31*x890))+x942+(((2.0)*gconst32*x901)));
op[2]=(((x886*x897))+(((-1.0)*x943))+((x909*x917))+(((-1.0)*x909*x914))+((x892*x910))+(((-1.0)*x886*x891))+(((-1.0)*gconst31*x900))+(((-1.0)*gconst18*x888*x912))+((x914*x918))+((x886*x921))+(((-1.0)*x882))+(((-1.0)*x886*x910))+(((-1.0)*gconst32*x895))+(((-1.0)*gconst30*x900))+(((-1.0)*x892*x897))+(((-1.0)*gconst32*x901*x913))+(((-1.0)*x896*x939))+((x896*x909))+((x908*x918))+((x891*x892))+(((-1.0)*gconst25*gconst26*x888))+x940+(((-4.0)*x901)));
op[3]=((((-1.0)*x897*x922))+((x891*x922))+(((-1.0)*x942))+(((2.0)*gconst24*x901))+((x894*x896))+((x894*x917))+(((-1.0)*x888*x919))+(((32.0)*gconst29))+((x886*x906))+((x886*x902))+(((-1.0)*gconst18*gconst33*x894))+(((-1.0)*x890*x915))+((gconst18*gconst32*x907))+(((-1.0)*x894*x911))+((x890*x910))+(((2.0)*gconst20*x901))+((x899*x918))+(((-32.0)*gconst32))+((x896*x907))+(((-1.0)*gconst23*gconst29*x890))+(((-1.0)*gconst21*gconst31*x890))+((x890*x891))+(((-1.0)*x890*x926))+(((-1.0)*x890*x921))+x945+(((-1.0)*gconst19*gconst33*x894))+(((-1.0)*x907*x908))+(((-1.0)*x890*x897)));
op[4]=((64.0)+(((-1.0)*gconst27*x891*x913))+((x886*x887))+(((-1.0)*x940))+(((-1.0)*x941))+(((-1.0)*x887*x892))+((x910*x914))+(((-1.0)*x897*x908))+((x896*x897))+((x891*x908))+(((-1.0)*x886*x903))+(((-1.0)*x914*x921))+((x892*x903))+((gconst20*gconst30*x911))+(((-1.0)*gconst26*x893*x912))+((x891*x914))+((x896*x921))+((x897*x917))+(((-1.0)*gconst23*x900))+(((-1.0)*x905*x909))+(((-1.0)*gconst32*x920))+(((-1.0)*gconst22*x900))+(((-1.0)*x891*x896))+(((-1.0)*gconst31*x925))+(((-1.0)*gconst31*x923))+((x908*x910))+(((-1.0)*x888*x889))+(((-1.0)*gconst23*x916))+(((-1.0)*gconst24*x895))+(((-1.0)*gconst30*x923))+x885+x882+((x898*x909))+((x905*x918))+(((-1.0)*x898*x939))+x943+(((-1.0)*x896*x910))+(((-1.0)*gconst24*x901*x913)));
op[5]=((((-1.0)*x887*x922))+(((-1.0)*x945))+((x902*x917))+((x894*x898))+((gconst18*gconst24*x907))+(((32.0)*gconst21))+(((-1.0)*x902*x908))+((x890*x903))+(((-1.0)*x894*x905))+(((-1.0)*gconst21*gconst23*x890))+(((-1.0)*x897*x919))+((x891*x919))+((x903*x922))+(((-1.0)*gconst19*gconst25*x894))+(((-1.0)*x889*x894))+((x906*x917))+(((-32.0)*gconst24))+((x899*x910))+((x896*x902))+((x896*x906))+(((-1.0)*x897*x899))+((x891*x899))+((x898*x907))+x944+(((-1.0)*x905*x907))+(((-1.0)*x890*x893))+(((-1.0)*x887*x890))+(((-1.0)*x906*x908)));
op[6]=((((-1.0)*gconst22*x923))+(((-1.0)*gconst18*x893*x912))+(((-1.0)*x943))+(((-1.0)*x898*x910))+(((-1.0)*x889*x915))+((x903*x908))+((x891*x905))+(((-1.0)*gconst27*x903*x913))+(((-1.0)*x887*x914))+((x887*x917))+((x903*x914))+(((-1.0)*gconst23*x923))+(((-1.0)*gconst23*x925))+(((-1.0)*x885))+(((-1.0)*x887*x908))+((x897*x898))+((x898*x921))+(((-1.0)*gconst24*x920))+(((-1.0)*x891*x898))+(((-1.0)*x896*x903))+((x905*x910))+x941+((x887*x896)));
op[7]=((((-1.0)*x893*x919))+(((-1.0)*x944))+((x903*x919))+(((-1.0)*x887*x919))+((x899*x903))+((x898*x906))+((x898*x902))+(((-1.0)*x905*x906))+(((-1.0)*x887*x899)));
op[8]=(((x903*x905))+(((-1.0)*x898*x903))+(((-1.0)*x887*x905))+((x887*x898))+(((-1.0)*x936)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x946=((1.0)*sj1);
IkReal x947=(gconst13*r20);
IkReal x948=(gconst14*r21);
IkReal x949=((1.0)*cj1);
IkReal x950=(r22*sj4);
IkReal x951=(cj4*gconst13*r21);
IkReal x952=(cj4*gconst14*r20);
if( IKabs(((((-1.0)*x946*x948))+(((-1.0)*x946*x947))+((cj1*x952))+(((-1.0)*x949*x950))+(((-1.0)*x949*x951)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x948))+((cj1*x947))+(((-1.0)*x946*x950))+(((-1.0)*x946*x951))+((sj1*x952)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x946*x948))+(((-1.0)*x946*x947))+((cj1*x952))+(((-1.0)*x949*x950))+(((-1.0)*x949*x951))))+IKsqr((((cj1*x948))+((cj1*x947))+(((-1.0)*x946*x950))+(((-1.0)*x946*x951))+((sj1*x952))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x946*x948))+(((-1.0)*x946*x947))+((cj1*x952))+(((-1.0)*x949*x950))+(((-1.0)*x949*x951))), (((cj1*x948))+((cj1*x947))+(((-1.0)*x946*x950))+(((-1.0)*x946*x951))+((sj1*x952))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x953=IKcos(j2);
IkReal x954=IKsin(j2);
IkReal x955=(cj0*r10);
IkReal x956=((3.5e-7)*gconst14);
IkReal x957=((1.0)*gconst13);
IkReal x958=(r01*sj0);
IkReal x959=((3.5e-7)*gconst13);
IkReal x960=((1.0)*sj0);
IkReal x961=(r00*sj0);
IkReal x962=(cj0*r11);
IkReal x963=((0.0008)*gconst14);
IkReal x964=(cj4*gconst14);
IkReal x965=((0.02349986)*sj1);
IkReal x966=((0.0008)*gconst13);
IkReal x967=(cj1*x953);
IkReal x968=((0.16085006)*x954);
IkReal x969=(sj1*x954);
IkReal x970=(cj1*x954);
IkReal x971=(sj1*x953);
IkReal x972=((1.0)*x971);
IkReal x973=((1.0)*x970);
IkReal x974=(x973+x972);
evalcond[0]=(((gconst14*r21))+(((-1.0)*x967))+((gconst13*r20))+x969);
evalcond[1]=((((-1.0)*cj4*r21*x957))+(((-1.0)*r22*sj4))+((r20*x964))+(((-1.0)*x974)));
evalcond[2]=((((-1.0)*gconst14*x962))+((gconst14*x958))+(((-1.0)*x955*x957))+((gconst13*x961))+(((-1.0)*x974)));
evalcond[3]=(((x961*x964))+(((-1.0)*x969))+((cj4*gconst13*x962))+(((-1.0)*cj4*x957*x958))+((cj0*r12*sj4))+(((-1.0)*x955*x964))+x967+(((-1.0)*r02*sj4*x960)));
evalcond[4]=((((0.02349986)*x967))+(((0.16)*cj1))+(((-1.0)*r20*x966))+(((-1.0)*r21*x959))+(((-1.0)*r21*x963))+((cj1*x968))+(((-1.0)*pz))+(((7.7e-7)*sj1))+((r20*x956))+(((-1.0)*x954*x965))+(((0.16085006)*x971)));
evalcond[5]=((((-1.0)*x961*x966))+((x962*x963))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*x958*x963))+((sj1*x968))+(((-1.0)*x958*x959))+((x956*x961))+((x959*x962))+((cj0*py))+(((-1.0)*x955*x956))+(((-1.0)*px*x960))+(((0.02349986)*x970))+((x953*x965))+(((-0.16085006)*x967))+((x955*x966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x975=((1.0)*gconst13);
IkReal x976=((1.0)*sj4);
CheckValue<IkReal> x977=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r21*x975))+((r22*(((((-1.0)*x976*(gconst14*gconst14)))+(((-1.0)*gconst13*sj4*x975))))))+((cj4*gconst14*r20)))),-1);
if(!x977.valid){
continue;
}
CheckValue<IkReal> x978 = IKatan2WithCheck(IkReal((((gconst14*r01))+((gconst13*r00)))),IkReal(((((-1.0)*gconst14*r11))+(((-1.0)*r10*x975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x978.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x977.value)))+(x978.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x979=IKsin(j0);
IkReal x980=IKcos(j0);
IkReal x981=(gconst14*r10);
IkReal x982=((1.0)*gconst13);
IkReal x983=(r00*sj4);
IkReal x984=((3.5e-7)*gconst13);
IkReal x985=((1.0)*sj4);
IkReal x986=((1.0)*r12);
IkReal x987=(cj4*x979);
IkReal x988=(r01*x980);
IkReal x989=(gconst14*x979);
IkReal x990=(r02*x980);
IkReal x991=(sj4*x979);
IkReal x992=(gconst13*x980);
IkReal x993=(gconst14*x980);
IkReal x994=(gconst13*r10*x979);
evalcond[0]=(((r00*x992))+((gconst14*x988))+((r11*x989))+x994);
evalcond[1]=((-1.0)+((cj4*x990))+((x983*x993))+((x981*x991))+(((-1.0)*sj4*x982*x988))+((r12*x987))+(((-1.0)*r11*x982*x991)));
evalcond[2]=(((x983*x989))+(((-1.0)*cj4*x980*x986))+((r11*sj4*x992))+(((-1.0)*r01*x982*x991))+(((-1.0)*x980*x981*x985))+((r02*x987)));
evalcond[3]=(((x981*x987))+(((-1.0)*r11*x982*x987))+(((-1.0)*r12*x979*x985))+(((-1.0)*x985*x990))+((cj4*r00*x993))+(((-1.0)*cj4*x982*x988)));
evalcond[4]=((((-1.0)*r11*x979*x984))+(((-0.0008)*x994))+(((-0.0008)*r00*x992))+(((3.5e-7)*x979*x981))+(((3.5e-7)*r00*x993))+(((-1.0)*px*x980))+(((-0.0008)*gconst14*x988))+(((-1.0)*py*x979))+(((-0.0008)*r11*x989))+(((-1.0)*x984*x988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x995=(gconst14*r21);
IkReal x996=(gconst13*r20);
IkReal x997=((-1.0)*r20);
IkReal x998=(x996+x995);
IkReal x999=((-1.0)+x998);
IkReal x1000=((1.0)+x998);
IkReal x1001=x797;
CheckValue<IkReal> x1004 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x997),IKFAST_ATAN2_MAGTHRESH);
if(!x1004.valid){
continue;
}
IkReal x1002=((-1.0)*(x1004.value));
IkReal x1003=(((cj4*gconst14*r20))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*gconst13*r21)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst13;
cj5=gconst14;
j5=x1002;
IkReal gconst12=x1002;
IkReal gconst13=(r21*x1001);
IkReal gconst14=(x1001*x997);
IkReal gconst18=x999;
IkReal gconst19=x1000;
IkReal gconst20=x1003;
IkReal gconst21=x1003;
IkReal gconst22=x999;
IkReal gconst23=x1000;
IkReal gconst24=x1003;
IkReal gconst25=x1003;
IkReal gconst26=x1000;
IkReal gconst27=x999;
IkReal gconst28=x1003;
IkReal gconst29=x1003;
IkReal gconst30=x1000;
IkReal gconst31=x999;
IkReal gconst32=x1003;
IkReal gconst33=x1003;
IkReal x1005=cj4*cj4;
IkReal x1006=r21*r21;
IkReal x1007=gconst13*gconst13;
IkReal x1008=gconst14*gconst14;
IkReal x1009=r20*r20;
IkReal x1010=r22*r22;
IkReal x1011=sj4*sj4;
IkReal x1012=(gconst13*r21);
IkReal x1013=(gconst14*r20);
IkReal x1014=((16.0)*x1008);
IkReal x1015=((24.0)*x1008);
IkReal x1016=((4.0)*x1008);
IkReal x1017=((32.0)*cj4*r22*sj4);
IkReal x1018=((48.0)*cj4*r22*sj4);
IkReal x1019=(x1010*x1011);
IkReal x1020=(x1005*x1009);
IkReal x1021=(x1007*x1009);
IkReal x1022=((8.0)*cj4*r22*sj4);
IkReal x1023=(x1005*x1006*x1007);
j1eval[0]=((IKabs(((16.0)+(((-1.0)*x1012*x1017))+(((-16.0)*x1019))+(((32.0)*x1005*x1012*x1013))+(((-16.0)*x1023))+(((-16.0)*x1021))+(((-1.0)*x1006*x1014))+((x1013*x1017))+(((-1.0)*x1014*x1020))+(((-32.0)*x1012*x1013)))))+(((0.5)*(IKabs(((24.0)+(((-1.0)*x1012*x1018))+(((-24.0)*x1019))+(((48.0)*x1005*x1012*x1013))+(((-1.0)*x1006*x1015))+((x1013*x1018))+(((-24.0)*x1021))+(((-24.0)*x1023))+(((-1.0)*x1015*x1020))+(((-48.0)*x1012*x1013)))))))+(((0.5)*(IKabs(((4.0)+(((-4.0)*x1019))+(((8.0)*x1005*x1012*x1013))+(((-1.0)*x1006*x1016))+(((-4.0)*x1021))+(((-4.0)*x1023))+(((-8.0)*x1012*x1013))+(((-1.0)*x1016*x1020))+((x1013*x1022))+(((-1.0)*x1012*x1022))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x1024=((16.0)*gconst27);
IkReal x1025=((16.0)*gconst30);
IkReal x1026=((16.0)*gconst19);
IkReal x1027=((16.0)*gconst22);
IkReal x1028=(gconst27*gconst28);
IkReal x1029=(gconst22*gconst25);
IkReal x1030=(gconst29*gconst30);
IkReal x1031=(gconst18*gconst25);
IkReal x1032=((2.0)*gconst26);
IkReal x1033=(gconst23*gconst32);
IkReal x1034=(gconst26*gconst29);
IkReal x1035=(gconst21*gconst22);
IkReal x1036=((2.0)*gconst30);
IkReal x1037=((16.0)*gconst29);
IkReal x1038=(gconst19*gconst28);
IkReal x1039=(gconst22*gconst33);
IkReal x1040=(gconst19*gconst20);
IkReal x1041=((2.0)*gconst19);
IkReal x1042=((4.0)*gconst26);
IkReal x1043=(gconst27*gconst31);
IkReal x1044=((2.0)*gconst22);
IkReal x1045=(gconst23*gconst24);
IkReal x1046=((8.0)*gconst32);
IkReal x1047=(gconst18*gconst21);
IkReal x1048=((2.0)*gconst23);
IkReal x1049=((2.0)*gconst31);
IkReal x1050=(gconst18*gconst29);
IkReal x1051=(gconst30*gconst33);
IkReal x1052=(gconst24*gconst31);
IkReal x1053=(gconst25*gconst27);
IkReal x1054=((1.0)*gconst33);
IkReal x1055=((1.0)*gconst20);
IkReal x1056=(gconst21*gconst26);
IkReal x1057=(gconst21*gconst30);
IkReal x1058=((4.0)*gconst27);
IkReal x1059=(gconst20*gconst27);
IkReal x1060=(gconst31*gconst32);
IkReal x1061=((2.0)*gconst18);
IkReal x1062=((16.0)*gconst21);
IkReal x1063=(gconst25*gconst30);
IkReal x1064=((2.0)*gconst27);
IkReal x1065=((4.0)*gconst18);
IkReal x1066=((8.0)*gconst24);
IkReal x1067=((4.0)*gconst19);
IkReal x1068=(gconst22*gconst29);
IkReal x1069=(gconst30*x1058);
IkReal x1070=((8.0)*x1030);
IkReal x1071=(gconst27*x1046);
IkReal x1072=(gconst30*x1067);
IkReal x1073=(gconst22*x1058);
IkReal x1074=(gconst27*x1066);
IkReal x1075=((8.0)*x1057);
IkReal x1076=(gconst19*x1046);
IkReal x1077=((8.0)*x1068);
IkReal x1078=(gconst22*x1067);
IkReal x1079=(gconst19*x1066);
IkReal x1080=((8.0)*x1035);
IkReal x1081=((1.0)*x1060);
IkReal x1082=(x1069+x1025);
IkReal x1083=(x1078+x1026);
IkReal x1084=(x1070+x1071);
IkReal x1085=(x1072+x1073);
IkReal x1086=(x1079+x1080);
IkReal x1087=(x1076+x1077+x1074+x1075);
op[0]=((((-1.0)*x1028*x1081))+((x1028*x1051))+(((-1.0)*x1069))+(((-1.0)*gconst26*x1030*x1054))+((x1034*x1060)));
op[1]=((((2.0)*gconst32*x1043))+(((-1.0)*gconst29*gconst31*x1032))+x1084+(((-1.0)*gconst27*gconst33*x1036))+((x1028*x1036))+((x1032*x1060))+((x1028*x1049))+(((-1.0)*x1030*x1032))+(((-1.0)*x1032*x1051)));
op[2]=(((x1056*x1060))+((x1038*x1051))+x1082+(((-1.0)*x1034*x1039))+(((-1.0)*gconst31*x1042))+((x1034*x1052))+(((-1.0)*x1038*x1081))+(((-1.0)*x1028*x1052))+(((-1.0)*gconst32*x1043*x1055))+(((-1.0)*x1024))+((x1050*x1060))+((x1028*x1039))+((x1051*x1059))+(((-1.0)*gconst32*x1037))+(((-4.0)*x1043))+((x1028*x1063))+((x1033*x1034))+(((-1.0)*x1051*x1056))+(((-1.0)*x1085))+(((-1.0)*gconst18*x1030*x1054))+(((-1.0)*gconst25*gconst26*x1030))+(((-1.0)*x1028*x1033))+(((-1.0)*gconst30*x1042)));
op[3]=((((-1.0)*x1030*x1061))+(((-1.0)*gconst23*gconst29*x1032))+((x1033*x1064))+((x1036*x1038))+((x1038*x1049))+x1087+(((2.0)*gconst24*x1043))+(((-1.0)*gconst21*gconst31*x1032))+(((-1.0)*x1032*x1039))+(((32.0)*gconst29))+(((2.0)*gconst20*x1043))+((gconst18*gconst32*x1049))+((x1041*x1060))+(((-1.0)*x1039*x1064))+(((-1.0)*gconst18*gconst33*x1036))+(((-1.0)*gconst19*gconst33*x1036))+((x1036*x1059))+((x1028*x1048))+((x1028*x1044))+(((-32.0)*gconst32))+(((-1.0)*x1036*x1053))+((x1032*x1052))+(((-1.0)*x1084))+(((-1.0)*x1032*x1068))+(((-1.0)*x1032*x1063))+(((-1.0)*x1049*x1050))+((x1032*x1033))+(((-1.0)*x1032*x1057)));
op[4]=((64.0)+((x1038*x1039))+(((-1.0)*x1029*x1034))+(((-1.0)*x1056*x1063))+(((-1.0)*gconst31*x1065))+(((-1.0)*gconst31*x1067))+((x1034*x1045))+x1024+x1027+x1085+(((-1.0)*gconst23*x1058))+(((-1.0)*gconst30*x1065))+((x1028*x1029))+(((-1.0)*gconst23*x1042))+((x1039*x1059))+(((-1.0)*x1038*x1052))+((x1038*x1063))+(((-1.0)*gconst27*x1033*x1055))+((gconst20*gconst30*x1053))+(((-1.0)*x1033*x1038))+((x1040*x1051))+((x1052*x1056))+(((-1.0)*gconst26*x1035*x1054))+((x1050*x1052))+(((-1.0)*x1028*x1045))+(((-1.0)*gconst22*x1042))+(((-1.0)*x1040*x1081))+(((-1.0)*gconst24*x1037))+((x1047*x1060))+(((-1.0)*x1047*x1051))+(((-1.0)*x1083))+(((-1.0)*x1082))+((x1033*x1050))+((x1033*x1056))+(((-1.0)*x1030*x1031))+(((-1.0)*gconst24*x1043*x1055))+(((-1.0)*x1039*x1050))+(((-1.0)*gconst32*x1062)));
op[5]=(((x1044*x1059))+((x1033*x1061))+((x1038*x1048))+((x1038*x1044))+x1086+(((-1.0)*x1032*x1035))+(((32.0)*gconst21))+(((-1.0)*x1029*x1032))+((x1040*x1049))+(((-1.0)*x1044*x1050))+((x1041*x1052))+((gconst18*gconst24*x1049))+(((-1.0)*gconst19*gconst25*x1036))+(((-1.0)*x1039*x1041))+((x1048*x1059))+(((-1.0)*x1039*x1061))+(((-1.0)*x1029*x1064))+(((-32.0)*gconst24))+(((-1.0)*x1031*x1036))+(((-1.0)*gconst21*gconst23*x1032))+((x1036*x1040))+((x1045*x1064))+((x1032*x1045))+(((-1.0)*x1048*x1050))+(((-1.0)*x1087))+(((-1.0)*x1036*x1047))+(((-1.0)*x1047*x1049))+((x1033*x1041)));
op[6]=((((-1.0)*gconst23*x1067))+(((-1.0)*gconst23*x1065))+(((-1.0)*x1033*x1040))+x1083+(((-1.0)*x1038*x1045))+((x1039*x1040))+(((-1.0)*x1029*x1050))+(((-1.0)*x1029*x1056))+(((-1.0)*x1040*x1052))+(((-1.0)*gconst24*x1062))+((x1040*x1063))+(((-1.0)*x1031*x1057))+(((-1.0)*x1027))+(((-1.0)*gconst27*x1045*x1055))+((x1029*x1038))+((x1029*x1059))+(((-1.0)*gconst18*x1035*x1054))+(((-1.0)*gconst22*x1065))+((x1047*x1052))+(((-1.0)*x1085))+((x1045*x1050))+((x1045*x1056))+((x1033*x1047)));
op[7]=(((x1040*x1048))+((x1040*x1044))+((x1041*x1045))+(((-1.0)*x1029*x1041))+(((-1.0)*x1029*x1061))+((x1045*x1061))+(((-1.0)*x1086))+(((-1.0)*x1035*x1061))+(((-1.0)*x1047*x1048)));
op[8]=((((-1.0)*x1029*x1047))+(((-1.0)*x1040*x1045))+((x1029*x1040))+((x1045*x1047))+(((-1.0)*x1078)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1088=((1.0)*sj1);
IkReal x1089=(gconst13*r20);
IkReal x1090=(gconst14*r21);
IkReal x1091=((1.0)*cj1);
IkReal x1092=(r22*sj4);
IkReal x1093=(cj4*gconst13*r21);
IkReal x1094=(cj4*gconst14*r20);
if( IKabs(((((-1.0)*x1091*x1093))+(((-1.0)*x1091*x1092))+((cj1*x1094))+(((-1.0)*x1088*x1090))+(((-1.0)*x1088*x1089)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1090))+(((-1.0)*x1088*x1092))+(((-1.0)*x1088*x1093))+((sj1*x1094))+((cj1*x1089)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1091*x1093))+(((-1.0)*x1091*x1092))+((cj1*x1094))+(((-1.0)*x1088*x1090))+(((-1.0)*x1088*x1089))))+IKsqr((((cj1*x1090))+(((-1.0)*x1088*x1092))+(((-1.0)*x1088*x1093))+((sj1*x1094))+((cj1*x1089))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1091*x1093))+(((-1.0)*x1091*x1092))+((cj1*x1094))+(((-1.0)*x1088*x1090))+(((-1.0)*x1088*x1089))), (((cj1*x1090))+(((-1.0)*x1088*x1092))+(((-1.0)*x1088*x1093))+((sj1*x1094))+((cj1*x1089))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1095=IKcos(j2);
IkReal x1096=IKsin(j2);
IkReal x1097=(cj0*r10);
IkReal x1098=((3.5e-7)*gconst14);
IkReal x1099=((1.0)*gconst13);
IkReal x1100=(r01*sj0);
IkReal x1101=((3.5e-7)*gconst13);
IkReal x1102=((1.0)*sj0);
IkReal x1103=(r00*sj0);
IkReal x1104=(cj0*r11);
IkReal x1105=((0.0008)*gconst14);
IkReal x1106=(cj4*gconst14);
IkReal x1107=((0.02349986)*sj1);
IkReal x1108=((0.0008)*gconst13);
IkReal x1109=(cj1*x1095);
IkReal x1110=((0.16085006)*x1096);
IkReal x1111=(sj1*x1096);
IkReal x1112=(cj1*x1096);
IkReal x1113=(sj1*x1095);
IkReal x1114=((1.0)*x1113);
IkReal x1115=((1.0)*x1112);
IkReal x1116=(x1115+x1114);
evalcond[0]=(((gconst14*r21))+x1111+((gconst13*r20))+(((-1.0)*x1109)));
evalcond[1]=(((r20*x1106))+(((-1.0)*cj4*r21*x1099))+(((-1.0)*r22*sj4))+(((-1.0)*x1116)));
evalcond[2]=(((gconst14*x1100))+(((-1.0)*x1097*x1099))+((gconst13*x1103))+(((-1.0)*gconst14*x1104))+(((-1.0)*x1116)));
evalcond[3]=(x1109+((cj4*gconst13*x1104))+(((-1.0)*x1111))+((cj0*r12*sj4))+(((-1.0)*x1097*x1106))+(((-1.0)*cj4*x1099*x1100))+((x1103*x1106))+(((-1.0)*r02*sj4*x1102)));
evalcond[4]=((((0.16)*cj1))+(((0.16085006)*x1113))+(((-1.0)*r21*x1105))+(((-1.0)*r21*x1101))+(((0.02349986)*x1109))+((cj1*x1110))+(((-1.0)*r20*x1108))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-1.0)*x1096*x1107))+((r20*x1098)));
evalcond[5]=((((-1.0)*x1103*x1108))+((x1098*x1103))+(((-1.0)*px*x1102))+((x1097*x1108))+(((-1.0)*x1097*x1098))+(((0.02349986)*x1112))+((x1101*x1104))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((x1104*x1105))+(((-0.16085006)*x1109))+(((-1.0)*x1100*x1101))+(((-1.0)*x1100*x1105))+((sj1*x1110))+((cj0*py))+((x1095*x1107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1117=(cj4*gconst14);
IkReal x1118=(cj4*gconst13);
CheckValue<IkReal> x1119 = IKatan2WithCheck(IkReal((((r00*x1117))+(((-1.0)*r02*sj4))+(((-1.0)*r01*x1118)))),IkReal(((((-1.0)*r10*x1117))+((r12*sj4))+((r11*x1118)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1119.valid){
continue;
}
CheckValue<IkReal> x1120=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x1120.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1119.value)+(((1.5707963267949)*(x1120.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1121=IKsin(j0);
IkReal x1122=IKcos(j0);
IkReal x1123=(gconst14*r10);
IkReal x1124=((1.0)*gconst13);
IkReal x1125=(r00*sj4);
IkReal x1126=((3.5e-7)*gconst13);
IkReal x1127=((1.0)*sj4);
IkReal x1128=((1.0)*r12);
IkReal x1129=(cj4*x1121);
IkReal x1130=(r01*x1122);
IkReal x1131=(gconst14*x1121);
IkReal x1132=(r02*x1122);
IkReal x1133=(sj4*x1121);
IkReal x1134=(gconst13*x1122);
IkReal x1135=(gconst14*x1122);
IkReal x1136=(gconst13*r10*x1121);
evalcond[0]=(x1136+((r00*x1134))+((gconst14*x1130))+((r11*x1131)));
evalcond[1]=((-1.0)+((x1125*x1135))+((cj4*x1132))+(((-1.0)*r11*x1124*x1133))+((x1123*x1133))+((r12*x1129))+(((-1.0)*sj4*x1124*x1130)));
evalcond[2]=(((x1125*x1131))+(((-1.0)*cj4*x1122*x1128))+((r11*sj4*x1134))+(((-1.0)*r01*x1124*x1133))+(((-1.0)*x1122*x1123*x1127))+((r02*x1129)));
evalcond[3]=((((-1.0)*x1127*x1132))+((cj4*r00*x1135))+(((-1.0)*r12*x1121*x1127))+(((-1.0)*cj4*x1124*x1130))+(((-1.0)*r11*x1124*x1129))+((x1123*x1129)));
evalcond[4]=((((-1.0)*r11*x1121*x1126))+(((-1.0)*px*x1122))+(((-1.0)*x1126*x1130))+(((-1.0)*py*x1121))+(((-0.0008)*x1136))+(((-0.0008)*gconst14*x1130))+(((3.5e-7)*r00*x1135))+(((3.5e-7)*x1121*x1123))+(((-0.0008)*r11*x1131))+(((-0.0008)*r00*x1134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1137=(gconst14*r21);
IkReal x1138=(gconst13*r20);
IkReal x1139=((-1.0)*r20);
IkReal x1140=(x1138+x1137);
IkReal x1141=((-1.0)+x1140);
IkReal x1142=((1.0)+x1140);
IkReal x1143=x797;
CheckValue<IkReal> x1146 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1139),IKFAST_ATAN2_MAGTHRESH);
if(!x1146.valid){
continue;
}
IkReal x1144=((-1.0)*(x1146.value));
IkReal x1145=(((cj4*gconst14*r20))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*gconst13*r21)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst13;
cj5=gconst14;
j5=x1144;
IkReal gconst12=x1144;
IkReal gconst13=(r21*x1143);
IkReal gconst14=(x1139*x1143);
IkReal gconst18=x1141;
IkReal gconst19=x1142;
IkReal gconst20=x1145;
IkReal gconst21=x1145;
IkReal gconst22=x1141;
IkReal gconst23=x1142;
IkReal gconst24=x1145;
IkReal gconst25=x1145;
IkReal gconst26=x1142;
IkReal gconst27=x1141;
IkReal gconst28=x1145;
IkReal gconst29=x1145;
IkReal gconst30=x1142;
IkReal gconst31=x1141;
IkReal gconst32=x1145;
IkReal gconst33=x1145;
IkReal x1147=cj4*cj4;
IkReal x1148=r21*r21;
IkReal x1149=gconst13*gconst13;
IkReal x1150=gconst14*gconst14;
IkReal x1151=r20*r20;
IkReal x1152=r22*r22;
IkReal x1153=sj4*sj4;
IkReal x1154=(gconst13*r21);
IkReal x1155=(gconst14*r20);
IkReal x1156=((16.0)*x1150);
IkReal x1157=((24.0)*x1150);
IkReal x1158=((4.0)*x1150);
IkReal x1159=((32.0)*cj4*r22*sj4);
IkReal x1160=((48.0)*cj4*r22*sj4);
IkReal x1161=(x1152*x1153);
IkReal x1162=(x1147*x1151);
IkReal x1163=(x1149*x1151);
IkReal x1164=((8.0)*cj4*r22*sj4);
IkReal x1165=(x1147*x1148*x1149);
j1eval[0]=((((0.5)*(IKabs(((4.0)+(((-1.0)*x1158*x1162))+((x1155*x1164))+(((-8.0)*x1154*x1155))+(((-4.0)*x1163))+(((-4.0)*x1165))+(((-4.0)*x1161))+(((8.0)*x1147*x1154*x1155))+(((-1.0)*x1148*x1158))+(((-1.0)*x1154*x1164)))))))+(IKabs(((16.0)+(((-1.0)*x1156*x1162))+(((-1.0)*x1154*x1159))+(((32.0)*x1147*x1154*x1155))+(((-16.0)*x1161))+(((-16.0)*x1165))+(((-16.0)*x1163))+(((-32.0)*x1154*x1155))+(((-1.0)*x1148*x1156))+((x1155*x1159)))))+(((0.5)*(IKabs(((24.0)+((x1155*x1160))+(((48.0)*x1147*x1154*x1155))+(((-48.0)*x1154*x1155))+(((-1.0)*x1148*x1157))+(((-24.0)*x1165))+(((-24.0)*x1161))+(((-24.0)*x1163))+(((-1.0)*x1157*x1162))+(((-1.0)*x1154*x1160))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x1166=((16.0)*gconst27);
IkReal x1167=((16.0)*gconst30);
IkReal x1168=((16.0)*gconst19);
IkReal x1169=((16.0)*gconst22);
IkReal x1170=(gconst27*gconst28);
IkReal x1171=(gconst22*gconst25);
IkReal x1172=(gconst29*gconst30);
IkReal x1173=(gconst18*gconst25);
IkReal x1174=((2.0)*gconst26);
IkReal x1175=(gconst23*gconst32);
IkReal x1176=(gconst26*gconst29);
IkReal x1177=(gconst21*gconst22);
IkReal x1178=((2.0)*gconst30);
IkReal x1179=((16.0)*gconst29);
IkReal x1180=(gconst19*gconst28);
IkReal x1181=(gconst22*gconst33);
IkReal x1182=(gconst19*gconst20);
IkReal x1183=((2.0)*gconst19);
IkReal x1184=((4.0)*gconst26);
IkReal x1185=(gconst27*gconst31);
IkReal x1186=((2.0)*gconst22);
IkReal x1187=(gconst23*gconst24);
IkReal x1188=((8.0)*gconst32);
IkReal x1189=(gconst18*gconst21);
IkReal x1190=((2.0)*gconst23);
IkReal x1191=((2.0)*gconst31);
IkReal x1192=(gconst18*gconst29);
IkReal x1193=(gconst30*gconst33);
IkReal x1194=(gconst24*gconst31);
IkReal x1195=(gconst25*gconst27);
IkReal x1196=((1.0)*gconst33);
IkReal x1197=((1.0)*gconst20);
IkReal x1198=(gconst21*gconst26);
IkReal x1199=(gconst21*gconst30);
IkReal x1200=((4.0)*gconst27);
IkReal x1201=(gconst20*gconst27);
IkReal x1202=(gconst31*gconst32);
IkReal x1203=((2.0)*gconst18);
IkReal x1204=((16.0)*gconst21);
IkReal x1205=(gconst25*gconst30);
IkReal x1206=((2.0)*gconst27);
IkReal x1207=((4.0)*gconst18);
IkReal x1208=((8.0)*gconst24);
IkReal x1209=((4.0)*gconst19);
IkReal x1210=(gconst22*gconst29);
IkReal x1211=(gconst30*x1200);
IkReal x1212=((8.0)*x1172);
IkReal x1213=(gconst27*x1188);
IkReal x1214=(gconst30*x1209);
IkReal x1215=(gconst22*x1200);
IkReal x1216=(gconst27*x1208);
IkReal x1217=((8.0)*x1199);
IkReal x1218=(gconst19*x1188);
IkReal x1219=((8.0)*x1210);
IkReal x1220=(gconst22*x1209);
IkReal x1221=(gconst19*x1208);
IkReal x1222=((8.0)*x1177);
IkReal x1223=((1.0)*x1202);
IkReal x1224=(x1167+x1211);
IkReal x1225=(x1168+x1220);
IkReal x1226=(x1212+x1213);
IkReal x1227=(x1214+x1215);
IkReal x1228=(x1222+x1221);
IkReal x1229=(x1216+x1217+x1218+x1219);
op[0]=((((-1.0)*gconst26*x1172*x1196))+((x1176*x1202))+(((-1.0)*x1170*x1223))+((x1170*x1193))+(((-1.0)*x1211)));
op[1]=(((x1174*x1202))+x1226+(((2.0)*gconst32*x1185))+(((-1.0)*x1172*x1174))+(((-1.0)*gconst27*gconst33*x1178))+(((-1.0)*gconst29*gconst31*x1174))+((x1170*x1191))+(((-1.0)*x1174*x1193))+((x1170*x1178)));
op[2]=((((-1.0)*x1170*x1194))+(((-1.0)*gconst32*x1179))+x1224+(((-1.0)*x1170*x1175))+((x1180*x1193))+(((-1.0)*x1227))+(((-1.0)*gconst30*x1184))+((x1170*x1205))+((x1192*x1202))+(((-1.0)*gconst18*x1172*x1196))+(((-1.0)*gconst25*gconst26*x1172))+(((-1.0)*x1193*x1198))+((x1193*x1201))+(((-1.0)*x1180*x1223))+((x1176*x1194))+((x1175*x1176))+(((-4.0)*x1185))+((x1170*x1181))+(((-1.0)*x1176*x1181))+(((-1.0)*x1166))+(((-1.0)*gconst32*x1185*x1197))+((x1198*x1202))+(((-1.0)*gconst31*x1184)));
op[3]=((((-1.0)*x1174*x1210))+x1229+(((-1.0)*x1191*x1192))+((x1178*x1180))+(((-1.0)*x1181*x1206))+((x1180*x1191))+(((-1.0)*x1226))+((x1174*x1175))+(((32.0)*gconst29))+((x1183*x1202))+((x1174*x1194))+(((-1.0)*gconst18*gconst33*x1178))+((x1175*x1206))+(((-1.0)*x1172*x1203))+(((-1.0)*x1178*x1195))+((x1170*x1190))+(((-1.0)*gconst19*gconst33*x1178))+(((-1.0)*x1174*x1205))+(((-1.0)*gconst21*gconst31*x1174))+((x1170*x1186))+(((-32.0)*gconst32))+(((-1.0)*gconst23*gconst29*x1174))+(((-1.0)*x1174*x1199))+(((2.0)*gconst24*x1185))+(((2.0)*gconst20*x1185))+((gconst18*gconst32*x1191))+(((-1.0)*x1174*x1181))+((x1178*x1201)));
op[4]=((64.0)+(((-1.0)*x1181*x1192))+x1166+x1169+x1227+(((-1.0)*x1172*x1173))+((x1189*x1202))+(((-1.0)*x1224))+(((-1.0)*x1225))+((x1182*x1193))+((x1180*x1205))+((x1194*x1198))+((x1180*x1181))+(((-1.0)*gconst23*x1200))+(((-1.0)*x1180*x1194))+((x1176*x1187))+(((-1.0)*gconst24*x1185*x1197))+(((-1.0)*gconst24*x1179))+(((-1.0)*gconst23*x1184))+(((-1.0)*x1182*x1223))+((x1175*x1198))+((x1175*x1192))+((x1181*x1201))+((x1192*x1194))+(((-1.0)*gconst32*x1204))+((gconst20*gconst30*x1195))+(((-1.0)*gconst31*x1209))+(((-1.0)*gconst31*x1207))+(((-1.0)*gconst27*x1175*x1197))+(((-1.0)*gconst30*x1207))+(((-1.0)*x1171*x1176))+(((-1.0)*x1175*x1180))+(((-1.0)*gconst26*x1177*x1196))+(((-1.0)*x1189*x1193))+((x1170*x1171))+(((-1.0)*gconst22*x1184))+(((-1.0)*x1198*x1205))+(((-1.0)*x1170*x1187)));
op[5]=((((-1.0)*x1181*x1183))+x1228+(((-1.0)*x1173*x1178))+(((-1.0)*x1171*x1206))+(((-1.0)*x1189*x1191))+(((-1.0)*x1190*x1192))+((x1178*x1182))+((x1186*x1201))+(((-1.0)*x1181*x1203))+((x1180*x1190))+(((-1.0)*x1229))+(((32.0)*gconst21))+((x1182*x1191))+((x1183*x1194))+((x1180*x1186))+((x1174*x1187))+((x1175*x1183))+((x1175*x1203))+(((-1.0)*x1178*x1189))+((x1190*x1201))+(((-1.0)*x1186*x1192))+(((-1.0)*x1171*x1174))+((gconst18*gconst24*x1191))+(((-32.0)*gconst24))+(((-1.0)*gconst19*gconst25*x1178))+(((-1.0)*gconst21*gconst23*x1174))+((x1187*x1206))+(((-1.0)*x1174*x1177)));
op[6]=((((-1.0)*gconst18*x1177*x1196))+x1225+(((-1.0)*x1171*x1198))+(((-1.0)*x1171*x1192))+(((-1.0)*gconst22*x1207))+((x1187*x1192))+((x1187*x1198))+(((-1.0)*gconst27*x1187*x1197))+(((-1.0)*x1227))+(((-1.0)*gconst23*x1209))+(((-1.0)*gconst23*x1207))+((x1182*x1205))+(((-1.0)*gconst24*x1204))+((x1175*x1189))+((x1171*x1201))+(((-1.0)*x1173*x1199))+((x1189*x1194))+(((-1.0)*x1182*x1194))+(((-1.0)*x1180*x1187))+((x1171*x1180))+((x1181*x1182))+(((-1.0)*x1169))+(((-1.0)*x1175*x1182)));
op[7]=((((-1.0)*x1171*x1183))+(((-1.0)*x1171*x1203))+(((-1.0)*x1189*x1190))+((x1183*x1187))+((x1182*x1186))+(((-1.0)*x1228))+((x1182*x1190))+(((-1.0)*x1177*x1203))+((x1187*x1203)));
op[8]=(((x1187*x1189))+(((-1.0)*x1171*x1189))+(((-1.0)*x1220))+(((-1.0)*x1182*x1187))+((x1171*x1182)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1230=((1.0)*sj1);
IkReal x1231=(gconst13*r20);
IkReal x1232=(gconst14*r21);
IkReal x1233=((1.0)*cj1);
IkReal x1234=(r22*sj4);
IkReal x1235=(cj4*gconst13*r21);
IkReal x1236=(cj4*gconst14*r20);
if( IKabs(((((-1.0)*x1230*x1231))+(((-1.0)*x1230*x1232))+(((-1.0)*x1233*x1235))+(((-1.0)*x1233*x1234))+((cj1*x1236)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1236))+(((-1.0)*x1230*x1234))+(((-1.0)*x1230*x1235))+((cj1*x1231))+((cj1*x1232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1230*x1231))+(((-1.0)*x1230*x1232))+(((-1.0)*x1233*x1235))+(((-1.0)*x1233*x1234))+((cj1*x1236))))+IKsqr((((sj1*x1236))+(((-1.0)*x1230*x1234))+(((-1.0)*x1230*x1235))+((cj1*x1231))+((cj1*x1232))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1230*x1231))+(((-1.0)*x1230*x1232))+(((-1.0)*x1233*x1235))+(((-1.0)*x1233*x1234))+((cj1*x1236))), (((sj1*x1236))+(((-1.0)*x1230*x1234))+(((-1.0)*x1230*x1235))+((cj1*x1231))+((cj1*x1232))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1237=IKcos(j2);
IkReal x1238=IKsin(j2);
IkReal x1239=(cj0*r10);
IkReal x1240=((3.5e-7)*gconst14);
IkReal x1241=((1.0)*gconst13);
IkReal x1242=(r01*sj0);
IkReal x1243=((3.5e-7)*gconst13);
IkReal x1244=((1.0)*sj0);
IkReal x1245=(r00*sj0);
IkReal x1246=(cj0*r11);
IkReal x1247=((0.0008)*gconst14);
IkReal x1248=(cj4*gconst14);
IkReal x1249=((0.02349986)*sj1);
IkReal x1250=((0.0008)*gconst13);
IkReal x1251=(cj1*x1237);
IkReal x1252=((0.16085006)*x1238);
IkReal x1253=(sj1*x1238);
IkReal x1254=(cj1*x1238);
IkReal x1255=(sj1*x1237);
IkReal x1256=((1.0)*x1255);
IkReal x1257=((1.0)*x1254);
IkReal x1258=(x1256+x1257);
evalcond[0]=(((gconst14*r21))+x1253+((gconst13*r20))+(((-1.0)*x1251)));
evalcond[1]=((((-1.0)*x1258))+(((-1.0)*cj4*r21*x1241))+((r20*x1248))+(((-1.0)*r22*sj4)));
evalcond[2]=(((gconst13*x1245))+(((-1.0)*x1258))+(((-1.0)*x1239*x1241))+((gconst14*x1242))+(((-1.0)*gconst14*x1246)));
evalcond[3]=(x1251+(((-1.0)*x1239*x1248))+((cj0*r12*sj4))+(((-1.0)*r02*sj4*x1244))+((cj4*gconst13*x1246))+((x1245*x1248))+(((-1.0)*x1253))+(((-1.0)*cj4*x1241*x1242)));
evalcond[4]=((((-1.0)*r20*x1250))+(((0.16)*cj1))+((r20*x1240))+(((-1.0)*r21*x1243))+(((-1.0)*r21*x1247))+(((-1.0)*pz))+(((0.16085006)*x1255))+(((-1.0)*x1238*x1249))+(((7.7e-7)*sj1))+((cj1*x1252))+(((0.02349986)*x1251)));
evalcond[5]=((((-1.0)*px*x1244))+(((-1.0)*x1239*x1240))+((x1240*x1245))+((sj1*x1252))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*x1242*x1243))+(((-1.0)*x1242*x1247))+(((-1.0)*x1245*x1250))+((x1246*x1247))+((x1239*x1250))+((x1243*x1246))+(((0.02349986)*x1254))+((cj0*py))+(((-0.16085006)*x1251))+((x1237*x1249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1259=((-1.0)*r21);
IkReal x1261 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1261)==0){
continue;
}
IkReal x1260=pow(x1261,-0.5);
CheckValue<IkReal> x1262 = IKatan2WithCheck(IkReal(x1259),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1262.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x1262.value))));
IkReal gconst16=(x1259*x1260);
IkReal gconst17=((1.0)*r20*x1260);
CheckValue<IkReal> x1263 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1263.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1263.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x1264=((-1.0)*r21);
CheckValue<IkReal> x1267 = IKatan2WithCheck(IkReal(x1264),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1267.valid){
continue;
}
IkReal x1265=((1.0)*(x1267.value));
IkReal x1266=x1260;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1265)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1265)));
IkReal gconst16=(x1264*x1266);
IkReal gconst17=((1.0)*r20*x1266);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x1268=((-1.0)*r21);
CheckValue<IkReal> x1271 = IKatan2WithCheck(IkReal(x1268),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1271.valid){
continue;
}
IkReal x1269=((1.0)*(x1271.value));
IkReal x1270=x1260;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1269)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1269)));
IkReal gconst16=(x1268*x1270);
IkReal gconst17=((1.0)*r20*x1270);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1272=((-1.0)*r21);
CheckValue<IkReal> x1275 = IKatan2WithCheck(IkReal(x1272),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1275.valid){
continue;
}
IkReal x1273=((1.0)*(x1275.value));
IkReal x1274=x1260;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1273)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1273)));
IkReal gconst16=(x1272*x1274);
IkReal gconst17=((1.0)*r20*x1274);
IkReal x1276=r20*r20;
IkReal x1277=r21*r21;
IkReal x1278=(r20*rxp0_2);
IkReal x1279=(cj4*rxp2_2);
IkReal x1280=(r21*rxp1_2);
IkReal x1281=((1.0)+(((-1.0)*(r22*r22))));
IkReal x1282=((2285.71428571429)*x1276);
IkReal x1283=((0.0008)*x1276);
CheckValue<IkReal> x1292=IKPowWithIntegerCheck(x1281,-1);
if(!x1292.valid){
continue;
}
IkReal x1284=x1292.value;
IkReal x1285=(r22*sj4*x1284);
IkReal x1286=((0.0008)*x1285);
IkReal x1287=x1260;
IkReal x1288=(sj4*x1287);
IkReal x1289=(cj4*x1287);
IkReal x1290=(x1277*x1285);
IkReal x1291=(x1277*x1289);
j0eval[0]=((((2285.71428571429)*x1290))+(((-2285.71428571429)*x1291))+(((2857142.85714286)*x1280*x1288))+(((2857142.85714286)*x1279))+(((2857142.85714286)*x1278*x1288))+((x1282*x1285))+(((-1.0)*x1282*x1289)));
j0eval[1]=IKsign((x1279+(((1.0)*x1280*x1288))+((x1283*x1285))+((x1277*x1286))+(((1.0)*x1278*x1288))+(((-0.0008)*x1291))+(((-1.0)*x1283*x1289))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1293=((3.5e-7)*cj4);
IkReal x1294=((0.0008)*sj4);
IkReal x1295=((3.5e-7)*gconst16);
IkReal x1296=((0.0008)*gconst17);
IkReal x1297=((0.0008)*gconst16);
IkReal x1298=((3.5e-7)*gconst17);
CheckValue<IkReal> x1299 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x1296))+(((-1.0)*r01*x1295))+(((-1.0)*r00*x1297))+(((-1.0)*px))+((r00*x1298)))),IkReal((py+((r11*x1296))+((r11*x1295))+((r10*x1297))+(((-1.0)*r10*x1298)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1299.valid){
continue;
}
CheckValue<IkReal> x1300=IKPowWithIntegerCheck(IKsign((((r22*((((x1294*(gconst16*gconst16)))+((x1294*(gconst17*gconst17)))))))+((cj4*rxp2_2))+((gconst17*rxp0_2*sj4))+((r21*(((((-1.0)*gconst17*x1293))+((cj4*x1297))))))+((r20*(((((-1.0)*cj4*x1296))+(((-1.0)*gconst16*x1293))))))+(((-1.0)*gconst16*rxp1_2*sj4)))),-1);
if(!x1300.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1299.value)+(((1.5707963267949)*(x1300.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1301=IKcos(j0);
IkReal x1302=IKsin(j0);
IkReal x1303=((1.0)*cj4);
IkReal x1304=((1.0)*sj4);
IkReal x1305=(gconst16*r10);
IkReal x1306=(gconst17*r11);
IkReal x1307=(gconst17*r10);
IkReal x1308=(r12*x1302);
IkReal x1309=(gconst16*x1301);
IkReal x1310=((1.0)*x1301);
IkReal x1311=((0.0008)*x1302);
IkReal x1312=(sj4*x1307);
IkReal x1313=(gconst17*r00*sj4);
IkReal x1314=(cj4*x1302);
IkReal x1315=(gconst17*x1301);
IkReal x1316=(gconst16*r11*x1302);
evalcond[0]=(((r01*x1315))+((x1302*x1305))+((x1302*x1306))+((r00*x1309)));
evalcond[1]=((-1.0)+(((-1.0)*x1304*x1316))+((cj4*r02*x1301))+((cj4*x1308))+((x1302*x1312))+(((-1.0)*r01*x1304*x1309))+((x1301*x1313)));
evalcond[2]=((((-1.0)*x1301*x1304*x1307))+(((-1.0)*r12*x1301*x1303))+(((-1.0)*gconst16*r01*x1302*x1304))+((x1302*x1313))+((r11*sj4*x1309))+((r02*x1314)));
evalcond[3]=((((-1.0)*r01*x1303*x1309))+((x1307*x1314))+(((-1.0)*r02*x1301*x1304))+((cj4*r00*x1315))+(((-1.0)*x1303*x1316))+(((-1.0)*x1304*x1308)));
evalcond[4]=((((-3.5e-7)*r01*x1309))+(((-1.0)*py*x1302))+(((-1.0)*x1306*x1311))+(((-3.5e-7)*x1316))+(((-1.0)*x1305*x1311))+(((3.5e-7)*x1302*x1307))+(((-0.0008)*r00*x1309))+(((-1.0)*px*x1310))+(((3.5e-7)*r00*x1315))+(((-0.0008)*r01*x1315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1317=((-1.0)*r21);
CheckValue<IkReal> x1320 = IKatan2WithCheck(IkReal(x1317),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1320.valid){
continue;
}
IkReal x1318=((1.0)*(x1320.value));
IkReal x1319=x1260;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1318)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1318)));
IkReal gconst16=(x1317*x1319);
IkReal gconst17=((1.0)*r20*x1319);
IkReal x1321=(gconst17*r20);
IkReal x1322=((1.93020072)*cj4);
IkReal x1323=((0.64340024)*cj4);
IkReal x1324=((2.25190084e-7)*gconst17);
IkReal x1325=(r00*sj0);
IkReal x1326=(gconst16*r20);
IkReal x1327=(gconst16*r21);
IkReal x1328=(gconst17*r21);
IkReal x1329=(cj0*r10);
IkReal x1330=((6.75570252e-7)*gconst17);
IkReal x1331=(r22*sj4);
IkReal x1332=((0.001544160576)*gconst16);
IkReal x1333=((6.75570252e-7)*gconst16);
IkReal x1334=(cj0*r11);
IkReal x1335=(r01*sj0);
IkReal x1336=((2.25190084e-7)*gconst16);
IkReal x1337=(cj0*py);
IkReal x1338=(px*sj0);
IkReal x1339=((0.000514720192)*gconst16);
IkReal x1340=((9.8699412e-8)*x1321);
IkReal x1341=((0.316874224008278)*x1328);
IkReal x1342=((0.316874224008278)*x1326);
IkReal x1343=((1.93020072)*x1338);
IkReal x1344=((4.2e-6)*x1321);
IkReal x1345=((0.27239832)*x1328);
IkReal x1346=((0.27239832)*x1326);
IkReal x1347=(gconst17*x1334);
IkReal x1348=((0.001544160576)*gconst17*x1335);
IkReal x1349=(x1325*x1332);
IkReal x1350=(x1329*x1330);
IkReal x1351=(x1333*x1335);
IkReal x1352=(x1321*x1322);
IkReal x1353=((((12.0)*pz))+(((1.93020072)*x1331))+((x1322*x1327))+(((4.2e-6)*x1327)));
IkReal x1354=(x1344+x1345+x1346+x1352);
IkReal x1355=(((x1329*x1332))+(((1.93020072)*x1337))+((x1325*x1330))+(((0.001544160576)*x1347))+(((0.28199832)*pz))+((x1333*x1334))+(((9.8699412e-8)*x1327)));
IkReal x1356=(x1348+x1349+x1340+x1341+x1342+x1343+x1351+x1350);
j1eval[0]=((1.0)+(((1.21421648150246)*(IKabs(((-0.0150404058181848)+(((3.2899804e-8)*x1321))+(((0.64340024)*x1338))+(((0.105624741336093)*x1326))+(((0.105624741336093)*x1328))+(((-1.0)*x1324*x1325))+(((-3.2899804e-8)*x1327))+(((-1.0)*x1334*x1336))+((x1335*x1336))+(((0.000514720192)*gconst17*x1335))+(((-0.64340024)*x1337))+(((-0.000514720192)*x1347))+((x1324*x1329))+((x1325*x1339))+(((-1.0)*x1329*x1339))+(((-0.09399944)*pz)))))))+(((1.21421648150246)*(IKabs(((-0.64)+(((0.09079944)*x1326))+(((0.09079944)*x1328))+(((-1.0)*x1323*x1327))+(((-1.4e-6)*x1327))+(((-0.64340024)*x1331))+(((1.4e-6)*x1321))+((x1321*x1323))+(((-4.0)*pz)))))))+(((1.21421648150246)*(IKabs(((-0.0150404058181848)+x1356+(((-1.0)*x1355)))))))+(((1.21421648150246)*(IKabs(((0.64)+x1354+(((-1.0)*x1353)))))))+(((1.21421648150246)*(IKabs(((-0.64)+x1354+(((-1.0)*x1353)))))))+(((1.21421648150246)*(IKabs(((0.0150404058181848)+x1356+(((-1.0)*x1355))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1357=(gconst16*r21);
IkReal x1358=(r22*sj4);
IkReal x1359=(gconst17*r20);
IkReal x1360=(gconst16*r20);
IkReal x1361=(gconst17*r21);
IkReal x1362=((4.2e-6)*x1359);
IkReal x1363=((0.27239832)*x1361);
IkReal x1364=((0.27239832)*x1360);
IkReal x1365=((1.4e-6)*x1359);
IkReal x1366=((0.09079944)*x1360);
IkReal x1367=((0.09079944)*x1361);
IkReal x1368=(cj4*x1359);
IkReal x1369=((1.93020072)*x1368);
IkReal x1370=((0.64340024)*x1368);
IkReal x1371=((((4.2e-6)*x1357))+(((12.0)*pz))+(((1.93020072)*x1358))+(((1.93020072)*cj4*x1357)));
IkReal x1372=((((0.64340024)*cj4*x1357))+(((4.0)*pz))+(((0.64340024)*x1358))+(((1.4e-6)*x1357)));
IkReal x1373=(x1366+x1367+x1365+x1370);
IkReal x1374=(x1364+x1362+x1363+x1369);
op[0]=((-0.64)+x1373+(((-1.0)*x1372)));
op[1]=6.16e-6;
op[2]=((-0.64)+x1374+(((-1.0)*x1371)));
op[3]=1.232e-5;
op[4]=((0.64)+x1374+(((-1.0)*x1371)));
op[5]=6.16e-6;
op[6]=((0.64)+x1373+(((-1.0)*x1372)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1375=((0.09399944)*pz);
IkReal x1376=(gconst17*r20);
IkReal x1377=(r00*sj0);
IkReal x1378=((2.25190084e-7)*gconst17);
IkReal x1379=((0.000514720192)*gconst16);
IkReal x1380=(px*sj0);
IkReal x1381=(gconst17*r21);
IkReal x1382=(cj0*r10);
IkReal x1383=((6.75570252e-7)*gconst17);
IkReal x1384=(gconst16*r20);
IkReal x1385=((0.001544160576)*gconst16);
IkReal x1386=((6.75570252e-7)*gconst16);
IkReal x1387=(cj0*r11);
IkReal x1388=(r01*sj0);
IkReal x1389=((2.25190084e-7)*gconst16);
IkReal x1390=(cj0*py);
IkReal x1391=(gconst16*r21);
IkReal x1392=((0.105624741336093)*x1384);
IkReal x1393=((0.105624741336093)*x1381);
IkReal x1394=((3.2899804e-8)*x1376);
IkReal x1395=((0.64340024)*x1380);
IkReal x1396=((9.8699412e-8)*x1376);
IkReal x1397=((0.316874224008278)*x1381);
IkReal x1398=((0.316874224008278)*x1384);
IkReal x1399=((1.93020072)*x1380);
IkReal x1400=((0.64340024)*x1390);
IkReal x1401=((3.2899804e-8)*x1391);
IkReal x1402=(gconst17*x1387);
IkReal x1403=(x1378*x1382);
IkReal x1404=(x1377*x1379);
IkReal x1405=((0.000514720192)*gconst17*x1388);
IkReal x1406=(x1388*x1389);
IkReal x1407=((0.001544160576)*gconst17*x1388);
IkReal x1408=(x1377*x1385);
IkReal x1409=(x1382*x1383);
IkReal x1410=(x1386*x1388);
IkReal x1411=((0.000514720192)*x1402);
IkReal x1412=(x1379*x1382);
IkReal x1413=(x1387*x1389);
IkReal x1414=(x1377*x1378);
IkReal x1415=((((0.001544160576)*x1402))+(((1.93020072)*x1390))+(((0.28199832)*pz))+(((9.8699412e-8)*x1391))+((x1377*x1383))+((x1386*x1387))+((x1382*x1385)));
IkReal x1416=(x1375+x1411+x1412+x1413+x1414+x1401+x1400);
IkReal x1417=(x1395+x1394+x1393+x1392+x1403+x1406+x1405+x1404);
IkReal x1418=(x1399+x1398+x1397+x1396+x1410+x1409+x1408+x1407);
j1evalpoly[0]=((0.0150404058181848)+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x1415))+x1418))))+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((-1.0)*x1416))+(((-0.205887932040862)*htj1))+x1417+(((htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x1415))+x1418))))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x1416))+x1417)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1419=((1.0)*sj1);
IkReal x1420=(gconst16*r20);
IkReal x1421=(r22*sj4);
IkReal x1422=(cj1*cj4);
IkReal x1423=(gconst17*r20);
IkReal x1424=(gconst16*r21);
IkReal x1425=(gconst17*r21);
if( IKabs(((((-1.0)*x1422*x1424))+((x1422*x1423))+(((-1.0)*x1419*x1420))+(((-1.0)*x1419*x1425))+(((-1.0)*cj1*x1421)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1425))+((cj1*x1420))+((cj4*sj1*x1423))+(((-1.0)*x1419*x1421))+(((-1.0)*cj4*x1419*x1424)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1422*x1424))+((x1422*x1423))+(((-1.0)*x1419*x1420))+(((-1.0)*x1419*x1425))+(((-1.0)*cj1*x1421))))+IKsqr((((cj1*x1425))+((cj1*x1420))+((cj4*sj1*x1423))+(((-1.0)*x1419*x1421))+(((-1.0)*cj4*x1419*x1424))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1422*x1424))+((x1422*x1423))+(((-1.0)*x1419*x1420))+(((-1.0)*x1419*x1425))+(((-1.0)*cj1*x1421))), (((cj1*x1425))+((cj1*x1420))+((cj4*sj1*x1423))+(((-1.0)*x1419*x1421))+(((-1.0)*cj4*x1419*x1424))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1426=IKcos(j2);
IkReal x1427=IKsin(j2);
IkReal x1428=(cj0*gconst17);
IkReal x1429=(gconst16*sj0);
IkReal x1430=(gconst16*r20);
IkReal x1431=((1.0)*sj0);
IkReal x1432=(gconst17*sj0);
IkReal x1433=((3.5e-7)*gconst16);
IkReal x1434=(gconst17*r20);
IkReal x1435=(cj0*r11);
IkReal x1436=(cj4*gconst16);
IkReal x1437=((1.0)*cj4);
IkReal x1438=(gconst17*r21);
IkReal x1439=(cj1*x1426);
IkReal x1440=(sj1*x1426);
IkReal x1441=(sj1*x1427);
IkReal x1442=(cj0*gconst16*r10);
IkReal x1443=(cj1*x1427);
IkReal x1444=((1.0)*x1440);
IkReal x1445=((1.0)*x1443);
IkReal x1446=(x1445+x1444);
evalcond[0]=((((-1.0)*x1439))+x1430+x1438+x1441);
evalcond[1]=(((cj4*x1434))+(((-1.0)*r21*x1436))+(((-1.0)*r22*sj4))+(((-1.0)*x1446)));
evalcond[2]=(((r00*x1429))+(((-1.0)*x1442))+(((-1.0)*r11*x1428))+((r01*x1432))+(((-1.0)*x1446)));
evalcond[3]=((((-1.0)*r01*x1429*x1437))+(((-1.0)*r10*x1428*x1437))+(((-1.0)*r02*sj4*x1431))+(((-1.0)*x1441))+((x1435*x1436))+((cj0*r12*sj4))+x1439+((cj4*r00*x1432)));
evalcond[4]=((((-0.02349986)*x1441))+(((0.16)*cj1))+(((-0.0008)*x1430))+(((-0.0008)*x1438))+(((0.02349986)*x1439))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-1.0)*r21*x1433))+(((0.16085006)*x1440))+(((0.16085006)*x1443))+(((3.5e-7)*x1434)));
evalcond[5]=((((0.02349986)*x1440))+(((0.02349986)*x1443))+((x1433*x1435))+(((0.0008)*x1442))+(((3.5e-7)*r00*x1432))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.0008)*r01*x1432))+(((-1.0)*px*x1431))+(((-3.5e-7)*r10*x1428))+(((-3.5e-7)*r01*x1429))+(((0.0008)*r11*x1428))+(((-0.0008)*r00*x1429))+((cj0*py))+(((0.16085006)*x1441))+(((-0.16085006)*x1439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1447=((1.0)*gconst16);
IkReal x1448=((1.0)*sj4);
CheckValue<IkReal> x1449=IKPowWithIntegerCheck(IKsign((((cj4*gconst17*r20))+(((-1.0)*cj4*r21*x1447))+((r22*(((((-1.0)*x1448*(gconst17*gconst17)))+(((-1.0)*gconst16*sj4*x1447)))))))),-1);
if(!x1449.valid){
continue;
}
CheckValue<IkReal> x1450 = IKatan2WithCheck(IkReal((((gconst17*r01))+((gconst16*r00)))),IkReal(((((-1.0)*gconst17*r11))+(((-1.0)*r10*x1447)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1450.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1449.value)))+(x1450.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1451=IKcos(j0);
IkReal x1452=IKsin(j0);
IkReal x1453=((1.0)*cj4);
IkReal x1454=((1.0)*sj4);
IkReal x1455=(gconst16*r10);
IkReal x1456=(gconst17*r11);
IkReal x1457=(gconst17*r10);
IkReal x1458=(r12*x1452);
IkReal x1459=(gconst16*x1451);
IkReal x1460=((1.0)*x1451);
IkReal x1461=((0.0008)*x1452);
IkReal x1462=(sj4*x1457);
IkReal x1463=(gconst17*r00*sj4);
IkReal x1464=(cj4*x1452);
IkReal x1465=(gconst17*x1451);
IkReal x1466=(gconst16*r11*x1452);
evalcond[0]=(((r01*x1465))+((r00*x1459))+((x1452*x1456))+((x1452*x1455)));
evalcond[1]=((-1.0)+((x1452*x1462))+((x1451*x1463))+((cj4*x1458))+(((-1.0)*r01*x1454*x1459))+((cj4*r02*x1451))+(((-1.0)*x1454*x1466)));
evalcond[2]=(((x1452*x1463))+(((-1.0)*gconst16*r01*x1452*x1454))+((r11*sj4*x1459))+(((-1.0)*r12*x1451*x1453))+(((-1.0)*x1451*x1454*x1457))+((r02*x1464)));
evalcond[3]=((((-1.0)*x1453*x1466))+(((-1.0)*x1454*x1458))+((cj4*r00*x1465))+(((-1.0)*r01*x1453*x1459))+((x1457*x1464))+(((-1.0)*r02*x1451*x1454)));
evalcond[4]=((((-3.5e-7)*r01*x1459))+(((-1.0)*x1456*x1461))+(((-0.0008)*r00*x1459))+(((-1.0)*py*x1452))+(((-1.0)*x1455*x1461))+(((3.5e-7)*r00*x1465))+(((3.5e-7)*x1452*x1457))+(((-1.0)*px*x1460))+(((-0.0008)*r01*x1465))+(((-3.5e-7)*x1466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1467=((-1.0)*r21);
CheckValue<IkReal> x1470 = IKatan2WithCheck(IkReal(x1467),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1470.valid){
continue;
}
IkReal x1468=((1.0)*(x1470.value));
IkReal x1469=x1260;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1468)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1468)));
IkReal gconst16=(x1467*x1469);
IkReal gconst17=((1.0)*r20*x1469);
IkReal x1471=(gconst17*r20);
IkReal x1472=((1.93020072)*cj4);
IkReal x1473=((0.64340024)*cj4);
IkReal x1474=((2.25190084e-7)*gconst17);
IkReal x1475=(r00*sj0);
IkReal x1476=(gconst16*r20);
IkReal x1477=(gconst16*r21);
IkReal x1478=(gconst17*r21);
IkReal x1479=(cj0*r10);
IkReal x1480=((6.75570252e-7)*gconst17);
IkReal x1481=(r22*sj4);
IkReal x1482=((0.001544160576)*gconst16);
IkReal x1483=((6.75570252e-7)*gconst16);
IkReal x1484=(cj0*r11);
IkReal x1485=(r01*sj0);
IkReal x1486=((2.25190084e-7)*gconst16);
IkReal x1487=(cj0*py);
IkReal x1488=(px*sj0);
IkReal x1489=((0.000514720192)*gconst16);
IkReal x1490=((9.8699412e-8)*x1471);
IkReal x1491=((0.316874224008278)*x1478);
IkReal x1492=((0.316874224008278)*x1476);
IkReal x1493=((1.93020072)*x1488);
IkReal x1494=((4.2e-6)*x1471);
IkReal x1495=((0.27239832)*x1478);
IkReal x1496=((0.27239832)*x1476);
IkReal x1497=(gconst17*x1484);
IkReal x1498=((0.001544160576)*gconst17*x1485);
IkReal x1499=(x1475*x1482);
IkReal x1500=(x1479*x1480);
IkReal x1501=(x1483*x1485);
IkReal x1502=(x1471*x1472);
IkReal x1503=((((12.0)*pz))+((x1472*x1477))+(((1.93020072)*x1481))+(((4.2e-6)*x1477)));
IkReal x1504=(x1502+x1494+x1495+x1496);
IkReal x1505=((((0.001544160576)*x1497))+(((9.8699412e-8)*x1477))+((x1483*x1484))+(((0.28199832)*pz))+((x1475*x1480))+(((1.93020072)*x1487))+((x1479*x1482)));
IkReal x1506=(x1500+x1501+x1490+x1491+x1492+x1493+x1498+x1499);
j1eval[0]=((1.0)+(((1.21421648150246)*(IKabs(((-0.64)+(((-1.0)*x1503))+x1504)))))+(((1.21421648150246)*(IKabs(((-0.64)+((x1471*x1473))+(((1.4e-6)*x1471))+(((0.09079944)*x1476))+(((0.09079944)*x1478))+(((-4.0)*pz))+(((-1.4e-6)*x1477))+(((-0.64340024)*x1481))+(((-1.0)*x1473*x1477)))))))+(((1.21421648150246)*(IKabs(((-0.0150404058181848)+(((-1.0)*x1479*x1489))+(((0.105624741336093)*x1476))+(((0.105624741336093)*x1478))+((x1474*x1479))+(((-1.0)*x1484*x1486))+(((0.000514720192)*gconst17*x1485))+(((-1.0)*x1474*x1475))+(((-3.2899804e-8)*x1477))+(((0.64340024)*x1488))+((x1485*x1486))+(((-0.000514720192)*x1497))+(((3.2899804e-8)*x1471))+((x1475*x1489))+(((-0.64340024)*x1487))+(((-0.09399944)*pz)))))))+(((1.21421648150246)*(IKabs(((0.0150404058181848)+(((-1.0)*x1505))+x1506)))))+(((1.21421648150246)*(IKabs(((0.64)+(((-1.0)*x1503))+x1504)))))+(((1.21421648150246)*(IKabs(((-0.0150404058181848)+(((-1.0)*x1505))+x1506))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1507=(gconst16*r21);
IkReal x1508=(r22*sj4);
IkReal x1509=(gconst17*r20);
IkReal x1510=(gconst16*r20);
IkReal x1511=(gconst17*r21);
IkReal x1512=((4.2e-6)*x1509);
IkReal x1513=((0.27239832)*x1511);
IkReal x1514=((0.27239832)*x1510);
IkReal x1515=((1.4e-6)*x1509);
IkReal x1516=((0.09079944)*x1510);
IkReal x1517=((0.09079944)*x1511);
IkReal x1518=(cj4*x1509);
IkReal x1519=((1.93020072)*x1518);
IkReal x1520=((0.64340024)*x1518);
IkReal x1521=((((4.2e-6)*x1507))+(((1.93020072)*x1508))+(((12.0)*pz))+(((1.93020072)*cj4*x1507)));
IkReal x1522=((((1.4e-6)*x1507))+(((4.0)*pz))+(((0.64340024)*cj4*x1507))+(((0.64340024)*x1508)));
IkReal x1523=(x1520+x1515+x1517+x1516);
IkReal x1524=(x1519+x1514+x1513+x1512);
op[0]=((-0.64)+(((-1.0)*x1522))+x1523);
op[1]=6.16e-6;
op[2]=((-0.64)+(((-1.0)*x1521))+x1524);
op[3]=1.232e-5;
op[4]=((0.64)+(((-1.0)*x1521))+x1524);
op[5]=6.16e-6;
op[6]=((0.64)+(((-1.0)*x1522))+x1523);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1525=((0.09399944)*pz);
IkReal x1526=(gconst17*r20);
IkReal x1527=(r00*sj0);
IkReal x1528=((2.25190084e-7)*gconst17);
IkReal x1529=((0.000514720192)*gconst16);
IkReal x1530=(px*sj0);
IkReal x1531=(gconst17*r21);
IkReal x1532=(cj0*r10);
IkReal x1533=((6.75570252e-7)*gconst17);
IkReal x1534=(gconst16*r20);
IkReal x1535=((0.001544160576)*gconst16);
IkReal x1536=((6.75570252e-7)*gconst16);
IkReal x1537=(cj0*r11);
IkReal x1538=(r01*sj0);
IkReal x1539=((2.25190084e-7)*gconst16);
IkReal x1540=(cj0*py);
IkReal x1541=(gconst16*r21);
IkReal x1542=((0.105624741336093)*x1534);
IkReal x1543=((0.105624741336093)*x1531);
IkReal x1544=((3.2899804e-8)*x1526);
IkReal x1545=((0.64340024)*x1530);
IkReal x1546=((9.8699412e-8)*x1526);
IkReal x1547=((0.316874224008278)*x1531);
IkReal x1548=((0.316874224008278)*x1534);
IkReal x1549=((1.93020072)*x1530);
IkReal x1550=((0.64340024)*x1540);
IkReal x1551=((3.2899804e-8)*x1541);
IkReal x1552=(gconst17*x1537);
IkReal x1553=(x1528*x1532);
IkReal x1554=(x1527*x1529);
IkReal x1555=((0.000514720192)*gconst17*x1538);
IkReal x1556=(x1538*x1539);
IkReal x1557=((0.001544160576)*gconst17*x1538);
IkReal x1558=(x1527*x1535);
IkReal x1559=(x1532*x1533);
IkReal x1560=(x1536*x1538);
IkReal x1561=((0.000514720192)*x1552);
IkReal x1562=(x1529*x1532);
IkReal x1563=(x1537*x1539);
IkReal x1564=(x1527*x1528);
IkReal x1565=(((x1536*x1537))+((x1532*x1535))+((x1527*x1533))+(((9.8699412e-8)*x1541))+(((0.28199832)*pz))+(((1.93020072)*x1540))+(((0.001544160576)*x1552)));
IkReal x1566=(x1561+x1562+x1563+x1564+x1551+x1550+x1525);
IkReal x1567=(x1544+x1545+x1542+x1543+x1553+x1555+x1554+x1556);
IkReal x1568=(x1560+x1546+x1547+x1548+x1549+x1557+x1559+x1558);
j1evalpoly[0]=((0.0150404058181848)+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((-0.205887932040862)*htj1))+x1567+(((htj1*htj1)*(((0.0150404058181848)+x1568+(((-1.0)*x1565))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x1567+(((-1.0)*x1566))))))+(((-1.0)*x1566))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x1568+(((-1.0)*x1565)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1569=((1.0)*sj1);
IkReal x1570=(gconst16*r20);
IkReal x1571=(r22*sj4);
IkReal x1572=(cj1*cj4);
IkReal x1573=(gconst17*r20);
IkReal x1574=(gconst16*r21);
IkReal x1575=(gconst17*r21);
if( IKabs((((x1572*x1573))+(((-1.0)*x1572*x1574))+(((-1.0)*x1569*x1575))+(((-1.0)*x1569*x1570))+(((-1.0)*cj1*x1571)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1575))+((cj1*x1570))+(((-1.0)*x1569*x1571))+((cj4*sj1*x1573))+(((-1.0)*cj4*x1569*x1574)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1572*x1573))+(((-1.0)*x1572*x1574))+(((-1.0)*x1569*x1575))+(((-1.0)*x1569*x1570))+(((-1.0)*cj1*x1571))))+IKsqr((((cj1*x1575))+((cj1*x1570))+(((-1.0)*x1569*x1571))+((cj4*sj1*x1573))+(((-1.0)*cj4*x1569*x1574))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1572*x1573))+(((-1.0)*x1572*x1574))+(((-1.0)*x1569*x1575))+(((-1.0)*x1569*x1570))+(((-1.0)*cj1*x1571))), (((cj1*x1575))+((cj1*x1570))+(((-1.0)*x1569*x1571))+((cj4*sj1*x1573))+(((-1.0)*cj4*x1569*x1574))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1576=IKcos(j2);
IkReal x1577=IKsin(j2);
IkReal x1578=(cj0*gconst17);
IkReal x1579=(gconst16*sj0);
IkReal x1580=(gconst16*r20);
IkReal x1581=((1.0)*sj0);
IkReal x1582=(gconst17*sj0);
IkReal x1583=((3.5e-7)*gconst16);
IkReal x1584=(gconst17*r20);
IkReal x1585=(cj0*r11);
IkReal x1586=(cj4*gconst16);
IkReal x1587=((1.0)*cj4);
IkReal x1588=(gconst17*r21);
IkReal x1589=(cj1*x1576);
IkReal x1590=(sj1*x1576);
IkReal x1591=(sj1*x1577);
IkReal x1592=(cj0*gconst16*r10);
IkReal x1593=(cj1*x1577);
IkReal x1594=((1.0)*x1590);
IkReal x1595=((1.0)*x1593);
IkReal x1596=(x1595+x1594);
evalcond[0]=(x1588+x1580+x1591+(((-1.0)*x1589)));
evalcond[1]=((((-1.0)*x1596))+((cj4*x1584))+(((-1.0)*r21*x1586))+(((-1.0)*r22*sj4)));
evalcond[2]=((((-1.0)*x1596))+((r01*x1582))+(((-1.0)*x1592))+((r00*x1579))+(((-1.0)*r11*x1578)));
evalcond[3]=(((cj4*r00*x1582))+((cj0*r12*sj4))+x1589+(((-1.0)*r01*x1579*x1587))+(((-1.0)*r02*sj4*x1581))+(((-1.0)*r10*x1578*x1587))+(((-1.0)*x1591))+((x1585*x1586)));
evalcond[4]=((((0.16)*cj1))+(((0.16085006)*x1593))+(((0.16085006)*x1590))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.02349986)*x1589))+(((-1.0)*r21*x1583))+(((-0.02349986)*x1591))+(((-0.0008)*x1580))+(((-0.0008)*x1588))+(((3.5e-7)*x1584)));
evalcond[5]=((((-0.0008)*r00*x1579))+(((0.16085006)*x1591))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.0008)*r01*x1582))+((x1583*x1585))+(((3.5e-7)*r00*x1582))+(((0.0008)*r11*x1578))+(((-3.5e-7)*r10*x1578))+(((-3.5e-7)*r01*x1579))+(((0.02349986)*x1593))+(((0.02349986)*x1590))+(((-0.16085006)*x1589))+((cj0*py))+(((-1.0)*px*x1581))+(((0.0008)*x1592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1597=((1.0)*gconst16);
IkReal x1598=((1.0)*gconst17);
CheckValue<IkReal> x1599=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x1597))+(((-1.0)*r21*x1598)))),-1);
if(!x1599.valid){
continue;
}
CheckValue<IkReal> x1600 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj4))+((cj4*gconst17*r00))+(((-1.0)*cj4*r01*x1597)))),IkReal(((((-1.0)*cj4*r10*x1598))+((r12*sj4))+((cj4*gconst16*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1600.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1599.value)))+(x1600.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1601=IKcos(j0);
IkReal x1602=IKsin(j0);
IkReal x1603=((1.0)*cj4);
IkReal x1604=((1.0)*sj4);
IkReal x1605=(gconst16*r10);
IkReal x1606=(gconst17*r11);
IkReal x1607=(gconst17*r10);
IkReal x1608=(r12*x1602);
IkReal x1609=(gconst16*x1601);
IkReal x1610=((1.0)*x1601);
IkReal x1611=((0.0008)*x1602);
IkReal x1612=(sj4*x1607);
IkReal x1613=(gconst17*r00*sj4);
IkReal x1614=(cj4*x1602);
IkReal x1615=(gconst17*x1601);
IkReal x1616=(gconst16*r11*x1602);
evalcond[0]=(((r01*x1615))+((r00*x1609))+((x1602*x1605))+((x1602*x1606)));
evalcond[1]=((-1.0)+((cj4*x1608))+((x1601*x1613))+((cj4*r02*x1601))+((x1602*x1612))+(((-1.0)*x1604*x1616))+(((-1.0)*r01*x1604*x1609)));
evalcond[2]=((((-1.0)*r12*x1601*x1603))+(((-1.0)*gconst16*r01*x1602*x1604))+((r11*sj4*x1609))+((x1602*x1613))+((r02*x1614))+(((-1.0)*x1601*x1604*x1607)));
evalcond[3]=((((-1.0)*r02*x1601*x1604))+((x1607*x1614))+(((-1.0)*x1603*x1616))+(((-1.0)*r01*x1603*x1609))+((cj4*r00*x1615))+(((-1.0)*x1604*x1608)));
evalcond[4]=((((-1.0)*x1606*x1611))+(((3.5e-7)*r00*x1615))+(((-0.0008)*r00*x1609))+(((-0.0008)*r01*x1615))+(((-1.0)*px*x1610))+(((-3.5e-7)*r01*x1609))+(((-1.0)*x1605*x1611))+(((3.5e-7)*x1602*x1607))+(((-3.5e-7)*x1616))+(((-1.0)*py*x1602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1617=((-1.0)*r21);
CheckValue<IkReal> x1620 = IKatan2WithCheck(IkReal(x1617),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1620.valid){
continue;
}
IkReal x1618=((1.0)*(x1620.value));
IkReal x1619=x1260;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1618)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1618)));
IkReal gconst16=(x1617*x1619);
IkReal gconst17=((1.0)*r20*x1619);
IkReal x1621=(gconst17*r20);
IkReal x1622=((1.93020072)*cj4);
IkReal x1623=((0.64340024)*cj4);
IkReal x1624=((2.25190084e-7)*gconst17);
IkReal x1625=(r00*sj0);
IkReal x1626=(gconst16*r20);
IkReal x1627=(gconst16*r21);
IkReal x1628=(gconst17*r21);
IkReal x1629=(cj0*r10);
IkReal x1630=((6.75570252e-7)*gconst17);
IkReal x1631=(r22*sj4);
IkReal x1632=((0.001544160576)*gconst16);
IkReal x1633=((6.75570252e-7)*gconst16);
IkReal x1634=(cj0*r11);
IkReal x1635=(r01*sj0);
IkReal x1636=((2.25190084e-7)*gconst16);
IkReal x1637=(cj0*py);
IkReal x1638=(px*sj0);
IkReal x1639=((0.000514720192)*gconst16);
IkReal x1640=((9.8699412e-8)*x1621);
IkReal x1641=((0.316874224008278)*x1628);
IkReal x1642=((0.316874224008278)*x1626);
IkReal x1643=((1.93020072)*x1638);
IkReal x1644=((4.2e-6)*x1621);
IkReal x1645=((0.27239832)*x1628);
IkReal x1646=((0.27239832)*x1626);
IkReal x1647=(gconst17*x1634);
IkReal x1648=((0.001544160576)*gconst17*x1635);
IkReal x1649=(x1625*x1632);
IkReal x1650=(x1629*x1630);
IkReal x1651=(x1633*x1635);
IkReal x1652=(x1621*x1622);
IkReal x1653=((((12.0)*pz))+((x1622*x1627))+(((4.2e-6)*x1627))+(((1.93020072)*x1631)));
IkReal x1654=(x1652+x1645+x1644+x1646);
IkReal x1655=((((9.8699412e-8)*x1627))+((x1629*x1632))+(((0.001544160576)*x1647))+((x1625*x1630))+(((0.28199832)*pz))+((x1633*x1634))+(((1.93020072)*x1637)));
IkReal x1656=(x1650+x1651+x1641+x1640+x1643+x1642+x1649+x1648);
j1eval[0]=((1.0)+(((1.21421648150246)*(IKabs(((-0.64)+(((1.4e-6)*x1621))+(((0.09079944)*x1626))+(((0.09079944)*x1628))+(((-1.4e-6)*x1627))+(((-1.0)*x1623*x1627))+(((-0.64340024)*x1631))+(((-4.0)*pz))+((x1621*x1623)))))))+(((1.21421648150246)*(IKabs(((0.64)+x1654+(((-1.0)*x1653)))))))+(((1.21421648150246)*(IKabs(((0.0150404058181848)+x1656+(((-1.0)*x1655)))))))+(((1.21421648150246)*(IKabs(((-0.0150404058181848)+x1656+(((-1.0)*x1655)))))))+(((1.21421648150246)*(IKabs(((-0.64)+x1654+(((-1.0)*x1653)))))))+(((1.21421648150246)*(IKabs(((-0.0150404058181848)+(((-1.0)*x1634*x1636))+(((-0.000514720192)*x1647))+(((0.64340024)*x1638))+(((0.000514720192)*gconst17*x1635))+((x1625*x1639))+(((0.105624741336093)*x1626))+(((0.105624741336093)*x1628))+(((-3.2899804e-8)*x1627))+((x1635*x1636))+(((-1.0)*x1624*x1625))+(((-1.0)*x1629*x1639))+(((3.2899804e-8)*x1621))+(((-0.64340024)*x1637))+((x1624*x1629))+(((-0.09399944)*pz))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1657=(gconst16*r21);
IkReal x1658=(r22*sj4);
IkReal x1659=(gconst17*r20);
IkReal x1660=(gconst16*r20);
IkReal x1661=(gconst17*r21);
IkReal x1662=((4.2e-6)*x1659);
IkReal x1663=((0.27239832)*x1661);
IkReal x1664=((0.27239832)*x1660);
IkReal x1665=((1.4e-6)*x1659);
IkReal x1666=((0.09079944)*x1660);
IkReal x1667=((0.09079944)*x1661);
IkReal x1668=(cj4*x1659);
IkReal x1669=((1.93020072)*x1668);
IkReal x1670=((0.64340024)*x1668);
IkReal x1671=((((1.93020072)*x1658))+(((12.0)*pz))+(((1.93020072)*cj4*x1657))+(((4.2e-6)*x1657)));
IkReal x1672=((((4.0)*pz))+(((0.64340024)*x1658))+(((1.4e-6)*x1657))+(((0.64340024)*cj4*x1657)));
IkReal x1673=(x1667+x1666+x1665+x1670);
IkReal x1674=(x1669+x1664+x1663+x1662);
op[0]=((-0.64)+x1673+(((-1.0)*x1672)));
op[1]=6.16e-6;
op[2]=((-0.64)+x1674+(((-1.0)*x1671)));
op[3]=1.232e-5;
op[4]=((0.64)+x1674+(((-1.0)*x1671)));
op[5]=6.16e-6;
op[6]=((0.64)+x1673+(((-1.0)*x1672)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1675=((0.09399944)*pz);
IkReal x1676=(gconst17*r20);
IkReal x1677=(r00*sj0);
IkReal x1678=((2.25190084e-7)*gconst17);
IkReal x1679=((0.000514720192)*gconst16);
IkReal x1680=(px*sj0);
IkReal x1681=(gconst17*r21);
IkReal x1682=(cj0*r10);
IkReal x1683=((6.75570252e-7)*gconst17);
IkReal x1684=(gconst16*r20);
IkReal x1685=((0.001544160576)*gconst16);
IkReal x1686=((6.75570252e-7)*gconst16);
IkReal x1687=(cj0*r11);
IkReal x1688=(r01*sj0);
IkReal x1689=((2.25190084e-7)*gconst16);
IkReal x1690=(cj0*py);
IkReal x1691=(gconst16*r21);
IkReal x1692=((0.105624741336093)*x1684);
IkReal x1693=((0.105624741336093)*x1681);
IkReal x1694=((3.2899804e-8)*x1676);
IkReal x1695=((0.64340024)*x1680);
IkReal x1696=((9.8699412e-8)*x1676);
IkReal x1697=((0.316874224008278)*x1681);
IkReal x1698=((0.316874224008278)*x1684);
IkReal x1699=((1.93020072)*x1680);
IkReal x1700=((0.64340024)*x1690);
IkReal x1701=((3.2899804e-8)*x1691);
IkReal x1702=(gconst17*x1687);
IkReal x1703=(x1678*x1682);
IkReal x1704=(x1677*x1679);
IkReal x1705=((0.000514720192)*gconst17*x1688);
IkReal x1706=(x1688*x1689);
IkReal x1707=((0.001544160576)*gconst17*x1688);
IkReal x1708=(x1677*x1685);
IkReal x1709=(x1682*x1683);
IkReal x1710=(x1686*x1688);
IkReal x1711=((0.000514720192)*x1702);
IkReal x1712=(x1679*x1682);
IkReal x1713=(x1687*x1689);
IkReal x1714=(x1677*x1678);
IkReal x1715=((((0.001544160576)*x1702))+(((1.93020072)*x1690))+((x1677*x1683))+(((9.8699412e-8)*x1691))+((x1686*x1687))+(((0.28199832)*pz))+((x1682*x1685)));
IkReal x1716=(x1700+x1701+x1713+x1712+x1711+x1714+x1675);
IkReal x1717=(x1703+x1704+x1705+x1706+x1694+x1695+x1692+x1693);
IkReal x1718=(x1707+x1708+x1709+x1710+x1696+x1697+x1698+x1699);
j1evalpoly[0]=((0.0150404058181848)+(((-0.411775864081725)*(htj1*htj1*htj1)))+x1717+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x1717+(((-1.0)*x1716))))))+(((-0.205887932040862)*htj1))+(((-1.0)*x1716))+(((htj1*htj1)*(((0.0150404058181848)+x1718+(((-1.0)*x1715))))))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x1718+(((-1.0)*x1715)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1719=((1.0)*sj1);
IkReal x1720=(gconst16*r20);
IkReal x1721=(r22*sj4);
IkReal x1722=(cj1*cj4);
IkReal x1723=(gconst17*r20);
IkReal x1724=(gconst16*r21);
IkReal x1725=(gconst17*r21);
if( IKabs((((x1722*x1723))+(((-1.0)*cj1*x1721))+(((-1.0)*x1722*x1724))+(((-1.0)*x1719*x1725))+(((-1.0)*x1719*x1720)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1725))+((cj1*x1720))+((cj4*sj1*x1723))+(((-1.0)*x1719*x1721))+(((-1.0)*cj4*x1719*x1724)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1722*x1723))+(((-1.0)*cj1*x1721))+(((-1.0)*x1722*x1724))+(((-1.0)*x1719*x1725))+(((-1.0)*x1719*x1720))))+IKsqr((((cj1*x1725))+((cj1*x1720))+((cj4*sj1*x1723))+(((-1.0)*x1719*x1721))+(((-1.0)*cj4*x1719*x1724))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1722*x1723))+(((-1.0)*cj1*x1721))+(((-1.0)*x1722*x1724))+(((-1.0)*x1719*x1725))+(((-1.0)*x1719*x1720))), (((cj1*x1725))+((cj1*x1720))+((cj4*sj1*x1723))+(((-1.0)*x1719*x1721))+(((-1.0)*cj4*x1719*x1724))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1726=IKcos(j2);
IkReal x1727=IKsin(j2);
IkReal x1728=(cj0*gconst17);
IkReal x1729=(gconst16*sj0);
IkReal x1730=(gconst16*r20);
IkReal x1731=((1.0)*sj0);
IkReal x1732=(gconst17*sj0);
IkReal x1733=((3.5e-7)*gconst16);
IkReal x1734=(gconst17*r20);
IkReal x1735=(cj0*r11);
IkReal x1736=(cj4*gconst16);
IkReal x1737=((1.0)*cj4);
IkReal x1738=(gconst17*r21);
IkReal x1739=(cj1*x1726);
IkReal x1740=(sj1*x1726);
IkReal x1741=(sj1*x1727);
IkReal x1742=(cj0*gconst16*r10);
IkReal x1743=(cj1*x1727);
IkReal x1744=((1.0)*x1740);
IkReal x1745=((1.0)*x1743);
IkReal x1746=(x1744+x1745);
evalcond[0]=(x1738+x1730+x1741+(((-1.0)*x1739)));
evalcond[1]=((((-1.0)*x1746))+((cj4*x1734))+(((-1.0)*r22*sj4))+(((-1.0)*r21*x1736)));
evalcond[2]=(((r01*x1732))+((r00*x1729))+(((-1.0)*r11*x1728))+(((-1.0)*x1742))+(((-1.0)*x1746)));
evalcond[3]=((((-1.0)*r01*x1729*x1737))+x1739+(((-1.0)*r02*sj4*x1731))+((cj0*r12*sj4))+((x1735*x1736))+(((-1.0)*x1741))+((cj4*r00*x1732))+(((-1.0)*r10*x1728*x1737)));
evalcond[4]=((((0.16085006)*x1743))+(((0.16085006)*x1740))+(((0.16)*cj1))+(((-0.02349986)*x1741))+(((-0.0008)*x1738))+(((-0.0008)*x1730))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.02349986)*x1739))+(((-1.0)*r21*x1733))+(((3.5e-7)*x1734)));
evalcond[5]=((((0.16085006)*x1741))+(((3.5e-7)*r00*x1732))+(((-3.5e-7)*r10*x1728))+(((0.02349986)*x1743))+(((0.02349986)*x1740))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*px*x1731))+((x1733*x1735))+(((-0.0008)*r01*x1732))+(((-0.16085006)*x1739))+((cj0*py))+(((-0.0008)*r00*x1729))+(((0.0008)*r11*x1728))+(((-3.5e-7)*r01*x1729))+(((0.0008)*x1742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1747=((0.0008)*cj5);
IkReal x1748=((3.5e-7)*cj5);
IkReal x1749=((3.5e-7)*sj5);
IkReal x1750=((0.0008)*sj5);
CheckValue<IkReal> x1751=IKPowWithIntegerCheck(IKsign(((((0.0008)*r22*sj4))+((r20*(((((-1.0)*cj4*x1747))+(((-1.0)*cj4*x1749))))))+(((-1.0)*rxp1_2*sj4*sj5))+((r21*(((((-1.0)*cj4*x1748))+((cj4*x1750))))))+((cj4*rxp2_2))+((cj5*rxp0_2*sj4)))),-1);
if(!x1751.valid){
continue;
}
CheckValue<IkReal> x1752 = IKatan2WithCheck(IkReal(((((-1.0)*px))+(((-1.0)*r00*x1750))+(((-1.0)*r01*x1747))+(((-1.0)*r01*x1749))+((r00*x1748)))),IkReal(((((-1.0)*r10*x1748))+py+((r11*x1747))+((r11*x1749))+((r10*x1750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1752.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1751.value)))+(x1752.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1753=IKcos(j0);
IkReal x1754=IKsin(j0);
IkReal x1755=(r11*sj4);
IkReal x1756=((1.0)*sj4);
IkReal x1757=(r10*sj4);
IkReal x1758=(r01*sj5);
IkReal x1759=(r00*sj4);
IkReal x1760=(cj4*r02);
IkReal x1761=(r12*x1754);
IkReal x1762=((1.0)*x1753);
IkReal x1763=(sj5*x1753);
IkReal x1764=(cj5*x1754);
IkReal x1765=(sj5*x1754);
IkReal x1766=(cj5*x1753);
evalcond[0]=(((r01*x1766))+((r00*x1763))+((r11*x1764))+((r10*x1765)));
evalcond[1]=((-1.0)+((x1759*x1766))+((cj4*x1761))+((x1757*x1764))+(((-1.0)*x1755*x1765))+((x1753*x1760))+(((-1.0)*x1753*x1756*x1758)));
evalcond[2]=(((x1759*x1764))+((x1755*x1763))+((x1754*x1760))+(((-1.0)*cj4*r12*x1762))+(((-1.0)*r10*x1756*x1766))+(((-1.0)*x1754*x1756*x1758)));
evalcond[3]=((((-1.0)*cj4*x1758*x1762))+(((-1.0)*cj4*r11*x1765))+(((-1.0)*x1756*x1761))+((cj4*r10*x1764))+(((-1.0)*r02*x1753*x1756))+((cj4*r00*x1766)));
evalcond[4]=((((-0.0008)*r10*x1765))+(((3.5e-7)*r10*x1764))+(((-3.5e-7)*r11*x1765))+(((-0.0008)*r11*x1764))+(((-1.0)*px*x1762))+(((-1.0)*py*x1754))+(((-0.0008)*r01*x1766))+(((-0.0008)*r00*x1763))+(((-3.5e-7)*x1753*x1758))+(((3.5e-7)*r00*x1766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1767=(px*sj0);
IkReal x1768=(r00*sj0);
IkReal x1769=((0.000514720192)*sj5);
IkReal x1770=(cj5*r21);
IkReal x1771=((6.75570252e-7)*cj5);
IkReal x1772=(cj0*r10);
IkReal x1773=((0.001544160576)*sj5);
IkReal x1774=(r21*sj5);
IkReal x1775=(r20*sj5);
IkReal x1776=(r22*sj4);
IkReal x1777=((6.75570252e-7)*sj5);
IkReal x1778=(r01*sj0);
IkReal x1779=(cj0*r11);
IkReal x1780=((2.25190084e-7)*sj5);
IkReal x1781=((2.25190084e-7)*cj5);
IkReal x1782=(cj0*py);
IkReal x1783=(cj5*r20);
IkReal x1784=((9.8699412e-8)*x1783);
IkReal x1785=((0.316874224008278)*x1775);
IkReal x1786=((1.93020072)*x1767);
IkReal x1787=((0.316874224008278)*x1770);
IkReal x1788=((0.27239832)*x1770);
IkReal x1789=((0.27239832)*x1775);
IkReal x1790=((4.2e-6)*x1783);
IkReal x1791=(cj4*x1783);
IkReal x1792=(cj5*x1778);
IkReal x1793=(x1771*x1772);
IkReal x1794=(x1768*x1773);
IkReal x1795=((0.001544160576)*x1792);
IkReal x1796=(x1777*x1778);
IkReal x1797=((1.93020072)*x1791);
IkReal x1798=((((4.2e-6)*x1774))+(((12.0)*pz))+(((1.93020072)*x1776))+(((1.93020072)*cj4*x1774)));
IkReal x1799=(x1788+x1789+x1790+x1797);
IkReal x1800=((((1.93020072)*x1782))+(((9.8699412e-8)*x1774))+(((0.001544160576)*cj5*x1779))+(((0.28199832)*pz))+((x1772*x1773))+((x1777*x1779))+((x1768*x1771)));
IkReal x1801=(x1784+x1785+x1786+x1787+x1793+x1796+x1795+x1794);
j1eval[0]=((1.0)+(((1.21421648150246)*(IKabs(((0.0150404058181848)+(((-1.0)*x1800))+x1801)))))+(((1.21421648150246)*(IKabs(((-0.0150404058181848)+(((-1.0)*x1800))+x1801)))))+(((1.21421648150246)*(IKabs(((-0.64)+(((-1.0)*x1798))+x1799)))))+(((1.21421648150246)*(IKabs(((0.64)+(((-1.0)*x1798))+x1799)))))+(((1.21421648150246)*(IKabs(((-0.0150404058181848)+(((0.64340024)*x1767))+(((-3.2899804e-8)*x1774))+(((-1.0)*x1768*x1781))+((x1772*x1781))+((x1778*x1780))+(((0.000514720192)*x1792))+(((0.105624741336093)*x1775))+(((0.105624741336093)*x1770))+(((-1.0)*x1779*x1780))+(((3.2899804e-8)*x1783))+(((-0.64340024)*x1782))+((x1768*x1769))+(((-1.0)*x1769*x1772))+(((-0.000514720192)*cj5*x1779))+(((-0.09399944)*pz)))))))+(((1.21421648150246)*(IKabs(((-0.64)+(((-0.64340024)*cj4*x1774))+(((0.09079944)*x1775))+(((0.09079944)*x1770))+(((-1.4e-6)*x1774))+(((1.4e-6)*x1783))+(((-0.64340024)*x1776))+(((-4.0)*pz))+(((0.64340024)*x1791))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1802=(r21*sj5);
IkReal x1803=(r20*sj5);
IkReal x1804=((1.93020072)*cj4);
IkReal x1805=(cj5*r21);
IkReal x1806=(r22*sj4);
IkReal x1807=(cj5*r20);
IkReal x1808=((0.64340024)*cj4);
IkReal x1809=((0.27239832)*x1805);
IkReal x1810=((0.27239832)*x1803);
IkReal x1811=((4.2e-6)*x1807);
IkReal x1812=((0.09079944)*x1803);
IkReal x1813=((0.09079944)*x1805);
IkReal x1814=((1.4e-6)*x1807);
IkReal x1815=(x1804*x1807);
IkReal x1816=(x1807*x1808);
IkReal x1817=((((4.2e-6)*x1802))+((x1802*x1804))+(((1.93020072)*x1806))+(((12.0)*pz)));
IkReal x1818=(((x1802*x1808))+(((4.0)*pz))+(((1.4e-6)*x1802))+(((0.64340024)*x1806)));
IkReal x1819=(x1815+x1810+x1811+x1809);
IkReal x1820=(x1814+x1816+x1812+x1813);
op[0]=((-0.64)+(((-1.0)*x1818))+x1820);
op[1]=6.16e-6;
op[2]=((-0.64)+(((-1.0)*x1817))+x1819);
op[3]=1.232e-5;
op[4]=((0.64)+(((-1.0)*x1817))+x1819);
op[5]=6.16e-6;
op[6]=((0.64)+(((-1.0)*x1818))+x1820);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1821=((0.09399944)*pz);
IkReal x1822=(r00*sj0);
IkReal x1823=((6.75570252e-7)*cj5);
IkReal x1824=((0.000514720192)*sj5);
IkReal x1825=(cj5*r21);
IkReal x1826=(cj0*sj5);
IkReal x1827=(px*sj0);
IkReal x1828=(cj5*r20);
IkReal x1829=((2.25190084e-7)*cj5);
IkReal x1830=(r20*sj5);
IkReal x1831=(cj0*py);
IkReal x1832=(cj0*r10);
IkReal x1833=(r21*sj5);
IkReal x1834=((9.8699412e-8)*x1828);
IkReal x1835=((0.316874224008278)*x1830);
IkReal x1836=((1.93020072)*x1827);
IkReal x1837=((0.316874224008278)*x1825);
IkReal x1838=((0.105624741336093)*x1825);
IkReal x1839=((3.2899804e-8)*x1828);
IkReal x1840=((0.105624741336093)*x1830);
IkReal x1841=((0.64340024)*x1827);
IkReal x1842=((0.64340024)*x1831);
IkReal x1843=((3.2899804e-8)*x1833);
IkReal x1844=(cj5*r01*sj0);
IkReal x1845=(cj0*cj5*r11);
IkReal x1846=(r01*sj0*sj5);
IkReal x1847=(x1823*x1832);
IkReal x1848=((0.001544160576)*sj5*x1822);
IkReal x1849=((0.001544160576)*x1844);
IkReal x1850=((6.75570252e-7)*x1846);
IkReal x1851=(x1822*x1824);
IkReal x1852=((2.25190084e-7)*x1846);
IkReal x1853=((0.000514720192)*x1844);
IkReal x1854=(x1829*x1832);
IkReal x1855=((0.000514720192)*x1845);
IkReal x1856=(x1822*x1829);
IkReal x1857=((2.25190084e-7)*r11*x1826);
IkReal x1858=(x1824*x1832);
IkReal x1859=((((0.001544160576)*r10*x1826))+(((9.8699412e-8)*x1833))+((x1822*x1823))+(((0.28199832)*pz))+(((6.75570252e-7)*r11*x1826))+(((0.001544160576)*x1845))+(((1.93020072)*x1831)));
IkReal x1860=(x1821+x1858+x1855+x1856+x1857+x1843+x1842);
IkReal x1861=(x1851+x1852+x1853+x1854+x1841+x1840+x1838+x1839);
IkReal x1862=(x1850+x1849+x1848+x1847+x1836+x1837+x1834+x1835);
j1evalpoly[0]=((0.0150404058181848)+(((htj1*htj1)*(((0.0150404058181848)+x1862+(((-1.0)*x1859))))))+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((-0.205887932040862)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x1861+(((-1.0)*x1860))))))+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x1862+(((-1.0)*x1859))))))+x1861+(((-1.0)*x1860))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1863=((1.0)*sj5);
IkReal x1864=(cj1*r21);
IkReal x1865=(r20*sj1);
IkReal x1866=((1.0)*sj1);
IkReal x1867=(r22*sj4);
IkReal x1868=(cj4*cj5);
IkReal x1869=(cj1*r20);
if( IKabs(((((-1.0)*cj4*x1863*x1864))+(((-1.0)*cj1*x1867))+(((-1.0)*x1863*x1865))+(((-1.0)*cj5*r21*x1866))+((x1868*x1869)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1866*x1867))+(((-1.0)*cj4*r21*sj1*x1863))+((sj5*x1869))+((cj5*x1864))+((x1865*x1868)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x1863*x1864))+(((-1.0)*cj1*x1867))+(((-1.0)*x1863*x1865))+(((-1.0)*cj5*r21*x1866))+((x1868*x1869))))+IKsqr(((((-1.0)*x1866*x1867))+(((-1.0)*cj4*r21*sj1*x1863))+((sj5*x1869))+((cj5*x1864))+((x1865*x1868))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*x1863*x1864))+(((-1.0)*cj1*x1867))+(((-1.0)*x1863*x1865))+(((-1.0)*cj5*r21*x1866))+((x1868*x1869))), ((((-1.0)*x1866*x1867))+(((-1.0)*cj4*r21*sj1*x1863))+((sj5*x1869))+((cj5*x1864))+((x1865*x1868))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1870=IKcos(j2);
IkReal x1871=IKsin(j2);
IkReal x1872=(r20*sj5);
IkReal x1873=((1.0)*cj4);
IkReal x1874=(cj5*r21);
IkReal x1875=((3.5e-7)*sj5);
IkReal x1876=((1.0)*sj0);
IkReal x1877=(r01*sj0);
IkReal x1878=((1.0)*cj0);
IkReal x1879=(cj5*r11);
IkReal x1880=(r00*sj0);
IkReal x1881=((0.0008)*sj5);
IkReal x1882=(cj4*cj5);
IkReal x1883=((3.5e-7)*cj5);
IkReal x1884=(cj0*r11);
IkReal x1885=(cj1*x1870);
IkReal x1886=(cj0*cj5*r10);
IkReal x1887=(sj1*x1870);
IkReal x1888=(sj1*x1871);
IkReal x1889=(cj1*x1871);
IkReal x1890=((1.0)*x1887);
IkReal x1891=((1.0)*x1889);
IkReal x1892=(x1890+x1891);
evalcond[0]=(x1874+x1872+x1888+(((-1.0)*x1885)));
evalcond[1]=(((r20*x1882))+(((-1.0)*r21*sj5*x1873))+(((-1.0)*r22*sj4))+(((-1.0)*x1892)));
evalcond[2]=(((cj5*x1877))+((sj5*x1880))+(((-1.0)*x1878*x1879))+(((-1.0)*r10*sj5*x1878))+(((-1.0)*x1892)));
evalcond[3]=((((-1.0)*sj5*x1873*x1877))+(((-1.0)*x1873*x1886))+((x1880*x1882))+((cj0*r12*sj4))+((cj4*sj5*x1884))+x1885+(((-1.0)*x1888))+(((-1.0)*r02*sj4*x1876)));
evalcond[4]=((((0.16)*cj1))+((r20*x1883))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-0.0008)*x1872))+(((-0.0008)*x1874))+(((-1.0)*r21*x1875))+(((0.02349986)*x1885))+(((0.16085006)*x1889))+(((0.16085006)*x1887))+(((-0.02349986)*x1888)));
evalcond[5]=((((-1.0)*px*x1876))+(((-1.0)*x1880*x1881))+((x1880*x1883))+(((0.0008)*cj0*x1879))+((x1875*x1884))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((cj0*r10*x1881))+(((-0.0008)*cj5*x1877))+(((-1.0)*cj0*r10*x1883))+(((-0.16085006)*x1885))+((cj0*py))+(((0.02349986)*x1889))+(((0.02349986)*x1887))+(((0.16085006)*x1888))+(((-1.0)*x1875*x1877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1893=(cj4*sj5);
IkReal x1894=(cj4*cj5);
CheckValue<IkReal> x1895 = IKatan2WithCheck(IkReal((((r00*x1894))+(((-1.0)*r02*sj4))+(((-1.0)*r01*x1893)))),IkReal((((r11*x1893))+(((-1.0)*r10*x1894))+((r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1895.valid){
continue;
}
CheckValue<IkReal> x1896=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x1896.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1895.value)+(((1.5707963267949)*(x1896.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1897=IKcos(j0);
IkReal x1898=IKsin(j0);
IkReal x1899=(r11*sj4);
IkReal x1900=((1.0)*sj4);
IkReal x1901=(r10*sj4);
IkReal x1902=(r01*sj5);
IkReal x1903=(r00*sj4);
IkReal x1904=(cj4*r02);
IkReal x1905=(r12*x1898);
IkReal x1906=((1.0)*x1897);
IkReal x1907=(sj5*x1897);
IkReal x1908=(cj5*x1898);
IkReal x1909=(sj5*x1898);
IkReal x1910=(cj5*x1897);
evalcond[0]=(((r00*x1907))+((r01*x1910))+((r11*x1908))+((r10*x1909)));
evalcond[1]=((-1.0)+((cj4*x1905))+((x1901*x1908))+((x1903*x1910))+(((-1.0)*x1899*x1909))+((x1897*x1904))+(((-1.0)*x1897*x1900*x1902)));
evalcond[2]=(((x1903*x1908))+(((-1.0)*r10*x1900*x1910))+((x1898*x1904))+(((-1.0)*x1898*x1900*x1902))+((x1899*x1907))+(((-1.0)*cj4*r12*x1906)));
evalcond[3]=(((cj4*r10*x1908))+(((-1.0)*cj4*r11*x1909))+(((-1.0)*x1900*x1905))+((cj4*r00*x1910))+(((-1.0)*cj4*x1902*x1906))+(((-1.0)*r02*x1897*x1900)));
evalcond[4]=((((-0.0008)*r00*x1907))+(((-0.0008)*r01*x1910))+(((3.5e-7)*r10*x1908))+(((-3.5e-7)*r11*x1909))+(((-1.0)*px*x1906))+(((-3.5e-7)*x1897*x1902))+(((-0.0008)*r10*x1909))+(((3.5e-7)*r00*x1910))+(((-1.0)*py*x1898))+(((-0.0008)*r11*x1908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1911=(px*sj0);
IkReal x1912=(r00*sj0);
IkReal x1913=((0.000514720192)*sj5);
IkReal x1914=(cj5*r21);
IkReal x1915=((6.75570252e-7)*cj5);
IkReal x1916=(cj0*r10);
IkReal x1917=((0.001544160576)*sj5);
IkReal x1918=(r21*sj5);
IkReal x1919=(r20*sj5);
IkReal x1920=(r22*sj4);
IkReal x1921=((6.75570252e-7)*sj5);
IkReal x1922=(r01*sj0);
IkReal x1923=(cj0*r11);
IkReal x1924=((2.25190084e-7)*sj5);
IkReal x1925=((2.25190084e-7)*cj5);
IkReal x1926=(cj0*py);
IkReal x1927=(cj5*r20);
IkReal x1928=((9.8699412e-8)*x1927);
IkReal x1929=((0.316874224008278)*x1919);
IkReal x1930=((1.93020072)*x1911);
IkReal x1931=((0.316874224008278)*x1914);
IkReal x1932=((0.27239832)*x1914);
IkReal x1933=((0.27239832)*x1919);
IkReal x1934=((4.2e-6)*x1927);
IkReal x1935=(cj4*x1927);
IkReal x1936=(cj5*x1922);
IkReal x1937=(x1915*x1916);
IkReal x1938=(x1912*x1917);
IkReal x1939=((0.001544160576)*x1936);
IkReal x1940=(x1921*x1922);
IkReal x1941=((1.93020072)*x1935);
IkReal x1942=((((1.93020072)*x1920))+(((12.0)*pz))+(((4.2e-6)*x1918))+(((1.93020072)*cj4*x1918)));
IkReal x1943=(x1933+x1932+x1934+x1941);
IkReal x1944=((((1.93020072)*x1926))+((x1912*x1915))+((x1921*x1923))+((x1916*x1917))+(((0.001544160576)*cj5*x1923))+(((0.28199832)*pz))+(((9.8699412e-8)*x1918)));
IkReal x1945=(x1928+x1929+x1931+x1930+x1937+x1939+x1938+x1940);
j1eval[0]=((1.0)+(((1.21421648150246)*(IKabs(((-0.0150404058181848)+(((0.000514720192)*x1936))+(((-0.64340024)*x1926))+((x1912*x1913))+(((-1.0)*x1912*x1925))+(((-0.000514720192)*cj5*x1923))+((x1916*x1925))+(((-3.2899804e-8)*x1918))+(((-1.0)*x1913*x1916))+(((0.105624741336093)*x1919))+(((0.105624741336093)*x1914))+(((-1.0)*x1923*x1924))+(((0.64340024)*x1911))+((x1922*x1924))+(((3.2899804e-8)*x1927))+(((-0.09399944)*pz)))))))+(((1.21421648150246)*(IKabs(((0.64)+(((-1.0)*x1942))+x1943)))))+(((1.21421648150246)*(IKabs(((-0.64)+(((-1.0)*x1942))+x1943)))))+(((1.21421648150246)*(IKabs(((-0.64)+(((-0.64340024)*x1920))+(((0.64340024)*x1935))+(((0.09079944)*x1919))+(((0.09079944)*x1914))+(((1.4e-6)*x1927))+(((-0.64340024)*cj4*x1918))+(((-1.4e-6)*x1918))+(((-4.0)*pz)))))))+(((1.21421648150246)*(IKabs(((0.0150404058181848)+(((-1.0)*x1944))+x1945)))))+(((1.21421648150246)*(IKabs(((-0.0150404058181848)+(((-1.0)*x1944))+x1945))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1946=(r21*sj5);
IkReal x1947=(r20*sj5);
IkReal x1948=((1.93020072)*cj4);
IkReal x1949=(cj5*r21);
IkReal x1950=(r22*sj4);
IkReal x1951=(cj5*r20);
IkReal x1952=((0.64340024)*cj4);
IkReal x1953=((0.27239832)*x1949);
IkReal x1954=((0.27239832)*x1947);
IkReal x1955=((4.2e-6)*x1951);
IkReal x1956=((0.09079944)*x1947);
IkReal x1957=((0.09079944)*x1949);
IkReal x1958=((1.4e-6)*x1951);
IkReal x1959=(x1948*x1951);
IkReal x1960=(x1951*x1952);
IkReal x1961=((((12.0)*pz))+(((4.2e-6)*x1946))+((x1946*x1948))+(((1.93020072)*x1950)));
IkReal x1962=((((1.4e-6)*x1946))+(((4.0)*pz))+(((0.64340024)*x1950))+((x1946*x1952)));
IkReal x1963=(x1955+x1954+x1953+x1959);
IkReal x1964=(x1960+x1957+x1956+x1958);
op[0]=((-0.64)+(((-1.0)*x1962))+x1964);
op[1]=6.16e-6;
op[2]=((-0.64)+(((-1.0)*x1961))+x1963);
op[3]=1.232e-5;
op[4]=((0.64)+(((-1.0)*x1961))+x1963);
op[5]=6.16e-6;
op[6]=((0.64)+(((-1.0)*x1962))+x1964);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1965=((0.09399944)*pz);
IkReal x1966=(r00*sj0);
IkReal x1967=((6.75570252e-7)*cj5);
IkReal x1968=((0.000514720192)*sj5);
IkReal x1969=(cj5*r21);
IkReal x1970=(cj0*sj5);
IkReal x1971=(px*sj0);
IkReal x1972=(cj5*r20);
IkReal x1973=((2.25190084e-7)*cj5);
IkReal x1974=(r20*sj5);
IkReal x1975=(cj0*py);
IkReal x1976=(cj0*r10);
IkReal x1977=(r21*sj5);
IkReal x1978=((9.8699412e-8)*x1972);
IkReal x1979=((0.316874224008278)*x1974);
IkReal x1980=((1.93020072)*x1971);
IkReal x1981=((0.316874224008278)*x1969);
IkReal x1982=((0.105624741336093)*x1969);
IkReal x1983=((3.2899804e-8)*x1972);
IkReal x1984=((0.105624741336093)*x1974);
IkReal x1985=((0.64340024)*x1971);
IkReal x1986=((0.64340024)*x1975);
IkReal x1987=((3.2899804e-8)*x1977);
IkReal x1988=(cj5*r01*sj0);
IkReal x1989=(cj0*cj5*r11);
IkReal x1990=(r01*sj0*sj5);
IkReal x1991=(x1967*x1976);
IkReal x1992=((0.001544160576)*sj5*x1966);
IkReal x1993=((0.001544160576)*x1988);
IkReal x1994=((6.75570252e-7)*x1990);
IkReal x1995=(x1966*x1968);
IkReal x1996=((2.25190084e-7)*x1990);
IkReal x1997=((0.000514720192)*x1988);
IkReal x1998=(x1973*x1976);
IkReal x1999=((0.000514720192)*x1989);
IkReal x2000=(x1966*x1973);
IkReal x2001=((2.25190084e-7)*r11*x1970);
IkReal x2002=(x1968*x1976);
IkReal x2003=((((0.001544160576)*r10*x1970))+(((0.001544160576)*x1989))+(((9.8699412e-8)*x1977))+(((6.75570252e-7)*r11*x1970))+(((0.28199832)*pz))+((x1966*x1967))+(((1.93020072)*x1975)));
IkReal x2004=(x2002+x2000+x2001+x1986+x1987+x1999+x1965);
IkReal x2005=(x1984+x1985+x1982+x1983+x1995+x1997+x1996+x1998);
IkReal x2006=(x1980+x1981+x1991+x1993+x1992+x1994+x1979+x1978);
j1evalpoly[0]=((0.0150404058181848)+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((-0.205887932040862)*htj1))+x2005+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x2005+(((-1.0)*x2004))))))+(((-1.0)*x2004))+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x2006+(((-1.0)*x2003))))))+(((htj1*htj1)*(((0.0150404058181848)+x2006+(((-1.0)*x2003))))))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2007=((1.0)*sj5);
IkReal x2008=(cj1*r21);
IkReal x2009=(r20*sj1);
IkReal x2010=((1.0)*sj1);
IkReal x2011=(r22*sj4);
IkReal x2012=(cj4*cj5);
IkReal x2013=(cj1*r20);
if( IKabs(((((-1.0)*cj4*x2007*x2008))+(((-1.0)*x2007*x2009))+(((-1.0)*cj1*x2011))+(((-1.0)*cj5*r21*x2010))+((x2012*x2013)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*x2008))+(((-1.0)*x2010*x2011))+(((-1.0)*cj4*r21*sj1*x2007))+((sj5*x2013))+((x2009*x2012)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x2007*x2008))+(((-1.0)*x2007*x2009))+(((-1.0)*cj1*x2011))+(((-1.0)*cj5*r21*x2010))+((x2012*x2013))))+IKsqr((((cj5*x2008))+(((-1.0)*x2010*x2011))+(((-1.0)*cj4*r21*sj1*x2007))+((sj5*x2013))+((x2009*x2012))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*x2007*x2008))+(((-1.0)*x2007*x2009))+(((-1.0)*cj1*x2011))+(((-1.0)*cj5*r21*x2010))+((x2012*x2013))), (((cj5*x2008))+(((-1.0)*x2010*x2011))+(((-1.0)*cj4*r21*sj1*x2007))+((sj5*x2013))+((x2009*x2012))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2014=IKcos(j2);
IkReal x2015=IKsin(j2);
IkReal x2016=(r20*sj5);
IkReal x2017=((1.0)*cj4);
IkReal x2018=(cj5*r21);
IkReal x2019=((3.5e-7)*sj5);
IkReal x2020=((1.0)*sj0);
IkReal x2021=(r01*sj0);
IkReal x2022=((1.0)*cj0);
IkReal x2023=(cj5*r11);
IkReal x2024=(r00*sj0);
IkReal x2025=((0.0008)*sj5);
IkReal x2026=(cj4*cj5);
IkReal x2027=((3.5e-7)*cj5);
IkReal x2028=(cj0*r11);
IkReal x2029=(cj1*x2014);
IkReal x2030=(cj0*cj5*r10);
IkReal x2031=(sj1*x2014);
IkReal x2032=(sj1*x2015);
IkReal x2033=(cj1*x2015);
IkReal x2034=((1.0)*x2031);
IkReal x2035=((1.0)*x2033);
IkReal x2036=(x2035+x2034);
evalcond[0]=(x2032+x2018+x2016+(((-1.0)*x2029)));
evalcond[1]=((((-1.0)*r21*sj5*x2017))+(((-1.0)*x2036))+(((-1.0)*r22*sj4))+((r20*x2026)));
evalcond[2]=((((-1.0)*x2022*x2023))+((sj5*x2024))+((cj5*x2021))+(((-1.0)*r10*sj5*x2022))+(((-1.0)*x2036)));
evalcond[3]=(((x2024*x2026))+x2029+(((-1.0)*sj5*x2017*x2021))+((cj0*r12*sj4))+(((-1.0)*x2032))+(((-1.0)*x2017*x2030))+((cj4*sj5*x2028))+(((-1.0)*r02*sj4*x2020)));
evalcond[4]=((((-1.0)*r21*x2019))+(((0.16)*cj1))+(((-0.02349986)*x2032))+(((-0.0008)*x2018))+(((-0.0008)*x2016))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.02349986)*x2029))+((r20*x2027))+(((0.16085006)*x2031))+(((0.16085006)*x2033)));
evalcond[5]=(((x2024*x2027))+((x2019*x2028))+(((-1.0)*px*x2020))+((cj0*r10*x2025))+(((-0.16085006)*x2029))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*x2019*x2021))+(((0.0008)*cj0*x2023))+(((-0.0008)*cj5*x2021))+(((-1.0)*x2024*x2025))+(((-1.0)*cj0*r10*x2027))+((cj0*py))+(((0.16085006)*x2032))+(((0.02349986)*x2031))+(((0.02349986)*x2033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2037=((1.0)*sj5);
CheckValue<IkReal> x2038=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r21*x2037))+((cj4*cj5*r20))+(((-1.0)*r22*sj4)))),-1);
if(!x2038.valid){
continue;
}
CheckValue<IkReal> x2039 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2037)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2039.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2038.value)))+(x2039.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2040=IKcos(j0);
IkReal x2041=IKsin(j0);
IkReal x2042=(r11*sj4);
IkReal x2043=((1.0)*sj4);
IkReal x2044=(r10*sj4);
IkReal x2045=(r01*sj5);
IkReal x2046=(r00*sj4);
IkReal x2047=(cj4*r02);
IkReal x2048=(r12*x2041);
IkReal x2049=((1.0)*x2040);
IkReal x2050=(sj5*x2040);
IkReal x2051=(cj5*x2041);
IkReal x2052=(sj5*x2041);
IkReal x2053=(cj5*x2040);
evalcond[0]=(((r10*x2052))+((r01*x2053))+((r11*x2051))+((r00*x2050)));
evalcond[1]=((-1.0)+((x2040*x2047))+(((-1.0)*x2040*x2043*x2045))+((cj4*x2048))+((x2044*x2051))+((x2046*x2053))+(((-1.0)*x2042*x2052)));
evalcond[2]=(((x2041*x2047))+((x2042*x2050))+(((-1.0)*r10*x2043*x2053))+(((-1.0)*x2041*x2043*x2045))+((x2046*x2051))+(((-1.0)*cj4*r12*x2049)));
evalcond[3]=((((-1.0)*cj4*r11*x2052))+(((-1.0)*r02*x2040*x2043))+(((-1.0)*x2043*x2048))+(((-1.0)*cj4*x2045*x2049))+((cj4*r00*x2053))+((cj4*r10*x2051)));
evalcond[4]=((((-0.0008)*r00*x2050))+(((-0.0008)*r01*x2053))+(((-3.5e-7)*x2040*x2045))+(((3.5e-7)*r00*x2053))+(((-3.5e-7)*r11*x2052))+(((3.5e-7)*r10*x2051))+(((-0.0008)*r11*x2051))+(((-0.0008)*r10*x2052))+(((-1.0)*py*x2041))+(((-1.0)*px*x2049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2054=(px*sj0);
IkReal x2055=(r00*sj0);
IkReal x2056=((0.000514720192)*sj5);
IkReal x2057=(cj5*r21);
IkReal x2058=((6.75570252e-7)*cj5);
IkReal x2059=(cj0*r10);
IkReal x2060=((0.001544160576)*sj5);
IkReal x2061=(r21*sj5);
IkReal x2062=(r20*sj5);
IkReal x2063=(r22*sj4);
IkReal x2064=((6.75570252e-7)*sj5);
IkReal x2065=(r01*sj0);
IkReal x2066=(cj0*r11);
IkReal x2067=((2.25190084e-7)*sj5);
IkReal x2068=((2.25190084e-7)*cj5);
IkReal x2069=(cj0*py);
IkReal x2070=(cj5*r20);
IkReal x2071=((9.8699412e-8)*x2070);
IkReal x2072=((0.316874224008278)*x2062);
IkReal x2073=((1.93020072)*x2054);
IkReal x2074=((0.316874224008278)*x2057);
IkReal x2075=((0.27239832)*x2057);
IkReal x2076=((0.27239832)*x2062);
IkReal x2077=((4.2e-6)*x2070);
IkReal x2078=(cj4*x2070);
IkReal x2079=(cj5*x2065);
IkReal x2080=(x2058*x2059);
IkReal x2081=(x2055*x2060);
IkReal x2082=((0.001544160576)*x2079);
IkReal x2083=(x2064*x2065);
IkReal x2084=((1.93020072)*x2078);
IkReal x2085=((((12.0)*pz))+(((4.2e-6)*x2061))+(((1.93020072)*cj4*x2061))+(((1.93020072)*x2063)));
IkReal x2086=(x2077+x2076+x2075+x2084);
IkReal x2087=(((x2055*x2058))+(((9.8699412e-8)*x2061))+((x2059*x2060))+(((0.001544160576)*cj5*x2066))+(((0.28199832)*pz))+(((1.93020072)*x2069))+((x2064*x2066)));
IkReal x2088=(x2073+x2072+x2071+x2074+x2082+x2083+x2080+x2081);
j1eval[0]=((1.0)+(((1.21421648150246)*(IKabs(((0.64)+x2086+(((-1.0)*x2085)))))))+(((1.21421648150246)*(IKabs(((0.0150404058181848)+x2088+(((-1.0)*x2087)))))))+(((1.21421648150246)*(IKabs(((-0.0150404058181848)+x2088+(((-1.0)*x2087)))))))+(((1.21421648150246)*(IKabs(((-0.64)+(((0.09079944)*x2062))+(((1.4e-6)*x2070))+(((-0.64340024)*x2063))+(((-1.4e-6)*x2061))+(((0.64340024)*x2078))+(((-0.64340024)*cj4*x2061))+(((0.09079944)*x2057))+(((-4.0)*pz)))))))+(((1.21421648150246)*(IKabs(((-0.0150404058181848)+(((0.000514720192)*x2079))+(((-3.2899804e-8)*x2061))+(((-0.64340024)*x2069))+((x2055*x2056))+(((-0.000514720192)*cj5*x2066))+(((0.105624741336093)*x2057))+(((0.105624741336093)*x2062))+((x2059*x2068))+(((-1.0)*x2055*x2068))+(((-1.0)*x2056*x2059))+(((3.2899804e-8)*x2070))+(((-1.0)*x2066*x2067))+(((0.64340024)*x2054))+((x2065*x2067))+(((-0.09399944)*pz)))))))+(((1.21421648150246)*(IKabs(((-0.64)+x2086+(((-1.0)*x2085))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x2089=(r21*sj5);
IkReal x2090=(r20*sj5);
IkReal x2091=((1.93020072)*cj4);
IkReal x2092=(cj5*r21);
IkReal x2093=(r22*sj4);
IkReal x2094=(cj5*r20);
IkReal x2095=((0.64340024)*cj4);
IkReal x2096=((0.27239832)*x2092);
IkReal x2097=((0.27239832)*x2090);
IkReal x2098=((4.2e-6)*x2094);
IkReal x2099=((0.09079944)*x2090);
IkReal x2100=((0.09079944)*x2092);
IkReal x2101=((1.4e-6)*x2094);
IkReal x2102=(x2091*x2094);
IkReal x2103=(x2094*x2095);
IkReal x2104=((((12.0)*pz))+((x2089*x2091))+(((1.93020072)*x2093))+(((4.2e-6)*x2089)));
IkReal x2105=((((0.64340024)*x2093))+(((4.0)*pz))+(((1.4e-6)*x2089))+((x2089*x2095)));
IkReal x2106=(x2097+x2096+x2098+x2102);
IkReal x2107=(x2099+x2103+x2101+x2100);
op[0]=((-0.64)+(((-1.0)*x2105))+x2107);
op[1]=6.16e-6;
op[2]=((-0.64)+(((-1.0)*x2104))+x2106);
op[3]=1.232e-5;
op[4]=((0.64)+(((-1.0)*x2104))+x2106);
op[5]=6.16e-6;
op[6]=((0.64)+(((-1.0)*x2105))+x2107);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2108=((0.09399944)*pz);
IkReal x2109=(r00*sj0);
IkReal x2110=((6.75570252e-7)*cj5);
IkReal x2111=((0.000514720192)*sj5);
IkReal x2112=(cj5*r21);
IkReal x2113=(cj0*sj5);
IkReal x2114=(px*sj0);
IkReal x2115=(cj5*r20);
IkReal x2116=((2.25190084e-7)*cj5);
IkReal x2117=(r20*sj5);
IkReal x2118=(cj0*py);
IkReal x2119=(cj0*r10);
IkReal x2120=(r21*sj5);
IkReal x2121=((9.8699412e-8)*x2115);
IkReal x2122=((0.316874224008278)*x2117);
IkReal x2123=((1.93020072)*x2114);
IkReal x2124=((0.316874224008278)*x2112);
IkReal x2125=((0.105624741336093)*x2112);
IkReal x2126=((3.2899804e-8)*x2115);
IkReal x2127=((0.105624741336093)*x2117);
IkReal x2128=((0.64340024)*x2114);
IkReal x2129=((0.64340024)*x2118);
IkReal x2130=((3.2899804e-8)*x2120);
IkReal x2131=(cj5*r01*sj0);
IkReal x2132=(cj0*cj5*r11);
IkReal x2133=(r01*sj0*sj5);
IkReal x2134=(x2110*x2119);
IkReal x2135=((0.001544160576)*sj5*x2109);
IkReal x2136=((0.001544160576)*x2131);
IkReal x2137=((6.75570252e-7)*x2133);
IkReal x2138=(x2109*x2111);
IkReal x2139=((2.25190084e-7)*x2133);
IkReal x2140=((0.000514720192)*x2131);
IkReal x2141=(x2116*x2119);
IkReal x2142=((0.000514720192)*x2132);
IkReal x2143=(x2109*x2116);
IkReal x2144=((2.25190084e-7)*r11*x2113);
IkReal x2145=(x2111*x2119);
IkReal x2146=(((x2109*x2110))+(((0.001544160576)*r10*x2113))+(((6.75570252e-7)*r11*x2113))+(((9.8699412e-8)*x2120))+(((0.28199832)*pz))+(((0.001544160576)*x2132))+(((1.93020072)*x2118)));
IkReal x2147=(x2129+x2108+x2130+x2145+x2144+x2143+x2142);
IkReal x2148=(x2125+x2127+x2126+x2128+x2138+x2139+x2141+x2140);
IkReal x2149=(x2121+x2123+x2122+x2124+x2136+x2137+x2134+x2135);
j1evalpoly[0]=((0.0150404058181848)+(((htj1*htj1)*(((0.0150404058181848)+x2149+(((-1.0)*x2146))))))+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((-0.205887932040862)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x2148+(((-1.0)*x2147))))))+x2148+(((-1.0)*x2147))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x2149+(((-1.0)*x2146)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2150=((1.0)*sj5);
IkReal x2151=(cj1*r21);
IkReal x2152=(r20*sj1);
IkReal x2153=((1.0)*sj1);
IkReal x2154=(r22*sj4);
IkReal x2155=(cj4*cj5);
IkReal x2156=(cj1*r20);
if( IKabs(((((-1.0)*cj1*x2154))+((x2155*x2156))+(((-1.0)*cj4*x2150*x2151))+(((-1.0)*cj5*r21*x2153))+(((-1.0)*x2150*x2152)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r21*sj1*x2150))+((x2152*x2155))+(((-1.0)*x2153*x2154))+((cj5*x2151))+((sj5*x2156)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x2154))+((x2155*x2156))+(((-1.0)*cj4*x2150*x2151))+(((-1.0)*cj5*r21*x2153))+(((-1.0)*x2150*x2152))))+IKsqr(((((-1.0)*cj4*r21*sj1*x2150))+((x2152*x2155))+(((-1.0)*x2153*x2154))+((cj5*x2151))+((sj5*x2156))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x2154))+((x2155*x2156))+(((-1.0)*cj4*x2150*x2151))+(((-1.0)*cj5*r21*x2153))+(((-1.0)*x2150*x2152))), ((((-1.0)*cj4*r21*sj1*x2150))+((x2152*x2155))+(((-1.0)*x2153*x2154))+((cj5*x2151))+((sj5*x2156))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2157=IKcos(j2);
IkReal x2158=IKsin(j2);
IkReal x2159=(r20*sj5);
IkReal x2160=((1.0)*cj4);
IkReal x2161=(cj5*r21);
IkReal x2162=((3.5e-7)*sj5);
IkReal x2163=((1.0)*sj0);
IkReal x2164=(r01*sj0);
IkReal x2165=((1.0)*cj0);
IkReal x2166=(cj5*r11);
IkReal x2167=(r00*sj0);
IkReal x2168=((0.0008)*sj5);
IkReal x2169=(cj4*cj5);
IkReal x2170=((3.5e-7)*cj5);
IkReal x2171=(cj0*r11);
IkReal x2172=(cj1*x2157);
IkReal x2173=(cj0*cj5*r10);
IkReal x2174=(sj1*x2157);
IkReal x2175=(sj1*x2158);
IkReal x2176=(cj1*x2158);
IkReal x2177=((1.0)*x2174);
IkReal x2178=((1.0)*x2176);
IkReal x2179=(x2177+x2178);
evalcond[0]=(x2175+x2161+x2159+(((-1.0)*x2172)));
evalcond[1]=((((-1.0)*r21*sj5*x2160))+((r20*x2169))+(((-1.0)*r22*sj4))+(((-1.0)*x2179)));
evalcond[2]=(((cj5*x2164))+((sj5*x2167))+(((-1.0)*r10*sj5*x2165))+(((-1.0)*x2165*x2166))+(((-1.0)*x2179)));
evalcond[3]=((((-1.0)*sj5*x2160*x2164))+(((-1.0)*x2160*x2173))+x2172+((cj0*r12*sj4))+((x2167*x2169))+((cj4*sj5*x2171))+(((-1.0)*x2175))+(((-1.0)*r02*sj4*x2163)));
evalcond[4]=((((-0.0008)*x2161))+(((0.16)*cj1))+(((-1.0)*r21*x2162))+(((-0.0008)*x2159))+(((-1.0)*pz))+((r20*x2170))+(((7.7e-7)*sj1))+(((-0.02349986)*x2175))+(((0.16085006)*x2174))+(((0.16085006)*x2176))+(((0.02349986)*x2172)));
evalcond[5]=((((-1.0)*px*x2163))+(((-0.16085006)*x2172))+(((0.0008)*cj0*x2166))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((cj0*r10*x2168))+(((-1.0)*cj0*r10*x2170))+((x2162*x2171))+((x2167*x2170))+(((-1.0)*x2167*x2168))+((cj0*py))+(((-0.0008)*cj5*x2164))+(((-1.0)*x2162*x2164))+(((0.16085006)*x2175))+(((0.02349986)*x2174))+(((0.02349986)*x2176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2180=((1.0)*cj5);
IkReal x2181=(((cj4*r21*sj5))+((r22*sj4))+(((-1.0)*cj4*r20*x2180)));
j0eval[0]=x2181;
j0eval[1]=IKsign(x2181);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2180))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2182=(cj4*sj5);
IkReal x2183=(cj4*cj5);
IkReal x2184=(((cj5*r21))+((r20*sj5)));
j0eval[0]=x2184;
j0eval[1]=((IKabs(((((-1.0)*r01*x2182))+(((-1.0)*r02*sj4))+((r00*x2183)))))+(IKabs(((((-1.0)*r10*x2183))+((r12*sj4))+((r11*x2182))))));
j0eval[2]=IKsign(x2184);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2185=(r22*sj4);
IkReal x2186=((0.0008)*cj5);
IkReal x2187=(cj4*cj5);
IkReal x2188=(cj4*rxp2_2);
IkReal x2189=((3.5e-7)*cj5);
IkReal x2190=((3.5e-7)*sj5);
IkReal x2191=(cj4*r20);
IkReal x2192=((0.0008)*sj5);
IkReal x2193=(cj4*r21);
IkReal x2194=(rxp1_2*sj4*sj5);
IkReal x2195=(cj5*rxp0_2*sj4);
j0eval[0]=((((2857142.85714286)*x2194))+((sj5*x2191))+(((-2857142.85714286)*x2188))+((r21*x2187))+(((-2857142.85714286)*x2195))+(((2285.71428571429)*r20*x2187))+(((-2285.71428571429)*sj5*x2193))+(((-2285.71428571429)*x2185)));
j0eval[1]=((IKabs(((((-1.0)*r10*x2189))+py+((r11*x2190))+((r11*x2186))+((r10*x2192)))))+(IKabs(((((-1.0)*r01*x2190))+(((-1.0)*px))+(((-1.0)*r01*x2186))+(((-1.0)*r00*x2192))+((r00*x2189))))));
j0eval[2]=IKsign(((((3.5e-7)*r21*x2187))+(((-1.0)*x2195))+((x2186*x2191))+(((-1.0)*x2192*x2193))+x2194+(((-1.0)*x2188))+(((-0.0008)*x2185))+((x2190*x2191))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2197 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2197)==0){
continue;
}
IkReal x2196=pow(x2197,-0.5);
CheckValue<IkReal> x2198 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2198.valid){
continue;
}
IkReal gconst50=((-1.0)*(x2198.value));
IkReal gconst51=((-1.0)*r21*x2196);
IkReal gconst52=(r20*x2196);
CheckValue<IkReal> x2199 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2199.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2199.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
CheckValue<IkReal> x2202 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2202.valid){
continue;
}
IkReal x2200=((-1.0)*(x2202.value));
IkReal x2201=x2196;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst51;
cj5=gconst52;
j5=x2200;
IkReal gconst50=x2200;
IkReal gconst51=((-1.0)*r21*x2201);
IkReal gconst52=(r20*x2201);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x2205 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2205.valid){
continue;
}
IkReal x2203=((-1.0)*(x2205.value));
IkReal x2204=x2196;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst51;
cj5=gconst52;
j5=x2203;
IkReal gconst50=x2203;
IkReal gconst51=((-1.0)*r21*x2204);
IkReal gconst52=(r20*x2204);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x2208 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2208.valid){
continue;
}
IkReal x2206=((-1.0)*(x2208.value));
IkReal x2207=x2196;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst51;
cj5=gconst52;
j5=x2206;
IkReal gconst50=x2206;
IkReal gconst51=((-1.0)*r21*x2207);
IkReal gconst52=(r20*x2207);
IkReal x2209=r20*r20;
IkReal x2210=r21*r21;
IkReal x2211=((1.0)+(((-1.0)*(r22*r22))));
IkReal x2212=((0.0008)*x2210);
IkReal x2213=((0.0008)*x2209);
CheckValue<IkReal> x2219=IKPowWithIntegerCheck(x2211,-1);
if(!x2219.valid){
continue;
}
IkReal x2214=x2219.value;
IkReal x2215=(r22*sj4*x2214);
IkReal x2216=x2196;
IkReal x2217=(cj4*x2216);
IkReal x2218=((1.0)*sj4*x2216);
j0eval[0]=IKsign(((((-1.0)*r21*rxp1_2*x2218))+(((-1.0)*r20*rxp0_2*x2218))+(((-1.0)*cj4*rxp2_2))+(((-1.0)*x2213*x2215))+((x2212*x2217))+(((-1.0)*x2212*x2215))+((x2213*x2217))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2220=((3.5e-7)*gconst51);
IkReal x2221=((0.0008)*gconst51);
IkReal x2222=((0.0008)*sj4);
IkReal x2223=((3.5e-7)*gconst52);
IkReal x2224=((0.0008)*gconst52);
CheckValue<IkReal> x2225 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x2221))+(((-1.0)*r01*x2220))+(((-1.0)*r01*x2224))+(((-1.0)*px))+((r00*x2223)))),IkReal(((((-1.0)*r10*x2223))+((r10*x2221))+py+((r11*x2220))+((r11*x2224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2225.valid){
continue;
}
CheckValue<IkReal> x2226=IKPowWithIntegerCheck(IKsign((((r22*(((((-1.0)*x2222*(gconst52*gconst52)))+(((-1.0)*gconst51*sj4*x2221))))))+(((-1.0)*cj4*rxp2_2))+((gconst51*rxp1_2*sj4))+(((-1.0)*gconst52*rxp0_2*sj4))+((r20*((((cj4*x2224))+((cj4*x2220))))))+((r21*((((cj4*x2223))+(((-1.0)*cj4*x2221)))))))),-1);
if(!x2226.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2225.value)+(((1.5707963267949)*(x2226.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2227=IKsin(j0);
IkReal x2228=IKcos(j0);
IkReal x2229=((0.0008)*gconst52);
IkReal x2230=((1.0)*sj4);
IkReal x2231=(gconst51*r11);
IkReal x2232=((1.0)*cj4);
IkReal x2233=(r10*sj4);
IkReal x2234=(cj4*r02);
IkReal x2235=(r12*x2227);
IkReal x2236=(r01*x2228);
IkReal x2237=((1.0)*x2228);
IkReal x2238=(gconst52*x2227);
IkReal x2239=(sj4*x2228);
IkReal x2240=(r00*x2228);
IkReal x2241=(gconst51*x2227);
evalcond[0]=(((r10*x2241))+((gconst52*x2236))+((gconst51*x2240))+((r11*x2238)));
evalcond[1]=((1.0)+((x2228*x2234))+(((-1.0)*x2227*x2230*x2231))+((gconst52*r00*x2239))+(((-1.0)*gconst51*x2230*x2236))+((cj4*x2235))+((x2233*x2238)));
evalcond[2]=((((-1.0)*r01*x2230*x2241))+(((-1.0)*gconst52*r10*x2228*x2230))+(((-1.0)*r12*x2228*x2232))+((x2227*x2234))+((x2231*x2239))+((r00*sj4*x2238)));
evalcond[3]=((((-1.0)*x2227*x2231*x2232))+((cj4*r10*x2238))+(((-1.0)*gconst51*x2232*x2236))+((cj4*gconst52*x2240))+(((-1.0)*r02*x2228*x2230))+(((-1.0)*x2230*x2235)));
evalcond[4]=((((-1.0)*py*x2227))+(((-0.0008)*r10*x2241))+(((-1.0)*x2229*x2236))+(((-3.5e-7)*gconst51*x2236))+(((-1.0)*px*x2237))+(((-1.0)*r11*x2227*x2229))+(((3.5e-7)*gconst52*x2240))+(((-3.5e-7)*x2227*x2231))+(((-0.0008)*gconst51*x2240))+(((3.5e-7)*r10*x2238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2244 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2244.valid){
continue;
}
IkReal x2242=((-1.0)*(x2244.value));
IkReal x2243=x2196;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst51;
cj5=gconst52;
j5=x2242;
IkReal gconst50=x2242;
IkReal gconst51=((-1.0)*r21*x2243);
IkReal gconst52=(r20*x2243);
IkReal x2245=((12.0)*pz);
IkReal x2246=((0.28199832)*pz);
IkReal x2247=(gconst52*r20);
IkReal x2248=(gconst51*r21);
IkReal x2249=(px*sj0);
IkReal x2250=(gconst52*r21);
IkReal x2251=(r22*sj4);
IkReal x2252=((1.93020072)*cj4);
IkReal x2253=((0.001544160576)*gconst52);
IkReal x2254=(cj0*r11);
IkReal x2255=((0.64340024)*cj4);
IkReal x2256=(gconst51*r20);
IkReal x2257=(r01*sj0);
IkReal x2258=(cj0*r10);
IkReal x2259=((6.75570252e-7)*gconst52);
IkReal x2260=(cj0*py);
IkReal x2261=((2.25190084e-7)*gconst51);
IkReal x2262=(r00*sj0);
IkReal x2263=((2.25190084e-7)*gconst52);
IkReal x2264=((6.75570252e-7)*gconst51);
IkReal x2265=((0.000514720192)*gconst52);
IkReal x2266=((4.2e-6)*x2248);
IkReal x2267=((1.93020072)*x2251);
IkReal x2268=((0.29159832)*x2250);
IkReal x2269=((0.29159832)*x2256);
IkReal x2270=((0.317325421320278)*x2250);
IkReal x2271=((0.317325421320278)*x2256);
IkReal x2272=((9.8699412e-8)*x2248);
IkReal x2273=((1.93020072)*x2260);
IkReal x2274=(gconst51*x2262);
IkReal x2275=(x2248*x2252);
IkReal x2276=((0.001544160576)*gconst51*x2258);
IkReal x2277=(x2254*x2264);
IkReal x2278=(x2253*x2254);
IkReal x2279=(x2259*x2262);
IkReal x2280=((((4.2e-6)*x2247))+((x2247*x2252)));
IkReal x2281=(x2268+x2269+x2266+x2267+x2275+x2245);
IkReal x2282=(((x2257*x2264))+((x2253*x2257))+((x2258*x2259))+(((9.8699412e-8)*x2247))+(((0.001544160576)*x2274))+(((1.93020072)*x2249)));
IkReal x2283=(x2277+x2276+x2271+x2270+x2273+x2272+x2279+x2278+x2246);
j1eval[0]=((1.0)+(((1.21421648150246)*(IKabs(((-0.0150404058181848)+x2283+(((-1.0)*x2282)))))))+(((1.21421648150246)*(IKabs(((0.64)+(((4.0)*pz))+(((0.09719944)*x2256))+(((0.09719944)*x2250))+(((-1.4e-6)*x2247))+(((1.4e-6)*x2248))+((x2248*x2255))+(((0.64340024)*x2251))+(((-1.0)*x2247*x2255)))))))+(((1.21421648150246)*(IKabs(((0.64)+x2281+(((-1.0)*x2280)))))))+(((1.21421648150246)*(IKabs(((0.0150404058181848)+(((-0.64340024)*x2249))+(((0.105775140440093)*x2250))+(((0.105775140440093)*x2256))+(((-3.2899804e-8)*x2247))+(((0.64340024)*x2260))+(((3.2899804e-8)*x2248))+(((-1.0)*x2258*x2263))+(((-1.0)*x2257*x2261))+(((-1.0)*x2257*x2265))+(((0.09399944)*pz))+(((-0.000514720192)*x2274))+((x2254*x2265))+((x2254*x2261))+(((0.000514720192)*gconst51*x2258))+((x2262*x2263)))))))+(((1.21421648150246)*(IKabs(((0.0150404058181848)+x2283+(((-1.0)*x2282)))))))+(((1.21421648150246)*(IKabs(((-0.64)+x2281+(((-1.0)*x2280))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x2284=((12.0)*pz);
IkReal x2285=((4.0)*pz);
IkReal x2286=((0.64340024)*cj4);
IkReal x2287=(gconst51*r21);
IkReal x2288=(gconst52*r20);
IkReal x2289=(gconst52*r21);
IkReal x2290=(r22*sj4);
IkReal x2291=(gconst51*r20);
IkReal x2292=((1.93020072)*cj4);
IkReal x2293=((4.2e-6)*x2287);
IkReal x2294=((1.93020072)*x2290);
IkReal x2295=((0.29159832)*x2289);
IkReal x2296=((0.29159832)*x2291);
IkReal x2297=((1.4e-6)*x2287);
IkReal x2298=((0.09719944)*x2289);
IkReal x2299=((0.64340024)*x2290);
IkReal x2300=((0.09719944)*x2291);
IkReal x2301=(x2287*x2292);
IkReal x2302=(x2286*x2287);
IkReal x2303=((((4.2e-6)*x2288))+((x2288*x2292)));
IkReal x2304=((((1.4e-6)*x2288))+((x2286*x2288)));
IkReal x2305=(x2285+x2299+x2298+x2297+x2300+x2302);
IkReal x2306=(x2284+x2293+x2296+x2295+x2294+x2301);
op[0]=((0.64)+x2305+(((-1.0)*x2304)));
op[1]=-6.16e-6;
op[2]=((0.64)+x2306+(((-1.0)*x2303)));
op[3]=-1.232e-5;
op[4]=((-0.64)+x2306+(((-1.0)*x2303)));
op[5]=-6.16e-6;
op[6]=((-0.64)+x2305+(((-1.0)*x2304)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2307=((0.09399944)*pz);
IkReal x2308=((0.28199832)*pz);
IkReal x2309=(gconst52*r20);
IkReal x2310=(px*sj0);
IkReal x2311=(cj0*py);
IkReal x2312=((0.001544160576)*gconst52);
IkReal x2313=(cj0*r11);
IkReal x2314=(gconst51*r21);
IkReal x2315=(r01*sj0);
IkReal x2316=(cj0*r10);
IkReal x2317=((6.75570252e-7)*gconst52);
IkReal x2318=((2.25190084e-7)*gconst51);
IkReal x2319=(r00*sj0);
IkReal x2320=((2.25190084e-7)*gconst52);
IkReal x2321=((6.75570252e-7)*gconst51);
IkReal x2322=(gconst52*r21);
IkReal x2323=(gconst51*r20);
IkReal x2324=((0.000514720192)*gconst52);
IkReal x2325=((0.64340024)*x2311);
IkReal x2326=((3.2899804e-8)*x2314);
IkReal x2327=((0.105775140440093)*x2323);
IkReal x2328=((0.317325421320278)*x2322);
IkReal x2329=((0.317325421320278)*x2323);
IkReal x2330=((9.8699412e-8)*x2314);
IkReal x2331=((1.93020072)*x2311);
IkReal x2332=((0.105775140440093)*x2322);
IkReal x2333=(gconst51*x2319);
IkReal x2334=(x2319*x2320);
IkReal x2335=(x2313*x2318);
IkReal x2336=(x2313*x2324);
IkReal x2337=((0.001544160576)*gconst51*x2316);
IkReal x2338=(x2313*x2321);
IkReal x2339=(x2312*x2313);
IkReal x2340=(x2317*x2319);
IkReal x2341=((0.000514720192)*gconst51*x2316);
IkReal x2342=(((x2312*x2315))+((x2315*x2321))+((x2316*x2317))+(((9.8699412e-8)*x2309))+(((0.001544160576)*x2333))+(((1.93020072)*x2310)));
IkReal x2343=(((x2315*x2324))+((x2316*x2320))+((x2315*x2318))+(((0.64340024)*x2310))+(((0.000514720192)*x2333))+(((3.2899804e-8)*x2309)));
IkReal x2344=(x2332+x2334+x2335+x2336+x2327+x2326+x2325+x2307+x2341);
IkReal x2345=(x2330+x2331+x2337+x2338+x2339+x2329+x2328+x2308+x2340);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+x2344+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x2345+(((-1.0)*x2342))))))+(((htj1*htj1)*(((-0.0150404058181848)+x2345+(((-1.0)*x2342))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x2344+(((-1.0)*x2343))))))+(((0.205887932040862)*htj1))+(((-1.0)*x2343)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2346=((1.0)*sj1);
IkReal x2347=(r22*sj4);
IkReal x2348=(gconst52*r21);
IkReal x2349=((1.0)*cj1);
IkReal x2350=(gconst51*r20);
IkReal x2351=(cj4*gconst51*r21);
IkReal x2352=(cj4*gconst52*r20);
if( IKabs((((sj1*x2348))+((cj1*x2352))+(((-1.0)*x2347*x2349))+((sj1*x2350))+(((-1.0)*x2349*x2351)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2346*x2347))+(((-1.0)*x2346*x2351))+(((-1.0)*x2348*x2349))+((sj1*x2352))+(((-1.0)*x2349*x2350)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2348))+((cj1*x2352))+(((-1.0)*x2347*x2349))+((sj1*x2350))+(((-1.0)*x2349*x2351))))+IKsqr(((((-1.0)*x2346*x2347))+(((-1.0)*x2346*x2351))+(((-1.0)*x2348*x2349))+((sj1*x2352))+(((-1.0)*x2349*x2350))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2348))+((cj1*x2352))+(((-1.0)*x2347*x2349))+((sj1*x2350))+(((-1.0)*x2349*x2351))), ((((-1.0)*x2346*x2347))+(((-1.0)*x2346*x2351))+(((-1.0)*x2348*x2349))+((sj1*x2352))+(((-1.0)*x2349*x2350))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2353=IKcos(j2);
IkReal x2354=IKsin(j2);
IkReal x2355=(gconst51*r20);
IkReal x2356=(gconst52*sj0);
IkReal x2357=((1.0)*sj0);
IkReal x2358=(cj4*gconst51);
IkReal x2359=((0.0008)*gconst52);
IkReal x2360=((3.5e-7)*gconst51);
IkReal x2361=(cj0*r11);
IkReal x2362=((0.02349986)*sj1);
IkReal x2363=(gconst52*r20);
IkReal x2364=(cj1*x2353);
IkReal x2365=(cj0*gconst51*r10);
IkReal x2366=(cj1*x2354);
IkReal x2367=(cj0*gconst52*r10);
IkReal x2368=(sj1*x2354);
IkReal x2369=(gconst51*r00*sj0);
IkReal x2370=(sj1*x2353);
IkReal x2371=((1.0)*x2368);
evalcond[0]=(x2364+x2355+(((-1.0)*x2371))+((gconst52*r21)));
evalcond[1]=(((cj4*x2363))+(((-1.0)*r21*x2358))+(((-1.0)*x2370))+(((-1.0)*x2366))+(((-1.0)*r22*sj4)));
evalcond[2]=(((r01*x2356))+x2370+x2369+x2366+(((-1.0)*x2365))+(((-1.0)*gconst52*x2361)));
evalcond[3]=((((-1.0)*r02*sj4*x2357))+x2364+((cj4*r00*x2356))+(((-1.0)*x2371))+((x2358*x2361))+((cj0*r12*sj4))+(((-1.0)*r01*x2357*x2358))+(((-1.0)*cj4*x2367)));
evalcond[4]=((((3.5e-7)*x2363))+(((0.16085006)*x2370))+(((0.02349986)*x2364))+(((0.16)*cj1))+(((-1.0)*r21*x2359))+(((-1.0)*r21*x2360))+(((-1.0)*x2354*x2362))+(((-0.0008)*x2355))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x2366)));
evalcond[5]=((((0.02349986)*x2366))+(((-0.0008)*r01*x2356))+(((-3.5e-7)*x2367))+(((-0.0008)*x2369))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.16085006)*x2364))+((x2359*x2361))+(((-1.0)*r01*sj0*x2360))+(((3.5e-7)*r00*x2356))+(((0.0008)*x2365))+((x2360*x2361))+(((-1.0)*px*x2357))+((x2353*x2362))+((cj0*py))+(((0.16085006)*x2368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2372=((1.0)*gconst52);
CheckValue<IkReal> x2373 = IKatan2WithCheck(IkReal((((gconst51*r00))+((gconst52*r01)))),IkReal(((((-1.0)*gconst51*r10))+(((-1.0)*r11*x2372)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2373.valid){
continue;
}
CheckValue<IkReal> x2374=IKPowWithIntegerCheck(IKsign((((r22*((((sj4*(gconst51*gconst51)))+((sj4*(gconst52*gconst52)))))))+(((-1.0)*cj4*r20*x2372))+((cj4*gconst51*r21)))),-1);
if(!x2374.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2373.value)+(((1.5707963267949)*(x2374.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2375=IKsin(j0);
IkReal x2376=IKcos(j0);
IkReal x2377=((0.0008)*gconst52);
IkReal x2378=((1.0)*sj4);
IkReal x2379=(gconst51*r11);
IkReal x2380=((1.0)*cj4);
IkReal x2381=(r10*sj4);
IkReal x2382=(cj4*r02);
IkReal x2383=(r12*x2375);
IkReal x2384=(r01*x2376);
IkReal x2385=((1.0)*x2376);
IkReal x2386=(gconst52*x2375);
IkReal x2387=(sj4*x2376);
IkReal x2388=(r00*x2376);
IkReal x2389=(gconst51*x2375);
evalcond[0]=(((gconst52*x2384))+((gconst51*x2388))+((r10*x2389))+((r11*x2386)));
evalcond[1]=((1.0)+((x2381*x2386))+((x2376*x2382))+((gconst52*r00*x2387))+(((-1.0)*gconst51*x2378*x2384))+(((-1.0)*x2375*x2378*x2379))+((cj4*x2383)));
evalcond[2]=((((-1.0)*gconst52*r10*x2376*x2378))+((r00*sj4*x2386))+(((-1.0)*r12*x2376*x2380))+((x2379*x2387))+(((-1.0)*r01*x2378*x2389))+((x2375*x2382)));
evalcond[3]=((((-1.0)*x2378*x2383))+(((-1.0)*r02*x2376*x2378))+(((-1.0)*x2375*x2379*x2380))+((cj4*r10*x2386))+((cj4*gconst52*x2388))+(((-1.0)*gconst51*x2380*x2384)));
evalcond[4]=((((-0.0008)*gconst51*x2388))+(((3.5e-7)*gconst52*x2388))+(((-1.0)*px*x2385))+(((-1.0)*x2377*x2384))+(((-3.5e-7)*x2375*x2379))+(((3.5e-7)*r10*x2386))+(((-3.5e-7)*gconst51*x2384))+(((-0.0008)*r10*x2389))+(((-1.0)*py*x2375))+(((-1.0)*r11*x2375*x2377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2392 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2392.valid){
continue;
}
IkReal x2390=((-1.0)*(x2392.value));
IkReal x2391=x2196;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst51;
cj5=gconst52;
j5=x2390;
IkReal gconst50=x2390;
IkReal gconst51=((-1.0)*r21*x2391);
IkReal gconst52=(r20*x2391);
IkReal x2393=((12.0)*pz);
IkReal x2394=((0.28199832)*pz);
IkReal x2395=(gconst52*r20);
IkReal x2396=(gconst51*r21);
IkReal x2397=(px*sj0);
IkReal x2398=(gconst52*r21);
IkReal x2399=(r22*sj4);
IkReal x2400=((1.93020072)*cj4);
IkReal x2401=((0.001544160576)*gconst52);
IkReal x2402=(cj0*r11);
IkReal x2403=((0.64340024)*cj4);
IkReal x2404=(gconst51*r20);
IkReal x2405=(r01*sj0);
IkReal x2406=(cj0*r10);
IkReal x2407=((6.75570252e-7)*gconst52);
IkReal x2408=(cj0*py);
IkReal x2409=((2.25190084e-7)*gconst51);
IkReal x2410=(r00*sj0);
IkReal x2411=((2.25190084e-7)*gconst52);
IkReal x2412=((6.75570252e-7)*gconst51);
IkReal x2413=((0.000514720192)*gconst52);
IkReal x2414=((4.2e-6)*x2396);
IkReal x2415=((1.93020072)*x2399);
IkReal x2416=((0.29159832)*x2398);
IkReal x2417=((0.29159832)*x2404);
IkReal x2418=((0.317325421320278)*x2398);
IkReal x2419=((0.317325421320278)*x2404);
IkReal x2420=((9.8699412e-8)*x2396);
IkReal x2421=((1.93020072)*x2408);
IkReal x2422=(gconst51*x2410);
IkReal x2423=(x2396*x2400);
IkReal x2424=((0.001544160576)*gconst51*x2406);
IkReal x2425=(x2402*x2412);
IkReal x2426=(x2401*x2402);
IkReal x2427=(x2407*x2410);
IkReal x2428=((((4.2e-6)*x2395))+((x2395*x2400)));
IkReal x2429=(x2415+x2414+x2417+x2416+x2423+x2393);
IkReal x2430=((((1.93020072)*x2397))+((x2405*x2412))+((x2401*x2405))+(((9.8699412e-8)*x2395))+(((0.001544160576)*x2422))+((x2406*x2407)));
IkReal x2431=(x2419+x2418+x2420+x2421+x2424+x2425+x2426+x2427+x2394);
j1eval[0]=((1.0)+(((1.21421648150246)*(IKabs(((0.64)+x2429+(((-1.0)*x2428)))))))+(((1.21421648150246)*(IKabs(((0.0150404058181848)+x2431+(((-1.0)*x2430)))))))+(((1.21421648150246)*(IKabs(((0.64)+(((0.09719944)*x2398))+(((4.0)*pz))+(((-1.4e-6)*x2395))+(((-1.0)*x2395*x2403))+((x2396*x2403))+(((0.64340024)*x2399))+(((0.09719944)*x2404))+(((1.4e-6)*x2396)))))))+(((1.21421648150246)*(IKabs(((-0.64)+x2429+(((-1.0)*x2428)))))))+(((1.21421648150246)*(IKabs(((-0.0150404058181848)+x2431+(((-1.0)*x2430)))))))+(((1.21421648150246)*(IKabs(((0.0150404058181848)+(((-1.0)*x2405*x2409))+(((0.64340024)*x2408))+(((-1.0)*x2406*x2411))+((x2410*x2411))+(((0.000514720192)*gconst51*x2406))+(((0.09399944)*pz))+(((-1.0)*x2405*x2413))+((x2402*x2413))+(((-0.64340024)*x2397))+((x2402*x2409))+(((0.105775140440093)*x2398))+(((-3.2899804e-8)*x2395))+(((0.105775140440093)*x2404))+(((3.2899804e-8)*x2396))+(((-0.000514720192)*x2422))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x2432=((12.0)*pz);
IkReal x2433=((4.0)*pz);
IkReal x2434=((0.64340024)*cj4);
IkReal x2435=(gconst51*r21);
IkReal x2436=(gconst52*r20);
IkReal x2437=(gconst52*r21);
IkReal x2438=(r22*sj4);
IkReal x2439=(gconst51*r20);
IkReal x2440=((1.93020072)*cj4);
IkReal x2441=((4.2e-6)*x2435);
IkReal x2442=((1.93020072)*x2438);
IkReal x2443=((0.29159832)*x2437);
IkReal x2444=((0.29159832)*x2439);
IkReal x2445=((1.4e-6)*x2435);
IkReal x2446=((0.09719944)*x2437);
IkReal x2447=((0.64340024)*x2438);
IkReal x2448=((0.09719944)*x2439);
IkReal x2449=(x2435*x2440);
IkReal x2450=(x2434*x2435);
IkReal x2451=((((4.2e-6)*x2436))+((x2436*x2440)));
IkReal x2452=((((1.4e-6)*x2436))+((x2434*x2436)));
IkReal x2453=(x2433+x2446+x2447+x2445+x2448+x2450);
IkReal x2454=(x2432+x2442+x2443+x2441+x2444+x2449);
op[0]=((0.64)+x2453+(((-1.0)*x2452)));
op[1]=-6.16e-6;
op[2]=((0.64)+x2454+(((-1.0)*x2451)));
op[3]=-1.232e-5;
op[4]=((-0.64)+x2454+(((-1.0)*x2451)));
op[5]=-6.16e-6;
op[6]=((-0.64)+x2453+(((-1.0)*x2452)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2455=((0.09399944)*pz);
IkReal x2456=((0.28199832)*pz);
IkReal x2457=(gconst52*r20);
IkReal x2458=(px*sj0);
IkReal x2459=(cj0*py);
IkReal x2460=((0.001544160576)*gconst52);
IkReal x2461=(cj0*r11);
IkReal x2462=(gconst51*r21);
IkReal x2463=(r01*sj0);
IkReal x2464=(cj0*r10);
IkReal x2465=((6.75570252e-7)*gconst52);
IkReal x2466=((2.25190084e-7)*gconst51);
IkReal x2467=(r00*sj0);
IkReal x2468=((2.25190084e-7)*gconst52);
IkReal x2469=((6.75570252e-7)*gconst51);
IkReal x2470=(gconst52*r21);
IkReal x2471=(gconst51*r20);
IkReal x2472=((0.000514720192)*gconst52);
IkReal x2473=((0.64340024)*x2459);
IkReal x2474=((3.2899804e-8)*x2462);
IkReal x2475=((0.105775140440093)*x2471);
IkReal x2476=((0.317325421320278)*x2470);
IkReal x2477=((0.317325421320278)*x2471);
IkReal x2478=((9.8699412e-8)*x2462);
IkReal x2479=((1.93020072)*x2459);
IkReal x2480=((0.105775140440093)*x2470);
IkReal x2481=(gconst51*x2467);
IkReal x2482=(x2467*x2468);
IkReal x2483=(x2461*x2466);
IkReal x2484=(x2461*x2472);
IkReal x2485=((0.001544160576)*gconst51*x2464);
IkReal x2486=(x2461*x2469);
IkReal x2487=(x2460*x2461);
IkReal x2488=(x2465*x2467);
IkReal x2489=((0.000514720192)*gconst51*x2464);
IkReal x2490=(((x2460*x2463))+((x2464*x2465))+(((0.001544160576)*x2481))+(((9.8699412e-8)*x2457))+(((1.93020072)*x2458))+((x2463*x2469)));
IkReal x2491=((((0.000514720192)*x2481))+((x2464*x2468))+((x2463*x2472))+(((3.2899804e-8)*x2457))+(((0.64340024)*x2458))+((x2463*x2466)));
IkReal x2492=(x2489+x2484+x2482+x2483+x2480+x2475+x2474+x2473+x2455);
IkReal x2493=(x2488+x2486+x2487+x2485+x2477+x2476+x2479+x2478+x2456);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+x2492+(((-1.0)*x2491))+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.0150404058181848)+x2493+(((-1.0)*x2490))))))+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x2493+(((-1.0)*x2490))))))+(((0.205887932040862)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x2492+(((-1.0)*x2491)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2494=((1.0)*sj1);
IkReal x2495=(r22*sj4);
IkReal x2496=(gconst52*r21);
IkReal x2497=((1.0)*cj1);
IkReal x2498=(gconst51*r20);
IkReal x2499=(cj4*gconst51*r21);
IkReal x2500=(cj4*gconst52*r20);
if( IKabs((((sj1*x2496))+((sj1*x2498))+(((-1.0)*x2495*x2497))+(((-1.0)*x2497*x2499))+((cj1*x2500)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2496*x2497))+(((-1.0)*x2497*x2498))+(((-1.0)*x2494*x2499))+(((-1.0)*x2494*x2495))+((sj1*x2500)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2496))+((sj1*x2498))+(((-1.0)*x2495*x2497))+(((-1.0)*x2497*x2499))+((cj1*x2500))))+IKsqr(((((-1.0)*x2496*x2497))+(((-1.0)*x2497*x2498))+(((-1.0)*x2494*x2499))+(((-1.0)*x2494*x2495))+((sj1*x2500))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2496))+((sj1*x2498))+(((-1.0)*x2495*x2497))+(((-1.0)*x2497*x2499))+((cj1*x2500))), ((((-1.0)*x2496*x2497))+(((-1.0)*x2497*x2498))+(((-1.0)*x2494*x2499))+(((-1.0)*x2494*x2495))+((sj1*x2500))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2501=IKcos(j2);
IkReal x2502=IKsin(j2);
IkReal x2503=(gconst51*r20);
IkReal x2504=(gconst52*sj0);
IkReal x2505=((1.0)*sj0);
IkReal x2506=(cj4*gconst51);
IkReal x2507=((0.0008)*gconst52);
IkReal x2508=((3.5e-7)*gconst51);
IkReal x2509=(cj0*r11);
IkReal x2510=((0.02349986)*sj1);
IkReal x2511=(gconst52*r20);
IkReal x2512=(cj1*x2501);
IkReal x2513=(cj0*gconst51*r10);
IkReal x2514=(cj1*x2502);
IkReal x2515=(cj0*gconst52*r10);
IkReal x2516=(sj1*x2502);
IkReal x2517=(gconst51*r00*sj0);
IkReal x2518=(sj1*x2501);
IkReal x2519=((1.0)*x2516);
evalcond[0]=(x2512+x2503+(((-1.0)*x2519))+((gconst52*r21)));
evalcond[1]=((((-1.0)*r21*x2506))+((cj4*x2511))+(((-1.0)*x2514))+(((-1.0)*x2518))+(((-1.0)*r22*sj4)));
evalcond[2]=(x2518+x2514+x2517+(((-1.0)*gconst52*x2509))+(((-1.0)*x2513))+((r01*x2504)));
evalcond[3]=(x2512+(((-1.0)*x2519))+((cj4*r00*x2504))+(((-1.0)*r02*sj4*x2505))+(((-1.0)*r01*x2505*x2506))+((x2506*x2509))+((cj0*r12*sj4))+(((-1.0)*cj4*x2515)));
evalcond[4]=((((3.5e-7)*x2511))+(((0.16)*cj1))+(((-1.0)*x2502*x2510))+(((-0.0008)*x2503))+(((0.02349986)*x2512))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x2518))+(((0.16085006)*x2514))+(((-1.0)*r21*x2507))+(((-1.0)*r21*x2508)));
evalcond[5]=((((-0.0008)*r01*x2504))+(((-1.0)*r01*sj0*x2508))+(((3.5e-7)*r00*x2504))+(((-3.5e-7)*x2515))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((x2501*x2510))+(((0.02349986)*x2514))+(((0.0008)*x2513))+((x2508*x2509))+(((-0.16085006)*x2512))+(((-1.0)*px*x2505))+((x2507*x2509))+(((0.16085006)*x2516))+((cj0*py))+(((-0.0008)*x2517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2520=(cj4*gconst51);
IkReal x2521=(cj4*gconst52);
CheckValue<IkReal> x2522=IKPowWithIntegerCheck(IKsign((((gconst51*r20))+((gconst52*r21)))),-1);
if(!x2522.valid){
continue;
}
CheckValue<IkReal> x2523 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x2520))+((r00*x2521))+(((-1.0)*r02*sj4)))),IkReal((((r11*x2520))+(((-1.0)*r10*x2521))+((r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2523.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2522.value)))+(x2523.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2524=IKsin(j0);
IkReal x2525=IKcos(j0);
IkReal x2526=((0.0008)*gconst52);
IkReal x2527=((1.0)*sj4);
IkReal x2528=(gconst51*r11);
IkReal x2529=((1.0)*cj4);
IkReal x2530=(r10*sj4);
IkReal x2531=(cj4*r02);
IkReal x2532=(r12*x2524);
IkReal x2533=(r01*x2525);
IkReal x2534=((1.0)*x2525);
IkReal x2535=(gconst52*x2524);
IkReal x2536=(sj4*x2525);
IkReal x2537=(r00*x2525);
IkReal x2538=(gconst51*x2524);
evalcond[0]=(((r10*x2538))+((gconst52*x2533))+((gconst51*x2537))+((r11*x2535)));
evalcond[1]=((1.0)+((x2530*x2535))+((gconst52*r00*x2536))+((cj4*x2532))+((x2525*x2531))+(((-1.0)*x2524*x2527*x2528))+(((-1.0)*gconst51*x2527*x2533)));
evalcond[2]=(((r00*sj4*x2535))+(((-1.0)*r12*x2525*x2529))+(((-1.0)*gconst52*r10*x2525*x2527))+((x2524*x2531))+(((-1.0)*r01*x2527*x2538))+((x2528*x2536)));
evalcond[3]=((((-1.0)*x2524*x2528*x2529))+((cj4*r10*x2535))+((cj4*gconst52*x2537))+(((-1.0)*x2527*x2532))+(((-1.0)*r02*x2525*x2527))+(((-1.0)*gconst51*x2529*x2533)));
evalcond[4]=((((-1.0)*r11*x2524*x2526))+(((3.5e-7)*gconst52*x2537))+(((-3.5e-7)*gconst51*x2533))+(((-1.0)*x2526*x2533))+(((-0.0008)*gconst51*x2537))+(((-1.0)*px*x2534))+(((3.5e-7)*r10*x2535))+(((-1.0)*py*x2524))+(((-0.0008)*r10*x2538))+(((-3.5e-7)*x2524*x2528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2541 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2541.valid){
continue;
}
IkReal x2539=((-1.0)*(x2541.value));
IkReal x2540=x2196;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst51;
cj5=gconst52;
j5=x2539;
IkReal gconst50=x2539;
IkReal gconst51=((-1.0)*r21*x2540);
IkReal gconst52=(r20*x2540);
IkReal x2542=((12.0)*pz);
IkReal x2543=((0.28199832)*pz);
IkReal x2544=(gconst52*r20);
IkReal x2545=(gconst51*r21);
IkReal x2546=(px*sj0);
IkReal x2547=(gconst52*r21);
IkReal x2548=(r22*sj4);
IkReal x2549=((1.93020072)*cj4);
IkReal x2550=((0.001544160576)*gconst52);
IkReal x2551=(cj0*r11);
IkReal x2552=((0.64340024)*cj4);
IkReal x2553=(gconst51*r20);
IkReal x2554=(r01*sj0);
IkReal x2555=(cj0*r10);
IkReal x2556=((6.75570252e-7)*gconst52);
IkReal x2557=(cj0*py);
IkReal x2558=((2.25190084e-7)*gconst51);
IkReal x2559=(r00*sj0);
IkReal x2560=((2.25190084e-7)*gconst52);
IkReal x2561=((6.75570252e-7)*gconst51);
IkReal x2562=((0.000514720192)*gconst52);
IkReal x2563=((4.2e-6)*x2545);
IkReal x2564=((1.93020072)*x2548);
IkReal x2565=((0.29159832)*x2547);
IkReal x2566=((0.29159832)*x2553);
IkReal x2567=((0.317325421320278)*x2547);
IkReal x2568=((0.317325421320278)*x2553);
IkReal x2569=((9.8699412e-8)*x2545);
IkReal x2570=((1.93020072)*x2557);
IkReal x2571=(gconst51*x2559);
IkReal x2572=(x2545*x2549);
IkReal x2573=((0.001544160576)*gconst51*x2555);
IkReal x2574=(x2551*x2561);
IkReal x2575=(x2550*x2551);
IkReal x2576=(x2556*x2559);
IkReal x2577=((((4.2e-6)*x2544))+((x2544*x2549)));
IkReal x2578=(x2563+x2565+x2564+x2566+x2542+x2572);
IkReal x2579=(((x2554*x2561))+((x2550*x2554))+(((0.001544160576)*x2571))+((x2555*x2556))+(((1.93020072)*x2546))+(((9.8699412e-8)*x2544)));
IkReal x2580=(x2569+x2568+x2567+x2543+x2576+x2574+x2575+x2573+x2570);
j1eval[0]=((1.0)+(((1.21421648150246)*(IKabs(((0.64)+(((1.4e-6)*x2545))+(((4.0)*pz))+(((0.09719944)*x2553))+(((-1.4e-6)*x2544))+(((0.09719944)*x2547))+(((0.64340024)*x2548))+(((-1.0)*x2544*x2552))+((x2545*x2552)))))))+(((1.21421648150246)*(IKabs(((-0.64)+x2578+(((-1.0)*x2577)))))))+(((1.21421648150246)*(IKabs(((-0.0150404058181848)+x2580+(((-1.0)*x2579)))))))+(((1.21421648150246)*(IKabs(((0.64)+x2578+(((-1.0)*x2577)))))))+(((1.21421648150246)*(IKabs(((0.0150404058181848)+(((-1.0)*x2554*x2558))+(((-1.0)*x2555*x2560))+((x2551*x2558))+((x2559*x2560))+(((0.000514720192)*gconst51*x2555))+(((-3.2899804e-8)*x2544))+(((3.2899804e-8)*x2545))+(((0.09399944)*pz))+(((0.64340024)*x2557))+(((-0.64340024)*x2546))+(((-0.000514720192)*x2571))+(((0.105775140440093)*x2547))+(((-1.0)*x2554*x2562))+((x2551*x2562))+(((0.105775140440093)*x2553)))))))+(((1.21421648150246)*(IKabs(((0.0150404058181848)+x2580+(((-1.0)*x2579))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x2581=((12.0)*pz);
IkReal x2582=((4.0)*pz);
IkReal x2583=((0.64340024)*cj4);
IkReal x2584=(gconst51*r21);
IkReal x2585=(gconst52*r20);
IkReal x2586=(gconst52*r21);
IkReal x2587=(r22*sj4);
IkReal x2588=(gconst51*r20);
IkReal x2589=((1.93020072)*cj4);
IkReal x2590=((4.2e-6)*x2584);
IkReal x2591=((1.93020072)*x2587);
IkReal x2592=((0.29159832)*x2586);
IkReal x2593=((0.29159832)*x2588);
IkReal x2594=((1.4e-6)*x2584);
IkReal x2595=((0.09719944)*x2586);
IkReal x2596=((0.64340024)*x2587);
IkReal x2597=((0.09719944)*x2588);
IkReal x2598=(x2584*x2589);
IkReal x2599=(x2583*x2584);
IkReal x2600=((((4.2e-6)*x2585))+((x2585*x2589)));
IkReal x2601=((((1.4e-6)*x2585))+((x2583*x2585)));
IkReal x2602=(x2594+x2595+x2596+x2597+x2599+x2582);
IkReal x2603=(x2590+x2591+x2592+x2593+x2598+x2581);
op[0]=((0.64)+(((-1.0)*x2601))+x2602);
op[1]=-6.16e-6;
op[2]=((0.64)+(((-1.0)*x2600))+x2603);
op[3]=-1.232e-5;
op[4]=((-0.64)+(((-1.0)*x2600))+x2603);
op[5]=-6.16e-6;
op[6]=((-0.64)+(((-1.0)*x2601))+x2602);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2604=((0.09399944)*pz);
IkReal x2605=((0.28199832)*pz);
IkReal x2606=(gconst52*r20);
IkReal x2607=(px*sj0);
IkReal x2608=(cj0*py);
IkReal x2609=((0.001544160576)*gconst52);
IkReal x2610=(cj0*r11);
IkReal x2611=(gconst51*r21);
IkReal x2612=(r01*sj0);
IkReal x2613=(cj0*r10);
IkReal x2614=((6.75570252e-7)*gconst52);
IkReal x2615=((2.25190084e-7)*gconst51);
IkReal x2616=(r00*sj0);
IkReal x2617=((2.25190084e-7)*gconst52);
IkReal x2618=((6.75570252e-7)*gconst51);
IkReal x2619=(gconst52*r21);
IkReal x2620=(gconst51*r20);
IkReal x2621=((0.000514720192)*gconst52);
IkReal x2622=((0.64340024)*x2608);
IkReal x2623=((3.2899804e-8)*x2611);
IkReal x2624=((0.105775140440093)*x2620);
IkReal x2625=((0.317325421320278)*x2619);
IkReal x2626=((0.317325421320278)*x2620);
IkReal x2627=((9.8699412e-8)*x2611);
IkReal x2628=((1.93020072)*x2608);
IkReal x2629=((0.105775140440093)*x2619);
IkReal x2630=(gconst51*x2616);
IkReal x2631=(x2616*x2617);
IkReal x2632=(x2610*x2615);
IkReal x2633=(x2610*x2621);
IkReal x2634=((0.001544160576)*gconst51*x2613);
IkReal x2635=(x2610*x2618);
IkReal x2636=(x2609*x2610);
IkReal x2637=(x2614*x2616);
IkReal x2638=((0.000514720192)*gconst51*x2613);
IkReal x2639=(((x2613*x2614))+(((9.8699412e-8)*x2606))+(((0.001544160576)*x2630))+(((1.93020072)*x2607))+((x2609*x2612))+((x2612*x2618)));
IkReal x2640=(((x2613*x2617))+(((3.2899804e-8)*x2606))+(((0.64340024)*x2607))+((x2612*x2621))+(((0.000514720192)*x2630))+((x2612*x2615)));
IkReal x2641=(x2638+x2631+x2633+x2632+x2604+x2622+x2623+x2624+x2629);
IkReal x2642=(x2635+x2634+x2637+x2636+x2605+x2626+x2627+x2625+x2628);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x2639))+x2642))))+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x2640))+x2641))))+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x2639))+x2642))))+(((-1.0)*x2640))+(((0.205887932040862)*htj1))+x2641);
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2643=((1.0)*sj1);
IkReal x2644=(r22*sj4);
IkReal x2645=(gconst52*r21);
IkReal x2646=((1.0)*cj1);
IkReal x2647=(gconst51*r20);
IkReal x2648=(cj4*gconst51*r21);
IkReal x2649=(cj4*gconst52*r20);
if( IKabs((((cj1*x2649))+(((-1.0)*x2646*x2648))+(((-1.0)*x2644*x2646))+((sj1*x2647))+((sj1*x2645)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2646*x2647))+(((-1.0)*x2645*x2646))+(((-1.0)*x2643*x2648))+(((-1.0)*x2643*x2644))+((sj1*x2649)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2649))+(((-1.0)*x2646*x2648))+(((-1.0)*x2644*x2646))+((sj1*x2647))+((sj1*x2645))))+IKsqr(((((-1.0)*x2646*x2647))+(((-1.0)*x2645*x2646))+(((-1.0)*x2643*x2648))+(((-1.0)*x2643*x2644))+((sj1*x2649))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2649))+(((-1.0)*x2646*x2648))+(((-1.0)*x2644*x2646))+((sj1*x2647))+((sj1*x2645))), ((((-1.0)*x2646*x2647))+(((-1.0)*x2645*x2646))+(((-1.0)*x2643*x2648))+(((-1.0)*x2643*x2644))+((sj1*x2649))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2650=IKcos(j2);
IkReal x2651=IKsin(j2);
IkReal x2652=(gconst51*r20);
IkReal x2653=(gconst52*sj0);
IkReal x2654=((1.0)*sj0);
IkReal x2655=(cj4*gconst51);
IkReal x2656=((0.0008)*gconst52);
IkReal x2657=((3.5e-7)*gconst51);
IkReal x2658=(cj0*r11);
IkReal x2659=((0.02349986)*sj1);
IkReal x2660=(gconst52*r20);
IkReal x2661=(cj1*x2650);
IkReal x2662=(cj0*gconst51*r10);
IkReal x2663=(cj1*x2651);
IkReal x2664=(cj0*gconst52*r10);
IkReal x2665=(sj1*x2651);
IkReal x2666=(gconst51*r00*sj0);
IkReal x2667=(sj1*x2650);
IkReal x2668=((1.0)*x2665);
evalcond[0]=(((gconst52*r21))+(((-1.0)*x2668))+x2652+x2661);
evalcond[1]=((((-1.0)*x2663))+(((-1.0)*x2667))+((cj4*x2660))+(((-1.0)*r21*x2655))+(((-1.0)*r22*sj4)));
evalcond[2]=((((-1.0)*x2662))+(((-1.0)*gconst52*x2658))+((r01*x2653))+x2666+x2667+x2663);
evalcond[3]=(((cj4*r00*x2653))+(((-1.0)*r01*x2654*x2655))+(((-1.0)*cj4*x2664))+(((-1.0)*r02*sj4*x2654))+((x2655*x2658))+((cj0*r12*sj4))+(((-1.0)*x2668))+x2661);
evalcond[4]=((((-1.0)*x2651*x2659))+(((0.16)*cj1))+(((3.5e-7)*x2660))+(((0.16085006)*x2663))+(((0.16085006)*x2667))+(((-1.0)*pz))+(((-1.0)*r21*x2656))+(((-1.0)*r21*x2657))+(((7.7e-7)*sj1))+(((-0.0008)*x2652))+(((0.02349986)*x2661)));
evalcond[5]=((((3.5e-7)*r00*x2653))+((x2657*x2658))+((x2656*x2658))+(((-1.0)*r01*sj0*x2657))+(((-1.0)*px*x2654))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.16085006)*x2665))+(((-0.0008)*r01*x2653))+((cj0*py))+((x2650*x2659))+(((0.02349986)*x2663))+(((0.0008)*x2662))+(((-3.5e-7)*x2664))+(((-0.16085006)*x2661))+(((-0.0008)*x2666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2670 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2670)==0){
continue;
}
IkReal x2669=pow(x2670,-0.5);
CheckValue<IkReal> x2671 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2671.valid){
continue;
}
IkReal gconst53=((3.14159265358979)+(((-1.0)*(x2671.value))));
IkReal gconst54=((1.0)*r21*x2669);
IkReal gconst55=((-1.0)*r20*x2669);
CheckValue<IkReal> x2672 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2672.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2672.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
CheckValue<IkReal> x2675 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2675.valid){
continue;
}
IkReal x2673=((1.0)*(x2675.value));
IkReal x2674=x2669;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst54;
cj5=gconst55;
j5=((3.14159265)+(((-1.0)*x2673)));
IkReal gconst53=((3.14159265358979)+(((-1.0)*x2673)));
IkReal gconst54=((1.0)*r21*x2674);
IkReal gconst55=((-1.0)*r20*x2674);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x2678 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2678.valid){
continue;
}
IkReal x2676=((1.0)*(x2678.value));
IkReal x2677=x2669;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst54;
cj5=gconst55;
j5=((3.14159265)+(((-1.0)*x2676)));
IkReal gconst53=((3.14159265358979)+(((-1.0)*x2676)));
IkReal gconst54=((1.0)*r21*x2677);
IkReal gconst55=((-1.0)*r20*x2677);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x2681 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2681.valid){
continue;
}
IkReal x2679=((1.0)*(x2681.value));
IkReal x2680=x2669;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst54;
cj5=gconst55;
j5=((3.14159265)+(((-1.0)*x2679)));
IkReal gconst53=((3.14159265358979)+(((-1.0)*x2679)));
IkReal gconst54=((1.0)*r21*x2680);
IkReal gconst55=((-1.0)*r20*x2680);
IkReal x2682=r21*r21;
IkReal x2683=r20*r20;
IkReal x2684=((1.0)+(((-1.0)*(r22*r22))));
IkReal x2685=((0.0008)*x2682);
IkReal x2686=((0.0008)*x2683);
CheckValue<IkReal> x2692=IKPowWithIntegerCheck(x2684,-1);
if(!x2692.valid){
continue;
}
IkReal x2687=x2692.value;
IkReal x2688=(r22*sj4*x2687);
IkReal x2689=x2669;
IkReal x2690=(cj4*x2689);
IkReal x2691=((1.0)*sj4*x2689);
j0eval[0]=IKsign(((((-1.0)*x2685*x2688))+((r20*rxp0_2*x2691))+(((-1.0)*cj4*rxp2_2))+((r21*rxp1_2*x2691))+(((-1.0)*x2686*x2688))+(((-1.0)*x2686*x2690))+(((-1.0)*x2685*x2690))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2693=((0.0008)*sj4);
IkReal x2694=((3.5e-7)*gconst55);
IkReal x2695=((0.0008)*gconst54);
IkReal x2696=((0.0008)*gconst55);
IkReal x2697=((3.5e-7)*gconst54);
CheckValue<IkReal> x2698=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst55*rxp0_2*sj4))+((r22*(((((-1.0)*x2693*(gconst54*gconst54)))+(((-1.0)*x2693*(gconst55*gconst55)))))))+(((-1.0)*cj4*rxp2_2))+((r21*((((cj4*x2694))+(((-1.0)*cj4*x2695))))))+((r20*((((cj4*x2697))+((cj4*x2696))))))+((gconst54*rxp1_2*sj4)))),-1);
if(!x2698.valid){
continue;
}
CheckValue<IkReal> x2699 = IKatan2WithCheck(IkReal(((((-1.0)*px))+(((-1.0)*r00*x2695))+((r00*x2694))+(((-1.0)*r01*x2696))+(((-1.0)*r01*x2697)))),IkReal(((((-1.0)*r10*x2694))+((r10*x2695))+py+((r11*x2696))+((r11*x2697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2699.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2698.value)))+(x2699.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2700=IKsin(j0);
IkReal x2701=IKcos(j0);
IkReal x2702=(gconst55*r10);
IkReal x2703=((1.0)*sj4);
IkReal x2704=((1.0)*cj4);
IkReal x2705=(cj4*x2700);
IkReal x2706=(gconst54*x2701);
IkReal x2707=(r11*x2700);
IkReal x2708=(r02*x2701);
IkReal x2709=(sj4*x2700);
IkReal x2710=(gconst54*r10*x2700);
IkReal x2711=(gconst55*r00*x2701);
IkReal x2712=(gconst55*r01*x2701);
evalcond[0]=(x2712+x2710+((r00*x2706))+((gconst55*x2707)));
evalcond[1]=((1.0)+(((-1.0)*r01*x2703*x2706))+((r12*x2705))+(((-1.0)*gconst54*x2703*x2707))+((cj4*x2708))+((x2702*x2709))+((sj4*x2711)));
evalcond[2]=((((-1.0)*r12*x2701*x2704))+(((-1.0)*x2701*x2702*x2703))+(((-1.0)*gconst54*r01*x2700*x2703))+((r11*sj4*x2706))+((gconst55*r00*x2709))+((r02*x2705)));
evalcond[3]=((((-1.0)*r01*x2704*x2706))+(((-1.0)*gconst54*x2704*x2707))+((cj4*x2711))+(((-1.0)*r12*x2700*x2703))+((x2702*x2705))+(((-1.0)*x2703*x2708)));
evalcond[4]=((((-3.5e-7)*gconst54*x2707))+(((3.5e-7)*x2711))+(((-0.0008)*x2712))+(((-0.0008)*x2710))+(((-1.0)*px*x2701))+(((3.5e-7)*x2700*x2702))+(((-0.0008)*gconst55*x2707))+(((-0.0008)*r00*x2706))+(((-3.5e-7)*r01*x2706))+(((-1.0)*py*x2700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2713=(gconst54*r20);
IkReal x2714=(gconst55*r21);
IkReal x2715=((1.0)*r21);
CheckValue<IkReal> x2722 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2722.valid){
continue;
}
IkReal x2716=((1.0)*(x2722.value));
IkReal x2717=(x2713+x2714);
IkReal x2718=((1.0)+x2717);
IkReal x2719=((-1.0)+x2717);
IkReal x2720=x2669;
IkReal x2721=(((cj4*gconst55*r20))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*gconst54*x2715)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst54;
cj5=gconst55;
j5=((3.14159265)+(((-1.0)*x2716)));
IkReal gconst53=((3.14159265358979)+(((-1.0)*x2716)));
IkReal gconst54=(x2715*x2720);
IkReal gconst55=((-1.0)*r20*x2720);
IkReal gconst56=x2718;
IkReal gconst57=x2719;
IkReal gconst58=x2721;
IkReal gconst59=x2721;
IkReal gconst60=x2718;
IkReal gconst61=x2719;
IkReal gconst62=x2721;
IkReal gconst63=x2721;
IkReal gconst64=x2719;
IkReal gconst65=x2718;
IkReal gconst66=x2721;
IkReal gconst67=x2721;
IkReal gconst68=x2719;
IkReal gconst69=x2718;
IkReal gconst70=x2721;
IkReal gconst71=x2721;
IkReal x2723=cj4*cj4;
IkReal x2724=gconst54*gconst54;
IkReal x2725=r20*r20;
IkReal x2726=gconst55*gconst55;
IkReal x2727=r21*r21;
IkReal x2728=r22*r22;
IkReal x2729=sj4*sj4;
IkReal x2730=(gconst55*r20);
IkReal x2731=((48.0)*gconst54*r21);
IkReal x2732=(cj4*r22*sj4);
IkReal x2733=((24.0)*x2723);
IkReal x2734=((8.0)*gconst54*r21);
IkReal x2735=((32.0)*gconst54*r21);
IkReal x2736=((16.0)*x2723);
IkReal x2737=((4.0)*x2723);
IkReal x2738=(x2725*x2726);
IkReal x2739=(x2724*x2727);
IkReal x2740=(x2724*x2725);
IkReal x2741=(x2726*x2727);
IkReal x2742=(x2728*x2729);
j1eval[0]=((((0.5)*(IKabs(((24.0)+(((-1.0)*x2730*x2731))+(((48.0)*x2730*x2732))+(((-1.0)*x2733*x2738))+(((-1.0)*x2733*x2739))+(((-1.0)*x2731*x2732))+((x2723*x2730*x2731))+(((-24.0)*x2740))+(((-24.0)*x2741))+(((-24.0)*x2742)))))))+(IKabs(((16.0)+(((-1.0)*x2730*x2735))+(((-1.0)*x2736*x2739))+(((-1.0)*x2736*x2738))+(((32.0)*x2730*x2732))+(((-16.0)*x2742))+(((-16.0)*x2740))+(((-16.0)*x2741))+((x2723*x2730*x2735))+(((-1.0)*x2732*x2735)))))+(((0.5)*(IKabs(((4.0)+(((-1.0)*x2737*x2739))+(((-1.0)*x2737*x2738))+(((-1.0)*x2730*x2734))+(((8.0)*x2730*x2732))+((x2723*x2730*x2734))+(((-1.0)*x2732*x2734))+(((-4.0)*x2741))+(((-4.0)*x2740))+(((-4.0)*x2742))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x2743=((16.0)*gconst68);
IkReal x2744=((16.0)*gconst65);
IkReal x2745=((16.0)*gconst60);
IkReal x2746=((16.0)*gconst57);
IkReal x2747=((1.0)*gconst64);
IkReal x2748=(gconst68*gconst71);
IkReal x2749=(gconst65*gconst66);
IkReal x2750=(gconst60*gconst71);
IkReal x2751=((1.0)*gconst56);
IkReal x2752=((2.0)*gconst61);
IkReal x2753=(gconst58*gconst65);
IkReal x2754=(gconst57*gconst58);
IkReal x2755=(gconst56*gconst59);
IkReal x2756=(gconst62*gconst64);
IkReal x2757=(gconst56*gconst61);
IkReal x2758=(gconst61*gconst70);
IkReal x2759=(gconst57*gconst66);
IkReal x2760=(gconst60*gconst63);
IkReal x2761=(gconst62*gconst67);
IkReal x2762=((2.0)*gconst65);
IkReal x2763=((2.0)*gconst57);
IkReal x2764=(gconst59*gconst70);
IkReal x2765=((2.0)*gconst64);
IkReal x2766=(gconst59*gconst69);
IkReal x2767=((4.0)*gconst68);
IkReal x2768=(gconst63*gconst68);
IkReal x2769=((8.0)*gconst60);
IkReal x2770=(gconst67*gconst68);
IkReal x2771=((2.0)*gconst60);
IkReal x2772=((2.0)*gconst69);
IkReal x2773=((4.0)*gconst61);
IkReal x2774=(gconst57*gconst62);
IkReal x2775=(gconst56*gconst69);
IkReal x2776=(gconst59*gconst64);
IkReal x2777=((2.0)*gconst56);
IkReal x2778=(gconst67*gconst69);
IkReal x2779=((4.0)*gconst69);
IkReal x2780=(gconst56*gconst62);
IkReal x2781=(gconst69*gconst70);
IkReal x2782=((4.0)*gconst60);
IkReal x2783=(gconst57*gconst70);
IkReal x2784=(gconst59*gconst68);
IkReal x2785=(gconst65*gconst70);
IkReal x2786=(gconst64*gconst67);
IkReal x2787=((2.0)*gconst68);
IkReal x2788=(gconst56*gconst67);
IkReal x2789=(gconst62*gconst69);
IkReal x2790=(gconst64*gconst70);
IkReal x2791=(gconst56*gconst70);
IkReal x2792=(gconst67*gconst70);
IkReal x2793=(gconst62*gconst65);
IkReal x2794=(gconst65*x2767);
IkReal x2795=((8.0)*x2770);
IkReal x2796=((8.0)*x2785);
IkReal x2797=(gconst57*x2767);
IkReal x2798=(gconst65*x2782);
IkReal x2799=(gconst67*x2769);
IkReal x2800=((8.0)*x2783);
IkReal x2801=((8.0)*x2784);
IkReal x2802=((8.0)*x2793);
IkReal x2803=(gconst57*x2782);
IkReal x2804=((8.0)*x2774);
IkReal x2805=(gconst59*x2769);
IkReal x2806=(gconst59*x2760);
IkReal x2807=((1.0)*x2781);
IkReal x2808=((1.0)*x2789);
IkReal x2809=((1.0)*gconst61*gconst62);
IkReal x2810=(x2745+x2803);
IkReal x2811=(x2744+x2794);
IkReal x2812=(x2804+x2805);
IkReal x2813=(x2796+x2795);
IkReal x2814=(x2743+x2798+x2797);
IkReal x2815=(x2799+x2802+x2800+x2801);
op[0]=((((-1.0)*x2794))+(((-1.0)*gconst67*x2747*x2748))+((x2748*x2749))+(((-1.0)*x2749*x2807))+((x2778*x2790)));
op[1]=(((x2765*x2781))+((x2749*x2787))+(((-1.0)*x2813))+(((-1.0)*x2748*x2765))+(((-1.0)*x2748*x2762))+((x2762*x2781))+(((-1.0)*x2765*x2778))+(((-1.0)*x2765*x2770))+((x2749*x2772)));
op[2]=(((x2749*x2750))+((x2756*x2778))+(((-1.0)*x2759*x2807))+(((-1.0)*gconst65*x2779))+(((-1.0)*gconst67*x2748*x2751))+((x2758*x2786))+(((-1.0)*gconst67*x2747*x2750))+(((-1.0)*x2749*x2758))+(((-1.0)*x2814))+(((-1.0)*gconst64*x2779))+(((-16.0)*x2792))+((x2775*x2792))+((gconst64*gconst69*x2764))+(((-1.0)*gconst64*x2767))+((x2748*x2759))+((x2748*x2753))+(((-1.0)*x2749*x2808))+((x2749*x2768))+x2811+(((-1.0)*gconst59*x2747*x2748))+(((-1.0)*gconst67*x2747*x2768))+(((-1.0)*x2753*x2807)));
op[3]=(((x2749*x2752))+((x2756*x2772))+(((-1.0)*x2765*x2784))+((x2759*x2787))+(((-1.0)*x2770*x2777))+(((-32.0)*gconst70))+((x2772*x2791))+(((-1.0)*x2762*x2768))+((x2763*x2781))+((x2753*x2787))+((x2752*x2790))+(((-1.0)*x2748*x2777))+((x2752*x2785))+(((-1.0)*x2815))+(((-1.0)*x2748*x2763))+(((32.0)*gconst67))+(((-1.0)*x2750*x2762))+(((-1.0)*x2750*x2765))+(((-1.0)*gconst60*gconst67*x2765))+((x2762*x2789))+(((-1.0)*x2752*x2786))+x2813+(((-1.0)*x2772*x2788))+((x2753*x2772))+((x2759*x2772))+((x2749*x2771))+(((-1.0)*x2765*x2766))+(((-1.0)*x2765*x2768)));
op[4]=((64.0)+((x2758*x2776))+x2746+(((-1.0)*gconst67*x2750*x2751))+((x2759*x2768))+(((-1.0)*x2759*x2808))+((x2761*x2775))+((x2756*x2766))+(((-4.0)*x2775))+(((-16.0)*x2764))+(((-16.0)*x2761))+(((-1.0)*x2754*x2807))+(((-1.0)*gconst59*x2748*x2751))+((x2750*x2753))+((x2750*x2759))+(((-1.0)*gconst65*x2773))+(((-1.0)*x2758*x2759))+(((-1.0)*gconst57*x2779))+(((-1.0)*x2810))+(((-1.0)*x2811))+((x2757*x2792))+(((-1.0)*gconst64*x2773))+(((-1.0)*x2753*x2758))+((gconst61*gconst67*x2756))+((x2748*x2754))+(((-1.0)*gconst56*x2767))+(((-1.0)*x2749*x2809))+(((-1.0)*gconst67*x2751*x2768))+((x2749*x2760))+x2814+((x2753*x2768))+((x2755*x2781))+(((-1.0)*gconst59*x2747*x2750))+(((-1.0)*gconst67*x2747*x2760))+(((-1.0)*x2753*x2808))+(((-1.0)*gconst59*x2747*x2768))+(((-1.0)*gconst64*x2782)));
op[5]=(((x2752*x2753))+((x2752*x2756))+((x2752*x2759))+(((-1.0)*x2768*x2777))+(((-1.0)*gconst59*gconst60*x2765))+((x2754*x2772))+(((-1.0)*x2760*x2765))+(((-1.0)*x2760*x2762))+(((-1.0)*x2752*x2776))+(((-1.0)*x2755*x2787))+(((-32.0)*gconst62))+((x2763*x2789))+((x2752*x2791))+((x2752*x2793))+(((-1.0)*x2750*x2777))+((x2772*x2780))+((x2752*x2783))+(((-1.0)*x2812))+((x2754*x2787))+(((32.0)*gconst59))+(((-1.0)*x2750*x2763))+(((-1.0)*x2752*x2788))+(((-1.0)*x2755*x2772))+x2815+(((-1.0)*x2771*x2788))+((x2753*x2771))+((x2759*x2771))+(((-1.0)*x2763*x2768)));
op[6]=((((-1.0)*gconst56*x2782))+(((-16.0)*gconst59*gconst62))+(((-4.0)*x2757))+(((-1.0)*x2798))+(((-1.0)*x2797))+((x2754*x2768))+((x2759*x2760))+(((-1.0)*x2759*x2809))+(((-1.0)*x2754*x2758))+((gconst59*gconst61*x2756))+(((-1.0)*x2754*x2808))+((x2757*x2761))+(((-1.0)*gconst59*x2751*x2768))+((x2750*x2754))+(((-1.0)*gconst57*x2773))+(((-1.0)*gconst59*x2750*x2751))+((x2755*x2758))+(((-1.0)*gconst67*x2751*x2760))+(((-1.0)*x2746))+x2810+((x2753*x2760))+((x2755*x2789))+(((-1.0)*x2747*x2806))+(((-1.0)*x2753*x2809)));
op[7]=(((x2752*x2754))+(((-1.0)*x2752*x2755))+((x2754*x2771))+(((-1.0)*x2760*x2763))+((x2752*x2780))+(((-1.0)*x2760*x2777))+(((-1.0)*x2755*x2771))+x2812+((x2752*x2774)));
op[8]=((((-1.0)*x2803))+(((-1.0)*x2751*x2806))+((x2754*x2760))+(((-1.0)*x2754*x2809))+((gconst61*gconst62*x2755)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2816=(cj1*gconst55);
IkReal x2817=(cj4*r20);
IkReal x2818=(gconst55*sj1);
IkReal x2819=((1.0)*r21);
IkReal x2820=(gconst54*r20);
IkReal x2821=(cj4*gconst54);
IkReal x2822=((1.0)*r22*sj4);
if( IKabs(((((-1.0)*cj1*x2822))+((r21*x2818))+((sj1*x2820))+((x2816*x2817))+(((-1.0)*cj1*x2819*x2821)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x2820))+(((-1.0)*sj1*x2822))+(((-1.0)*sj1*x2819*x2821))+((x2817*x2818))+(((-1.0)*x2816*x2819)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x2822))+((r21*x2818))+((sj1*x2820))+((x2816*x2817))+(((-1.0)*cj1*x2819*x2821))))+IKsqr(((((-1.0)*cj1*x2820))+(((-1.0)*sj1*x2822))+(((-1.0)*sj1*x2819*x2821))+((x2817*x2818))+(((-1.0)*x2816*x2819))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x2822))+((r21*x2818))+((sj1*x2820))+((x2816*x2817))+(((-1.0)*cj1*x2819*x2821))), ((((-1.0)*cj1*x2820))+(((-1.0)*sj1*x2822))+(((-1.0)*sj1*x2819*x2821))+((x2817*x2818))+(((-1.0)*x2816*x2819))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2823=IKcos(j2);
IkReal x2824=IKsin(j2);
IkReal x2825=(cj0*gconst54);
IkReal x2826=(gconst55*r20);
IkReal x2827=((0.0008)*gconst54);
IkReal x2828=(r00*sj0);
IkReal x2829=((1.0)*r10);
IkReal x2830=((3.5e-7)*gconst55);
IkReal x2831=((1.0)*sj0);
IkReal x2832=(cj4*gconst55);
IkReal x2833=((0.0008)*gconst55);
IkReal x2834=(gconst54*r01);
IkReal x2835=(r01*sj0);
IkReal x2836=(gconst54*r21);
IkReal x2837=(cj0*r11);
IkReal x2838=(cj1*x2823);
IkReal x2839=(cj1*x2824);
IkReal x2840=(sj1*x2823);
IkReal x2841=(sj1*x2824);
IkReal x2842=((1.0)*x2841);
evalcond[0]=(((gconst54*r20))+x2838+((gconst55*r21))+(((-1.0)*x2842)));
evalcond[1]=((((-1.0)*x2839))+(((-1.0)*cj4*x2836))+((cj4*x2826))+(((-1.0)*r22*sj4))+(((-1.0)*x2840)));
evalcond[2]=(((gconst55*x2835))+(((-1.0)*gconst55*x2837))+(((-1.0)*x2825*x2829))+((gconst54*x2828))+x2840+x2839);
evalcond[3]=(((x2828*x2832))+((cj4*r11*x2825))+(((-1.0)*cj0*x2829*x2832))+((cj0*r12*sj4))+(((-1.0)*cj4*x2831*x2834))+(((-1.0)*r02*sj4*x2831))+x2838+(((-1.0)*x2842)));
evalcond[4]=((((-3.5e-7)*x2836))+(((0.16085006)*x2840))+(((0.16)*cj1))+(((0.02349986)*x2838))+(((0.16085006)*x2839))+(((-1.0)*r20*x2827))+(((3.5e-7)*x2826))+(((-1.0)*pz))+(((-1.0)*r21*x2833))+(((7.7e-7)*sj1))+(((-0.02349986)*x2841)));
evalcond[5]=((((-0.16085006)*x2838))+(((0.16085006)*x2841))+(((0.02349986)*x2839))+((x2828*x2830))+(((-1.0)*cj0*r10*x2830))+(((0.16)*sj1))+(((0.02349986)*x2840))+(((-7.7e-7)*cj1))+(((3.5e-7)*r11*x2825))+(((-3.5e-7)*sj0*x2834))+(((-1.0)*x2833*x2835))+((cj0*py))+(((0.0008)*r10*x2825))+((x2833*x2837))+(((-1.0)*x2827*x2828))+(((-1.0)*px*x2831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2843=((1.0)*gconst55);
CheckValue<IkReal> x2844 = IKatan2WithCheck(IkReal((((gconst54*r00))+((gconst55*r01)))),IkReal(((((-1.0)*r11*x2843))+(((-1.0)*gconst54*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2844.valid){
continue;
}
CheckValue<IkReal> x2845=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r20*x2843))+((r22*((((sj4*(gconst55*gconst55)))+((sj4*(gconst54*gconst54)))))))+((cj4*gconst54*r21)))),-1);
if(!x2845.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2844.value)+(((1.5707963267949)*(x2845.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2846=IKsin(j0);
IkReal x2847=IKcos(j0);
IkReal x2848=(gconst55*r10);
IkReal x2849=((1.0)*sj4);
IkReal x2850=((1.0)*cj4);
IkReal x2851=(cj4*x2846);
IkReal x2852=(gconst54*x2847);
IkReal x2853=(r11*x2846);
IkReal x2854=(r02*x2847);
IkReal x2855=(sj4*x2846);
IkReal x2856=(gconst54*r10*x2846);
IkReal x2857=(gconst55*r00*x2847);
IkReal x2858=(gconst55*r01*x2847);
evalcond[0]=(((gconst55*x2853))+((r00*x2852))+x2858+x2856);
evalcond[1]=((1.0)+((r12*x2851))+((x2848*x2855))+((cj4*x2854))+(((-1.0)*r01*x2849*x2852))+(((-1.0)*gconst54*x2849*x2853))+((sj4*x2857)));
evalcond[2]=((((-1.0)*x2847*x2848*x2849))+(((-1.0)*r12*x2847*x2850))+((gconst55*r00*x2855))+((r11*sj4*x2852))+(((-1.0)*gconst54*r01*x2846*x2849))+((r02*x2851)));
evalcond[3]=((((-1.0)*gconst54*x2850*x2853))+((x2848*x2851))+((cj4*x2857))+(((-1.0)*x2849*x2854))+(((-1.0)*r12*x2846*x2849))+(((-1.0)*r01*x2850*x2852)));
evalcond[4]=((((-1.0)*py*x2846))+(((-0.0008)*r00*x2852))+(((-3.5e-7)*r01*x2852))+(((-3.5e-7)*gconst54*x2853))+(((-0.0008)*gconst55*x2853))+(((3.5e-7)*x2846*x2848))+(((-1.0)*px*x2847))+(((-0.0008)*x2858))+(((-0.0008)*x2856))+(((3.5e-7)*x2857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2859=(gconst54*r20);
IkReal x2860=(gconst55*r21);
IkReal x2861=((1.0)*r21);
CheckValue<IkReal> x2868 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2868.valid){
continue;
}
IkReal x2862=((1.0)*(x2868.value));
IkReal x2863=(x2859+x2860);
IkReal x2864=((1.0)+x2863);
IkReal x2865=((-1.0)+x2863);
IkReal x2866=x2669;
IkReal x2867=(((cj4*gconst55*r20))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*gconst54*x2861)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst54;
cj5=gconst55;
j5=((3.14159265)+(((-1.0)*x2862)));
IkReal gconst53=((3.14159265358979)+(((-1.0)*x2862)));
IkReal gconst54=(x2861*x2866);
IkReal gconst55=((-1.0)*r20*x2866);
IkReal gconst56=x2864;
IkReal gconst57=x2865;
IkReal gconst58=x2867;
IkReal gconst59=x2867;
IkReal gconst60=x2864;
IkReal gconst61=x2865;
IkReal gconst62=x2867;
IkReal gconst63=x2867;
IkReal gconst64=x2865;
IkReal gconst65=x2864;
IkReal gconst66=x2867;
IkReal gconst67=x2867;
IkReal gconst68=x2865;
IkReal gconst69=x2864;
IkReal gconst70=x2867;
IkReal gconst71=x2867;
IkReal x2869=cj4*cj4;
IkReal x2870=gconst54*gconst54;
IkReal x2871=r20*r20;
IkReal x2872=gconst55*gconst55;
IkReal x2873=r21*r21;
IkReal x2874=r22*r22;
IkReal x2875=sj4*sj4;
IkReal x2876=(gconst55*r20);
IkReal x2877=((48.0)*gconst54*r21);
IkReal x2878=(cj4*r22*sj4);
IkReal x2879=((24.0)*x2869);
IkReal x2880=((8.0)*gconst54*r21);
IkReal x2881=((32.0)*gconst54*r21);
IkReal x2882=((16.0)*x2869);
IkReal x2883=((4.0)*x2869);
IkReal x2884=(x2871*x2872);
IkReal x2885=(x2870*x2873);
IkReal x2886=(x2870*x2871);
IkReal x2887=(x2872*x2873);
IkReal x2888=(x2874*x2875);
j1eval[0]=((IKabs(((16.0)+((x2869*x2876*x2881))+(((-1.0)*x2882*x2885))+(((-1.0)*x2882*x2884))+(((-16.0)*x2888))+(((-16.0)*x2887))+(((-16.0)*x2886))+(((32.0)*x2876*x2878))+(((-1.0)*x2876*x2881))+(((-1.0)*x2878*x2881)))))+(((0.5)*(IKabs(((24.0)+(((-1.0)*x2876*x2877))+(((-1.0)*x2877*x2878))+((x2869*x2876*x2877))+(((-1.0)*x2879*x2885))+(((-1.0)*x2879*x2884))+(((48.0)*x2876*x2878))+(((-24.0)*x2887))+(((-24.0)*x2886))+(((-24.0)*x2888)))))))+(((0.5)*(IKabs(((4.0)+(((-1.0)*x2883*x2885))+(((-1.0)*x2883*x2884))+((x2869*x2876*x2880))+(((-1.0)*x2876*x2880))+(((-1.0)*x2878*x2880))+(((-4.0)*x2886))+(((-4.0)*x2887))+(((-4.0)*x2888))+(((8.0)*x2876*x2878))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x2889=((16.0)*gconst68);
IkReal x2890=((16.0)*gconst65);
IkReal x2891=((16.0)*gconst60);
IkReal x2892=((16.0)*gconst57);
IkReal x2893=((1.0)*gconst64);
IkReal x2894=(gconst68*gconst71);
IkReal x2895=(gconst65*gconst66);
IkReal x2896=(gconst60*gconst71);
IkReal x2897=((1.0)*gconst56);
IkReal x2898=((2.0)*gconst61);
IkReal x2899=(gconst58*gconst65);
IkReal x2900=(gconst57*gconst58);
IkReal x2901=(gconst56*gconst59);
IkReal x2902=(gconst62*gconst64);
IkReal x2903=(gconst56*gconst61);
IkReal x2904=(gconst61*gconst70);
IkReal x2905=(gconst57*gconst66);
IkReal x2906=(gconst60*gconst63);
IkReal x2907=(gconst62*gconst67);
IkReal x2908=((2.0)*gconst65);
IkReal x2909=((2.0)*gconst57);
IkReal x2910=(gconst59*gconst70);
IkReal x2911=((2.0)*gconst64);
IkReal x2912=(gconst59*gconst69);
IkReal x2913=((4.0)*gconst68);
IkReal x2914=(gconst63*gconst68);
IkReal x2915=((8.0)*gconst60);
IkReal x2916=(gconst67*gconst68);
IkReal x2917=((2.0)*gconst60);
IkReal x2918=((2.0)*gconst69);
IkReal x2919=((4.0)*gconst61);
IkReal x2920=(gconst57*gconst62);
IkReal x2921=(gconst56*gconst69);
IkReal x2922=(gconst59*gconst64);
IkReal x2923=((2.0)*gconst56);
IkReal x2924=(gconst67*gconst69);
IkReal x2925=((4.0)*gconst69);
IkReal x2926=(gconst56*gconst62);
IkReal x2927=(gconst69*gconst70);
IkReal x2928=((4.0)*gconst60);
IkReal x2929=(gconst57*gconst70);
IkReal x2930=(gconst59*gconst68);
IkReal x2931=(gconst65*gconst70);
IkReal x2932=(gconst64*gconst67);
IkReal x2933=((2.0)*gconst68);
IkReal x2934=(gconst56*gconst67);
IkReal x2935=(gconst62*gconst69);
IkReal x2936=(gconst64*gconst70);
IkReal x2937=(gconst56*gconst70);
IkReal x2938=(gconst67*gconst70);
IkReal x2939=(gconst62*gconst65);
IkReal x2940=(gconst65*x2913);
IkReal x2941=((8.0)*x2916);
IkReal x2942=((8.0)*x2931);
IkReal x2943=(gconst57*x2913);
IkReal x2944=(gconst65*x2928);
IkReal x2945=(gconst67*x2915);
IkReal x2946=((8.0)*x2929);
IkReal x2947=((8.0)*x2930);
IkReal x2948=((8.0)*x2939);
IkReal x2949=(gconst57*x2928);
IkReal x2950=((8.0)*x2920);
IkReal x2951=(gconst59*x2915);
IkReal x2952=(gconst59*x2906);
IkReal x2953=((1.0)*x2927);
IkReal x2954=((1.0)*x2935);
IkReal x2955=((1.0)*gconst61*gconst62);
IkReal x2956=(x2891+x2949);
IkReal x2957=(x2890+x2940);
IkReal x2958=(x2950+x2951);
IkReal x2959=(x2942+x2941);
IkReal x2960=(x2889+x2944+x2943);
IkReal x2961=(x2948+x2947+x2946+x2945);
op[0]=(((x2924*x2936))+(((-1.0)*x2895*x2953))+(((-1.0)*x2940))+((x2894*x2895))+(((-1.0)*gconst67*x2893*x2894)));
op[1]=((((-1.0)*x2911*x2924))+(((-1.0)*x2959))+(((-1.0)*x2894*x2908))+((x2908*x2927))+(((-1.0)*x2911*x2916))+(((-1.0)*x2894*x2911))+((x2895*x2933))+((x2895*x2918))+((x2911*x2927)));
op[2]=(((gconst64*gconst69*x2910))+(((-16.0)*x2938))+(((-1.0)*gconst59*x2893*x2894))+((x2902*x2924))+(((-1.0)*x2905*x2953))+((x2895*x2896))+(((-1.0)*gconst64*x2925))+((x2904*x2932))+(((-1.0)*gconst67*x2893*x2914))+(((-1.0)*gconst65*x2925))+(((-1.0)*x2895*x2904))+(((-1.0)*x2960))+((x2894*x2905))+(((-1.0)*x2895*x2954))+(((-1.0)*gconst64*x2913))+((x2894*x2899))+(((-1.0)*gconst67*x2894*x2897))+(((-1.0)*x2899*x2953))+((x2921*x2938))+(((-1.0)*gconst67*x2893*x2896))+x2957+((x2895*x2914)));
op[3]=(((x2899*x2933))+(((-1.0)*x2911*x2930))+(((-1.0)*x2898*x2932))+(((-1.0)*gconst60*gconst67*x2911))+((x2905*x2933))+((x2895*x2898))+(((-1.0)*x2918*x2934))+((x2918*x2937))+(((-1.0)*x2894*x2909))+(((-1.0)*x2916*x2923))+((x2908*x2935))+(((-32.0)*gconst70))+(((-1.0)*x2894*x2923))+(((-1.0)*x2896*x2908))+(((-1.0)*x2961))+(((-1.0)*x2896*x2911))+(((32.0)*gconst67))+(((-1.0)*x2911*x2912))+(((-1.0)*x2911*x2914))+((x2905*x2918))+((x2898*x2936))+((x2898*x2931))+((x2909*x2927))+(((-1.0)*x2908*x2914))+((x2899*x2918))+((x2902*x2918))+x2959+((x2895*x2917)));
op[4]=((64.0)+(((-1.0)*gconst56*x2913))+((x2901*x2927))+(((-1.0)*x2904*x2905))+(((-1.0)*gconst65*x2919))+(((-1.0)*gconst59*x2893*x2896))+((x2904*x2922))+(((-1.0)*x2957))+(((-1.0)*x2956))+(((-1.0)*x2905*x2954))+(((-1.0)*gconst64*x2928))+(((-1.0)*gconst59*x2893*x2914))+(((-1.0)*gconst67*x2897*x2914))+(((-1.0)*gconst67*x2893*x2906))+((gconst61*gconst67*x2902))+((x2903*x2938))+((x2894*x2900))+(((-1.0)*x2895*x2955))+((x2896*x2899))+((x2905*x2914))+(((-1.0)*gconst64*x2919))+(((-1.0)*x2899*x2904))+((x2896*x2905))+(((-1.0)*gconst67*x2896*x2897))+(((-1.0)*gconst57*x2925))+(((-1.0)*gconst59*x2894*x2897))+(((-1.0)*x2899*x2954))+x2892+(((-4.0)*x2921))+((x2899*x2914))+((x2902*x2912))+(((-16.0)*x2910))+x2960+((x2907*x2921))+((x2895*x2906))+(((-1.0)*x2900*x2953))+(((-16.0)*x2907)));
op[5]=((((-1.0)*x2906*x2908))+(((-1.0)*x2898*x2934))+(((-1.0)*gconst59*gconst60*x2911))+((x2900*x2933))+(((-1.0)*x2901*x2933))+(((-1.0)*x2958))+(((-1.0)*x2914*x2923))+((x2898*x2899))+(((-1.0)*x2898*x2922))+(((-1.0)*x2896*x2923))+(((-32.0)*gconst62))+((x2898*x2929))+(((-1.0)*x2896*x2909))+((x2918*x2926))+(((-1.0)*x2906*x2911))+((x2898*x2902))+((x2898*x2905))+((x2905*x2917))+(((-1.0)*x2917*x2934))+((x2898*x2939))+((x2898*x2937))+(((32.0)*gconst59))+(((-1.0)*x2901*x2918))+((x2900*x2918))+((x2909*x2935))+(((-1.0)*x2909*x2914))+((x2899*x2917))+x2961);
op[6]=((((-16.0)*gconst59*gconst62))+((x2899*x2906))+((x2901*x2904))+(((-1.0)*x2905*x2955))+((x2901*x2935))+((x2905*x2906))+(((-1.0)*x2900*x2904))+((x2903*x2907))+(((-1.0)*x2892))+(((-1.0)*x2943))+(((-1.0)*x2944))+(((-4.0)*x2903))+(((-1.0)*gconst56*x2928))+(((-1.0)*gconst59*x2896*x2897))+((x2896*x2900))+(((-1.0)*gconst67*x2897*x2906))+((x2900*x2914))+(((-1.0)*gconst59*x2897*x2914))+(((-1.0)*x2899*x2955))+(((-1.0)*x2893*x2952))+x2956+((gconst59*gconst61*x2902))+(((-1.0)*gconst57*x2919))+(((-1.0)*x2900*x2954)));
op[7]=((((-1.0)*x2906*x2909))+(((-1.0)*x2906*x2923))+(((-1.0)*x2898*x2901))+((x2898*x2920))+((x2898*x2926))+((x2898*x2900))+(((-1.0)*x2901*x2917))+((x2900*x2917))+x2958);
op[8]=(((gconst61*gconst62*x2901))+((x2900*x2906))+(((-1.0)*x2897*x2952))+(((-1.0)*x2949))+(((-1.0)*x2900*x2955)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2962=(cj1*gconst55);
IkReal x2963=(cj4*r20);
IkReal x2964=(gconst55*sj1);
IkReal x2965=((1.0)*r21);
IkReal x2966=(gconst54*r20);
IkReal x2967=(cj4*gconst54);
IkReal x2968=((1.0)*r22*sj4);
if( IKabs((((r21*x2964))+((x2962*x2963))+(((-1.0)*cj1*x2965*x2967))+(((-1.0)*cj1*x2968))+((sj1*x2966)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x2965*x2967))+(((-1.0)*x2962*x2965))+(((-1.0)*sj1*x2968))+((x2963*x2964))+(((-1.0)*cj1*x2966)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x2964))+((x2962*x2963))+(((-1.0)*cj1*x2965*x2967))+(((-1.0)*cj1*x2968))+((sj1*x2966))))+IKsqr(((((-1.0)*sj1*x2965*x2967))+(((-1.0)*x2962*x2965))+(((-1.0)*sj1*x2968))+((x2963*x2964))+(((-1.0)*cj1*x2966))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*x2964))+((x2962*x2963))+(((-1.0)*cj1*x2965*x2967))+(((-1.0)*cj1*x2968))+((sj1*x2966))), ((((-1.0)*sj1*x2965*x2967))+(((-1.0)*x2962*x2965))+(((-1.0)*sj1*x2968))+((x2963*x2964))+(((-1.0)*cj1*x2966))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2969=IKcos(j2);
IkReal x2970=IKsin(j2);
IkReal x2971=(cj0*gconst54);
IkReal x2972=(gconst55*r20);
IkReal x2973=((0.0008)*gconst54);
IkReal x2974=(r00*sj0);
IkReal x2975=((1.0)*r10);
IkReal x2976=((3.5e-7)*gconst55);
IkReal x2977=((1.0)*sj0);
IkReal x2978=(cj4*gconst55);
IkReal x2979=((0.0008)*gconst55);
IkReal x2980=(gconst54*r01);
IkReal x2981=(r01*sj0);
IkReal x2982=(gconst54*r21);
IkReal x2983=(cj0*r11);
IkReal x2984=(cj1*x2969);
IkReal x2985=(cj1*x2970);
IkReal x2986=(sj1*x2969);
IkReal x2987=(sj1*x2970);
IkReal x2988=((1.0)*x2987);
evalcond[0]=((((-1.0)*x2988))+((gconst54*r20))+((gconst55*r21))+x2984);
evalcond[1]=((((-1.0)*x2986))+(((-1.0)*x2985))+((cj4*x2972))+(((-1.0)*cj4*x2982))+(((-1.0)*r22*sj4)));
evalcond[2]=(((gconst55*x2981))+((gconst54*x2974))+(((-1.0)*gconst55*x2983))+x2986+x2985+(((-1.0)*x2971*x2975)));
evalcond[3]=((((-1.0)*cj0*x2975*x2978))+((cj4*r11*x2971))+((x2974*x2978))+(((-1.0)*r02*sj4*x2977))+(((-1.0)*x2988))+(((-1.0)*cj4*x2977*x2980))+((cj0*r12*sj4))+x2984);
evalcond[4]=((((3.5e-7)*x2972))+(((0.16085006)*x2985))+(((0.16085006)*x2986))+(((0.16)*cj1))+(((-3.5e-7)*x2982))+(((-1.0)*r21*x2979))+(((0.02349986)*x2984))+(((-0.02349986)*x2987))+(((-1.0)*r20*x2973))+(((-1.0)*pz))+(((7.7e-7)*sj1)));
evalcond[5]=((((3.5e-7)*r11*x2971))+(((0.16085006)*x2987))+(((-1.0)*x2979*x2981))+((x2974*x2976))+(((0.02349986)*x2985))+(((0.02349986)*x2986))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*cj0*r10*x2976))+(((-0.16085006)*x2984))+((cj0*py))+(((-3.5e-7)*sj0*x2980))+((x2979*x2983))+(((0.0008)*r10*x2971))+(((-1.0)*x2973*x2974))+(((-1.0)*px*x2977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2989=(cj4*gconst54);
IkReal x2990=(cj4*gconst55);
CheckValue<IkReal> x2991=IKPowWithIntegerCheck(IKsign((((gconst54*r20))+((gconst55*r21)))),-1);
if(!x2991.valid){
continue;
}
CheckValue<IkReal> x2992 = IKatan2WithCheck(IkReal((((r00*x2990))+(((-1.0)*r01*x2989))+(((-1.0)*r02*sj4)))),IkReal((((r11*x2989))+(((-1.0)*r10*x2990))+((r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2992.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2991.value)))+(x2992.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2993=IKsin(j0);
IkReal x2994=IKcos(j0);
IkReal x2995=(gconst55*r10);
IkReal x2996=((1.0)*sj4);
IkReal x2997=((1.0)*cj4);
IkReal x2998=(cj4*x2993);
IkReal x2999=(gconst54*x2994);
IkReal x3000=(r11*x2993);
IkReal x3001=(r02*x2994);
IkReal x3002=(sj4*x2993);
IkReal x3003=(gconst54*r10*x2993);
IkReal x3004=(gconst55*r00*x2994);
IkReal x3005=(gconst55*r01*x2994);
evalcond[0]=(((r00*x2999))+x3005+x3003+((gconst55*x3000)));
evalcond[1]=((1.0)+((cj4*x3001))+((r12*x2998))+(((-1.0)*gconst54*x2996*x3000))+((x2995*x3002))+(((-1.0)*r01*x2996*x2999))+((sj4*x3004)));
evalcond[2]=((((-1.0)*r12*x2994*x2997))+((r11*sj4*x2999))+((gconst55*r00*x3002))+((r02*x2998))+(((-1.0)*x2994*x2995*x2996))+(((-1.0)*gconst54*r01*x2993*x2996)));
evalcond[3]=(((x2995*x2998))+((cj4*x3004))+(((-1.0)*x2996*x3001))+(((-1.0)*r12*x2993*x2996))+(((-1.0)*gconst54*x2997*x3000))+(((-1.0)*r01*x2997*x2999)));
evalcond[4]=((((-0.0008)*x3003))+(((-0.0008)*x3005))+(((-1.0)*py*x2993))+(((-1.0)*px*x2994))+(((-3.5e-7)*r01*x2999))+(((-0.0008)*gconst55*x3000))+(((-0.0008)*r00*x2999))+(((3.5e-7)*x3004))+(((3.5e-7)*x2993*x2995))+(((-3.5e-7)*gconst54*x3000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3006=(gconst54*r20);
IkReal x3007=(gconst55*r21);
IkReal x3008=((1.0)*r21);
CheckValue<IkReal> x3015 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3015.valid){
continue;
}
IkReal x3009=((1.0)*(x3015.value));
IkReal x3010=(x3007+x3006);
IkReal x3011=((1.0)+x3010);
IkReal x3012=((-1.0)+x3010);
IkReal x3013=x2669;
IkReal x3014=(((cj4*gconst55*r20))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*gconst54*x3008)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst54;
cj5=gconst55;
j5=((3.14159265)+(((-1.0)*x3009)));
IkReal gconst53=((3.14159265358979)+(((-1.0)*x3009)));
IkReal gconst54=(x3008*x3013);
IkReal gconst55=((-1.0)*r20*x3013);
IkReal gconst56=x3011;
IkReal gconst57=x3012;
IkReal gconst58=x3014;
IkReal gconst59=x3014;
IkReal gconst60=x3011;
IkReal gconst61=x3012;
IkReal gconst62=x3014;
IkReal gconst63=x3014;
IkReal gconst64=x3012;
IkReal gconst65=x3011;
IkReal gconst66=x3014;
IkReal gconst67=x3014;
IkReal gconst68=x3012;
IkReal gconst69=x3011;
IkReal gconst70=x3014;
IkReal gconst71=x3014;
IkReal x3016=cj4*cj4;
IkReal x3017=gconst54*gconst54;
IkReal x3018=r20*r20;
IkReal x3019=gconst55*gconst55;
IkReal x3020=r21*r21;
IkReal x3021=r22*r22;
IkReal x3022=sj4*sj4;
IkReal x3023=(gconst55*r20);
IkReal x3024=((48.0)*gconst54*r21);
IkReal x3025=(cj4*r22*sj4);
IkReal x3026=((24.0)*x3016);
IkReal x3027=((8.0)*gconst54*r21);
IkReal x3028=((32.0)*gconst54*r21);
IkReal x3029=((16.0)*x3016);
IkReal x3030=((4.0)*x3016);
IkReal x3031=(x3018*x3019);
IkReal x3032=(x3017*x3020);
IkReal x3033=(x3017*x3018);
IkReal x3034=(x3019*x3020);
IkReal x3035=(x3021*x3022);
j1eval[0]=((((0.5)*(IKabs(((24.0)+(((-24.0)*x3034))+(((-24.0)*x3035))+(((-24.0)*x3033))+(((48.0)*x3023*x3025))+(((-1.0)*x3026*x3032))+(((-1.0)*x3026*x3031))+((x3016*x3023*x3024))+(((-1.0)*x3024*x3025))+(((-1.0)*x3023*x3024)))))))+(IKabs(((16.0)+(((-1.0)*x3029*x3031))+(((-1.0)*x3029*x3032))+(((-1.0)*x3025*x3028))+((x3016*x3023*x3028))+(((-16.0)*x3034))+(((-16.0)*x3033))+(((-16.0)*x3035))+(((-1.0)*x3023*x3028))+(((32.0)*x3023*x3025)))))+(((0.5)*(IKabs(((4.0)+(((-1.0)*x3030*x3032))+(((-1.0)*x3030*x3031))+(((8.0)*x3023*x3025))+(((-1.0)*x3025*x3027))+((x3016*x3023*x3027))+(((-1.0)*x3023*x3027))+(((-4.0)*x3035))+(((-4.0)*x3033))+(((-4.0)*x3034))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x3036=((16.0)*gconst68);
IkReal x3037=((16.0)*gconst65);
IkReal x3038=((16.0)*gconst60);
IkReal x3039=((16.0)*gconst57);
IkReal x3040=((1.0)*gconst64);
IkReal x3041=(gconst68*gconst71);
IkReal x3042=(gconst65*gconst66);
IkReal x3043=(gconst60*gconst71);
IkReal x3044=((1.0)*gconst56);
IkReal x3045=((2.0)*gconst61);
IkReal x3046=(gconst58*gconst65);
IkReal x3047=(gconst57*gconst58);
IkReal x3048=(gconst56*gconst59);
IkReal x3049=(gconst62*gconst64);
IkReal x3050=(gconst56*gconst61);
IkReal x3051=(gconst61*gconst70);
IkReal x3052=(gconst57*gconst66);
IkReal x3053=(gconst60*gconst63);
IkReal x3054=(gconst62*gconst67);
IkReal x3055=((2.0)*gconst65);
IkReal x3056=((2.0)*gconst57);
IkReal x3057=(gconst59*gconst70);
IkReal x3058=((2.0)*gconst64);
IkReal x3059=(gconst59*gconst69);
IkReal x3060=((4.0)*gconst68);
IkReal x3061=(gconst63*gconst68);
IkReal x3062=((8.0)*gconst60);
IkReal x3063=(gconst67*gconst68);
IkReal x3064=((2.0)*gconst60);
IkReal x3065=((2.0)*gconst69);
IkReal x3066=((4.0)*gconst61);
IkReal x3067=(gconst57*gconst62);
IkReal x3068=(gconst56*gconst69);
IkReal x3069=(gconst59*gconst64);
IkReal x3070=((2.0)*gconst56);
IkReal x3071=(gconst67*gconst69);
IkReal x3072=((4.0)*gconst69);
IkReal x3073=(gconst56*gconst62);
IkReal x3074=(gconst69*gconst70);
IkReal x3075=((4.0)*gconst60);
IkReal x3076=(gconst57*gconst70);
IkReal x3077=(gconst59*gconst68);
IkReal x3078=(gconst65*gconst70);
IkReal x3079=(gconst64*gconst67);
IkReal x3080=((2.0)*gconst68);
IkReal x3081=(gconst56*gconst67);
IkReal x3082=(gconst62*gconst69);
IkReal x3083=(gconst64*gconst70);
IkReal x3084=(gconst56*gconst70);
IkReal x3085=(gconst67*gconst70);
IkReal x3086=(gconst62*gconst65);
IkReal x3087=(gconst65*x3060);
IkReal x3088=((8.0)*x3063);
IkReal x3089=((8.0)*x3078);
IkReal x3090=(gconst57*x3060);
IkReal x3091=(gconst65*x3075);
IkReal x3092=(gconst67*x3062);
IkReal x3093=((8.0)*x3076);
IkReal x3094=((8.0)*x3077);
IkReal x3095=((8.0)*x3086);
IkReal x3096=(gconst57*x3075);
IkReal x3097=((8.0)*x3067);
IkReal x3098=(gconst59*x3062);
IkReal x3099=(gconst59*x3053);
IkReal x3100=((1.0)*x3074);
IkReal x3101=((1.0)*x3082);
IkReal x3102=((1.0)*gconst61*gconst62);
IkReal x3103=(x3096+x3038);
IkReal x3104=(x3087+x3037);
IkReal x3105=(x3097+x3098);
IkReal x3106=(x3089+x3088);
IkReal x3107=(x3090+x3091+x3036);
IkReal x3108=(x3092+x3093+x3094+x3095);
op[0]=((((-1.0)*x3087))+((x3071*x3083))+(((-1.0)*gconst67*x3040*x3041))+(((-1.0)*x3042*x3100))+((x3041*x3042)));
op[1]=((((-1.0)*x3058*x3063))+(((-1.0)*x3041*x3058))+(((-1.0)*x3041*x3055))+((x3058*x3074))+(((-1.0)*x3106))+((x3042*x3080))+((x3042*x3065))+(((-1.0)*x3058*x3071))+((x3055*x3074)));
op[2]=((((-1.0)*gconst64*x3072))+x3104+(((-1.0)*gconst59*x3040*x3041))+(((-1.0)*gconst64*x3060))+((x3042*x3043))+((x3068*x3085))+(((-1.0)*x3052*x3100))+(((-1.0)*x3107))+((x3041*x3052))+((gconst64*gconst69*x3057))+((x3049*x3071))+(((-1.0)*x3042*x3051))+(((-1.0)*gconst67*x3040*x3061))+(((-16.0)*x3085))+(((-1.0)*gconst67*x3040*x3043))+(((-1.0)*x3042*x3101))+((x3051*x3079))+((x3042*x3061))+(((-1.0)*gconst67*x3041*x3044))+(((-1.0)*x3046*x3100))+(((-1.0)*gconst65*x3072))+((x3041*x3046)));
op[3]=(x3106+((x3046*x3080))+(((-1.0)*x3058*x3061))+((x3042*x3045))+(((-1.0)*x3041*x3056))+(((-1.0)*x3065*x3081))+(((-1.0)*x3058*x3059))+(((-1.0)*x3063*x3070))+(((-1.0)*x3043*x3058))+(((-1.0)*x3043*x3055))+(((-1.0)*x3108))+(((-32.0)*gconst70))+((x3046*x3065))+((x3052*x3065))+((x3045*x3083))+((x3056*x3074))+(((-1.0)*gconst60*gconst67*x3058))+(((32.0)*gconst67))+((x3055*x3082))+(((-1.0)*x3055*x3061))+((x3052*x3080))+(((-1.0)*x3045*x3079))+((x3049*x3065))+((x3042*x3064))+(((-1.0)*x3058*x3077))+((x3065*x3084))+((x3045*x3078))+(((-1.0)*x3041*x3070)));
op[4]=((64.0)+(((-1.0)*gconst64*x3075))+(((-1.0)*gconst59*x3040*x3061))+((x3043*x3046))+x3107+(((-1.0)*gconst59*x3040*x3043))+(((-1.0)*gconst67*x3040*x3053))+(((-1.0)*gconst64*x3066))+x3039+(((-1.0)*x3047*x3100))+((x3050*x3085))+(((-1.0)*gconst59*x3041*x3044))+(((-1.0)*x3046*x3051))+(((-1.0)*x3052*x3101))+(((-1.0)*x3104))+(((-1.0)*x3103))+((x3046*x3061))+((x3052*x3061))+(((-1.0)*gconst67*x3043*x3044))+(((-16.0)*x3054))+(((-16.0)*x3057))+((x3043*x3052))+(((-1.0)*gconst57*x3072))+((x3042*x3053))+(((-1.0)*x3042*x3102))+(((-4.0)*x3068))+(((-1.0)*gconst65*x3066))+((x3048*x3074))+(((-1.0)*gconst56*x3060))+(((-1.0)*gconst67*x3044*x3061))+((x3054*x3068))+(((-1.0)*x3046*x3101))+((x3051*x3069))+(((-1.0)*x3051*x3052))+((x3049*x3059))+((x3041*x3047))+((gconst61*gconst67*x3049)));
op[5]=(((x3056*x3082))+x3108+(((-1.0)*x3061*x3070))+((x3045*x3052))+(((-1.0)*x3048*x3065))+(((-1.0)*x3064*x3081))+(((-1.0)*x3053*x3055))+(((-1.0)*x3053*x3058))+((x3065*x3073))+(((-1.0)*x3043*x3056))+(((-1.0)*gconst59*gconst60*x3058))+(((-1.0)*x3105))+(((-1.0)*x3045*x3081))+(((-32.0)*gconst62))+((x3046*x3064))+((x3052*x3064))+((x3045*x3084))+((x3045*x3086))+(((-1.0)*x3043*x3070))+((x3047*x3065))+(((32.0)*gconst59))+(((-1.0)*x3045*x3069))+(((-1.0)*x3048*x3080))+((x3045*x3046))+((x3045*x3049))+(((-1.0)*x3056*x3061))+((x3045*x3076))+((x3047*x3080)));
op[6]=(((x3048*x3051))+((x3043*x3047))+x3103+(((-16.0)*gconst59*gconst62))+(((-1.0)*gconst59*x3043*x3044))+(((-1.0)*x3091))+(((-1.0)*x3090))+((x3048*x3082))+(((-1.0)*x3047*x3051))+(((-1.0)*x3047*x3101))+(((-1.0)*x3052*x3102))+((x3052*x3053))+(((-1.0)*gconst59*x3044*x3061))+(((-1.0)*x3039))+(((-1.0)*x3040*x3099))+((x3047*x3061))+(((-1.0)*gconst56*x3075))+(((-1.0)*x3046*x3102))+(((-1.0)*gconst57*x3066))+((gconst59*gconst61*x3049))+(((-4.0)*x3050))+((x3046*x3053))+((x3050*x3054))+(((-1.0)*gconst67*x3044*x3053)));
op[7]=(((x3045*x3067))+x3105+(((-1.0)*x3045*x3048))+(((-1.0)*x3048*x3064))+(((-1.0)*x3053*x3056))+(((-1.0)*x3053*x3070))+((x3047*x3064))+((x3045*x3047))+((x3045*x3073)));
op[8]=((((-1.0)*x3096))+(((-1.0)*x3047*x3102))+((gconst61*gconst62*x3048))+((x3047*x3053))+(((-1.0)*x3044*x3099)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3109=(cj1*gconst55);
IkReal x3110=(cj4*r20);
IkReal x3111=(gconst55*sj1);
IkReal x3112=((1.0)*r21);
IkReal x3113=(gconst54*r20);
IkReal x3114=(cj4*gconst54);
IkReal x3115=((1.0)*r22*sj4);
if( IKabs((((sj1*x3113))+(((-1.0)*cj1*x3112*x3114))+(((-1.0)*cj1*x3115))+((x3109*x3110))+((r21*x3111)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x3115))+(((-1.0)*x3109*x3112))+(((-1.0)*cj1*x3113))+((x3110*x3111))+(((-1.0)*sj1*x3112*x3114)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x3113))+(((-1.0)*cj1*x3112*x3114))+(((-1.0)*cj1*x3115))+((x3109*x3110))+((r21*x3111))))+IKsqr(((((-1.0)*sj1*x3115))+(((-1.0)*x3109*x3112))+(((-1.0)*cj1*x3113))+((x3110*x3111))+(((-1.0)*sj1*x3112*x3114))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x3113))+(((-1.0)*cj1*x3112*x3114))+(((-1.0)*cj1*x3115))+((x3109*x3110))+((r21*x3111))), ((((-1.0)*sj1*x3115))+(((-1.0)*x3109*x3112))+(((-1.0)*cj1*x3113))+((x3110*x3111))+(((-1.0)*sj1*x3112*x3114))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3116=IKcos(j2);
IkReal x3117=IKsin(j2);
IkReal x3118=(cj0*gconst54);
IkReal x3119=(gconst55*r20);
IkReal x3120=((0.0008)*gconst54);
IkReal x3121=(r00*sj0);
IkReal x3122=((1.0)*r10);
IkReal x3123=((3.5e-7)*gconst55);
IkReal x3124=((1.0)*sj0);
IkReal x3125=(cj4*gconst55);
IkReal x3126=((0.0008)*gconst55);
IkReal x3127=(gconst54*r01);
IkReal x3128=(r01*sj0);
IkReal x3129=(gconst54*r21);
IkReal x3130=(cj0*r11);
IkReal x3131=(cj1*x3116);
IkReal x3132=(cj1*x3117);
IkReal x3133=(sj1*x3116);
IkReal x3134=(sj1*x3117);
IkReal x3135=((1.0)*x3134);
evalcond[0]=(x3131+((gconst54*r20))+(((-1.0)*x3135))+((gconst55*r21)));
evalcond[1]=((((-1.0)*x3133))+(((-1.0)*x3132))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*x3129))+((cj4*x3119)));
evalcond[2]=(x3133+x3132+((gconst54*x3121))+(((-1.0)*gconst55*x3130))+((gconst55*x3128))+(((-1.0)*x3118*x3122)));
evalcond[3]=((((-1.0)*r02*sj4*x3124))+x3131+(((-1.0)*cj0*x3122*x3125))+(((-1.0)*cj4*x3124*x3127))+((cj0*r12*sj4))+((x3121*x3125))+(((-1.0)*x3135))+((cj4*r11*x3118)));
evalcond[4]=((((3.5e-7)*x3119))+(((0.16)*cj1))+(((-1.0)*r20*x3120))+(((-1.0)*r21*x3126))+(((-3.5e-7)*x3129))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.02349986)*x3131))+(((0.16085006)*x3132))+(((0.16085006)*x3133))+(((-0.02349986)*x3134)));
evalcond[5]=((((3.5e-7)*r11*x3118))+(((-0.16085006)*x3131))+(((-3.5e-7)*sj0*x3127))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((x3121*x3123))+((x3126*x3130))+(((-1.0)*x3120*x3121))+(((-1.0)*x3126*x3128))+(((0.0008)*r10*x3118))+((cj0*py))+(((-1.0)*cj0*r10*x3123))+(((0.02349986)*x3132))+(((0.02349986)*x3133))+(((0.16085006)*x3134))+(((-1.0)*px*x3124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3136=((3.5e-7)*cj5);
IkReal x3137=((0.0008)*cj5);
IkReal x3138=((0.0008)*sj5);
IkReal x3139=((3.5e-7)*sj5);
CheckValue<IkReal> x3140=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*rxp0_2*sj4))+((r20*((((cj4*x3139))+((cj4*x3137))))))+(((-1.0)*cj4*rxp2_2))+((rxp1_2*sj4*sj5))+(((-0.0008)*r22*sj4))+((r21*(((((-1.0)*cj4*x3138))+((cj4*x3136)))))))),-1);
if(!x3140.valid){
continue;
}
CheckValue<IkReal> x3141 = IKatan2WithCheck(IkReal((((r00*x3136))+(((-1.0)*px))+(((-1.0)*r00*x3138))+(((-1.0)*r01*x3137))+(((-1.0)*r01*x3139)))),IkReal(((((-1.0)*r10*x3136))+py+((r10*x3138))+((r11*x3139))+((r11*x3137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3141.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3140.value)))+(x3141.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3142=IKcos(j0);
IkReal x3143=IKsin(j0);
IkReal x3144=(r11*sj4);
IkReal x3145=((1.0)*sj4);
IkReal x3146=(r10*sj4);
IkReal x3147=(r01*sj5);
IkReal x3148=(r00*sj4);
IkReal x3149=(cj4*r02);
IkReal x3150=(r12*x3143);
IkReal x3151=((1.0)*x3142);
IkReal x3152=(sj5*x3142);
IkReal x3153=(cj5*x3143);
IkReal x3154=(sj5*x3143);
IkReal x3155=(cj5*x3142);
evalcond[0]=(((r10*x3154))+((r11*x3153))+((r00*x3152))+((r01*x3155)));
evalcond[1]=((1.0)+((x3142*x3149))+((cj4*x3150))+((x3148*x3155))+(((-1.0)*x3144*x3154))+(((-1.0)*x3142*x3145*x3147))+((x3146*x3153)));
evalcond[2]=(((x3148*x3153))+(((-1.0)*cj4*r12*x3151))+((x3143*x3149))+((x3144*x3152))+(((-1.0)*x3143*x3145*x3147))+(((-1.0)*r10*x3145*x3155)));
evalcond[3]=((((-1.0)*x3145*x3150))+(((-1.0)*cj4*x3147*x3151))+(((-1.0)*cj4*r11*x3154))+((cj4*r00*x3155))+((cj4*r10*x3153))+(((-1.0)*r02*x3142*x3145)));
evalcond[4]=((((3.5e-7)*r10*x3153))+(((-1.0)*py*x3143))+(((-3.5e-7)*r11*x3154))+(((-0.0008)*r01*x3155))+(((-0.0008)*r11*x3153))+(((-0.0008)*r00*x3152))+(((-3.5e-7)*x3142*x3147))+(((3.5e-7)*r00*x3155))+(((-0.0008)*r10*x3154))+(((-1.0)*px*x3151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3156=((0.28199832)*pz);
IkReal x3157=((12.0)*pz);
IkReal x3158=(cj5*r21);
IkReal x3159=(r20*sj5);
IkReal x3160=(cj0*sj5);
IkReal x3161=(cj5*r20);
IkReal x3162=((0.64340024)*cj4);
IkReal x3163=(r22*sj4);
IkReal x3164=((0.000514720192)*sj0);
IkReal x3165=(r00*sj5);
IkReal x3166=(r21*sj5);
IkReal x3167=(cj5*r01);
IkReal x3168=((0.001544160576)*sj0);
IkReal x3169=(cj0*cj5);
IkReal x3170=((1.93020072)*cj4);
IkReal x3171=(cj0*py);
IkReal x3172=(px*sj0);
IkReal x3173=((9.8699412e-8)*x3166);
IkReal x3174=((0.317325421320278)*x3159);
IkReal x3175=((1.93020072)*x3171);
IkReal x3176=((0.317325421320278)*x3158);
IkReal x3177=((1.93020072)*x3163);
IkReal x3178=((4.2e-6)*x3166);
IkReal x3179=((0.29159832)*x3159);
IkReal x3180=((0.29159832)*x3158);
IkReal x3181=(cj5*r00*sj0);
IkReal x3182=(r01*sj0*sj5);
IkReal x3183=((0.001544160576)*r11*x3169);
IkReal x3184=((6.75570252e-7)*r11*x3160);
IkReal x3185=((6.75570252e-7)*x3181);
IkReal x3186=((0.001544160576)*r10*x3160);
IkReal x3187=(x3166*x3170);
IkReal x3188=((((4.2e-6)*x3161))+((x3161*x3170)));
IkReal x3189=(x3187+x3180+x3157+x3179+x3178+x3177);
IkReal x3190=((((6.75570252e-7)*r10*x3169))+(((9.8699412e-8)*x3161))+((x3167*x3168))+(((6.75570252e-7)*x3182))+(((1.93020072)*x3172))+((x3165*x3168)));
IkReal x3191=(x3184+x3185+x3186+x3183+x3156+x3173+x3175+x3174+x3176);
j1eval[0]=((1.0)+(((1.21421648150246)*(IKabs(((-0.0150404058181848)+x3191+(((-1.0)*x3190)))))))+(((1.21421648150246)*(IKabs(((-0.64)+x3189+(((-1.0)*x3188)))))))+(((1.21421648150246)*(IKabs(((0.0150404058181848)+(((2.25190084e-7)*x3181))+(((2.25190084e-7)*r11*x3160))+(((-3.2899804e-8)*x3161))+(((-1.0)*x3164*x3165))+(((-1.0)*x3164*x3167))+(((-2.25190084e-7)*x3182))+(((3.2899804e-8)*x3166))+(((0.09399944)*pz))+(((0.64340024)*x3171))+(((0.000514720192)*r11*x3169))+(((0.000514720192)*r10*x3160))+(((-2.25190084e-7)*r10*x3169))+(((-0.64340024)*x3172))+(((0.105775140440093)*x3158))+(((0.105775140440093)*x3159)))))))+(((1.21421648150246)*(IKabs(((0.64)+x3189+(((-1.0)*x3188)))))))+(((1.21421648150246)*(IKabs(((0.64)+(((-1.0)*x3161*x3162))+(((0.64340024)*x3163))+(((4.0)*pz))+((x3162*x3166))+(((-1.4e-6)*x3161))+(((0.09719944)*x3159))+(((0.09719944)*x3158))+(((1.4e-6)*x3166)))))))+(((1.21421648150246)*(IKabs(((0.0150404058181848)+x3191+(((-1.0)*x3190))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x3192=((12.0)*pz);
IkReal x3193=((4.0)*pz);
IkReal x3194=(r21*sj5);
IkReal x3195=(r20*sj5);
IkReal x3196=((1.93020072)*cj4);
IkReal x3197=(r22*sj4);
IkReal x3198=(cj5*r20);
IkReal x3199=((0.64340024)*cj4);
IkReal x3200=(cj5*r21);
IkReal x3201=((1.93020072)*x3197);
IkReal x3202=((4.2e-6)*x3194);
IkReal x3203=((0.29159832)*x3195);
IkReal x3204=((0.29159832)*x3200);
IkReal x3205=((0.09719944)*x3200);
IkReal x3206=((0.64340024)*x3197);
IkReal x3207=((0.09719944)*x3195);
IkReal x3208=((1.4e-6)*x3194);
IkReal x3209=(x3194*x3196);
IkReal x3210=(x3194*x3199);
IkReal x3211=((((4.2e-6)*x3198))+((x3196*x3198)));
IkReal x3212=(((x3198*x3199))+(((1.4e-6)*x3198)));
IkReal x3213=(x3192+x3204+x3203+x3202+x3201+x3209);
IkReal x3214=(x3193+x3210+x3207+x3206+x3205+x3208);
op[0]=((0.64)+x3214+(((-1.0)*x3212)));
op[1]=-6.16e-6;
op[2]=((0.64)+x3213+(((-1.0)*x3211)));
op[3]=-1.232e-5;
op[4]=((-0.64)+x3213+(((-1.0)*x3211)));
op[5]=-6.16e-6;
op[6]=((-0.64)+x3214+(((-1.0)*x3212)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3215=((0.09399944)*pz);
IkReal x3216=((0.28199832)*pz);
IkReal x3217=(cj5*r21);
IkReal x3218=(px*sj0);
IkReal x3219=((0.000514720192)*sj5);
IkReal x3220=(r00*sj0);
IkReal x3221=(cj0*r11);
IkReal x3222=((6.75570252e-7)*sj5);
IkReal x3223=(r20*sj5);
IkReal x3224=(cj0*r10);
IkReal x3225=(cj5*r20);
IkReal x3226=((2.25190084e-7)*cj5);
IkReal x3227=(r01*sj0);
IkReal x3228=((2.25190084e-7)*sj5);
IkReal x3229=((0.001544160576)*sj5);
IkReal x3230=((6.75570252e-7)*cj5);
IkReal x3231=(cj0*py);
IkReal x3232=(r21*sj5);
IkReal x3233=((0.64340024)*x3231);
IkReal x3234=((0.105775140440093)*x3217);
IkReal x3235=((0.105775140440093)*x3223);
IkReal x3236=((3.2899804e-8)*x3232);
IkReal x3237=((9.8699412e-8)*x3232);
IkReal x3238=((0.317325421320278)*x3223);
IkReal x3239=((1.93020072)*x3231);
IkReal x3240=((0.317325421320278)*x3217);
IkReal x3241=(cj5*x3227);
IkReal x3242=((0.000514720192)*cj5*x3221);
IkReal x3243=(x3220*x3226);
IkReal x3244=(x3221*x3228);
IkReal x3245=(x3219*x3224);
IkReal x3246=((0.001544160576)*cj5*x3221);
IkReal x3247=(x3221*x3222);
IkReal x3248=(x3220*x3230);
IkReal x3249=(x3224*x3229);
IkReal x3250=(((x3224*x3230))+((x3222*x3227))+((x3220*x3229))+(((0.001544160576)*x3241))+(((1.93020072)*x3218))+(((9.8699412e-8)*x3225)));
IkReal x3251=((((0.000514720192)*x3241))+(((3.2899804e-8)*x3225))+((x3227*x3228))+(((0.64340024)*x3218))+((x3224*x3226))+((x3219*x3220)));
IkReal x3252=(x3243+x3242+x3245+x3244+x3215+x3233+x3236+x3234+x3235);
IkReal x3253=(x3249+x3248+x3240+x3247+x3246+x3216+x3237+x3238+x3239);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.0150404058181848)+x3253+(((-1.0)*x3250))))))+x3252+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x3253+(((-1.0)*x3250))))))+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((0.205887932040862)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x3252+(((-1.0)*x3251))))))+(((-1.0)*x3251)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3254=(cj4*sj5);
IkReal x3255=(r20*sj5);
IkReal x3256=(r21*sj1);
IkReal x3257=((1.0)*cj1*r21);
IkReal x3258=((1.0)*r22*sj4);
IkReal x3259=(cj4*cj5*r20);
if( IKabs((((cj1*x3259))+(((-1.0)*x3254*x3257))+((sj1*x3255))+(((-1.0)*cj1*x3258))+((cj5*x3256)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x3255))+((sj1*x3259))+(((-1.0)*cj5*x3257))+(((-1.0)*x3254*x3256))+(((-1.0)*sj1*x3258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x3259))+(((-1.0)*x3254*x3257))+((sj1*x3255))+(((-1.0)*cj1*x3258))+((cj5*x3256))))+IKsqr(((((-1.0)*cj1*x3255))+((sj1*x3259))+(((-1.0)*cj5*x3257))+(((-1.0)*x3254*x3256))+(((-1.0)*sj1*x3258))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x3259))+(((-1.0)*x3254*x3257))+((sj1*x3255))+(((-1.0)*cj1*x3258))+((cj5*x3256))), ((((-1.0)*cj1*x3255))+((sj1*x3259))+(((-1.0)*cj5*x3257))+(((-1.0)*x3254*x3256))+(((-1.0)*sj1*x3258))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3260=IKcos(j2);
IkReal x3261=IKsin(j2);
IkReal x3262=(cj0*cj5);
IkReal x3263=(r20*sj5);
IkReal x3264=((1.0)*cj4);
IkReal x3265=((3.5e-7)*sj5);
IkReal x3266=((1.0)*sj0);
IkReal x3267=(r01*sj0);
IkReal x3268=(r00*sj0);
IkReal x3269=((0.0008)*sj5);
IkReal x3270=(cj4*cj5);
IkReal x3271=(cj0*r10);
IkReal x3272=((3.5e-7)*cj5);
IkReal x3273=(cj5*r21);
IkReal x3274=(cj0*r11);
IkReal x3275=(cj1*x3260);
IkReal x3276=(cj1*x3261);
IkReal x3277=(sj1*x3260);
IkReal x3278=(sj1*x3261);
IkReal x3279=((1.0)*x3278);
evalcond[0]=(x3275+x3273+x3263+(((-1.0)*x3279)));
evalcond[1]=((((-1.0)*x3276))+(((-1.0)*x3277))+((r20*x3270))+(((-1.0)*r22*sj4))+(((-1.0)*r21*sj5*x3264)));
evalcond[2]=((((-1.0)*r11*x3262))+((cj5*x3267))+x3276+x3277+((sj5*x3268))+(((-1.0)*sj5*x3271)));
evalcond[3]=((((-1.0)*r10*x3262*x3264))+x3275+(((-1.0)*x3279))+((cj0*r12*sj4))+((cj4*sj5*x3274))+(((-1.0)*sj5*x3264*x3267))+((x3268*x3270))+(((-1.0)*r02*sj4*x3266)));
evalcond[4]=((((-0.02349986)*x3278))+(((0.16)*cj1))+(((-1.0)*r21*x3265))+((r20*x3272))+(((-1.0)*pz))+(((0.16085006)*x3277))+(((0.16085006)*x3276))+(((7.7e-7)*sj1))+(((0.02349986)*x3275))+(((-0.0008)*x3263))+(((-0.0008)*x3273)));
evalcond[5]=((((-3.5e-7)*r10*x3262))+((x3265*x3274))+(((-1.0)*px*x3266))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*x3265*x3267))+(((0.16085006)*x3278))+((x3268*x3272))+(((0.02349986)*x3277))+(((0.02349986)*x3276))+(((0.0008)*r11*x3262))+(((-0.0008)*cj5*x3267))+(((-0.16085006)*x3275))+((cj0*py))+((x3269*x3271))+(((-1.0)*x3268*x3269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3280=(cj4*sj5);
IkReal x3281=(cj4*cj5);
CheckValue<IkReal> x3282=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3282.valid){
continue;
}
CheckValue<IkReal> x3283 = IKatan2WithCheck(IkReal((((r00*x3281))+(((-1.0)*r02*sj4))+(((-1.0)*r01*x3280)))),IkReal(((((-1.0)*r10*x3281))+((r12*sj4))+((r11*x3280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3283.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3282.value)))+(x3283.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3284=IKcos(j0);
IkReal x3285=IKsin(j0);
IkReal x3286=(r11*sj4);
IkReal x3287=((1.0)*sj4);
IkReal x3288=(r10*sj4);
IkReal x3289=(r01*sj5);
IkReal x3290=(r00*sj4);
IkReal x3291=(cj4*r02);
IkReal x3292=(r12*x3285);
IkReal x3293=((1.0)*x3284);
IkReal x3294=(sj5*x3284);
IkReal x3295=(cj5*x3285);
IkReal x3296=(sj5*x3285);
IkReal x3297=(cj5*x3284);
evalcond[0]=(((r01*x3297))+((r00*x3294))+((r10*x3296))+((r11*x3295)));
evalcond[1]=((1.0)+((x3288*x3295))+((cj4*x3292))+((x3290*x3297))+(((-1.0)*x3284*x3287*x3289))+((x3284*x3291))+(((-1.0)*x3286*x3296)));
evalcond[2]=((((-1.0)*cj4*r12*x3293))+((x3290*x3295))+(((-1.0)*x3285*x3287*x3289))+(((-1.0)*r10*x3287*x3297))+((x3285*x3291))+((x3286*x3294)));
evalcond[3]=((((-1.0)*cj4*x3289*x3293))+(((-1.0)*r02*x3284*x3287))+(((-1.0)*x3287*x3292))+((cj4*r00*x3297))+((cj4*r10*x3295))+(((-1.0)*cj4*r11*x3296)));
evalcond[4]=((((-3.5e-7)*x3284*x3289))+(((-1.0)*py*x3285))+(((3.5e-7)*r10*x3295))+(((3.5e-7)*r00*x3297))+(((-1.0)*px*x3293))+(((-0.0008)*r11*x3295))+(((-0.0008)*r10*x3296))+(((-0.0008)*r01*x3297))+(((-3.5e-7)*r11*x3296))+(((-0.0008)*r00*x3294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3298=((0.28199832)*pz);
IkReal x3299=((12.0)*pz);
IkReal x3300=(cj5*r21);
IkReal x3301=(r20*sj5);
IkReal x3302=(cj0*sj5);
IkReal x3303=(cj5*r20);
IkReal x3304=((0.64340024)*cj4);
IkReal x3305=(r22*sj4);
IkReal x3306=((0.000514720192)*sj0);
IkReal x3307=(r00*sj5);
IkReal x3308=(r21*sj5);
IkReal x3309=(cj5*r01);
IkReal x3310=((0.001544160576)*sj0);
IkReal x3311=(cj0*cj5);
IkReal x3312=((1.93020072)*cj4);
IkReal x3313=(cj0*py);
IkReal x3314=(px*sj0);
IkReal x3315=((9.8699412e-8)*x3308);
IkReal x3316=((0.317325421320278)*x3301);
IkReal x3317=((1.93020072)*x3313);
IkReal x3318=((0.317325421320278)*x3300);
IkReal x3319=((1.93020072)*x3305);
IkReal x3320=((4.2e-6)*x3308);
IkReal x3321=((0.29159832)*x3301);
IkReal x3322=((0.29159832)*x3300);
IkReal x3323=(cj5*r00*sj0);
IkReal x3324=(r01*sj0*sj5);
IkReal x3325=((0.001544160576)*r11*x3311);
IkReal x3326=((6.75570252e-7)*r11*x3302);
IkReal x3327=((6.75570252e-7)*x3323);
IkReal x3328=((0.001544160576)*r10*x3302);
IkReal x3329=(x3308*x3312);
IkReal x3330=((((4.2e-6)*x3303))+((x3303*x3312)));
IkReal x3331=(x3320+x3321+x3322+x3329+x3319+x3299);
IkReal x3332=((((9.8699412e-8)*x3303))+(((1.93020072)*x3314))+((x3307*x3310))+(((6.75570252e-7)*x3324))+((x3309*x3310))+(((6.75570252e-7)*r10*x3311)));
IkReal x3333=(x3325+x3326+x3327+x3328+x3318+x3315+x3317+x3316+x3298);
j1eval[0]=((1.0)+(((1.21421648150246)*(IKabs(((0.0150404058181848)+(((0.000514720192)*r10*x3302))+(((-2.25190084e-7)*x3324))+(((0.105775140440093)*x3301))+(((0.105775140440093)*x3300))+(((-3.2899804e-8)*x3303))+(((-2.25190084e-7)*r10*x3311))+(((0.64340024)*x3313))+(((2.25190084e-7)*r11*x3302))+(((3.2899804e-8)*x3308))+(((0.09399944)*pz))+(((-1.0)*x3306*x3307))+(((-1.0)*x3306*x3309))+(((-0.64340024)*x3314))+(((0.000514720192)*r11*x3311))+(((2.25190084e-7)*x3323)))))))+(((1.21421648150246)*(IKabs(((0.0150404058181848)+x3333+(((-1.0)*x3332)))))))+(((1.21421648150246)*(IKabs(((-0.0150404058181848)+x3333+(((-1.0)*x3332)))))))+(((1.21421648150246)*(IKabs(((0.64)+x3331+(((-1.0)*x3330)))))))+(((1.21421648150246)*(IKabs(((0.64)+(((0.09719944)*x3300))+(((0.09719944)*x3301))+(((4.0)*pz))+(((-1.4e-6)*x3303))+(((0.64340024)*x3305))+((x3304*x3308))+(((1.4e-6)*x3308))+(((-1.0)*x3303*x3304)))))))+(((1.21421648150246)*(IKabs(((-0.64)+x3331+(((-1.0)*x3330))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x3334=((12.0)*pz);
IkReal x3335=((4.0)*pz);
IkReal x3336=(r21*sj5);
IkReal x3337=(r20*sj5);
IkReal x3338=((1.93020072)*cj4);
IkReal x3339=(r22*sj4);
IkReal x3340=(cj5*r20);
IkReal x3341=((0.64340024)*cj4);
IkReal x3342=(cj5*r21);
IkReal x3343=((1.93020072)*x3339);
IkReal x3344=((4.2e-6)*x3336);
IkReal x3345=((0.29159832)*x3337);
IkReal x3346=((0.29159832)*x3342);
IkReal x3347=((0.09719944)*x3342);
IkReal x3348=((0.64340024)*x3339);
IkReal x3349=((0.09719944)*x3337);
IkReal x3350=((1.4e-6)*x3336);
IkReal x3351=(x3336*x3338);
IkReal x3352=(x3336*x3341);
IkReal x3353=(((x3338*x3340))+(((4.2e-6)*x3340)));
IkReal x3354=(((x3340*x3341))+(((1.4e-6)*x3340)));
IkReal x3355=(x3343+x3346+x3344+x3345+x3351+x3334);
IkReal x3356=(x3348+x3349+x3347+x3350+x3352+x3335);
op[0]=((0.64)+(((-1.0)*x3354))+x3356);
op[1]=-6.16e-6;
op[2]=((0.64)+(((-1.0)*x3353))+x3355);
op[3]=-1.232e-5;
op[4]=((-0.64)+(((-1.0)*x3353))+x3355);
op[5]=-6.16e-6;
op[6]=((-0.64)+(((-1.0)*x3354))+x3356);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3357=((0.09399944)*pz);
IkReal x3358=((0.28199832)*pz);
IkReal x3359=(cj5*r21);
IkReal x3360=(px*sj0);
IkReal x3361=((0.000514720192)*sj5);
IkReal x3362=(r00*sj0);
IkReal x3363=(cj0*r11);
IkReal x3364=((6.75570252e-7)*sj5);
IkReal x3365=(r20*sj5);
IkReal x3366=(cj0*r10);
IkReal x3367=(cj5*r20);
IkReal x3368=((2.25190084e-7)*cj5);
IkReal x3369=(r01*sj0);
IkReal x3370=((2.25190084e-7)*sj5);
IkReal x3371=((0.001544160576)*sj5);
IkReal x3372=((6.75570252e-7)*cj5);
IkReal x3373=(cj0*py);
IkReal x3374=(r21*sj5);
IkReal x3375=((0.64340024)*x3373);
IkReal x3376=((0.105775140440093)*x3359);
IkReal x3377=((0.105775140440093)*x3365);
IkReal x3378=((3.2899804e-8)*x3374);
IkReal x3379=((9.8699412e-8)*x3374);
IkReal x3380=((0.317325421320278)*x3365);
IkReal x3381=((1.93020072)*x3373);
IkReal x3382=((0.317325421320278)*x3359);
IkReal x3383=(cj5*x3369);
IkReal x3384=((0.000514720192)*cj5*x3363);
IkReal x3385=(x3362*x3368);
IkReal x3386=(x3363*x3370);
IkReal x3387=(x3361*x3366);
IkReal x3388=((0.001544160576)*cj5*x3363);
IkReal x3389=(x3363*x3364);
IkReal x3390=(x3362*x3372);
IkReal x3391=(x3366*x3371);
IkReal x3392=(((x3362*x3371))+(((9.8699412e-8)*x3367))+(((0.001544160576)*x3383))+(((1.93020072)*x3360))+((x3366*x3372))+((x3364*x3369)));
IkReal x3393=((((0.64340024)*x3360))+(((0.000514720192)*x3383))+((x3361*x3362))+((x3369*x3370))+(((3.2899804e-8)*x3367))+((x3366*x3368)));
IkReal x3394=(x3378+x3377+x3376+x3375+x3357+x3386+x3387+x3384+x3385);
IkReal x3395=(x3379+x3358+x3382+x3380+x3381+x3388+x3389+x3391+x3390);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x3395+(((-1.0)*x3392))))))+x3394+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x3394+(((-1.0)*x3393))))))+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.0150404058181848)+x3395+(((-1.0)*x3392))))))+(((-1.0)*x3393))+(((0.205887932040862)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3396=(cj4*sj5);
IkReal x3397=(r20*sj5);
IkReal x3398=(r21*sj1);
IkReal x3399=((1.0)*cj1*r21);
IkReal x3400=((1.0)*r22*sj4);
IkReal x3401=(cj4*cj5*r20);
if( IKabs((((cj1*x3401))+((sj1*x3397))+(((-1.0)*x3396*x3399))+(((-1.0)*cj1*x3400))+((cj5*x3398)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*x3399))+(((-1.0)*x3396*x3398))+(((-1.0)*sj1*x3400))+((sj1*x3401))+(((-1.0)*cj1*x3397)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x3401))+((sj1*x3397))+(((-1.0)*x3396*x3399))+(((-1.0)*cj1*x3400))+((cj5*x3398))))+IKsqr(((((-1.0)*cj5*x3399))+(((-1.0)*x3396*x3398))+(((-1.0)*sj1*x3400))+((sj1*x3401))+(((-1.0)*cj1*x3397))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x3401))+((sj1*x3397))+(((-1.0)*x3396*x3399))+(((-1.0)*cj1*x3400))+((cj5*x3398))), ((((-1.0)*cj5*x3399))+(((-1.0)*x3396*x3398))+(((-1.0)*sj1*x3400))+((sj1*x3401))+(((-1.0)*cj1*x3397))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3402=IKcos(j2);
IkReal x3403=IKsin(j2);
IkReal x3404=(cj0*cj5);
IkReal x3405=(r20*sj5);
IkReal x3406=((1.0)*cj4);
IkReal x3407=((3.5e-7)*sj5);
IkReal x3408=((1.0)*sj0);
IkReal x3409=(r01*sj0);
IkReal x3410=(r00*sj0);
IkReal x3411=((0.0008)*sj5);
IkReal x3412=(cj4*cj5);
IkReal x3413=(cj0*r10);
IkReal x3414=((3.5e-7)*cj5);
IkReal x3415=(cj5*r21);
IkReal x3416=(cj0*r11);
IkReal x3417=(cj1*x3402);
IkReal x3418=(cj1*x3403);
IkReal x3419=(sj1*x3402);
IkReal x3420=(sj1*x3403);
IkReal x3421=((1.0)*x3420);
evalcond[0]=((((-1.0)*x3421))+x3417+x3415+x3405);
evalcond[1]=((((-1.0)*x3418))+(((-1.0)*x3419))+(((-1.0)*r21*sj5*x3406))+((r20*x3412))+(((-1.0)*r22*sj4)));
evalcond[2]=((((-1.0)*r11*x3404))+(((-1.0)*sj5*x3413))+((sj5*x3410))+x3418+x3419+((cj5*x3409)));
evalcond[3]=((((-1.0)*r10*x3404*x3406))+((cj4*sj5*x3416))+(((-1.0)*x3421))+x3417+((cj0*r12*sj4))+(((-1.0)*sj5*x3406*x3409))+((x3410*x3412))+(((-1.0)*r02*sj4*x3408)));
evalcond[4]=((((0.16)*cj1))+(((-1.0)*r21*x3407))+(((-0.0008)*x3415))+(((-1.0)*pz))+(((0.16085006)*x3419))+(((0.16085006)*x3418))+(((7.7e-7)*sj1))+(((-0.0008)*x3405))+((r20*x3414))+(((0.02349986)*x3417))+(((-0.02349986)*x3420)));
evalcond[5]=((((0.16085006)*x3420))+((x3411*x3413))+(((-1.0)*x3407*x3409))+(((-0.16085006)*x3417))+(((-0.0008)*cj5*x3409))+(((0.0008)*r11*x3404))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*px*x3408))+((x3407*x3416))+(((-3.5e-7)*r10*x3404))+(((0.02349986)*x3419))+(((0.02349986)*x3418))+(((-1.0)*x3410*x3411))+((x3410*x3414))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3422=((1.0)*cj5);
CheckValue<IkReal> x3423=IKPowWithIntegerCheck(IKsign((((cj4*r21*sj5))+((r22*sj4))+(((-1.0)*cj4*r20*x3422)))),-1);
if(!x3423.valid){
continue;
}
CheckValue<IkReal> x3424 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((((-1.0)*r11*x3422))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3424.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3423.value)))+(x3424.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3425=IKcos(j0);
IkReal x3426=IKsin(j0);
IkReal x3427=(r11*sj4);
IkReal x3428=((1.0)*sj4);
IkReal x3429=(r10*sj4);
IkReal x3430=(r01*sj5);
IkReal x3431=(r00*sj4);
IkReal x3432=(cj4*r02);
IkReal x3433=(r12*x3426);
IkReal x3434=((1.0)*x3425);
IkReal x3435=(sj5*x3425);
IkReal x3436=(cj5*x3426);
IkReal x3437=(sj5*x3426);
IkReal x3438=(cj5*x3425);
evalcond[0]=(((r01*x3438))+((r10*x3437))+((r11*x3436))+((r00*x3435)));
evalcond[1]=((1.0)+((x3425*x3432))+((x3429*x3436))+(((-1.0)*x3427*x3437))+((cj4*x3433))+(((-1.0)*x3425*x3428*x3430))+((x3431*x3438)));
evalcond[2]=((((-1.0)*cj4*r12*x3434))+((x3427*x3435))+(((-1.0)*x3426*x3428*x3430))+(((-1.0)*r10*x3428*x3438))+((x3431*x3436))+((x3426*x3432)));
evalcond[3]=((((-1.0)*x3428*x3433))+((cj4*r10*x3436))+(((-1.0)*cj4*r11*x3437))+(((-1.0)*r02*x3425*x3428))+((cj4*r00*x3438))+(((-1.0)*cj4*x3430*x3434)));
evalcond[4]=((((-3.5e-7)*x3425*x3430))+(((-1.0)*px*x3434))+(((-0.0008)*r00*x3435))+(((3.5e-7)*r10*x3436))+(((-0.0008)*r01*x3438))+(((3.5e-7)*r00*x3438))+(((-0.0008)*r10*x3437))+(((-0.0008)*r11*x3436))+(((-3.5e-7)*r11*x3437))+(((-1.0)*py*x3426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3439=((0.28199832)*pz);
IkReal x3440=((12.0)*pz);
IkReal x3441=(cj5*r21);
IkReal x3442=(r20*sj5);
IkReal x3443=(cj0*sj5);
IkReal x3444=(cj5*r20);
IkReal x3445=((0.64340024)*cj4);
IkReal x3446=(r22*sj4);
IkReal x3447=((0.000514720192)*sj0);
IkReal x3448=(r00*sj5);
IkReal x3449=(r21*sj5);
IkReal x3450=(cj5*r01);
IkReal x3451=((0.001544160576)*sj0);
IkReal x3452=(cj0*cj5);
IkReal x3453=((1.93020072)*cj4);
IkReal x3454=(cj0*py);
IkReal x3455=(px*sj0);
IkReal x3456=((9.8699412e-8)*x3449);
IkReal x3457=((0.317325421320278)*x3442);
IkReal x3458=((1.93020072)*x3454);
IkReal x3459=((0.317325421320278)*x3441);
IkReal x3460=((1.93020072)*x3446);
IkReal x3461=((4.2e-6)*x3449);
IkReal x3462=((0.29159832)*x3442);
IkReal x3463=((0.29159832)*x3441);
IkReal x3464=(cj5*r00*sj0);
IkReal x3465=(r01*sj0*sj5);
IkReal x3466=((0.001544160576)*r11*x3452);
IkReal x3467=((6.75570252e-7)*r11*x3443);
IkReal x3468=((6.75570252e-7)*x3464);
IkReal x3469=((0.001544160576)*r10*x3443);
IkReal x3470=(x3449*x3453);
IkReal x3471=(((x3444*x3453))+(((4.2e-6)*x3444)));
IkReal x3472=(x3440+x3470+x3463+x3462+x3461+x3460);
IkReal x3473=((((1.93020072)*x3455))+((x3448*x3451))+(((6.75570252e-7)*r10*x3452))+(((9.8699412e-8)*x3444))+(((6.75570252e-7)*x3465))+((x3450*x3451)));
IkReal x3474=(x3456+x3457+x3458+x3459+x3439+x3467+x3466+x3469+x3468);
j1eval[0]=((1.0)+(((1.21421648150246)*(IKabs(((0.0150404058181848)+(((-1.0)*x3447*x3450))+(((0.000514720192)*r11*x3452))+(((-2.25190084e-7)*x3465))+(((0.000514720192)*r10*x3443))+(((-1.0)*x3447*x3448))+(((3.2899804e-8)*x3449))+(((-0.64340024)*x3455))+(((0.09399944)*pz))+(((0.105775140440093)*x3442))+(((0.105775140440093)*x3441))+(((2.25190084e-7)*r11*x3443))+(((-2.25190084e-7)*r10*x3452))+(((2.25190084e-7)*x3464))+(((-3.2899804e-8)*x3444))+(((0.64340024)*x3454)))))))+(((1.21421648150246)*(IKabs(((0.64)+(((4.0)*pz))+((x3445*x3449))+(((-1.0)*x3444*x3445))+(((1.4e-6)*x3449))+(((0.09719944)*x3441))+(((0.09719944)*x3442))+(((-1.4e-6)*x3444))+(((0.64340024)*x3446)))))))+(((1.21421648150246)*(IKabs(((-0.64)+x3472+(((-1.0)*x3471)))))))+(((1.21421648150246)*(IKabs(((0.0150404058181848)+x3474+(((-1.0)*x3473)))))))+(((1.21421648150246)*(IKabs(((-0.0150404058181848)+x3474+(((-1.0)*x3473)))))))+(((1.21421648150246)*(IKabs(((0.64)+x3472+(((-1.0)*x3471))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x3475=((12.0)*pz);
IkReal x3476=((4.0)*pz);
IkReal x3477=(r21*sj5);
IkReal x3478=(r20*sj5);
IkReal x3479=((1.93020072)*cj4);
IkReal x3480=(r22*sj4);
IkReal x3481=(cj5*r20);
IkReal x3482=((0.64340024)*cj4);
IkReal x3483=(cj5*r21);
IkReal x3484=((1.93020072)*x3480);
IkReal x3485=((4.2e-6)*x3477);
IkReal x3486=((0.29159832)*x3478);
IkReal x3487=((0.29159832)*x3483);
IkReal x3488=((0.09719944)*x3483);
IkReal x3489=((0.64340024)*x3480);
IkReal x3490=((0.09719944)*x3478);
IkReal x3491=((1.4e-6)*x3477);
IkReal x3492=(x3477*x3479);
IkReal x3493=(x3477*x3482);
IkReal x3494=(((x3479*x3481))+(((4.2e-6)*x3481)));
IkReal x3495=((((1.4e-6)*x3481))+((x3481*x3482)));
IkReal x3496=(x3492+x3485+x3484+x3487+x3486+x3475);
IkReal x3497=(x3493+x3490+x3491+x3489+x3488+x3476);
op[0]=((0.64)+(((-1.0)*x3495))+x3497);
op[1]=-6.16e-6;
op[2]=((0.64)+(((-1.0)*x3494))+x3496);
op[3]=-1.232e-5;
op[4]=((-0.64)+(((-1.0)*x3494))+x3496);
op[5]=-6.16e-6;
op[6]=((-0.64)+(((-1.0)*x3495))+x3497);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3498=((0.09399944)*pz);
IkReal x3499=((0.28199832)*pz);
IkReal x3500=(cj5*r21);
IkReal x3501=(px*sj0);
IkReal x3502=((0.000514720192)*sj5);
IkReal x3503=(r00*sj0);
IkReal x3504=(cj0*r11);
IkReal x3505=((6.75570252e-7)*sj5);
IkReal x3506=(r20*sj5);
IkReal x3507=(cj0*r10);
IkReal x3508=(cj5*r20);
IkReal x3509=((2.25190084e-7)*cj5);
IkReal x3510=(r01*sj0);
IkReal x3511=((2.25190084e-7)*sj5);
IkReal x3512=((0.001544160576)*sj5);
IkReal x3513=((6.75570252e-7)*cj5);
IkReal x3514=(cj0*py);
IkReal x3515=(r21*sj5);
IkReal x3516=((0.64340024)*x3514);
IkReal x3517=((0.105775140440093)*x3500);
IkReal x3518=((0.105775140440093)*x3506);
IkReal x3519=((3.2899804e-8)*x3515);
IkReal x3520=((9.8699412e-8)*x3515);
IkReal x3521=((0.317325421320278)*x3506);
IkReal x3522=((1.93020072)*x3514);
IkReal x3523=((0.317325421320278)*x3500);
IkReal x3524=(cj5*x3510);
IkReal x3525=((0.000514720192)*cj5*x3504);
IkReal x3526=(x3503*x3509);
IkReal x3527=(x3504*x3511);
IkReal x3528=(x3502*x3507);
IkReal x3529=((0.001544160576)*cj5*x3504);
IkReal x3530=(x3504*x3505);
IkReal x3531=(x3503*x3513);
IkReal x3532=(x3507*x3512);
IkReal x3533=(((x3507*x3513))+(((9.8699412e-8)*x3508))+(((1.93020072)*x3501))+(((0.001544160576)*x3524))+((x3505*x3510))+((x3503*x3512)));
IkReal x3534=(((x3510*x3511))+((x3507*x3509))+(((0.000514720192)*x3524))+(((0.64340024)*x3501))+(((3.2899804e-8)*x3508))+((x3502*x3503)));
IkReal x3535=(x3519+x3518+x3517+x3516+x3526+x3527+x3525+x3528+x3498);
IkReal x3536=(x3531+x3530+x3532+x3522+x3523+x3520+x3521+x3529+x3499);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+x3535+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x3535+(((-1.0)*x3534))))))+(((htj1*htj1)*(((-0.0150404058181848)+x3536+(((-1.0)*x3533))))))+(((-1.0)*x3534))+(((0.205887932040862)*htj1))+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x3536+(((-1.0)*x3533)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3537=(cj4*sj5);
IkReal x3538=(r20*sj5);
IkReal x3539=(r21*sj1);
IkReal x3540=((1.0)*cj1*r21);
IkReal x3541=((1.0)*r22*sj4);
IkReal x3542=(cj4*cj5*r20);
if( IKabs((((cj1*x3542))+((sj1*x3538))+(((-1.0)*cj1*x3541))+(((-1.0)*x3537*x3540))+((cj5*x3539)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x3542))+(((-1.0)*cj1*x3538))+(((-1.0)*sj1*x3541))+(((-1.0)*x3537*x3539))+(((-1.0)*cj5*x3540)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x3542))+((sj1*x3538))+(((-1.0)*cj1*x3541))+(((-1.0)*x3537*x3540))+((cj5*x3539))))+IKsqr((((sj1*x3542))+(((-1.0)*cj1*x3538))+(((-1.0)*sj1*x3541))+(((-1.0)*x3537*x3539))+(((-1.0)*cj5*x3540))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x3542))+((sj1*x3538))+(((-1.0)*cj1*x3541))+(((-1.0)*x3537*x3540))+((cj5*x3539))), (((sj1*x3542))+(((-1.0)*cj1*x3538))+(((-1.0)*sj1*x3541))+(((-1.0)*x3537*x3539))+(((-1.0)*cj5*x3540))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3543=IKcos(j2);
IkReal x3544=IKsin(j2);
IkReal x3545=(cj0*cj5);
IkReal x3546=(r20*sj5);
IkReal x3547=((1.0)*cj4);
IkReal x3548=((3.5e-7)*sj5);
IkReal x3549=((1.0)*sj0);
IkReal x3550=(r01*sj0);
IkReal x3551=(r00*sj0);
IkReal x3552=((0.0008)*sj5);
IkReal x3553=(cj4*cj5);
IkReal x3554=(cj0*r10);
IkReal x3555=((3.5e-7)*cj5);
IkReal x3556=(cj5*r21);
IkReal x3557=(cj0*r11);
IkReal x3558=(cj1*x3543);
IkReal x3559=(cj1*x3544);
IkReal x3560=(sj1*x3543);
IkReal x3561=(sj1*x3544);
IkReal x3562=((1.0)*x3561);
evalcond[0]=(x3546+x3556+x3558+(((-1.0)*x3562)));
evalcond[1]=(((r20*x3553))+(((-1.0)*r21*sj5*x3547))+(((-1.0)*x3559))+(((-1.0)*x3560))+(((-1.0)*r22*sj4)));
evalcond[2]=((((-1.0)*sj5*x3554))+x3559+x3560+((cj5*x3550))+((sj5*x3551))+(((-1.0)*r11*x3545)));
evalcond[3]=((((-1.0)*r10*x3545*x3547))+x3558+(((-1.0)*x3562))+((cj0*r12*sj4))+(((-1.0)*sj5*x3547*x3550))+((x3551*x3553))+((cj4*sj5*x3557))+(((-1.0)*r02*sj4*x3549)));
evalcond[4]=(((r20*x3555))+(((-0.02349986)*x3561))+(((0.16)*cj1))+(((-0.0008)*x3556))+(((-1.0)*r21*x3548))+(((-0.0008)*x3546))+(((0.02349986)*x3558))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x3559))+(((0.16085006)*x3560)));
evalcond[5]=((((0.02349986)*x3559))+(((0.0008)*r11*x3545))+(((-0.0008)*cj5*x3550))+(((-3.5e-7)*r10*x3545))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((x3548*x3557))+(((-1.0)*x3548*x3550))+((x3552*x3554))+(((0.02349986)*x3560))+(((-1.0)*px*x3549))+(((-1.0)*x3551*x3552))+(((-0.16085006)*x3558))+((x3551*x3555))+((cj0*py))+(((0.16085006)*x3561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3563=((-1.0)*r20);
IkReal x3565 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3565)==0){
continue;
}
IkReal x3564=pow(x3565,-0.5);
CheckValue<IkReal> x3566 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3563),IKFAST_ATAN2_MAGTHRESH);
if(!x3566.valid){
continue;
}
IkReal gconst6=((-1.0)*(x3566.value));
IkReal gconst7=(r21*x3564);
IkReal gconst8=(x3563*x3564);
CheckValue<IkReal> x3567 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3567.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3567.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x3568=((-1.0)*r20);
IkReal x3569=x3564;
CheckValue<IkReal> x3571 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3568),IKFAST_ATAN2_MAGTHRESH);
if(!x3571.valid){
continue;
}
IkReal x3570=((-1.0)*(x3571.value));
sj5=gconst7;
cj5=gconst8;
j5=x3570;
IkReal gconst6=x3570;
IkReal gconst7=(r21*x3569);
IkReal gconst8=(x3568*x3569);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3572=(cj3*sj4);
IkReal x3573=(cj3*cj4);
IkReal x3574=((1.0)*cj4);
IkReal x3575=((1.0)*x3573);
CheckValue<IkReal> x3576=IKPowWithIntegerCheck(IKsign((((r22*(((((-1.0)*x3574*(gconst8*gconst8)))+(((-1.0)*x3574*(gconst7*gconst7)))))))+(((-1.0)*gconst8*r20*sj4))+((gconst7*r21*sj4)))),-1);
if(!x3576.valid){
continue;
}
CheckValue<IkReal> x3577 = IKatan2WithCheck(IkReal((((gconst8*r00*x3573))+(((-1.0)*gconst7*r01*x3575))+(((-1.0)*r02*x3572)))),IkReal((((r12*x3572))+((gconst7*r11*x3573))+(((-1.0)*gconst8*r10*x3575)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3577.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3576.value)))+(x3577.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3578=IKcos(j0);
IkReal x3579=IKsin(j0);
IkReal x3580=((1.0)*sj4);
IkReal x3581=(cj4*gconst7);
IkReal x3582=(r12*x3579);
IkReal x3583=((1.0)*x3578);
IkReal x3584=(gconst8*x3578);
IkReal x3585=(gconst8*x3579);
IkReal x3586=(r11*x3579);
IkReal x3587=(gconst7*x3578);
IkReal x3588=(gconst7*r10*x3579);
evalcond[0]=(cj3+x3588+((r11*x3585))+((r01*x3584))+((r00*x3587)));
evalcond[1]=(((cj4*r10*x3585))+((cj4*r00*x3584))+(((-1.0)*x3581*x3586))+(((-1.0)*r01*x3581*x3583))+(((-1.0)*r02*x3578*x3580))+(((-1.0)*x3580*x3582)));
evalcond[2]=(((cj4*r02*x3578))+((r00*sj4*x3584))+(((-1.0)*sj3))+((cj4*x3582))+(((-1.0)*r01*x3580*x3587))+((r10*sj4*x3585))+(((-1.0)*gconst7*x3580*x3586)));
evalcond[3]=((((3.5e-7)*r00*x3584))+(((-3.5e-7)*r01*x3587))+(((-0.0008)*r00*x3587))+(((-3.5e-7)*gconst7*x3586))+(((-1.0)*px*x3583))+(((-0.0008)*r01*x3584))+(((-0.0008)*x3588))+(((3.5e-7)*r10*x3585))+(((-0.0008)*r11*x3585))+(((-1.0)*py*x3579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x3589=((0.64)*cj3);
IkReal x3590=((6.16e-6)*cj3);
IkReal x3591=(gconst8*r20);
IkReal x3592=((0.28199832)*sj4);
IkReal x3593=((0.64340024)*cj3);
IkReal x3594=(r22*sj4);
IkReal x3595=((0.09399944)*sj4);
IkReal x3596=(cj4*r22);
IkReal x3597=((4.2e-6)*cj3);
IkReal x3598=((1.4e-6)*cj3);
IkReal x3599=(cj3*pz);
IkReal x3600=(gconst7*r21);
IkReal x3601=((1.93020072)*cj3);
IkReal x3602=((0.28199832)*x3596);
IkReal x3603=((12.0)*x3599);
IkReal x3604=((0.09399944)*x3596);
IkReal x3605=((4.0)*x3599);
IkReal x3606=(cj3*gconst7*r20);
IkReal x3607=(cj3*gconst8*r21);
IkReal x3608=(x3591*x3597);
IkReal x3609=(x3591*x3592);
IkReal x3610=(x3597*x3600);
IkReal x3611=(x3592*x3600);
IkReal x3612=(x3594*x3601);
IkReal x3613=((0.0096)*x3606);
IkReal x3614=((0.0096)*x3607);
IkReal x3615=(x3591*x3598);
IkReal x3616=(x3591*x3595);
IkReal x3617=((0.0032)*x3606);
IkReal x3618=(x3598*x3600);
IkReal x3619=((0.0032)*x3607);
IkReal x3620=(x3595*x3600);
IkReal x3621=(x3593*x3594);
IkReal x3622=(cj4*x3591*x3601);
IkReal x3623=(cj4*x3600*x3601);
IkReal x3624=(cj4*x3591*x3593);
IkReal x3625=(cj4*x3593*x3600);
IkReal x3626=(x3622+x3602+x3609+x3608);
IkReal x3627=(x3624+x3615+x3616+x3604);
IkReal x3628=(x3623+x3610+x3611+x3612+x3613+x3614+x3603);
IkReal x3629=(x3621+x3620+x3625+x3617+x3618+x3619+x3605);
op[0]=((((-1.0)*x3629))+x3627+(((-1.0)*x3589)));
op[1]=x3590;
op[2]=((((-1.0)*x3628))+x3626+(((-1.0)*x3589)));
op[3]=((1.232e-5)*cj3);
op[4]=((((-1.0)*x3628))+x3589+x3626);
op[5]=x3590;
op[6]=((((-1.0)*x3629))+x3589+x3627);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((-0.09399944)*cj3*gconst8*r20*sj4))+(((-1.232e-5)*(cj3*cj3)*(htj1*htj1*htj1)))+(((0.64340024)*cj0*cj3*cj4*r12))+(((-6.16e-6)*(cj3*cj3)*(htj1*htj1*htj1*htj1*htj1)))+(((-6.16e-6)*htj1*(cj3*cj3)))+(((1.4e-6)*gconst7*r21*(cj3*cj3)))+(((-0.64340024)*cj0*cj3*gconst7*r11*sj4))+(((-0.09399944)*cj3*cj4*r22))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-0.09399944)*cj3*gconst8*r20*sj4))+(((0.64340024)*cj0*cj3*cj4*r12))+(((1.4e-6)*gconst7*r21*(cj3*cj3)))+(((-0.64340024)*cj0*cj3*gconst7*r11*sj4))+(((-0.09399944)*cj3*cj4*r22))+(((-0.64340024)*cj3*gconst8*r00*sj0*sj4))+(((0.0032)*gconst8*r21*(cj3*cj3)))+(((0.64340024)*cj3*gconst7*r01*sj0*sj4))+(((0.09399944)*cj3*gconst7*r21*sj4))+(((-1.4e-6)*gconst8*r20*(cj3*cj3)))+(((-0.64340024)*cj3*cj4*r02*sj0))+(((4.0)*pz*(cj3*cj3)))+(((0.0032)*gconst7*r20*(cj3*cj3)))+(((0.64)*(cj3*cj3)))+(((0.64340024)*cj0*cj3*gconst8*r10*sj4))))))+(((htj1*htj1*htj1*htj1)*(((((-0.28199832)*cj3*gconst8*r20*sj4))+(((0.0096)*gconst8*r21*(cj3*cj3)))+(((1.93020072)*cj0*cj3*cj4*r12))+(((-1.93020072)*cj3*gconst8*r00*sj0*sj4))+(((-1.93020072)*cj3*cj4*r02*sj0))+(((0.0096)*gconst7*r20*(cj3*cj3)))+(((-4.2e-6)*gconst8*r20*(cj3*cj3)))+(((0.28199832)*cj3*gconst7*r21*sj4))+(((12.0)*pz*(cj3*cj3)))+(((1.93020072)*cj3*gconst7*r01*sj0*sj4))+(((-1.93020072)*cj0*cj3*gconst7*r11*sj4))+(((4.2e-6)*gconst7*r21*(cj3*cj3)))+(((1.93020072)*cj0*cj3*gconst8*r10*sj4))+(((-0.28199832)*cj3*cj4*r22))+(((0.64)*(cj3*cj3)))))))+(((-0.64340024)*cj3*gconst8*r00*sj0*sj4))+(((0.0032)*gconst8*r21*(cj3*cj3)))+(((0.64340024)*cj3*gconst7*r01*sj0*sj4))+(((0.09399944)*cj3*gconst7*r21*sj4))+(((-1.4e-6)*gconst8*r20*(cj3*cj3)))+(((-0.64340024)*cj3*cj4*r02*sj0))+(((-0.64)*(cj3*cj3)))+(((4.0)*pz*(cj3*cj3)))+(((0.0032)*gconst7*r20*(cj3*cj3)))+(((0.64340024)*cj0*cj3*gconst8*r10*sj4))+(((htj1*htj1)*(((((-0.28199832)*cj3*gconst8*r20*sj4))+(((0.0096)*gconst8*r21*(cj3*cj3)))+(((1.93020072)*cj0*cj3*cj4*r12))+(((-1.93020072)*cj3*gconst8*r00*sj0*sj4))+(((-1.93020072)*cj3*cj4*r02*sj0))+(((0.0096)*gconst7*r20*(cj3*cj3)))+(((-4.2e-6)*gconst8*r20*(cj3*cj3)))+(((0.28199832)*cj3*gconst7*r21*sj4))+(((12.0)*pz*(cj3*cj3)))+(((1.93020072)*cj3*gconst7*r01*sj0*sj4))+(((-1.93020072)*cj0*cj3*gconst7*r11*sj4))+(((4.2e-6)*gconst7*r21*(cj3*cj3)))+(((1.93020072)*cj0*cj3*gconst8*r10*sj4))+(((-0.64)*(cj3*cj3)))+(((-0.28199832)*cj3*cj4*r22)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x3630=((-1.0)*r20);
IkReal x3631=x3564;
CheckValue<IkReal> x3633 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3630),IKFAST_ATAN2_MAGTHRESH);
if(!x3633.valid){
continue;
}
IkReal x3632=((-1.0)*(x3633.value));
sj5=gconst7;
cj5=gconst8;
j5=x3632;
IkReal gconst6=x3632;
IkReal gconst7=(r21*x3631);
IkReal gconst8=(x3630*x3631);
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x3634=((-1.0)*r20);
IkReal x3635=x3564;
CheckValue<IkReal> x3637 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3634),IKFAST_ATAN2_MAGTHRESH);
if(!x3637.valid){
continue;
}
IkReal x3636=((-1.0)*(x3637.value));
sj5=gconst7;
cj5=gconst8;
j5=x3636;
IkReal gconst6=x3636;
IkReal gconst7=(r21*x3635);
IkReal gconst8=(x3634*x3635);
IkReal x3638=r22*r22;
IkReal x3639=(r12*sj0);
IkReal x3640=(cj0*r02);
CheckValue<IkReal> x3644=IKPowWithIntegerCheck(((-1.0)+x3638),-1);
if(!x3644.valid){
continue;
}
IkReal x3641=x3644.value;
if((((1.0)+(((-1.0)*x3638)))) < -0.00001)
continue;
IkReal x3642=IKsqrt(((1.0)+(((-1.0)*x3638))));
IkReal x3643=(x3641*x3642);
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
j2eval[2]=((IKabs((((cj1*x3640*x3643))+((cj1*x3639*x3643)))))+(IKabs((((sj1*x3639*x3643))+((sj1*x3640*x3643))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x3645=((-1.0)*r20);
IkReal x3646=x3564;
CheckValue<IkReal> x3648 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3645),IKFAST_ATAN2_MAGTHRESH);
if(!x3648.valid){
continue;
}
IkReal x3647=((-1.0)*(x3648.value));
sj5=gconst7;
cj5=gconst8;
j5=x3647;
IkReal gconst6=x3647;
IkReal gconst7=(r21*x3646);
IkReal gconst8=(x3645*x3646);
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3649=(cj1*cj4);
IkReal x3650=((1.0)*gconst7);
IkReal x3651=(gconst8*r20);
IkReal x3652=(cj4*sj1);
IkReal x3653=(gconst8*r21);
IkReal x3654=((1.0)*r22*sj4);
if( IKabs((((x3649*x3651))+(((-1.0)*cj1*x3654))+((sj1*x3653))+((gconst7*r20*sj1))+(((-1.0)*r21*x3649*x3650)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r20*x3650))+((x3651*x3652))+(((-1.0)*cj1*x3653))+(((-1.0)*sj1*x3654))+(((-1.0)*r21*x3650*x3652)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3649*x3651))+(((-1.0)*cj1*x3654))+((sj1*x3653))+((gconst7*r20*sj1))+(((-1.0)*r21*x3649*x3650))))+IKsqr(((((-1.0)*cj1*r20*x3650))+((x3651*x3652))+(((-1.0)*cj1*x3653))+(((-1.0)*sj1*x3654))+(((-1.0)*r21*x3650*x3652))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x3649*x3651))+(((-1.0)*cj1*x3654))+((sj1*x3653))+((gconst7*r20*sj1))+(((-1.0)*r21*x3649*x3650))), ((((-1.0)*cj1*r20*x3650))+((x3651*x3652))+(((-1.0)*cj1*x3653))+(((-1.0)*sj1*x3654))+(((-1.0)*r21*x3650*x3652))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3655=IKcos(j2);
IkReal x3656=IKsin(j2);
IkReal x3657=(cj4*gconst7);
IkReal x3658=(r01*sj0);
IkReal x3659=(cj0*r11);
IkReal x3660=(r00*sj0);
IkReal x3661=((3.5e-7)*gconst8);
IkReal x3662=(gconst8*r21);
IkReal x3663=(cj4*gconst8);
IkReal x3664=((3.5e-7)*gconst7);
IkReal x3665=((0.0008)*gconst8);
IkReal x3666=(gconst7*r20);
IkReal x3667=((1.0)*sj0);
IkReal x3668=(cj0*r10);
IkReal x3669=(cj1*x3655);
IkReal x3670=(gconst7*x3668);
IkReal x3671=(cj1*x3656);
IkReal x3672=(sj1*x3656);
IkReal x3673=(sj1*x3655);
IkReal x3674=((1.0)*x3672);
evalcond[0]=(x3666+x3662+x3669+(((-1.0)*x3674)));
evalcond[1]=(((r20*x3663))+(((-1.0)*x3671))+(((-1.0)*x3673))+(((-1.0)*r22*sj4))+(((-1.0)*r21*x3657)));
evalcond[2]=(((gconst7*x3660))+((gconst8*x3658))+(((-1.0)*gconst8*x3659))+x3673+x3671+(((-1.0)*x3670)));
evalcond[3]=((((-1.0)*r02*sj4*x3667))+((x3657*x3659))+x3669+((cj0*r12*sj4))+(((-1.0)*x3657*x3658))+(((-1.0)*x3663*x3668))+((x3660*x3663))+(((-1.0)*x3674)));
evalcond[4]=((((0.16)*cj1))+(((0.16085006)*x3671))+(((0.16085006)*x3673))+(((0.02349986)*x3669))+(((-0.02349986)*x3672))+((r20*x3661))+(((-1.0)*pz))+(((-1.0)*r21*x3664))+(((7.7e-7)*sj1))+(((-0.0008)*x3662))+(((-0.0008)*x3666)));
evalcond[5]=(((x3659*x3665))+((x3659*x3664))+(((-1.0)*x3661*x3668))+(((0.16085006)*x3672))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*x3658*x3665))+(((-1.0)*x3658*x3664))+(((0.0008)*x3670))+(((-0.16085006)*x3669))+((x3660*x3661))+((cj0*py))+(((0.02349986)*x3671))+(((0.02349986)*x3673))+(((-1.0)*px*x3667))+(((-0.0008)*gconst7*x3660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3675=(cj1*cj4);
IkReal x3676=(gconst8*r20);
IkReal x3677=((1.0)*sj4);
IkReal x3678=(cj4*sj1);
IkReal x3679=(gconst7*r21);
IkReal x3680=((1.0)*r22*sj1);
IkReal x3681=((1.0)*cj1*x3679);
if( IKabs((((sj1*sj4*x3679))+(((-1.0)*sj1*x3676*x3677))+(((-1.0)*cj1*r22*x3677))+(((-1.0)*r22*x3678))+((x3675*x3676))+(((-1.0)*x3675*x3679)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3676*x3678))+(((-1.0)*x3678*x3679))+(((-1.0)*r22*sj1*x3677))+(((-1.0)*cj1*x3677*x3679))+((r22*x3675))+((cj1*sj4*x3676)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*sj4*x3679))+(((-1.0)*sj1*x3676*x3677))+(((-1.0)*cj1*r22*x3677))+(((-1.0)*r22*x3678))+((x3675*x3676))+(((-1.0)*x3675*x3679))))+IKsqr((((x3676*x3678))+(((-1.0)*x3678*x3679))+(((-1.0)*r22*sj1*x3677))+(((-1.0)*cj1*x3677*x3679))+((r22*x3675))+((cj1*sj4*x3676))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*sj4*x3679))+(((-1.0)*sj1*x3676*x3677))+(((-1.0)*cj1*r22*x3677))+(((-1.0)*r22*x3678))+((x3675*x3676))+(((-1.0)*x3675*x3679))), (((x3676*x3678))+(((-1.0)*x3678*x3679))+(((-1.0)*r22*sj1*x3677))+(((-1.0)*cj1*x3677*x3679))+((r22*x3675))+((cj1*sj4*x3676))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3682=IKcos(j2);
IkReal x3683=IKsin(j2);
IkReal x3684=(cj4*gconst7);
IkReal x3685=(cj0*r11);
IkReal x3686=(gconst7*sj4);
IkReal x3687=((1.0)*r21);
IkReal x3688=((3.5e-7)*r20);
IkReal x3689=((0.0008)*gconst7);
IkReal x3690=(cj0*r10);
IkReal x3691=(cj0*r12);
IkReal x3692=(gconst8*r20);
IkReal x3693=((3.5e-7)*gconst7);
IkReal x3694=(gconst8*sj0);
IkReal x3695=(r02*sj0);
IkReal x3696=((1.0)*sj4);
IkReal x3697=((1.0)*cj4);
IkReal x3698=(cj1*x3682);
IkReal x3699=((1.0)*r01*sj0);
IkReal x3700=(sj1*x3683);
IkReal x3701=(sj1*x3682);
IkReal x3702=(cj1*x3683);
IkReal x3703=((1.0)*x3701);
IkReal x3704=((1.0)*x3702);
IkReal x3705=(x3703+x3704);
evalcond[0]=(((cj4*r22))+x3700+(((-1.0)*x3686*x3687))+(((-1.0)*x3698))+((sj4*x3692)));
evalcond[1]=((((-1.0)*r22*x3696))+(((-1.0)*x3705))+(((-1.0)*x3684*x3687))+((cj4*x3692)));
evalcond[2]=(((cj4*r00*x3694))+x3698+((x3684*x3685))+(((-1.0)*x3695*x3696))+((sj4*x3691))+(((-1.0)*x3700))+(((-1.0)*x3684*x3699))+(((-1.0)*gconst8*x3690*x3697)));
evalcond[3]=((((-1.0)*x3686*x3699))+((r00*sj4*x3694))+(((-1.0)*x3705))+((x3685*x3686))+((cj4*x3695))+(((-1.0)*x3691*x3697))+(((-1.0)*gconst8*x3690*x3696)));
CheckValue<IkReal> x3706=IKPowWithIntegerCheck(gconst8,-1);
if(!x3706.valid){
continue;
}
evalcond[4]=(((x3688*(gconst7*gconst7)*(x3706.value)))+(((-0.02349986)*x3700))+(((0.16)*cj1))+(((0.16085006)*x3701))+(((0.16085006)*x3702))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.02349986)*x3698))+((gconst8*x3688)));
evalcond[5]=((((-1.0)*r00*sj0*x3689))+(((-0.16085006)*x3698))+((x3689*x3690))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.16085006)*x3700))+(((-3.5e-7)*gconst8*x3690))+(((-1.0)*r01*sj0*x3693))+((x3685*x3693))+(((0.02349986)*x3701))+(((0.02349986)*x3702))+(((0.0008)*gconst8*x3685))+(((3.5e-7)*r00*x3694))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0008)*r01*x3694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3707=(gconst7*r21);
IkReal x3708=(sj1*sj4);
IkReal x3709=((1.0)*r22);
IkReal x3710=(gconst8*r20);
IkReal x3711=(cj1*sj4);
IkReal x3712=(cj4*sj1);
IkReal x3713=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*x3707*x3713))+((x3708*x3710))+((cj1*cj4*x3710))+((r22*x3712))+(((-1.0)*x3709*x3711))+(((-1.0)*x3707*x3708)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3710*x3712))+(((-1.0)*x3710*x3711))+((x3707*x3711))+(((-1.0)*x3707*x3712))+(((-1.0)*x3708*x3709))+(((-1.0)*cj1*cj4*x3709)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3707*x3713))+((x3708*x3710))+((cj1*cj4*x3710))+((r22*x3712))+(((-1.0)*x3709*x3711))+(((-1.0)*x3707*x3708))))+IKsqr((((x3710*x3712))+(((-1.0)*x3710*x3711))+((x3707*x3711))+(((-1.0)*x3707*x3712))+(((-1.0)*x3708*x3709))+(((-1.0)*cj1*cj4*x3709))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3707*x3713))+((x3708*x3710))+((cj1*cj4*x3710))+((r22*x3712))+(((-1.0)*x3709*x3711))+(((-1.0)*x3707*x3708))), (((x3710*x3712))+(((-1.0)*x3710*x3711))+((x3707*x3711))+(((-1.0)*x3707*x3712))+(((-1.0)*x3708*x3709))+(((-1.0)*cj1*cj4*x3709))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3714=IKcos(j2);
IkReal x3715=IKsin(j2);
IkReal x3716=(cj4*gconst7);
IkReal x3717=(cj0*r11);
IkReal x3718=(gconst7*sj4);
IkReal x3719=((1.0)*r21);
IkReal x3720=((3.5e-7)*r20);
IkReal x3721=(gconst8*sj0);
IkReal x3722=((0.0008)*gconst7);
IkReal x3723=(cj0*r10);
IkReal x3724=(cj0*r12);
IkReal x3725=(gconst8*r20);
IkReal x3726=((3.5e-7)*gconst7);
IkReal x3727=(r02*sj0);
IkReal x3728=((1.0)*cj4);
IkReal x3729=((1.0)*sj4);
IkReal x3730=(cj1*x3714);
IkReal x3731=((1.0)*r01*sj0);
IkReal x3732=(cj1*x3715);
IkReal x3733=(sj1*x3715);
IkReal x3734=(sj1*x3714);
IkReal x3735=((1.0)*x3733);
evalcond[0]=(((sj4*x3725))+(((-1.0)*x3735))+((cj4*r22))+x3730+(((-1.0)*x3718*x3719)));
evalcond[1]=((((-1.0)*r22*x3729))+(((-1.0)*x3716*x3719))+((cj4*x3725))+(((-1.0)*x3732))+(((-1.0)*x3734)));
evalcond[2]=(((x3717*x3718))+(((-1.0)*x3724*x3728))+((cj4*x3727))+x3734+x3732+(((-1.0)*x3718*x3731))+(((-1.0)*gconst8*x3723*x3729))+((r00*sj4*x3721)));
evalcond[3]=(((sj4*x3724))+(((-1.0)*x3735))+(((-1.0)*x3727*x3729))+x3730+(((-1.0)*x3716*x3731))+((x3716*x3717))+(((-1.0)*gconst8*x3723*x3728))+((cj4*r00*x3721)));
CheckValue<IkReal> x3736=IKPowWithIntegerCheck(gconst8,-1);
if(!x3736.valid){
continue;
}
evalcond[4]=((((0.16)*cj1))+((x3720*(gconst7*gconst7)*(x3736.value)))+(((-0.02349986)*x3733))+((gconst8*x3720))+(((0.16085006)*x3732))+(((0.16085006)*x3734))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.02349986)*x3730)));
evalcond[5]=((((0.0008)*gconst8*x3717))+(((-1.0)*r00*sj0*x3722))+((x3717*x3726))+(((0.16)*sj1))+(((-3.5e-7)*gconst8*x3723))+(((-0.0008)*r01*x3721))+(((-7.7e-7)*cj1))+(((0.16085006)*x3733))+(((-1.0)*r01*sj0*x3726))+((x3722*x3723))+(((3.5e-7)*r00*x3721))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.16085006)*x3730))+(((0.02349986)*x3732))+(((0.02349986)*x3734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3737=(r22*sj4);
IkReal x3738=(gconst7*r21);
IkReal x3739=(cj4*r22);
IkReal x3740=((1.0)*sj4);
IkReal x3741=((1.0)*sj1);
IkReal x3742=(cj3*cj4);
IkReal x3743=((1.0)*cj1*cj3);
IkReal x3744=(gconst8*r20*sj1);
IkReal x3745=(cj1*gconst8*r20);
CheckValue<IkReal> x3746=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x3746.valid){
continue;
}
CheckValue<IkReal> x3747 = IKatan2WithCheck(IkReal((((sj1*sj4*x3738))+((x3742*x3745))+(((-1.0)*x3740*x3744))+(((-1.0)*x3737*x3743))+(((-1.0)*cj1*x3738*x3742))+(((-1.0)*x3739*x3741)))),IkReal((((x3742*x3744))+((sj4*x3745))+(((-1.0)*x3738*x3741*x3742))+(((-1.0)*cj3*x3737*x3741))+(((-1.0)*cj1*x3738*x3740))+((cj1*x3739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3747.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3746.value)))+(x3747.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3748=IKcos(j2);
IkReal x3749=IKsin(j2);
IkReal x3750=(cj4*gconst7);
IkReal x3751=(cj0*r11);
IkReal x3752=(gconst7*sj4);
IkReal x3753=((1.0)*r21);
IkReal x3754=((3.5e-7)*gconst8);
IkReal x3755=(r00*sj0);
IkReal x3756=(gconst8*r21);
IkReal x3757=(cj0*r10);
IkReal x3758=((0.0008)*gconst7);
IkReal x3759=(cj0*r12);
IkReal x3760=(gconst8*r20);
IkReal x3761=((3.5e-7)*gconst7);
IkReal x3762=((0.0008)*gconst8);
IkReal x3763=(r01*sj0);
IkReal x3764=((1.0)*sj3);
IkReal x3765=(r02*sj0);
IkReal x3766=(cj4*gconst8);
IkReal x3767=((1.0)*gconst8);
IkReal x3768=((1.0)*cj3);
IkReal x3769=((1.0)*sj4);
IkReal x3770=(cj1*x3748);
IkReal x3771=((1.0)*x3763);
IkReal x3772=(sj1*x3749);
IkReal x3773=(sj1*x3748);
IkReal x3774=(cj1*x3749);
evalcond[0]=(((sj3*x3772))+(((-1.0)*x3764*x3770))+x3756+((gconst7*r20)));
evalcond[1]=((((-1.0)*x3750*x3753))+(((-1.0)*r22*x3769))+(((-1.0)*x3774))+(((-1.0)*x3773))+((cj4*x3760)));
evalcond[2]=((((-1.0)*x3752*x3753))+((cj4*r22))+((cj3*x3772))+((sj4*x3760))+(((-1.0)*x3768*x3770)));
evalcond[3]=(((gconst7*x3755))+(((-1.0)*x3751*x3767))+(((-1.0)*gconst7*x3757))+(((-1.0)*x3764*x3773))+(((-1.0)*x3764*x3774))+((gconst8*x3763)));
evalcond[4]=(((sj4*x3759))+(((-1.0)*x3765*x3769))+(((-1.0)*x3772))+x3770+(((-1.0)*x3750*x3771))+(((-1.0)*x3757*x3766))+((x3750*x3751))+((x3755*x3766)));
evalcond[5]=(((x3751*x3752))+(((-1.0)*x3752*x3771))+(((-1.0)*sj4*x3757*x3767))+((cj4*x3765))+((gconst8*sj4*x3755))+(((-1.0)*x3768*x3773))+(((-1.0)*x3768*x3774))+(((-1.0)*cj4*x3759)));
evalcond[6]=((((-1.0)*r21*x3761))+(((-0.0008)*x3756))+(((0.16)*cj1))+((r20*x3754))+(((0.16085006)*x3773))+(((0.16085006)*x3774))+(((-1.0)*r20*x3758))+(((0.02349986)*x3770))+(((-1.0)*pz))+(((-0.02349986)*x3772))+(((7.7e-7)*sj1)));
evalcond[7]=(((x3754*x3755))+(((-1.0)*x3761*x3763))+(((-1.0)*x3755*x3758))+((x3757*x3758))+(((-1.0)*x3762*x3763))+(((0.16085006)*x3772))+(((0.02349986)*x3773))+(((0.02349986)*x3774))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*x3754*x3757))+(((-0.16085006)*x3770))+((x3751*x3762))+((x3751*x3761))+(((-1.0)*px*sj0))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3775=(cj1*sj0);
IkReal x3776=(gconst7*r00);
IkReal x3777=(gconst8*r01);
IkReal x3778=(sj0*sj1);
IkReal x3779=(cj1*gconst8);
IkReal x3780=(cj1*gconst7);
IkReal x3781=((1.0)*cj0);
IkReal x3782=((1.0)*sj1);
CheckValue<IkReal> x3783=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x3783.valid){
continue;
}
CheckValue<IkReal> x3784 = IKatan2WithCheck(IkReal((((x3775*x3776))+((x3775*x3777))+(((-1.0)*r11*x3779*x3781))+(((-1.0)*gconst7*r20*x3782))+(((-1.0)*gconst8*r21*x3782))+(((-1.0)*r10*x3780*x3781)))),IkReal((((x3777*x3778))+((r21*x3779))+((r20*x3780))+(((-1.0)*gconst8*r11*sj1*x3781))+((x3776*x3778))+(((-1.0)*gconst7*r10*sj1*x3781)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3784.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3783.value)))+(x3784.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3785=IKcos(j2);
IkReal x3786=IKsin(j2);
IkReal x3787=(cj4*gconst7);
IkReal x3788=(cj0*r11);
IkReal x3789=(gconst7*sj4);
IkReal x3790=((1.0)*r21);
IkReal x3791=((3.5e-7)*gconst8);
IkReal x3792=(r00*sj0);
IkReal x3793=(gconst8*r21);
IkReal x3794=(cj0*r10);
IkReal x3795=((0.0008)*gconst7);
IkReal x3796=(cj0*r12);
IkReal x3797=(gconst8*r20);
IkReal x3798=((3.5e-7)*gconst7);
IkReal x3799=((0.0008)*gconst8);
IkReal x3800=(r01*sj0);
IkReal x3801=((1.0)*sj3);
IkReal x3802=(r02*sj0);
IkReal x3803=(cj4*gconst8);
IkReal x3804=((1.0)*gconst8);
IkReal x3805=((1.0)*cj3);
IkReal x3806=((1.0)*sj4);
IkReal x3807=(cj1*x3785);
IkReal x3808=((1.0)*x3800);
IkReal x3809=(sj1*x3786);
IkReal x3810=(sj1*x3785);
IkReal x3811=(cj1*x3786);
evalcond[0]=((((-1.0)*x3801*x3807))+((sj3*x3809))+x3793+((gconst7*r20)));
evalcond[1]=((((-1.0)*x3810))+(((-1.0)*x3811))+((cj4*x3797))+(((-1.0)*r22*x3806))+(((-1.0)*x3787*x3790)));
evalcond[2]=((((-1.0)*x3805*x3807))+((cj4*r22))+(((-1.0)*x3789*x3790))+((sj4*x3797))+((cj3*x3809)));
evalcond[3]=((((-1.0)*x3788*x3804))+((gconst8*x3800))+(((-1.0)*x3801*x3811))+(((-1.0)*x3801*x3810))+(((-1.0)*gconst7*x3794))+((gconst7*x3792)));
evalcond[4]=(((x3787*x3788))+(((-1.0)*x3802*x3806))+(((-1.0)*x3809))+x3807+((x3792*x3803))+(((-1.0)*x3787*x3808))+((sj4*x3796))+(((-1.0)*x3794*x3803)));
evalcond[5]=((((-1.0)*sj4*x3794*x3804))+(((-1.0)*cj4*x3796))+((cj4*x3802))+((x3788*x3789))+(((-1.0)*x3789*x3808))+(((-1.0)*x3805*x3810))+(((-1.0)*x3805*x3811))+((gconst8*sj4*x3792)));
evalcond[6]=((((0.16085006)*x3811))+(((0.16085006)*x3810))+(((0.16)*cj1))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-0.02349986)*x3809))+(((0.02349986)*x3807))+(((-0.0008)*x3793))+(((-1.0)*r20*x3795))+(((-1.0)*r21*x3798))+((r20*x3791)));
evalcond[7]=(((x3791*x3792))+(((-1.0)*x3791*x3794))+((x3788*x3798))+((x3788*x3799))+(((0.16085006)*x3809))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.02349986)*x3811))+(((0.02349986)*x3810))+(((-0.16085006)*x3807))+(((-1.0)*x3799*x3800))+(((-1.0)*x3792*x3795))+(((-1.0)*x3798*x3800))+(((-1.0)*px*sj0))+((cj0*py))+((x3794*x3795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3812=((1.0)*sj3);
IkReal x3813=(r21*sj1);
IkReal x3814=(cj4*gconst7);
IkReal x3815=(cj1*r21);
IkReal x3816=(r22*sj4);
IkReal x3817=(cj1*r20);
IkReal x3818=(r20*sj1);
IkReal x3819=(cj4*gconst8*sj3);
CheckValue<IkReal> x3820=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x3820.valid){
continue;
}
CheckValue<IkReal> x3821 = IKatan2WithCheck(IkReal(((((-1.0)*gconst7*x3818))+((x3817*x3819))+(((-1.0)*x3812*x3814*x3815))+(((-1.0)*cj1*x3812*x3816))+(((-1.0)*gconst8*x3813)))),IkReal((((gconst8*x3815))+((gconst7*x3817))+(((-1.0)*x3812*x3813*x3814))+((x3818*x3819))+(((-1.0)*sj1*x3812*x3816)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3821.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3820.value)))+(x3821.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3822=IKcos(j2);
IkReal x3823=IKsin(j2);
IkReal x3824=(cj4*gconst7);
IkReal x3825=(cj0*r11);
IkReal x3826=(gconst7*sj4);
IkReal x3827=((1.0)*r21);
IkReal x3828=((3.5e-7)*gconst8);
IkReal x3829=(r00*sj0);
IkReal x3830=(gconst8*r21);
IkReal x3831=(cj0*r10);
IkReal x3832=((0.0008)*gconst7);
IkReal x3833=(cj0*r12);
IkReal x3834=(gconst8*r20);
IkReal x3835=((3.5e-7)*gconst7);
IkReal x3836=((0.0008)*gconst8);
IkReal x3837=(r01*sj0);
IkReal x3838=((1.0)*sj3);
IkReal x3839=(r02*sj0);
IkReal x3840=(cj4*gconst8);
IkReal x3841=((1.0)*gconst8);
IkReal x3842=((1.0)*cj3);
IkReal x3843=((1.0)*sj4);
IkReal x3844=(cj1*x3822);
IkReal x3845=((1.0)*x3837);
IkReal x3846=(sj1*x3823);
IkReal x3847=(sj1*x3822);
IkReal x3848=(cj1*x3823);
evalcond[0]=(((sj3*x3846))+(((-1.0)*x3838*x3844))+x3830+((gconst7*r20)));
evalcond[1]=((((-1.0)*x3824*x3827))+((cj4*x3834))+(((-1.0)*x3848))+(((-1.0)*x3847))+(((-1.0)*r22*x3843)));
evalcond[2]=((((-1.0)*x3842*x3844))+((cj4*r22))+(((-1.0)*x3826*x3827))+((cj3*x3846))+((sj4*x3834)));
evalcond[3]=(((gconst7*x3829))+(((-1.0)*x3838*x3848))+(((-1.0)*x3838*x3847))+((gconst8*x3837))+(((-1.0)*gconst7*x3831))+(((-1.0)*x3825*x3841)));
evalcond[4]=((((-1.0)*x3824*x3845))+((x3829*x3840))+(((-1.0)*x3839*x3843))+((sj4*x3833))+(((-1.0)*x3831*x3840))+((x3824*x3825))+(((-1.0)*x3846))+x3844);
evalcond[5]=((((-1.0)*x3826*x3845))+(((-1.0)*x3842*x3848))+(((-1.0)*x3842*x3847))+((cj4*x3839))+(((-1.0)*cj4*x3833))+((x3825*x3826))+((gconst8*sj4*x3829))+(((-1.0)*sj4*x3831*x3841)));
evalcond[6]=((((0.16)*cj1))+(((-1.0)*r20*x3832))+(((-0.02349986)*x3846))+(((-1.0)*r21*x3835))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-0.0008)*x3830))+(((0.02349986)*x3844))+((r20*x3828))+(((0.16085006)*x3847))+(((0.16085006)*x3848)));
evalcond[7]=((((-1.0)*x3828*x3831))+(((-1.0)*x3829*x3832))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.16085006)*x3844))+((x3831*x3832))+((x3825*x3835))+((x3825*x3836))+(((-1.0)*x3836*x3837))+(((-1.0)*px*sj0))+(((-1.0)*x3835*x3837))+((cj0*py))+(((0.02349986)*x3847))+(((0.02349986)*x3848))+((x3828*x3829))+(((0.16085006)*x3846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3849=((1.0)*gconst7);
IkReal x3850=(cj4*sj3);
IkReal x3851=((1.0)*gconst8);
IkReal x3852=(sj3*sj4);
CheckValue<IkReal> x3853=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3851))+(((-1.0)*r20*x3849)))),-1);
if(!x3853.valid){
continue;
}
CheckValue<IkReal> x3854 = IKatan2WithCheck(IkReal((((gconst8*r00*x3850))+(((-1.0)*r02*x3852))+(((-1.0)*r01*x3849*x3850)))),IkReal(((((-1.0)*r10*x3850*x3851))+((gconst7*r11*x3850))+((r12*x3852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3854.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3853.value)))+(x3854.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3855=IKcos(j0);
IkReal x3856=IKsin(j0);
IkReal x3857=((1.0)*sj4);
IkReal x3858=(cj4*gconst7);
IkReal x3859=(r12*x3856);
IkReal x3860=((1.0)*x3855);
IkReal x3861=(gconst8*x3855);
IkReal x3862=(gconst8*x3856);
IkReal x3863=(r11*x3856);
IkReal x3864=(gconst7*x3855);
IkReal x3865=(gconst7*r10*x3856);
evalcond[0]=(((r11*x3862))+cj3+((r00*x3864))+((r01*x3861))+x3865);
evalcond[1]=((((-1.0)*x3858*x3863))+((cj4*r00*x3861))+(((-1.0)*x3857*x3859))+(((-1.0)*r02*x3855*x3857))+((cj4*r10*x3862))+(((-1.0)*r01*x3858*x3860)));
evalcond[2]=(((r10*sj4*x3862))+(((-1.0)*sj3))+(((-1.0)*gconst7*x3857*x3863))+((cj4*r02*x3855))+(((-1.0)*r01*x3857*x3864))+((r00*sj4*x3861))+((cj4*x3859)));
evalcond[3]=((((-0.0008)*r00*x3864))+(((-0.0008)*x3865))+(((-0.0008)*r01*x3861))+(((-1.0)*py*x3856))+(((3.5e-7)*r00*x3861))+(((-3.5e-7)*r01*x3864))+(((3.5e-7)*r10*x3862))+(((-1.0)*px*x3860))+(((-3.5e-7)*gconst7*x3863))+(((-0.0008)*r11*x3862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x3866=((0.64)*cj3);
IkReal x3867=((6.16e-6)*cj3);
IkReal x3868=(gconst8*r20);
IkReal x3869=((0.28199832)*sj4);
IkReal x3870=((0.64340024)*cj3);
IkReal x3871=(r22*sj4);
IkReal x3872=((0.09399944)*sj4);
IkReal x3873=(cj4*r22);
IkReal x3874=((4.2e-6)*cj3);
IkReal x3875=((1.4e-6)*cj3);
IkReal x3876=(cj3*pz);
IkReal x3877=(gconst7*r21);
IkReal x3878=((1.93020072)*cj3);
IkReal x3879=((0.28199832)*x3873);
IkReal x3880=((12.0)*x3876);
IkReal x3881=((0.09399944)*x3873);
IkReal x3882=((4.0)*x3876);
IkReal x3883=(cj3*gconst7*r20);
IkReal x3884=(cj3*gconst8*r21);
IkReal x3885=(x3868*x3874);
IkReal x3886=(x3868*x3869);
IkReal x3887=(x3874*x3877);
IkReal x3888=(x3869*x3877);
IkReal x3889=(x3871*x3878);
IkReal x3890=((0.0096)*x3883);
IkReal x3891=((0.0096)*x3884);
IkReal x3892=(x3868*x3875);
IkReal x3893=(x3868*x3872);
IkReal x3894=((0.0032)*x3883);
IkReal x3895=(x3875*x3877);
IkReal x3896=((0.0032)*x3884);
IkReal x3897=(x3872*x3877);
IkReal x3898=(x3870*x3871);
IkReal x3899=(cj4*x3868*x3878);
IkReal x3900=(cj4*x3877*x3878);
IkReal x3901=(cj4*x3868*x3870);
IkReal x3902=(cj4*x3870*x3877);
IkReal x3903=(x3879+x3899+x3885+x3886);
IkReal x3904=(x3901+x3892+x3893+x3881);
IkReal x3905=(x3900+x3890+x3891+x3887+x3880+x3889+x3888);
IkReal x3906=(x3902+x3898+x3896+x3897+x3894+x3895+x3882);
op[0]=((((-1.0)*x3906))+(((-1.0)*x3866))+x3904);
op[1]=x3867;
op[2]=((((-1.0)*x3905))+(((-1.0)*x3866))+x3903);
op[3]=((1.232e-5)*cj3);
op[4]=((((-1.0)*x3905))+x3903+x3866);
op[5]=x3867;
op[6]=((((-1.0)*x3906))+x3904+x3866);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((-0.09399944)*cj3*gconst8*r20*sj4))+(((-1.232e-5)*(cj3*cj3)*(htj1*htj1*htj1)))+(((0.64340024)*cj0*cj3*cj4*r12))+(((-6.16e-6)*(cj3*cj3)*(htj1*htj1*htj1*htj1*htj1)))+(((-6.16e-6)*htj1*(cj3*cj3)))+(((1.4e-6)*gconst7*r21*(cj3*cj3)))+(((-0.64340024)*cj0*cj3*gconst7*r11*sj4))+(((-0.09399944)*cj3*cj4*r22))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-0.09399944)*cj3*gconst8*r20*sj4))+(((0.64340024)*cj0*cj3*cj4*r12))+(((1.4e-6)*gconst7*r21*(cj3*cj3)))+(((-0.64340024)*cj0*cj3*gconst7*r11*sj4))+(((-0.09399944)*cj3*cj4*r22))+(((-0.64340024)*cj3*gconst8*r00*sj0*sj4))+(((0.0032)*gconst8*r21*(cj3*cj3)))+(((0.64340024)*cj3*gconst7*r01*sj0*sj4))+(((0.09399944)*cj3*gconst7*r21*sj4))+(((-1.4e-6)*gconst8*r20*(cj3*cj3)))+(((-0.64340024)*cj3*cj4*r02*sj0))+(((4.0)*pz*(cj3*cj3)))+(((0.0032)*gconst7*r20*(cj3*cj3)))+(((0.64)*(cj3*cj3)))+(((0.64340024)*cj0*cj3*gconst8*r10*sj4))))))+(((htj1*htj1*htj1*htj1)*(((((-0.28199832)*cj3*gconst8*r20*sj4))+(((0.0096)*gconst8*r21*(cj3*cj3)))+(((1.93020072)*cj0*cj3*cj4*r12))+(((-1.93020072)*cj3*gconst8*r00*sj0*sj4))+(((-1.93020072)*cj3*cj4*r02*sj0))+(((0.0096)*gconst7*r20*(cj3*cj3)))+(((-4.2e-6)*gconst8*r20*(cj3*cj3)))+(((0.28199832)*cj3*gconst7*r21*sj4))+(((12.0)*pz*(cj3*cj3)))+(((1.93020072)*cj3*gconst7*r01*sj0*sj4))+(((-1.93020072)*cj0*cj3*gconst7*r11*sj4))+(((4.2e-6)*gconst7*r21*(cj3*cj3)))+(((1.93020072)*cj0*cj3*gconst8*r10*sj4))+(((-0.28199832)*cj3*cj4*r22))+(((0.64)*(cj3*cj3)))))))+(((-0.64340024)*cj3*gconst8*r00*sj0*sj4))+(((0.0032)*gconst8*r21*(cj3*cj3)))+(((0.64340024)*cj3*gconst7*r01*sj0*sj4))+(((0.09399944)*cj3*gconst7*r21*sj4))+(((-1.4e-6)*gconst8*r20*(cj3*cj3)))+(((-0.64340024)*cj3*cj4*r02*sj0))+(((-0.64)*(cj3*cj3)))+(((4.0)*pz*(cj3*cj3)))+(((0.0032)*gconst7*r20*(cj3*cj3)))+(((0.64340024)*cj0*cj3*gconst8*r10*sj4))+(((htj1*htj1)*(((((-0.28199832)*cj3*gconst8*r20*sj4))+(((0.0096)*gconst8*r21*(cj3*cj3)))+(((1.93020072)*cj0*cj3*cj4*r12))+(((-1.93020072)*cj3*gconst8*r00*sj0*sj4))+(((-1.93020072)*cj3*cj4*r02*sj0))+(((0.0096)*gconst7*r20*(cj3*cj3)))+(((-4.2e-6)*gconst8*r20*(cj3*cj3)))+(((0.28199832)*cj3*gconst7*r21*sj4))+(((12.0)*pz*(cj3*cj3)))+(((1.93020072)*cj3*gconst7*r01*sj0*sj4))+(((-1.93020072)*cj0*cj3*gconst7*r11*sj4))+(((4.2e-6)*gconst7*r21*(cj3*cj3)))+(((1.93020072)*cj0*cj3*gconst8*r10*sj4))+(((-0.64)*(cj3*cj3)))+(((-0.28199832)*cj3*cj4*r22)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x3907=((-1.0)*r20);
IkReal x3908=x3564;
CheckValue<IkReal> x3910 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3907),IKFAST_ATAN2_MAGTHRESH);
if(!x3910.valid){
continue;
}
IkReal x3909=((-1.0)*(x3910.value));
sj5=gconst7;
cj5=gconst8;
j5=x3909;
IkReal gconst6=x3909;
IkReal gconst7=(r21*x3908);
IkReal gconst8=(x3907*x3908);
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x3911=((-1.0)*r20);
IkReal x3912=x3564;
CheckValue<IkReal> x3914 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3911),IKFAST_ATAN2_MAGTHRESH);
if(!x3914.valid){
continue;
}
IkReal x3913=((-1.0)*(x3914.value));
sj5=gconst7;
cj5=gconst8;
j5=x3913;
IkReal gconst6=x3913;
IkReal gconst7=(r21*x3912);
IkReal gconst8=(x3911*x3912);
IkReal x3915=r22*r22;
IkReal x3916=(r12*sj0);
IkReal x3917=(cj0*r02);
CheckValue<IkReal> x3921=IKPowWithIntegerCheck(((-1.0)+x3915),-1);
if(!x3921.valid){
continue;
}
IkReal x3918=x3921.value;
if((((1.0)+(((-1.0)*x3915)))) < -0.00001)
continue;
IkReal x3919=IKsqrt(((1.0)+(((-1.0)*x3915))));
IkReal x3920=(x3918*x3919);
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
j2eval[2]=((IKabs((((sj1*x3916*x3920))+((sj1*x3917*x3920)))))+(IKabs((((cj1*x3917*x3920))+((cj1*x3916*x3920))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x3922=((-1.0)*r20);
IkReal x3923=x3564;
CheckValue<IkReal> x3925 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3922),IKFAST_ATAN2_MAGTHRESH);
if(!x3925.valid){
continue;
}
IkReal x3924=((-1.0)*(x3925.value));
sj5=gconst7;
cj5=gconst8;
j5=x3924;
IkReal gconst6=x3924;
IkReal gconst7=(r21*x3923);
IkReal gconst8=(x3922*x3923);
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3926=(cj1*cj4);
IkReal x3927=((1.0)*gconst7);
IkReal x3928=(gconst8*r20);
IkReal x3929=(cj4*sj1);
IkReal x3930=(gconst8*r21);
IkReal x3931=((1.0)*r22*sj4);
if( IKabs(((((-1.0)*cj1*x3931))+((sj1*x3930))+(((-1.0)*r21*x3926*x3927))+((gconst7*r20*sj1))+((x3926*x3928)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3928*x3929))+(((-1.0)*r21*x3927*x3929))+(((-1.0)*cj1*x3930))+(((-1.0)*sj1*x3931))+(((-1.0)*cj1*r20*x3927)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x3931))+((sj1*x3930))+(((-1.0)*r21*x3926*x3927))+((gconst7*r20*sj1))+((x3926*x3928))))+IKsqr((((x3928*x3929))+(((-1.0)*r21*x3927*x3929))+(((-1.0)*cj1*x3930))+(((-1.0)*sj1*x3931))+(((-1.0)*cj1*r20*x3927))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x3931))+((sj1*x3930))+(((-1.0)*r21*x3926*x3927))+((gconst7*r20*sj1))+((x3926*x3928))), (((x3928*x3929))+(((-1.0)*r21*x3927*x3929))+(((-1.0)*cj1*x3930))+(((-1.0)*sj1*x3931))+(((-1.0)*cj1*r20*x3927))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3932=IKcos(j2);
IkReal x3933=IKsin(j2);
IkReal x3934=(cj4*gconst7);
IkReal x3935=(r01*sj0);
IkReal x3936=(cj0*r11);
IkReal x3937=(r00*sj0);
IkReal x3938=((3.5e-7)*gconst8);
IkReal x3939=(gconst8*r21);
IkReal x3940=(cj4*gconst8);
IkReal x3941=((3.5e-7)*gconst7);
IkReal x3942=((0.0008)*gconst8);
IkReal x3943=(gconst7*r20);
IkReal x3944=((1.0)*sj0);
IkReal x3945=(cj0*r10);
IkReal x3946=(cj1*x3932);
IkReal x3947=(gconst7*x3945);
IkReal x3948=(cj1*x3933);
IkReal x3949=(sj1*x3933);
IkReal x3950=(sj1*x3932);
IkReal x3951=((1.0)*x3949);
evalcond[0]=(x3939+x3943+x3946+(((-1.0)*x3951)));
evalcond[1]=((((-1.0)*x3948))+(((-1.0)*x3950))+((r20*x3940))+(((-1.0)*r22*sj4))+(((-1.0)*r21*x3934)));
evalcond[2]=((((-1.0)*x3947))+x3948+x3950+(((-1.0)*gconst8*x3936))+((gconst7*x3937))+((gconst8*x3935)));
evalcond[3]=((((-1.0)*x3940*x3945))+(((-1.0)*r02*sj4*x3944))+((cj0*r12*sj4))+x3946+((x3934*x3936))+(((-1.0)*x3951))+((x3937*x3940))+(((-1.0)*x3934*x3935)));
evalcond[4]=((((0.16085006)*x3950))+(((0.02349986)*x3946))+(((-0.0008)*x3943))+(((0.16)*cj1))+(((-0.0008)*x3939))+((r20*x3938))+(((-1.0)*pz))+(((-1.0)*r21*x3941))+(((7.7e-7)*sj1))+(((-0.02349986)*x3949))+(((0.16085006)*x3948)));
evalcond[5]=((((-0.16085006)*x3946))+(((0.02349986)*x3948))+(((-1.0)*px*x3944))+(((-0.0008)*gconst7*x3937))+(((0.02349986)*x3950))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*x3938*x3945))+((x3937*x3938))+(((-1.0)*x3935*x3941))+(((-1.0)*x3935*x3942))+(((0.0008)*x3947))+(((0.16085006)*x3949))+((cj0*py))+((x3936*x3941))+((x3936*x3942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3952=(cj1*cj4);
IkReal x3953=(gconst8*r20);
IkReal x3954=((1.0)*sj4);
IkReal x3955=(cj4*sj1);
IkReal x3956=(gconst7*r21);
IkReal x3957=((1.0)*r22*sj1);
IkReal x3958=((1.0)*cj1*x3956);
if( IKabs((((sj1*sj4*x3956))+(((-1.0)*x3952*x3956))+(((-1.0)*r22*x3955))+((x3952*x3953))+(((-1.0)*cj1*r22*x3954))+(((-1.0)*sj1*x3953*x3954)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3953*x3955))+(((-1.0)*cj1*x3954*x3956))+(((-1.0)*x3955*x3956))+((cj1*sj4*x3953))+(((-1.0)*r22*sj1*x3954))+((r22*x3952)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*sj4*x3956))+(((-1.0)*x3952*x3956))+(((-1.0)*r22*x3955))+((x3952*x3953))+(((-1.0)*cj1*r22*x3954))+(((-1.0)*sj1*x3953*x3954))))+IKsqr((((x3953*x3955))+(((-1.0)*cj1*x3954*x3956))+(((-1.0)*x3955*x3956))+((cj1*sj4*x3953))+(((-1.0)*r22*sj1*x3954))+((r22*x3952))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*sj4*x3956))+(((-1.0)*x3952*x3956))+(((-1.0)*r22*x3955))+((x3952*x3953))+(((-1.0)*cj1*r22*x3954))+(((-1.0)*sj1*x3953*x3954))), (((x3953*x3955))+(((-1.0)*cj1*x3954*x3956))+(((-1.0)*x3955*x3956))+((cj1*sj4*x3953))+(((-1.0)*r22*sj1*x3954))+((r22*x3952))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3959=IKcos(j2);
IkReal x3960=IKsin(j2);
IkReal x3961=(cj4*gconst7);
IkReal x3962=(cj0*r11);
IkReal x3963=(gconst7*sj4);
IkReal x3964=((1.0)*r21);
IkReal x3965=((3.5e-7)*r20);
IkReal x3966=((0.0008)*gconst7);
IkReal x3967=(cj0*r10);
IkReal x3968=(cj0*r12);
IkReal x3969=(gconst8*r20);
IkReal x3970=((3.5e-7)*gconst7);
IkReal x3971=(gconst8*sj0);
IkReal x3972=(r02*sj0);
IkReal x3973=((1.0)*sj4);
IkReal x3974=((1.0)*cj4);
IkReal x3975=(cj1*x3959);
IkReal x3976=((1.0)*r01*sj0);
IkReal x3977=(sj1*x3960);
IkReal x3978=(sj1*x3959);
IkReal x3979=(cj1*x3960);
IkReal x3980=((1.0)*x3978);
IkReal x3981=((1.0)*x3979);
IkReal x3982=(x3980+x3981);
evalcond[0]=((((-1.0)*x3963*x3964))+((cj4*r22))+x3977+((sj4*x3969))+(((-1.0)*x3975)));
evalcond[1]=(((cj4*x3969))+(((-1.0)*x3961*x3964))+(((-1.0)*r22*x3973))+(((-1.0)*x3982)));
evalcond[2]=((((-1.0)*x3972*x3973))+(((-1.0)*gconst8*x3967*x3974))+((x3961*x3962))+x3975+((sj4*x3968))+(((-1.0)*x3961*x3976))+(((-1.0)*x3977))+((cj4*r00*x3971)));
evalcond[3]=(((x3962*x3963))+(((-1.0)*gconst8*x3967*x3973))+(((-1.0)*x3968*x3974))+((r00*sj4*x3971))+(((-1.0)*x3982))+(((-1.0)*x3963*x3976))+((cj4*x3972)));
CheckValue<IkReal> x3983=IKPowWithIntegerCheck(gconst8,-1);
if(!x3983.valid){
continue;
}
evalcond[4]=((((-0.02349986)*x3977))+(((0.16)*cj1))+((x3965*(gconst7*gconst7)*(x3983.value)))+(((0.16085006)*x3978))+(((0.16085006)*x3979))+(((-1.0)*pz))+(((7.7e-7)*sj1))+((gconst8*x3965))+(((0.02349986)*x3975)));
evalcond[5]=(((x3962*x3970))+(((-3.5e-7)*gconst8*x3967))+(((-0.0008)*r01*x3971))+(((-1.0)*r01*sj0*x3970))+(((3.5e-7)*r00*x3971))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.16085006)*x3977))+(((-1.0)*r00*sj0*x3966))+(((0.0008)*gconst8*x3962))+(((0.02349986)*x3978))+(((0.02349986)*x3979))+(((-0.16085006)*x3975))+(((-1.0)*px*sj0))+((x3966*x3967))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3984=(gconst7*r21);
IkReal x3985=(sj1*sj4);
IkReal x3986=((1.0)*r22);
IkReal x3987=(gconst8*r20);
IkReal x3988=(cj1*sj4);
IkReal x3989=(cj4*sj1);
IkReal x3990=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*x3984*x3985))+((x3985*x3987))+((cj1*cj4*x3987))+(((-1.0)*x3986*x3988))+(((-1.0)*x3984*x3990))+((r22*x3989)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3984*x3988))+(((-1.0)*x3984*x3989))+(((-1.0)*x3985*x3986))+((x3987*x3989))+(((-1.0)*cj1*cj4*x3986))+(((-1.0)*x3987*x3988)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3984*x3985))+((x3985*x3987))+((cj1*cj4*x3987))+(((-1.0)*x3986*x3988))+(((-1.0)*x3984*x3990))+((r22*x3989))))+IKsqr((((x3984*x3988))+(((-1.0)*x3984*x3989))+(((-1.0)*x3985*x3986))+((x3987*x3989))+(((-1.0)*cj1*cj4*x3986))+(((-1.0)*x3987*x3988))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3984*x3985))+((x3985*x3987))+((cj1*cj4*x3987))+(((-1.0)*x3986*x3988))+(((-1.0)*x3984*x3990))+((r22*x3989))), (((x3984*x3988))+(((-1.0)*x3984*x3989))+(((-1.0)*x3985*x3986))+((x3987*x3989))+(((-1.0)*cj1*cj4*x3986))+(((-1.0)*x3987*x3988))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3991=IKcos(j2);
IkReal x3992=IKsin(j2);
IkReal x3993=(cj4*gconst7);
IkReal x3994=(cj0*r11);
IkReal x3995=(gconst7*sj4);
IkReal x3996=((1.0)*r21);
IkReal x3997=((3.5e-7)*r20);
IkReal x3998=(gconst8*sj0);
IkReal x3999=((0.0008)*gconst7);
IkReal x4000=(cj0*r10);
IkReal x4001=(cj0*r12);
IkReal x4002=(gconst8*r20);
IkReal x4003=((3.5e-7)*gconst7);
IkReal x4004=(r02*sj0);
IkReal x4005=((1.0)*cj4);
IkReal x4006=((1.0)*sj4);
IkReal x4007=(cj1*x3991);
IkReal x4008=((1.0)*r01*sj0);
IkReal x4009=(cj1*x3992);
IkReal x4010=(sj1*x3992);
IkReal x4011=(sj1*x3991);
IkReal x4012=((1.0)*x4010);
evalcond[0]=(((cj4*r22))+((sj4*x4002))+(((-1.0)*x3995*x3996))+x4007+(((-1.0)*x4012)));
evalcond[1]=((((-1.0)*x3993*x3996))+(((-1.0)*r22*x4006))+(((-1.0)*x4009))+(((-1.0)*x4011))+((cj4*x4002)));
evalcond[2]=(((x3994*x3995))+(((-1.0)*x4001*x4005))+(((-1.0)*x3995*x4008))+x4009+x4011+((r00*sj4*x3998))+(((-1.0)*gconst8*x4000*x4006))+((cj4*x4004)));
evalcond[3]=(((sj4*x4001))+(((-1.0)*x3993*x4008))+x4007+(((-1.0)*x4012))+(((-1.0)*gconst8*x4000*x4005))+((cj4*r00*x3998))+((x3993*x3994))+(((-1.0)*x4004*x4006)));
CheckValue<IkReal> x4013=IKPowWithIntegerCheck(gconst8,-1);
if(!x4013.valid){
continue;
}
evalcond[4]=((((0.16)*cj1))+(((0.16085006)*x4009))+(((0.16085006)*x4011))+(((0.02349986)*x4007))+(((-1.0)*pz))+((gconst8*x3997))+(((7.7e-7)*sj1))+((x3997*(gconst7*gconst7)*(x4013.value)))+(((-0.02349986)*x4010)));
evalcond[5]=((((-3.5e-7)*gconst8*x4000))+(((0.02349986)*x4011))+(((-0.16085006)*x4007))+(((0.16085006)*x4010))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.0008)*r01*x3998))+(((0.02349986)*x4009))+(((-1.0)*r00*sj0*x3999))+(((3.5e-7)*r00*x3998))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0008)*gconst8*x3994))+(((-1.0)*r01*sj0*x4003))+((x3994*x4003))+((x3999*x4000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4014=(r22*sj4);
IkReal x4015=(gconst7*r21);
IkReal x4016=(cj4*r22);
IkReal x4017=((1.0)*sj4);
IkReal x4018=((1.0)*sj1);
IkReal x4019=(cj3*cj4);
IkReal x4020=((1.0)*cj1*cj3);
IkReal x4021=(gconst8*r20*sj1);
IkReal x4022=(cj1*gconst8*r20);
CheckValue<IkReal> x4023=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x4023.valid){
continue;
}
CheckValue<IkReal> x4024 = IKatan2WithCheck(IkReal((((x4019*x4022))+((sj1*sj4*x4015))+(((-1.0)*cj1*x4015*x4019))+(((-1.0)*x4014*x4020))+(((-1.0)*x4017*x4021))+(((-1.0)*x4016*x4018)))),IkReal(((((-1.0)*cj1*x4015*x4017))+((x4019*x4021))+(((-1.0)*x4015*x4018*x4019))+((sj4*x4022))+((cj1*x4016))+(((-1.0)*cj3*x4014*x4018)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4024.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4023.value)))+(x4024.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4025=IKcos(j2);
IkReal x4026=IKsin(j2);
IkReal x4027=(cj4*gconst7);
IkReal x4028=(cj0*r11);
IkReal x4029=(gconst7*sj4);
IkReal x4030=((1.0)*r21);
IkReal x4031=((3.5e-7)*gconst8);
IkReal x4032=(r00*sj0);
IkReal x4033=(gconst8*r21);
IkReal x4034=(cj0*r10);
IkReal x4035=((0.0008)*gconst7);
IkReal x4036=(cj0*r12);
IkReal x4037=(gconst8*r20);
IkReal x4038=((3.5e-7)*gconst7);
IkReal x4039=((0.0008)*gconst8);
IkReal x4040=(r01*sj0);
IkReal x4041=((1.0)*sj3);
IkReal x4042=(r02*sj0);
IkReal x4043=(cj4*gconst8);
IkReal x4044=((1.0)*gconst8);
IkReal x4045=((1.0)*cj3);
IkReal x4046=((1.0)*sj4);
IkReal x4047=(cj1*x4025);
IkReal x4048=((1.0)*x4040);
IkReal x4049=(sj1*x4026);
IkReal x4050=(sj1*x4025);
IkReal x4051=(cj1*x4026);
evalcond[0]=(((sj3*x4049))+x4033+(((-1.0)*x4041*x4047))+((gconst7*r20)));
evalcond[1]=((((-1.0)*x4027*x4030))+(((-1.0)*x4051))+(((-1.0)*x4050))+(((-1.0)*r22*x4046))+((cj4*x4037)));
evalcond[2]=(((cj4*r22))+((cj3*x4049))+(((-1.0)*x4045*x4047))+(((-1.0)*x4029*x4030))+((sj4*x4037)));
evalcond[3]=((((-1.0)*x4028*x4044))+(((-1.0)*gconst7*x4034))+((gconst7*x4032))+((gconst8*x4040))+(((-1.0)*x4041*x4050))+(((-1.0)*x4041*x4051)));
evalcond[4]=((((-1.0)*x4027*x4048))+x4047+(((-1.0)*x4034*x4043))+(((-1.0)*x4049))+(((-1.0)*x4042*x4046))+((sj4*x4036))+((x4027*x4028))+((x4032*x4043)));
evalcond[5]=((((-1.0)*x4029*x4048))+(((-1.0)*sj4*x4034*x4044))+(((-1.0)*x4045*x4050))+(((-1.0)*x4045*x4051))+((gconst8*sj4*x4032))+((x4028*x4029))+((cj4*x4042))+(((-1.0)*cj4*x4036)));
evalcond[6]=((((0.02349986)*x4047))+(((-0.0008)*x4033))+(((0.16)*cj1))+(((-1.0)*r20*x4035))+(((-1.0)*r21*x4038))+((r20*x4031))+(((-1.0)*pz))+(((-0.02349986)*x4049))+(((7.7e-7)*sj1))+(((0.16085006)*x4050))+(((0.16085006)*x4051)));
evalcond[7]=((((-1.0)*x4031*x4034))+(((0.02349986)*x4050))+(((0.02349986)*x4051))+((x4028*x4038))+((x4028*x4039))+(((-1.0)*x4039*x4040))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.16085006)*x4049))+(((-0.16085006)*x4047))+((x4034*x4035))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*x4032*x4035))+((x4031*x4032))+(((-1.0)*x4038*x4040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4052=(cj1*sj0);
IkReal x4053=(gconst7*r00);
IkReal x4054=(gconst8*r01);
IkReal x4055=(sj0*sj1);
IkReal x4056=(cj1*gconst8);
IkReal x4057=(cj1*gconst7);
IkReal x4058=((1.0)*cj0);
IkReal x4059=((1.0)*sj1);
CheckValue<IkReal> x4060 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4057*x4058))+(((-1.0)*gconst7*r20*x4059))+(((-1.0)*gconst8*r21*x4059))+((x4052*x4053))+((x4052*x4054))+(((-1.0)*r11*x4056*x4058)))),IkReal(((((-1.0)*gconst8*r11*sj1*x4058))+((r21*x4056))+((x4054*x4055))+((r20*x4057))+((x4053*x4055))+(((-1.0)*gconst7*r10*sj1*x4058)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4060.valid){
continue;
}
CheckValue<IkReal> x4061=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4061.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4060.value)+(((1.5707963267949)*(x4061.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4062=IKcos(j2);
IkReal x4063=IKsin(j2);
IkReal x4064=(cj4*gconst7);
IkReal x4065=(cj0*r11);
IkReal x4066=(gconst7*sj4);
IkReal x4067=((1.0)*r21);
IkReal x4068=((3.5e-7)*gconst8);
IkReal x4069=(r00*sj0);
IkReal x4070=(gconst8*r21);
IkReal x4071=(cj0*r10);
IkReal x4072=((0.0008)*gconst7);
IkReal x4073=(cj0*r12);
IkReal x4074=(gconst8*r20);
IkReal x4075=((3.5e-7)*gconst7);
IkReal x4076=((0.0008)*gconst8);
IkReal x4077=(r01*sj0);
IkReal x4078=((1.0)*sj3);
IkReal x4079=(r02*sj0);
IkReal x4080=(cj4*gconst8);
IkReal x4081=((1.0)*gconst8);
IkReal x4082=((1.0)*cj3);
IkReal x4083=((1.0)*sj4);
IkReal x4084=(cj1*x4062);
IkReal x4085=((1.0)*x4077);
IkReal x4086=(sj1*x4063);
IkReal x4087=(sj1*x4062);
IkReal x4088=(cj1*x4063);
evalcond[0]=(x4070+((sj3*x4086))+(((-1.0)*x4078*x4084))+((gconst7*r20)));
evalcond[1]=(((cj4*x4074))+(((-1.0)*x4064*x4067))+(((-1.0)*r22*x4083))+(((-1.0)*x4087))+(((-1.0)*x4088)));
evalcond[2]=(((sj4*x4074))+((cj4*r22))+(((-1.0)*x4066*x4067))+(((-1.0)*x4082*x4084))+((cj3*x4086)));
evalcond[3]=(((gconst7*x4069))+(((-1.0)*gconst7*x4071))+(((-1.0)*x4065*x4081))+(((-1.0)*x4078*x4088))+(((-1.0)*x4078*x4087))+((gconst8*x4077)));
evalcond[4]=(((sj4*x4073))+(((-1.0)*x4064*x4085))+((x4064*x4065))+(((-1.0)*x4071*x4080))+x4084+((x4069*x4080))+(((-1.0)*x4086))+(((-1.0)*x4079*x4083)));
evalcond[5]=(((cj4*x4079))+((gconst8*sj4*x4069))+(((-1.0)*x4066*x4085))+(((-1.0)*x4082*x4088))+(((-1.0)*x4082*x4087))+(((-1.0)*cj4*x4073))+((x4065*x4066))+(((-1.0)*sj4*x4071*x4081)));
evalcond[6]=((((0.16085006)*x4088))+(((0.16085006)*x4087))+(((-0.02349986)*x4086))+(((0.16)*cj1))+(((-1.0)*pz))+((r20*x4068))+(((-1.0)*r20*x4072))+(((7.7e-7)*sj1))+(((-1.0)*r21*x4075))+(((0.02349986)*x4084))+(((-0.0008)*x4070)));
evalcond[7]=((((0.16085006)*x4086))+(((-1.0)*x4068*x4071))+(((-1.0)*x4069*x4072))+(((-1.0)*x4075*x4077))+((x4065*x4075))+((x4065*x4076))+((x4068*x4069))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((x4071*x4072))+(((0.02349986)*x4088))+(((0.02349986)*x4087))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*x4076*x4077))+(((-0.16085006)*x4084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4089=((1.0)*sj3);
IkReal x4090=(r21*sj1);
IkReal x4091=(cj4*gconst7);
IkReal x4092=(cj1*r21);
IkReal x4093=(r22*sj4);
IkReal x4094=(cj1*r20);
IkReal x4095=(r20*sj1);
IkReal x4096=(cj4*gconst8*sj3);
CheckValue<IkReal> x4097=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4097.valid){
continue;
}
CheckValue<IkReal> x4098 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x4089*x4093))+((x4094*x4096))+(((-1.0)*gconst8*x4090))+(((-1.0)*x4089*x4091*x4092))+(((-1.0)*gconst7*x4095)))),IkReal((((gconst8*x4092))+(((-1.0)*x4089*x4090*x4091))+((gconst7*x4094))+((x4095*x4096))+(((-1.0)*sj1*x4089*x4093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4098.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4097.value)))+(x4098.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4099=IKcos(j2);
IkReal x4100=IKsin(j2);
IkReal x4101=(cj4*gconst7);
IkReal x4102=(cj0*r11);
IkReal x4103=(gconst7*sj4);
IkReal x4104=((1.0)*r21);
IkReal x4105=((3.5e-7)*gconst8);
IkReal x4106=(r00*sj0);
IkReal x4107=(gconst8*r21);
IkReal x4108=(cj0*r10);
IkReal x4109=((0.0008)*gconst7);
IkReal x4110=(cj0*r12);
IkReal x4111=(gconst8*r20);
IkReal x4112=((3.5e-7)*gconst7);
IkReal x4113=((0.0008)*gconst8);
IkReal x4114=(r01*sj0);
IkReal x4115=((1.0)*sj3);
IkReal x4116=(r02*sj0);
IkReal x4117=(cj4*gconst8);
IkReal x4118=((1.0)*gconst8);
IkReal x4119=((1.0)*cj3);
IkReal x4120=((1.0)*sj4);
IkReal x4121=(cj1*x4099);
IkReal x4122=((1.0)*x4114);
IkReal x4123=(sj1*x4100);
IkReal x4124=(sj1*x4099);
IkReal x4125=(cj1*x4100);
evalcond[0]=(((sj3*x4123))+x4107+(((-1.0)*x4115*x4121))+((gconst7*r20)));
evalcond[1]=((((-1.0)*r22*x4120))+((cj4*x4111))+(((-1.0)*x4101*x4104))+(((-1.0)*x4124))+(((-1.0)*x4125)));
evalcond[2]=(((cj4*r22))+(((-1.0)*x4119*x4121))+((sj4*x4111))+((cj3*x4123))+(((-1.0)*x4103*x4104)));
evalcond[3]=(((gconst7*x4106))+((gconst8*x4114))+(((-1.0)*gconst7*x4108))+(((-1.0)*x4102*x4118))+(((-1.0)*x4115*x4125))+(((-1.0)*x4115*x4124)));
evalcond[4]=((((-1.0)*x4101*x4122))+((x4106*x4117))+(((-1.0)*x4108*x4117))+(((-1.0)*x4116*x4120))+((x4101*x4102))+x4121+((sj4*x4110))+(((-1.0)*x4123)));
evalcond[5]=((((-1.0)*x4103*x4122))+(((-1.0)*cj4*x4110))+(((-1.0)*x4119*x4125))+(((-1.0)*x4119*x4124))+((cj4*x4116))+((gconst8*sj4*x4106))+(((-1.0)*sj4*x4108*x4118))+((x4102*x4103)));
evalcond[6]=((((0.16)*cj1))+(((0.16085006)*x4124))+(((0.16085006)*x4125))+((r20*x4105))+(((-1.0)*pz))+(((-1.0)*r21*x4112))+(((7.7e-7)*sj1))+(((-1.0)*r20*x4109))+(((-0.0008)*x4107))+(((-0.02349986)*x4123))+(((0.02349986)*x4121)));
evalcond[7]=(((x4102*x4113))+((x4102*x4112))+(((-0.16085006)*x4121))+(((-1.0)*x4105*x4108))+(((0.16085006)*x4123))+(((-1.0)*x4113*x4114))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*x4112*x4114))+(((-1.0)*x4106*x4109))+((x4105*x4106))+(((-1.0)*px*sj0))+((cj0*py))+((x4108*x4109))+(((0.02349986)*x4124))+(((0.02349986)*x4125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4126=((-1.0)*r21);
IkReal x4128 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4128)==0){
continue;
}
IkReal x4127=pow(x4128,-0.5);
CheckValue<IkReal> x4129 = IKatan2WithCheck(IkReal(x4126),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4129.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x4129.value))));
IkReal gconst10=(x4126*x4127);
IkReal gconst11=((1.0)*r20*x4127);
CheckValue<IkReal> x4130 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4130.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4130.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x4131=((-1.0)*r21);
CheckValue<IkReal> x4134 = IKatan2WithCheck(IkReal(x4131),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4134.valid){
continue;
}
IkReal x4132=((1.0)*(x4134.value));
IkReal x4133=x4127;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x4132)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x4132)));
IkReal gconst10=(x4131*x4133);
IkReal gconst11=((1.0)*r20*x4133);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4135=((1.0)*cj4);
IkReal x4136=((1.0)*sj4);
IkReal x4137=(cj3*gconst11);
IkReal x4138=(cj3*gconst10);
CheckValue<IkReal> x4139=IKPowWithIntegerCheck(IKsign((((r22*(((((-1.0)*x4135*(gconst11*gconst11)))+(((-1.0)*x4135*(gconst10*gconst10)))))))+(((-1.0)*gconst11*r20*x4136))+((gconst10*r21*sj4)))),-1);
if(!x4139.valid){
continue;
}
CheckValue<IkReal> x4140 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*r02*x4136))+((cj4*r00*x4137))+(((-1.0)*r01*x4135*x4138)))),IkReal(((((-1.0)*r10*x4135*x4137))+((cj3*r12*sj4))+((cj4*r11*x4138)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4140.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4139.value)))+(x4140.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4141=IKsin(j0);
IkReal x4142=IKcos(j0);
IkReal x4143=((1.0)*sj4);
IkReal x4144=((0.0008)*gconst10);
IkReal x4145=(gconst10*r01);
IkReal x4146=(r12*x4141);
IkReal x4147=((1.0)*x4142);
IkReal x4148=(gconst11*x4141);
IkReal x4149=(r00*x4142);
IkReal x4150=(r10*x4141);
IkReal x4151=(r01*x4142);
IkReal x4152=(gconst10*r11*x4141);
evalcond[0]=(cj3+((gconst10*x4149))+((gconst10*x4150))+((r11*x4148))+((gconst11*x4151)));
evalcond[1]=((((-1.0)*cj4*x4145*x4147))+(((-1.0)*x4143*x4146))+((cj4*gconst11*x4149))+((cj4*r10*x4148))+(((-1.0)*cj4*x4152))+(((-1.0)*r02*x4142*x4143)));
evalcond[2]=((((-1.0)*sj3))+((cj4*x4146))+((gconst11*sj4*x4149))+(((-1.0)*x4143*x4152))+((cj4*r02*x4142))+(((-1.0)*x4142*x4143*x4145))+((r10*sj4*x4148)));
evalcond[3]=((((-1.0)*px*x4147))+(((-1.0)*x4144*x4150))+(((-1.0)*x4144*x4149))+(((-0.0008)*r11*x4148))+(((-3.5e-7)*x4142*x4145))+(((-0.0008)*gconst11*x4151))+(((3.5e-7)*r10*x4148))+(((-1.0)*py*x4141))+(((3.5e-7)*gconst11*x4149))+(((-3.5e-7)*x4152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4153=((-1.0)*r21);
CheckValue<IkReal> x4156 = IKatan2WithCheck(IkReal(x4153),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4156.valid){
continue;
}
IkReal x4154=((1.0)*(x4156.value));
IkReal x4155=x4127;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x4154)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x4154)));
IkReal gconst10=(x4153*x4155);
IkReal gconst11=((1.0)*r20*x4155);
IkReal x4157=((0.64)*cj3);
IkReal x4158=((0.64)*sj3);
IkReal x4159=(gconst11*r21);
IkReal x4160=((0.0096)*sj3);
IkReal x4161=(gconst10*r21);
IkReal x4162=((0.09399944)*sj4);
IkReal x4163=((4.2e-6)*sj3);
IkReal x4164=((1.93020072)*cj4);
IkReal x4165=(cj4*r22);
IkReal x4166=(pz*sj3);
IkReal x4167=((0.64340024)*cj4);
IkReal x4168=((0.0032)*sj3);
IkReal x4169=(gconst10*r20);
IkReal x4170=(gconst11*r20);
IkReal x4171=((4.2e-6)*cj3);
IkReal x4172=((0.28199832)*sj4);
IkReal x4173=((0.0032)*cj3);
IkReal x4174=((1.4e-6)*cj3);
IkReal x4175=(cj3*pz);
IkReal x4176=((0.0096)*cj3);
IkReal x4177=((0.28199832)*x4159);
IkReal x4178=((0.28199832)*x4169);
IkReal x4179=((12.0)*x4166);
IkReal x4180=((0.28199832)*x4165);
IkReal x4181=((12.0)*x4175);
IkReal x4182=(sj3*x4170);
IkReal x4183=(cj3*r22*sj4);
IkReal x4184=(r22*sj3*sj4);
IkReal x4185=(x4163*x4170);
IkReal x4186=(x4160*x4169);
IkReal x4187=(x4159*x4160);
IkReal x4188=((1.93020072)*x4184);
IkReal x4189=(x4161*x4163);
IkReal x4190=(x4170*x4171);
IkReal x4191=(x4170*x4172);
IkReal x4192=((1.93020072)*x4183);
IkReal x4193=(x4161*x4171);
IkReal x4194=(x4161*x4172);
IkReal x4195=(x4169*x4176);
IkReal x4196=(x4159*x4176);
IkReal x4197=(cj3*cj4*x4170);
IkReal x4198=(x4164*x4182);
IkReal x4199=(sj3*x4161*x4164);
IkReal x4200=(cj3*x4164*x4170);
IkReal x4201=(cj3*x4161*x4164);
IkReal x4202=(x4198+x4185+x4177+x4178);
IkReal x4203=(x4190+x4191+x4180+x4200);
IkReal x4204=(x4199+x4189+x4188+x4187+x4186+x4179);
IkReal x4205=(x4196+x4194+x4195+x4192+x4193+x4181+x4201);
j1eval[0]=((((40584.4155844156)*(IKabs(((((-1.0)*x4204))+x4202+(((-1.0)*x4158)))))))+(((40584.4155844156)*(IKabs(((((-1.0)*x4205))+x4157+x4203)))))+(IKabs(cj3))+(((40584.4155844156)*(IKabs(((((-1.0)*x4205))+x4203+(((-1.0)*x4157)))))))+(IKabs(sj3))+(((40584.4155844156)*(IKabs(((((0.09399944)*x4169))+(((-1.0)*x4159*x4168))+(((0.09399944)*x4159))+(((-4.0)*x4166))+(((-1.0)*sj3*x4161*x4167))+(((-0.64340024)*x4184))+(((1.4e-6)*x4182))+(((-1.0)*x4158))+(((-1.4e-6)*sj3*x4161))+((x4167*x4182))+(((-1.0)*x4168*x4169)))))))+(((40584.4155844156)*(IKabs(((((0.09399944)*x4165))+(((-1.0)*x4161*x4174))+((x4170*x4174))+(((-1.0)*x4161*x4162))+(((-1.0)*x4169*x4173))+((x4162*x4170))+(((-1.0)*cj3*x4161*x4167))+(((-1.0)*x4159*x4173))+((cj3*x4167*x4170))+(((-0.64340024)*x4183))+(((-4.0)*x4175))+(((-1.0)*x4157)))))))+(((40584.4155844156)*(IKabs(((((-1.0)*x4204))+x4158+x4202))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x4206=((0.64)*sj3);
IkReal x4207=((6.16e-6)*sj3);
IkReal x4208=(gconst11*r21);
IkReal x4209=((0.0096)*sj3);
IkReal x4210=((0.64340024)*sj3);
IkReal x4211=(r22*sj4);
IkReal x4212=((1.93020072)*cj4);
IkReal x4213=(pz*sj3);
IkReal x4214=((0.0032)*sj3);
IkReal x4215=(gconst10*r20);
IkReal x4216=((0.28199832)*x4208);
IkReal x4217=((0.28199832)*x4215);
IkReal x4218=((12.0)*x4213);
IkReal x4219=((0.09399944)*x4208);
IkReal x4220=((0.09399944)*x4215);
IkReal x4221=((4.0)*x4213);
IkReal x4222=(gconst10*r21*sj3);
IkReal x4223=(gconst11*r20*sj3);
IkReal x4224=((4.2e-6)*x4223);
IkReal x4225=(x4209*x4215);
IkReal x4226=(x4208*x4209);
IkReal x4227=((1.93020072)*sj3*x4211);
IkReal x4228=((4.2e-6)*x4222);
IkReal x4229=((1.4e-6)*x4223);
IkReal x4230=(x4214*x4215);
IkReal x4231=((1.4e-6)*x4222);
IkReal x4232=(x4210*x4211);
IkReal x4233=(x4208*x4214);
IkReal x4234=(x4212*x4223);
IkReal x4235=(x4212*x4222);
IkReal x4236=(cj4*gconst11*r20*x4210);
IkReal x4237=(cj4*gconst10*r21*x4210);
IkReal x4238=(x4219+x4229+x4220+x4236);
IkReal x4239=(x4217+x4216+x4224+x4234);
IkReal x4240=(x4221+x4237+x4233+x4232+x4231+x4230);
IkReal x4241=(x4218+x4228+x4225+x4226+x4227+x4235);
op[0]=((((-1.0)*x4240))+(((-1.0)*x4206))+x4238);
op[1]=x4207;
op[2]=((((-1.0)*x4241))+(((-1.0)*x4206))+x4239);
op[3]=((1.232e-5)*sj3);
op[4]=((((-1.0)*x4241))+x4239+x4206);
op[5]=x4207;
op[6]=((((-1.0)*x4240))+x4238+x4206);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4242=((0.64)*cj3);
IkReal x4243=(gconst10*r21);
IkReal x4244=((0.09399944)*sj4);
IkReal x4245=((1.93020072)*cj3);
IkReal x4246=((0.0096)*cj3);
IkReal x4247=(gconst11*r21);
IkReal x4248=(r22*sj4);
IkReal x4249=((0.64340024)*cj3);
IkReal x4250=(cj4*r22);
IkReal x4251=(gconst10*r20);
IkReal x4252=((6.16e-6)*cj3);
IkReal x4253=((0.28199832)*sj4);
IkReal x4254=((0.0032)*cj3);
IkReal x4255=(gconst11*r20);
IkReal x4256=(cj3*pz);
IkReal x4257=((0.28199832)*x4250);
IkReal x4258=((12.0)*x4256);
IkReal x4259=((0.09399944)*x4250);
IkReal x4260=((4.0)*x4256);
IkReal x4261=(cj3*x4255);
IkReal x4262=((4.2e-6)*x4261);
IkReal x4263=(x4253*x4255);
IkReal x4264=(x4245*x4248);
IkReal x4265=((4.2e-6)*cj3*x4243);
IkReal x4266=(x4243*x4253);
IkReal x4267=(x4246*x4251);
IkReal x4268=(x4246*x4247);
IkReal x4269=(x4244*x4255);
IkReal x4270=((1.4e-6)*x4261);
IkReal x4271=(x4247*x4254);
IkReal x4272=(x4243*x4244);
IkReal x4273=(x4251*x4254);
IkReal x4274=(x4248*x4249);
IkReal x4275=((1.4e-6)*cj3*x4243);
IkReal x4276=(cj4*x4261);
IkReal x4277=(cj4*x4245*x4255);
IkReal x4278=(cj4*x4243*x4245);
IkReal x4279=(cj4*x4249*x4255);
IkReal x4280=(cj4*x4243*x4249);
IkReal x4281=(x4257+x4262+x4263+x4277);
IkReal x4282=(x4259+x4269+x4270+x4279);
IkReal x4283=(x4258+x4264+x4265+x4266+x4267+x4268+x4278);
IkReal x4284=(x4280+x4260+x4273+x4272+x4271+x4275+x4274);
j1evalpoly[0]=((((-1.0)*x4284))+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x4283))+(((-1.0)*x4242))+x4281))))+x4282+x4242+(((htj1*htj1)*(((((-1.0)*x4283))+x4281+x4242))))+(((1.232e-5)*cj3*(htj1*htj1*htj1)))+((x4252*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x4284))+(((-1.0)*x4242))+x4282))))+((htj1*x4252)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x4285=((-1.0)*r21);
CheckValue<IkReal> x4288 = IKatan2WithCheck(IkReal(x4285),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4288.valid){
continue;
}
IkReal x4286=((1.0)*(x4288.value));
IkReal x4287=x4127;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x4286)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x4286)));
IkReal gconst10=(x4285*x4287);
IkReal gconst11=((1.0)*r20*x4287);
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x4289=((-1.0)*r21);
CheckValue<IkReal> x4292 = IKatan2WithCheck(IkReal(x4289),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4292.valid){
continue;
}
IkReal x4290=((1.0)*(x4292.value));
IkReal x4291=x4127;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x4290)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x4290)));
IkReal gconst10=(x4289*x4291);
IkReal gconst11=((1.0)*r20*x4291);
IkReal x4293=r22*r22;
IkReal x4294=((1.0)*cj1);
IkReal x4295=((-1.0)*sj1);
CheckValue<IkReal> x4300=IKPowWithIntegerCheck(((-1.0)+x4293),-1);
if(!x4300.valid){
continue;
}
IkReal x4296=x4300.value;
if((((1.0)+(((-1.0)*x4293)))) < -0.00001)
continue;
IkReal x4297=IKsqrt(((1.0)+(((-1.0)*x4293))));
IkReal x4298=(r12*sj0*x4296*x4297);
IkReal x4299=(cj0*r02*x4296*x4297);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((x4295*x4299))+((x4295*x4298)))))+(IKabs(((((-1.0)*x4294*x4298))+(((-1.0)*x4294*x4299))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4301=((-1.0)*r21);
CheckValue<IkReal> x4304 = IKatan2WithCheck(IkReal(x4301),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4304.valid){
continue;
}
IkReal x4302=((1.0)*(x4304.value));
IkReal x4303=x4127;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x4302)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x4302)));
IkReal gconst10=(x4301*x4303);
IkReal gconst11=((1.0)*r20*x4303);
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4305=(cj4*gconst10);
IkReal x4306=(gconst10*r20);
IkReal x4307=(r21*sj1);
IkReal x4308=((1.0)*r22*sj4);
IkReal x4309=((1.0)*cj1*r21);
IkReal x4310=(cj4*gconst11*r20);
if( IKabs((((cj1*x4310))+((gconst11*x4307))+(((-1.0)*cj1*x4308))+(((-1.0)*x4305*x4309))+((sj1*x4306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x4306))+((sj1*x4310))+(((-1.0)*sj1*x4308))+(((-1.0)*gconst11*x4309))+(((-1.0)*x4305*x4307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x4310))+((gconst11*x4307))+(((-1.0)*cj1*x4308))+(((-1.0)*x4305*x4309))+((sj1*x4306))))+IKsqr(((((-1.0)*cj1*x4306))+((sj1*x4310))+(((-1.0)*sj1*x4308))+(((-1.0)*gconst11*x4309))+(((-1.0)*x4305*x4307))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x4310))+((gconst11*x4307))+(((-1.0)*cj1*x4308))+(((-1.0)*x4305*x4309))+((sj1*x4306))), ((((-1.0)*cj1*x4306))+((sj1*x4310))+(((-1.0)*sj1*x4308))+(((-1.0)*gconst11*x4309))+(((-1.0)*x4305*x4307))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4311=IKcos(j2);
IkReal x4312=IKsin(j2);
IkReal x4313=(r01*sj0);
IkReal x4314=((3.5e-7)*gconst10);
IkReal x4315=(cj0*r11);
IkReal x4316=((1.0)*gconst11);
IkReal x4317=((0.0008)*gconst11);
IkReal x4318=((1.0)*sj0);
IkReal x4319=((1.0)*gconst10);
IkReal x4320=((0.0008)*gconst10);
IkReal x4321=(r00*sj0);
IkReal x4322=((3.5e-7)*gconst11);
IkReal x4323=(cj0*r10);
IkReal x4324=(cj4*gconst11);
IkReal x4325=(cj1*x4311);
IkReal x4326=(cj1*x4312);
IkReal x4327=(sj1*x4312);
IkReal x4328=(sj1*x4311);
IkReal x4329=((1.0)*x4327);
evalcond[0]=(((gconst11*r21))+((gconst10*r20))+(((-1.0)*x4329))+x4325);
evalcond[1]=(((r20*x4324))+(((-1.0)*x4328))+(((-1.0)*x4326))+(((-1.0)*cj4*r21*x4319))+(((-1.0)*r22*sj4)));
evalcond[2]=(((gconst11*x4313))+(((-1.0)*x4315*x4316))+x4328+x4326+(((-1.0)*x4319*x4323))+((gconst10*x4321)));
evalcond[3]=(((cj4*gconst10*x4315))+(((-1.0)*x4329))+((x4321*x4324))+(((-1.0)*cj4*x4313*x4319))+(((-1.0)*cj4*x4316*x4323))+((cj0*r12*sj4))+x4325+(((-1.0)*r02*sj4*x4318)));
evalcond[4]=(((r20*x4322))+(((0.02349986)*x4325))+(((-1.0)*r20*x4320))+(((0.16)*cj1))+(((-0.02349986)*x4327))+(((-1.0)*r21*x4314))+(((-1.0)*r21*x4317))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x4326))+(((0.16085006)*x4328)));
evalcond[5]=((((0.02349986)*x4326))+(((0.02349986)*x4328))+((x4321*x4322))+((x4315*x4317))+((x4320*x4323))+((x4314*x4315))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*x4320*x4321))+(((-1.0)*x4322*x4323))+(((-0.16085006)*x4325))+(((0.16085006)*x4327))+((cj0*py))+(((-1.0)*px*x4318))+(((-1.0)*x4313*x4317))+(((-1.0)*x4313*x4314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4330=(gconst10*r21);
IkReal x4331=(sj1*sj4);
IkReal x4332=((1.0)*cj4);
IkReal x4333=(cj1*cj4);
IkReal x4334=(gconst11*r20);
IkReal x4335=((1.0)*cj1*sj4);
if( IKabs(((((-1.0)*cj1*x4330*x4332))+(((-1.0)*r22*x4335))+((x4333*x4334))+(((-1.0)*x4331*x4334))+((x4330*x4331))+(((-1.0)*r22*sj1*x4332)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4330*x4335))+(((-1.0)*r22*x4331))+((cj1*sj4*x4334))+((cj4*sj1*x4334))+((r22*x4333))+(((-1.0)*sj1*x4330*x4332)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x4330*x4332))+(((-1.0)*r22*x4335))+((x4333*x4334))+(((-1.0)*x4331*x4334))+((x4330*x4331))+(((-1.0)*r22*sj1*x4332))))+IKsqr(((((-1.0)*x4330*x4335))+(((-1.0)*r22*x4331))+((cj1*sj4*x4334))+((cj4*sj1*x4334))+((r22*x4333))+(((-1.0)*sj1*x4330*x4332))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x4330*x4332))+(((-1.0)*r22*x4335))+((x4333*x4334))+(((-1.0)*x4331*x4334))+((x4330*x4331))+(((-1.0)*r22*sj1*x4332))), ((((-1.0)*x4330*x4335))+(((-1.0)*r22*x4331))+((cj1*sj4*x4334))+((cj4*sj1*x4334))+((r22*x4333))+(((-1.0)*sj1*x4330*x4332))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4336=IKcos(j2);
IkReal x4337=IKsin(j2);
IkReal x4338=(sj0*sj4);
IkReal x4339=(gconst11*r00);
IkReal x4340=(gconst10*r01);
IkReal x4341=((3.5e-7)*sj0);
IkReal x4342=(cj0*sj4);
IkReal x4343=(cj0*r11);
IkReal x4344=((1.0)*sj0);
IkReal x4345=((3.5e-7)*r20);
IkReal x4346=((0.0008)*gconst11);
IkReal x4347=((0.0008)*gconst10);
IkReal x4348=(cj4*sj0);
IkReal x4349=(cj0*r10);
IkReal x4350=((1.0)*gconst11);
IkReal x4351=(gconst11*r20);
IkReal x4352=(cj1*x4336);
IkReal x4353=((1.0)*gconst10*r21);
IkReal x4354=(sj1*x4336);
IkReal x4355=(sj1*x4337);
IkReal x4356=(cj1*x4337);
IkReal x4357=((1.0)*x4354);
IkReal x4358=((1.0)*x4356);
IkReal x4359=(x4358+x4357);
evalcond[0]=(((cj4*r22))+(((-1.0)*sj4*x4353))+((sj4*x4351))+x4355+(((-1.0)*x4352)));
evalcond[1]=(((cj4*x4351))+(((-1.0)*x4359))+(((-1.0)*cj4*x4353))+(((-1.0)*r22*sj4)));
evalcond[2]=(((x4339*x4348))+(((-1.0)*cj4*x4340*x4344))+(((-1.0)*r02*x4338))+(((-1.0)*cj4*x4349*x4350))+((r12*x4342))+x4352+((cj4*gconst10*x4343))+(((-1.0)*x4355)));
evalcond[3]=((((-1.0)*x4338*x4340))+((x4338*x4339))+(((-1.0)*x4359))+(((-1.0)*cj0*cj4*r12))+((r02*x4348))+(((-1.0)*r10*x4342*x4350))+((gconst10*r11*x4342)));
CheckValue<IkReal> x4360=IKPowWithIntegerCheck(gconst11,-1);
if(!x4360.valid){
continue;
}
evalcond[4]=((((0.16)*cj1))+(((0.02349986)*x4352))+(((-1.0)*pz))+(((7.7e-7)*sj1))+((gconst11*x4345))+((x4345*(gconst10*gconst10)*(x4360.value)))+(((-0.02349986)*x4355))+(((0.16085006)*x4354))+(((0.16085006)*x4356)));
evalcond[5]=((((-1.0)*r00*sj0*x4347))+((x4343*x4346))+((x4339*x4341))+((x4347*x4349))+(((-1.0)*x4340*x4341))+(((3.5e-7)*gconst10*x4343))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.02349986)*x4354))+(((0.02349986)*x4356))+(((-1.0)*r01*sj0*x4346))+(((-0.16085006)*x4352))+(((0.16085006)*x4355))+(((-3.5e-7)*gconst11*x4349))+(((-1.0)*px*x4344))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4361=(gconst10*r21);
IkReal x4362=(cj1*sj4);
IkReal x4363=(sj1*sj4);
IkReal x4364=(gconst11*r20);
IkReal x4365=(cj4*sj1);
IkReal x4366=((1.0)*r22);
IkReal x4367=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*x4361*x4367))+(((-1.0)*x4361*x4363))+(((-1.0)*x4362*x4366))+((x4363*x4364))+((cj1*cj4*x4364))+((r22*x4365)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4361*x4365))+(((-1.0)*cj1*cj4*x4366))+((x4361*x4362))+(((-1.0)*x4362*x4364))+((x4364*x4365))+(((-1.0)*x4363*x4366)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4361*x4367))+(((-1.0)*x4361*x4363))+(((-1.0)*x4362*x4366))+((x4363*x4364))+((cj1*cj4*x4364))+((r22*x4365))))+IKsqr(((((-1.0)*x4361*x4365))+(((-1.0)*cj1*cj4*x4366))+((x4361*x4362))+(((-1.0)*x4362*x4364))+((x4364*x4365))+(((-1.0)*x4363*x4366))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4361*x4367))+(((-1.0)*x4361*x4363))+(((-1.0)*x4362*x4366))+((x4363*x4364))+((cj1*cj4*x4364))+((r22*x4365))), ((((-1.0)*x4361*x4365))+(((-1.0)*cj1*cj4*x4366))+((x4361*x4362))+(((-1.0)*x4362*x4364))+((x4364*x4365))+(((-1.0)*x4363*x4366))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4368=IKcos(j2);
IkReal x4369=IKsin(j2);
IkReal x4370=(sj0*sj4);
IkReal x4371=(gconst11*r00);
IkReal x4372=(gconst10*r01);
IkReal x4373=((3.5e-7)*sj0);
IkReal x4374=(cj0*sj4);
IkReal x4375=(cj0*r11);
IkReal x4376=((1.0)*sj0);
IkReal x4377=((3.5e-7)*r20);
IkReal x4378=((0.0008)*gconst11);
IkReal x4379=((0.0008)*gconst10);
IkReal x4380=(cj4*sj0);
IkReal x4381=(cj0*r10);
IkReal x4382=((1.0)*gconst11);
IkReal x4383=(gconst11*r20);
IkReal x4384=(cj1*x4368);
IkReal x4385=((1.0)*gconst10*r21);
IkReal x4386=(cj1*x4369);
IkReal x4387=(sj1*x4368);
IkReal x4388=(sj1*x4369);
IkReal x4389=((1.0)*x4388);
evalcond[0]=(((cj4*r22))+((sj4*x4383))+x4384+(((-1.0)*sj4*x4385))+(((-1.0)*x4389)));
evalcond[1]=(((cj4*x4383))+(((-1.0)*cj4*x4385))+(((-1.0)*x4386))+(((-1.0)*x4387))+(((-1.0)*r22*sj4)));
evalcond[2]=(((x4370*x4371))+(((-1.0)*cj0*cj4*r12))+(((-1.0)*x4370*x4372))+((r02*x4380))+((gconst10*r11*x4374))+(((-1.0)*r10*x4374*x4382))+x4387+x4386);
evalcond[3]=(((cj4*gconst10*x4375))+((r12*x4374))+(((-1.0)*cj4*x4372*x4376))+((x4371*x4380))+x4384+(((-1.0)*r02*x4370))+(((-1.0)*cj4*x4381*x4382))+(((-1.0)*x4389)));
CheckValue<IkReal> x4390=IKPowWithIntegerCheck(gconst11,-1);
if(!x4390.valid){
continue;
}
evalcond[4]=(((x4377*(gconst10*gconst10)*(x4390.value)))+((gconst11*x4377))+(((0.16)*cj1))+(((0.02349986)*x4384))+(((-0.02349986)*x4388))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x4386))+(((0.16085006)*x4387)));
evalcond[5]=(((x4371*x4373))+(((-1.0)*px*x4376))+(((0.02349986)*x4386))+(((0.02349986)*x4387))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*r00*sj0*x4379))+((x4375*x4378))+(((-1.0)*r01*sj0*x4378))+(((-0.16085006)*x4384))+((x4379*x4381))+(((0.16085006)*x4388))+(((3.5e-7)*gconst10*x4375))+((cj0*py))+(((-3.5e-7)*gconst11*x4381))+(((-1.0)*x4372*x4373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4391=(cj1*r22);
IkReal x4392=((1.0)*sj4);
IkReal x4393=(gconst10*r21);
IkReal x4394=(cj3*cj4);
IkReal x4395=(r22*sj1);
IkReal x4396=(cj1*gconst11*r20);
IkReal x4397=(gconst11*r20*sj1);
CheckValue<IkReal> x4398=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x4398.valid){
continue;
}
CheckValue<IkReal> x4399 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x4393*x4394))+(((-1.0)*cj4*x4395))+((sj1*sj4*x4393))+((x4394*x4396))+(((-1.0)*x4392*x4397))+(((-1.0)*cj3*x4391*x4392)))),IkReal((((cj4*x4391))+(((-1.0)*cj1*x4392*x4393))+((sj4*x4396))+((x4394*x4397))+(((-1.0)*cj3*x4392*x4395))+(((-1.0)*sj1*x4393*x4394)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4399.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4398.value)))+(x4399.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4400=IKcos(j2);
IkReal x4401=IKsin(j2);
IkReal x4402=(gconst11*sj0);
IkReal x4403=((1.0)*sj4);
IkReal x4404=(gconst11*r21);
IkReal x4405=(cj0*sj4);
IkReal x4406=(gconst10*r21);
IkReal x4407=(cj0*gconst10);
IkReal x4408=(gconst11*r20);
IkReal x4409=((1.0)*cj4);
IkReal x4410=((1.0)*cj1);
IkReal x4411=(r02*sj0);
IkReal x4412=((1.0)*sj3);
IkReal x4413=(gconst10*r20);
IkReal x4414=((1.0)*cj3);
IkReal x4415=(cj1*x4400);
IkReal x4416=(gconst10*r01*sj0);
IkReal x4417=(cj0*gconst11*r11);
IkReal x4418=(sj3*x4401);
IkReal x4419=(sj1*x4400);
IkReal x4420=(gconst10*r00*sj0);
IkReal x4421=(cj0*gconst11*r10);
IkReal x4422=(sj1*x4401);
IkReal x4423=(cj1*x4401);
evalcond[0]=((((-1.0)*sj3*x4400*x4410))+x4404+x4413+((sj1*x4418)));
evalcond[1]=(((cj4*x4408))+(((-1.0)*x4401*x4410))+(((-1.0)*x4419))+(((-1.0)*x4406*x4409))+(((-1.0)*r22*x4403)));
evalcond[2]=(((cj4*r22))+(((-1.0)*x4403*x4406))+(((-1.0)*cj3*x4400*x4410))+((cj3*x4422))+((sj4*x4408)));
evalcond[3]=((((-1.0)*x4410*x4418))+x4420+(((-1.0)*r10*x4407))+((r01*x4402))+(((-1.0)*x4412*x4419))+(((-1.0)*x4417)));
evalcond[4]=((((-1.0)*x4409*x4416))+x4415+(((-1.0)*x4403*x4411))+((r12*x4405))+((cj4*r11*x4407))+((cj4*r00*x4402))+(((-1.0)*x4422))+(((-1.0)*x4409*x4421)));
evalcond[5]=(((cj4*x4411))+(((-1.0)*x4403*x4416))+((gconst10*r11*x4405))+(((-1.0)*x4403*x4421))+(((-1.0)*x4414*x4419))+(((-1.0)*cj3*x4401*x4410))+(((-1.0)*cj0*r12*x4409))+((r00*sj4*x4402)));
evalcond[6]=((((-3.5e-7)*x4406))+(((0.16)*cj1))+(((0.16085006)*x4423))+(((0.02349986)*x4415))+(((-1.0)*pz))+(((-0.0008)*x4413))+(((7.7e-7)*sj1))+(((-0.0008)*x4404))+(((-0.02349986)*x4422))+(((3.5e-7)*x4408))+(((0.16085006)*x4419)));
evalcond[7]=((((0.0008)*x4417))+(((0.02349986)*x4423))+(((0.16085006)*x4422))+(((-3.5e-7)*x4421))+(((0.02349986)*x4419))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((3.5e-7)*r00*x4402))+(((-0.0008)*r01*x4402))+(((-0.0008)*x4420))+(((3.5e-7)*r11*x4407))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.16085006)*x4415))+(((0.0008)*r10*x4407))+(((-3.5e-7)*x4416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4424=(cj1*gconst10);
IkReal x4425=(r00*sj0);
IkReal x4426=((1.0)*sj1);
IkReal x4427=(gconst11*r21);
IkReal x4428=(cj1*gconst11);
IkReal x4429=(r01*sj0);
IkReal x4430=(cj0*r10);
IkReal x4431=(cj0*r11);
CheckValue<IkReal> x4432 = IKatan2WithCheck(IkReal(((((-1.0)*x4424*x4430))+(((-1.0)*x4428*x4431))+(((-1.0)*x4426*x4427))+((x4424*x4425))+((x4428*x4429))+(((-1.0)*gconst10*r20*x4426)))),IkReal(((((-1.0)*gconst10*x4426*x4430))+((gconst10*sj1*x4425))+((r20*x4424))+((cj1*x4427))+(((-1.0)*gconst11*x4426*x4431))+((gconst11*sj1*x4429)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4432.valid){
continue;
}
CheckValue<IkReal> x4433=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4433.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4432.value)+(((1.5707963267949)*(x4433.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4434=IKcos(j2);
IkReal x4435=IKsin(j2);
IkReal x4436=(gconst11*sj0);
IkReal x4437=((1.0)*sj4);
IkReal x4438=(gconst11*r21);
IkReal x4439=(cj0*sj4);
IkReal x4440=(gconst10*r21);
IkReal x4441=(cj0*gconst10);
IkReal x4442=(gconst11*r20);
IkReal x4443=((1.0)*cj4);
IkReal x4444=((1.0)*cj1);
IkReal x4445=(r02*sj0);
IkReal x4446=((1.0)*sj3);
IkReal x4447=(gconst10*r20);
IkReal x4448=((1.0)*cj3);
IkReal x4449=(cj1*x4434);
IkReal x4450=(gconst10*r01*sj0);
IkReal x4451=(cj0*gconst11*r11);
IkReal x4452=(sj3*x4435);
IkReal x4453=(sj1*x4434);
IkReal x4454=(gconst10*r00*sj0);
IkReal x4455=(cj0*gconst11*r10);
IkReal x4456=(sj1*x4435);
IkReal x4457=(cj1*x4435);
evalcond[0]=(x4438+x4447+(((-1.0)*sj3*x4434*x4444))+((sj1*x4452)));
evalcond[1]=((((-1.0)*x4435*x4444))+(((-1.0)*x4453))+(((-1.0)*r22*x4437))+((cj4*x4442))+(((-1.0)*x4440*x4443)));
evalcond[2]=(((cj3*x4456))+((cj4*r22))+(((-1.0)*cj3*x4434*x4444))+((sj4*x4442))+(((-1.0)*x4437*x4440)));
evalcond[3]=((((-1.0)*x4446*x4453))+(((-1.0)*x4444*x4452))+x4454+(((-1.0)*x4451))+((r01*x4436))+(((-1.0)*r10*x4441)));
evalcond[4]=((((-1.0)*x4443*x4455))+(((-1.0)*x4443*x4450))+x4449+((cj4*r11*x4441))+(((-1.0)*x4456))+((r12*x4439))+(((-1.0)*x4437*x4445))+((cj4*r00*x4436)));
evalcond[5]=(((gconst10*r11*x4439))+(((-1.0)*x4448*x4453))+((cj4*x4445))+(((-1.0)*x4437*x4455))+(((-1.0)*x4437*x4450))+((r00*sj4*x4436))+(((-1.0)*cj3*x4435*x4444))+(((-1.0)*cj0*r12*x4443)));
evalcond[6]=((((-3.5e-7)*x4440))+(((0.16)*cj1))+(((3.5e-7)*x4442))+(((-0.0008)*x4438))+(((-1.0)*pz))+(((-0.0008)*x4447))+(((7.7e-7)*sj1))+(((0.16085006)*x4453))+(((0.16085006)*x4457))+(((0.02349986)*x4449))+(((-0.02349986)*x4456)));
evalcond[7]=((((-3.5e-7)*x4450))+(((-3.5e-7)*x4455))+(((-0.0008)*r01*x4436))+(((0.0008)*x4451))+(((0.0008)*r10*x4441))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((3.5e-7)*r11*x4441))+(((-0.0008)*x4454))+(((-0.16085006)*x4449))+(((0.02349986)*x4453))+(((0.02349986)*x4457))+(((0.16085006)*x4456))+(((-1.0)*px*sj0))+((cj0*py))+(((3.5e-7)*r00*x4436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4458=(gconst11*r21);
IkReal x4459=((1.0)*sj1);
IkReal x4460=(r22*sj4);
IkReal x4461=(gconst10*r20);
IkReal x4462=((1.0)*cj1*sj3);
IkReal x4463=(cj4*gconst10*r21);
IkReal x4464=(cj4*gconst11*r20*sj3);
CheckValue<IkReal> x4465=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4465.valid){
continue;
}
CheckValue<IkReal> x4466 = IKatan2WithCheck(IkReal((((cj1*x4464))+(((-1.0)*x4462*x4463))+(((-1.0)*x4459*x4461))+(((-1.0)*x4458*x4459))+(((-1.0)*x4460*x4462)))),IkReal((((cj1*x4461))+((cj1*x4458))+(((-1.0)*sj3*x4459*x4463))+(((-1.0)*sj3*x4459*x4460))+((sj1*x4464)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4466.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4465.value)))+(x4466.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4467=IKcos(j2);
IkReal x4468=IKsin(j2);
IkReal x4469=(gconst11*sj0);
IkReal x4470=((1.0)*sj4);
IkReal x4471=(gconst11*r21);
IkReal x4472=(cj0*sj4);
IkReal x4473=(gconst10*r21);
IkReal x4474=(cj0*gconst10);
IkReal x4475=(gconst11*r20);
IkReal x4476=((1.0)*cj4);
IkReal x4477=((1.0)*cj1);
IkReal x4478=(r02*sj0);
IkReal x4479=((1.0)*sj3);
IkReal x4480=(gconst10*r20);
IkReal x4481=((1.0)*cj3);
IkReal x4482=(cj1*x4467);
IkReal x4483=(gconst10*r01*sj0);
IkReal x4484=(cj0*gconst11*r11);
IkReal x4485=(sj3*x4468);
IkReal x4486=(sj1*x4467);
IkReal x4487=(gconst10*r00*sj0);
IkReal x4488=(cj0*gconst11*r10);
IkReal x4489=(sj1*x4468);
IkReal x4490=(cj1*x4468);
evalcond[0]=(((sj1*x4485))+x4471+x4480+(((-1.0)*sj3*x4467*x4477)));
evalcond[1]=((((-1.0)*x4486))+((cj4*x4475))+(((-1.0)*x4473*x4476))+(((-1.0)*r22*x4470))+(((-1.0)*x4468*x4477)));
evalcond[2]=(((cj4*r22))+((sj4*x4475))+(((-1.0)*x4470*x4473))+((cj3*x4489))+(((-1.0)*cj3*x4467*x4477)));
evalcond[3]=((((-1.0)*x4484))+(((-1.0)*r10*x4474))+x4487+(((-1.0)*x4479*x4486))+((r01*x4469))+(((-1.0)*x4477*x4485)));
evalcond[4]=((((-1.0)*x4489))+x4482+(((-1.0)*x4476*x4488))+(((-1.0)*x4476*x4483))+(((-1.0)*x4470*x4478))+((cj4*r11*x4474))+((r12*x4472))+((cj4*r00*x4469)));
evalcond[5]=(((gconst10*r11*x4472))+(((-1.0)*x4481*x4486))+((cj4*x4478))+(((-1.0)*cj3*x4468*x4477))+(((-1.0)*x4470*x4483))+(((-1.0)*x4470*x4488))+(((-1.0)*cj0*r12*x4476))+((r00*sj4*x4469)));
evalcond[6]=((((-0.0008)*x4480))+(((-0.0008)*x4471))+(((0.16)*cj1))+(((-0.02349986)*x4489))+(((0.16085006)*x4486))+(((0.16085006)*x4490))+(((-1.0)*pz))+(((3.5e-7)*x4475))+(((7.7e-7)*sj1))+(((-3.5e-7)*x4473))+(((0.02349986)*x4482)));
evalcond[7]=((((0.02349986)*x4490))+(((-0.0008)*r01*x4469))+(((3.5e-7)*r11*x4474))+(((-0.0008)*x4487))+(((0.0008)*x4484))+(((-0.16085006)*x4482))+(((0.16085006)*x4489))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-3.5e-7)*x4483))+(((-3.5e-7)*x4488))+(((3.5e-7)*r00*x4469))+(((-1.0)*px*sj0))+((cj0*py))+(((0.02349986)*x4486))+(((0.0008)*r10*x4474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4491=((1.0)*gconst10);
IkReal x4492=(sj3*sj4);
IkReal x4493=(cj4*sj3);
IkReal x4494=(gconst11*x4493);
CheckValue<IkReal> x4495=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4491))+(((-1.0)*gconst11*r21)))),-1);
if(!x4495.valid){
continue;
}
CheckValue<IkReal> x4496 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4492))+(((-1.0)*r01*x4491*x4493))+((r00*x4494)))),IkReal((((r12*x4492))+(((-1.0)*r10*x4494))+((gconst10*r11*x4493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4496.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4495.value)))+(x4496.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4497=IKsin(j0);
IkReal x4498=IKcos(j0);
IkReal x4499=((1.0)*sj4);
IkReal x4500=((0.0008)*gconst10);
IkReal x4501=(gconst10*r01);
IkReal x4502=(r12*x4497);
IkReal x4503=((1.0)*x4498);
IkReal x4504=(gconst11*x4497);
IkReal x4505=(r00*x4498);
IkReal x4506=(r10*x4497);
IkReal x4507=(r01*x4498);
IkReal x4508=(gconst10*r11*x4497);
evalcond[0]=(((gconst10*x4505))+((gconst10*x4506))+cj3+((gconst11*x4507))+((r11*x4504)));
evalcond[1]=(((cj4*gconst11*x4505))+(((-1.0)*cj4*x4508))+((cj4*r10*x4504))+(((-1.0)*r02*x4498*x4499))+(((-1.0)*cj4*x4501*x4503))+(((-1.0)*x4499*x4502)));
evalcond[2]=(((cj4*r02*x4498))+(((-1.0)*sj3))+((r10*sj4*x4504))+((gconst11*sj4*x4505))+((cj4*x4502))+(((-1.0)*x4498*x4499*x4501))+(((-1.0)*x4499*x4508)));
evalcond[3]=((((3.5e-7)*r10*x4504))+(((-0.0008)*gconst11*x4507))+(((-3.5e-7)*x4498*x4501))+(((-1.0)*px*x4503))+(((-1.0)*x4500*x4505))+(((-1.0)*x4500*x4506))+(((-0.0008)*r11*x4504))+(((-1.0)*py*x4497))+(((-3.5e-7)*x4508))+(((3.5e-7)*gconst11*x4505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4509=((-1.0)*r21);
CheckValue<IkReal> x4512 = IKatan2WithCheck(IkReal(x4509),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4512.valid){
continue;
}
IkReal x4510=((1.0)*(x4512.value));
IkReal x4511=x4127;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x4510)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x4510)));
IkReal gconst10=(x4509*x4511);
IkReal gconst11=((1.0)*r20*x4511);
IkReal x4513=((0.64)*cj3);
IkReal x4514=((0.64)*sj3);
IkReal x4515=(gconst11*r21);
IkReal x4516=((0.0096)*sj3);
IkReal x4517=(gconst10*r21);
IkReal x4518=((0.09399944)*sj4);
IkReal x4519=((4.2e-6)*sj3);
IkReal x4520=((1.93020072)*cj4);
IkReal x4521=(cj4*r22);
IkReal x4522=(pz*sj3);
IkReal x4523=((0.64340024)*cj4);
IkReal x4524=((0.0032)*sj3);
IkReal x4525=(gconst10*r20);
IkReal x4526=(gconst11*r20);
IkReal x4527=((4.2e-6)*cj3);
IkReal x4528=((0.28199832)*sj4);
IkReal x4529=((0.0032)*cj3);
IkReal x4530=((1.4e-6)*cj3);
IkReal x4531=(cj3*pz);
IkReal x4532=((0.0096)*cj3);
IkReal x4533=((0.28199832)*x4515);
IkReal x4534=((0.28199832)*x4525);
IkReal x4535=((12.0)*x4522);
IkReal x4536=((0.28199832)*x4521);
IkReal x4537=((12.0)*x4531);
IkReal x4538=(sj3*x4526);
IkReal x4539=(cj3*r22*sj4);
IkReal x4540=(r22*sj3*sj4);
IkReal x4541=(x4519*x4526);
IkReal x4542=(x4516*x4525);
IkReal x4543=(x4515*x4516);
IkReal x4544=((1.93020072)*x4540);
IkReal x4545=(x4517*x4519);
IkReal x4546=(x4526*x4527);
IkReal x4547=(x4526*x4528);
IkReal x4548=((1.93020072)*x4539);
IkReal x4549=(x4517*x4527);
IkReal x4550=(x4517*x4528);
IkReal x4551=(x4525*x4532);
IkReal x4552=(x4515*x4532);
IkReal x4553=(cj3*cj4*x4526);
IkReal x4554=(x4520*x4538);
IkReal x4555=(sj3*x4517*x4520);
IkReal x4556=(cj3*x4520*x4526);
IkReal x4557=(cj3*x4517*x4520);
IkReal x4558=(x4554+x4541+x4534+x4533);
IkReal x4559=(x4556+x4547+x4546+x4536);
IkReal x4560=(x4555+x4543+x4542+x4545+x4544+x4535);
IkReal x4561=(x4557+x4552+x4550+x4551+x4549+x4548+x4537);
j1eval[0]=((((40584.4155844156)*(IKabs((x4558+(((-1.0)*x4514))+(((-1.0)*x4560)))))))+(((40584.4155844156)*(IKabs((x4559+(((-1.0)*x4513))+(((-1.0)*x4561)))))))+(((40584.4155844156)*(IKabs((x4559+x4513+(((-1.0)*x4561)))))))+(IKabs(cj3))+(IKabs(sj3))+(((40584.4155844156)*(IKabs(((((-4.0)*x4522))+(((0.09399944)*x4515))+(((-0.64340024)*x4540))+(((1.4e-6)*x4538))+(((-1.4e-6)*sj3*x4517))+(((-1.0)*x4514))+(((-1.0)*x4524*x4525))+(((-1.0)*x4515*x4524))+(((-1.0)*sj3*x4517*x4523))+(((0.09399944)*x4525))+((x4523*x4538)))))))+(((40584.4155844156)*(IKabs(((((-0.64340024)*x4539))+((cj3*x4523*x4526))+((x4526*x4530))+(((-4.0)*x4531))+(((-1.0)*x4525*x4529))+(((-1.0)*x4517*x4530))+(((-1.0)*cj3*x4517*x4523))+(((-1.0)*x4513))+(((-1.0)*x4515*x4529))+(((0.09399944)*x4521))+((x4518*x4526))+(((-1.0)*x4517*x4518)))))))+(((40584.4155844156)*(IKabs((x4558+x4514+(((-1.0)*x4560))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x4562=((0.64)*sj3);
IkReal x4563=((6.16e-6)*sj3);
IkReal x4564=(gconst11*r21);
IkReal x4565=((0.0096)*sj3);
IkReal x4566=((0.64340024)*sj3);
IkReal x4567=(r22*sj4);
IkReal x4568=((1.93020072)*cj4);
IkReal x4569=(pz*sj3);
IkReal x4570=((0.0032)*sj3);
IkReal x4571=(gconst10*r20);
IkReal x4572=((0.28199832)*x4564);
IkReal x4573=((0.28199832)*x4571);
IkReal x4574=((12.0)*x4569);
IkReal x4575=((0.09399944)*x4564);
IkReal x4576=((0.09399944)*x4571);
IkReal x4577=((4.0)*x4569);
IkReal x4578=(gconst10*r21*sj3);
IkReal x4579=(gconst11*r20*sj3);
IkReal x4580=((4.2e-6)*x4579);
IkReal x4581=(x4565*x4571);
IkReal x4582=(x4564*x4565);
IkReal x4583=((1.93020072)*sj3*x4567);
IkReal x4584=((4.2e-6)*x4578);
IkReal x4585=((1.4e-6)*x4579);
IkReal x4586=(x4570*x4571);
IkReal x4587=((1.4e-6)*x4578);
IkReal x4588=(x4566*x4567);
IkReal x4589=(x4564*x4570);
IkReal x4590=(x4568*x4579);
IkReal x4591=(x4568*x4578);
IkReal x4592=(cj4*gconst11*r20*x4566);
IkReal x4593=(cj4*gconst10*r21*x4566);
IkReal x4594=(x4592+x4585+x4575+x4576);
IkReal x4595=(x4590+x4580+x4572+x4573);
IkReal x4596=(x4593+x4589+x4588+x4587+x4586+x4577);
IkReal x4597=(x4591+x4584+x4581+x4583+x4582+x4574);
op[0]=((((-1.0)*x4596))+x4594+(((-1.0)*x4562)));
op[1]=x4563;
op[2]=((((-1.0)*x4597))+x4595+(((-1.0)*x4562)));
op[3]=((1.232e-5)*sj3);
op[4]=((((-1.0)*x4597))+x4595+x4562);
op[5]=x4563;
op[6]=((((-1.0)*x4596))+x4594+x4562);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4598=((0.64)*cj3);
IkReal x4599=(gconst10*r21);
IkReal x4600=((0.09399944)*sj4);
IkReal x4601=((1.93020072)*cj3);
IkReal x4602=((0.0096)*cj3);
IkReal x4603=(gconst11*r21);
IkReal x4604=(r22*sj4);
IkReal x4605=((0.64340024)*cj3);
IkReal x4606=(cj4*r22);
IkReal x4607=(gconst10*r20);
IkReal x4608=((6.16e-6)*cj3);
IkReal x4609=((0.28199832)*sj4);
IkReal x4610=((0.0032)*cj3);
IkReal x4611=(gconst11*r20);
IkReal x4612=(cj3*pz);
IkReal x4613=((0.28199832)*x4606);
IkReal x4614=((12.0)*x4612);
IkReal x4615=((0.09399944)*x4606);
IkReal x4616=((4.0)*x4612);
IkReal x4617=(cj3*x4611);
IkReal x4618=((4.2e-6)*x4617);
IkReal x4619=(x4609*x4611);
IkReal x4620=(x4601*x4604);
IkReal x4621=((4.2e-6)*cj3*x4599);
IkReal x4622=(x4599*x4609);
IkReal x4623=(x4602*x4607);
IkReal x4624=(x4602*x4603);
IkReal x4625=(x4600*x4611);
IkReal x4626=((1.4e-6)*x4617);
IkReal x4627=(x4603*x4610);
IkReal x4628=(x4599*x4600);
IkReal x4629=(x4607*x4610);
IkReal x4630=(x4604*x4605);
IkReal x4631=((1.4e-6)*cj3*x4599);
IkReal x4632=(cj4*x4617);
IkReal x4633=(cj4*x4601*x4611);
IkReal x4634=(cj4*x4599*x4601);
IkReal x4635=(cj4*x4605*x4611);
IkReal x4636=(cj4*x4599*x4605);
IkReal x4637=(x4633+x4619+x4618+x4613);
IkReal x4638=(x4635+x4615+x4625+x4626);
IkReal x4639=(x4634+x4614+x4620+x4621+x4622+x4623+x4624);
IkReal x4640=(x4631+x4630+x4636+x4616+x4627+x4628+x4629);
j1evalpoly[0]=(((htj1*x4608))+x4598+(((htj1*htj1)*(((((-1.0)*x4639))+x4598+x4637))))+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x4598))+(((-1.0)*x4639))+x4637))))+x4638+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x4598))+x4638+(((-1.0)*x4640))))))+(((-1.0)*x4640))+(((1.232e-5)*cj3*(htj1*htj1*htj1)))+((x4608*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x4641=((-1.0)*r21);
CheckValue<IkReal> x4644 = IKatan2WithCheck(IkReal(x4641),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4644.valid){
continue;
}
IkReal x4642=((1.0)*(x4644.value));
IkReal x4643=x4127;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x4642)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x4642)));
IkReal gconst10=(x4641*x4643);
IkReal gconst11=((1.0)*r20*x4643);
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x4645=((-1.0)*r21);
CheckValue<IkReal> x4648 = IKatan2WithCheck(IkReal(x4645),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4648.valid){
continue;
}
IkReal x4646=((1.0)*(x4648.value));
IkReal x4647=x4127;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x4646)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x4646)));
IkReal gconst10=(x4645*x4647);
IkReal gconst11=((1.0)*r20*x4647);
IkReal x4649=r22*r22;
IkReal x4650=((1.0)*cj1);
IkReal x4651=((-1.0)*sj1);
CheckValue<IkReal> x4656=IKPowWithIntegerCheck(((-1.0)+x4649),-1);
if(!x4656.valid){
continue;
}
IkReal x4652=x4656.value;
if((((1.0)+(((-1.0)*x4649)))) < -0.00001)
continue;
IkReal x4653=IKsqrt(((1.0)+(((-1.0)*x4649))));
IkReal x4654=(r12*sj0*x4652*x4653);
IkReal x4655=(cj0*r02*x4652*x4653);
j2eval[0]=sj3;
j2eval[1]=((IKabs(((((-1.0)*x4650*x4654))+(((-1.0)*x4650*x4655)))))+(IKabs((((x4651*x4654))+((x4651*x4655))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4657=((-1.0)*r21);
CheckValue<IkReal> x4660 = IKatan2WithCheck(IkReal(x4657),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4660.valid){
continue;
}
IkReal x4658=((1.0)*(x4660.value));
IkReal x4659=x4127;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x4658)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x4658)));
IkReal gconst10=(x4657*x4659);
IkReal gconst11=((1.0)*r20*x4659);
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4661=(cj4*gconst10);
IkReal x4662=(gconst10*r20);
IkReal x4663=(r21*sj1);
IkReal x4664=((1.0)*r22*sj4);
IkReal x4665=((1.0)*cj1*r21);
IkReal x4666=(cj4*gconst11*r20);
if( IKabs(((((-1.0)*x4661*x4665))+((sj1*x4662))+((cj1*x4666))+((gconst11*x4663))+(((-1.0)*cj1*x4664)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst11*x4665))+(((-1.0)*sj1*x4664))+((sj1*x4666))+(((-1.0)*cj1*x4662))+(((-1.0)*x4661*x4663)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4661*x4665))+((sj1*x4662))+((cj1*x4666))+((gconst11*x4663))+(((-1.0)*cj1*x4664))))+IKsqr(((((-1.0)*gconst11*x4665))+(((-1.0)*sj1*x4664))+((sj1*x4666))+(((-1.0)*cj1*x4662))+(((-1.0)*x4661*x4663))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4661*x4665))+((sj1*x4662))+((cj1*x4666))+((gconst11*x4663))+(((-1.0)*cj1*x4664))), ((((-1.0)*gconst11*x4665))+(((-1.0)*sj1*x4664))+((sj1*x4666))+(((-1.0)*cj1*x4662))+(((-1.0)*x4661*x4663))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4667=IKcos(j2);
IkReal x4668=IKsin(j2);
IkReal x4669=(r01*sj0);
IkReal x4670=((3.5e-7)*gconst10);
IkReal x4671=(cj0*r11);
IkReal x4672=((1.0)*gconst11);
IkReal x4673=((0.0008)*gconst11);
IkReal x4674=((1.0)*sj0);
IkReal x4675=((1.0)*gconst10);
IkReal x4676=((0.0008)*gconst10);
IkReal x4677=(r00*sj0);
IkReal x4678=((3.5e-7)*gconst11);
IkReal x4679=(cj0*r10);
IkReal x4680=(cj4*gconst11);
IkReal x4681=(cj1*x4667);
IkReal x4682=(cj1*x4668);
IkReal x4683=(sj1*x4668);
IkReal x4684=(sj1*x4667);
IkReal x4685=((1.0)*x4683);
evalcond[0]=(((gconst11*r21))+((gconst10*r20))+x4681+(((-1.0)*x4685)));
evalcond[1]=(((r20*x4680))+(((-1.0)*x4682))+(((-1.0)*x4684))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*r21*x4675)));
evalcond[2]=((((-1.0)*x4675*x4679))+((gconst10*x4677))+x4684+x4682+(((-1.0)*x4671*x4672))+((gconst11*x4669)));
evalcond[3]=(x4681+(((-1.0)*cj4*x4669*x4675))+((x4677*x4680))+(((-1.0)*cj4*x4672*x4679))+((cj0*r12*sj4))+(((-1.0)*r02*sj4*x4674))+(((-1.0)*x4685))+((cj4*gconst10*x4671)));
evalcond[4]=((((0.02349986)*x4681))+(((0.16)*cj1))+(((-1.0)*r21*x4673))+(((-1.0)*r21*x4670))+(((-1.0)*r20*x4676))+(((-1.0)*pz))+(((-0.02349986)*x4683))+(((7.7e-7)*sj1))+(((0.16085006)*x4684))+(((0.16085006)*x4682))+((r20*x4678)));
evalcond[5]=((((-0.16085006)*x4681))+((x4676*x4679))+(((0.02349986)*x4684))+(((0.02349986)*x4682))+((x4670*x4671))+(((-1.0)*x4676*x4677))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*px*x4674))+(((-1.0)*x4669*x4673))+(((-1.0)*x4669*x4670))+((x4677*x4678))+(((0.16085006)*x4683))+(((-1.0)*x4678*x4679))+((x4671*x4673))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4686=(gconst10*r21);
IkReal x4687=(sj1*sj4);
IkReal x4688=((1.0)*cj4);
IkReal x4689=(cj1*cj4);
IkReal x4690=(gconst11*r20);
IkReal x4691=((1.0)*cj1*sj4);
if( IKabs(((((-1.0)*cj1*x4686*x4688))+(((-1.0)*x4687*x4690))+(((-1.0)*r22*x4691))+(((-1.0)*r22*sj1*x4688))+((x4686*x4687))+((x4689*x4690)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x4687))+(((-1.0)*x4686*x4691))+((cj4*sj1*x4690))+((r22*x4689))+((cj1*sj4*x4690))+(((-1.0)*sj1*x4686*x4688)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x4686*x4688))+(((-1.0)*x4687*x4690))+(((-1.0)*r22*x4691))+(((-1.0)*r22*sj1*x4688))+((x4686*x4687))+((x4689*x4690))))+IKsqr(((((-1.0)*r22*x4687))+(((-1.0)*x4686*x4691))+((cj4*sj1*x4690))+((r22*x4689))+((cj1*sj4*x4690))+(((-1.0)*sj1*x4686*x4688))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x4686*x4688))+(((-1.0)*x4687*x4690))+(((-1.0)*r22*x4691))+(((-1.0)*r22*sj1*x4688))+((x4686*x4687))+((x4689*x4690))), ((((-1.0)*r22*x4687))+(((-1.0)*x4686*x4691))+((cj4*sj1*x4690))+((r22*x4689))+((cj1*sj4*x4690))+(((-1.0)*sj1*x4686*x4688))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4692=IKcos(j2);
IkReal x4693=IKsin(j2);
IkReal x4694=(sj0*sj4);
IkReal x4695=(gconst11*r00);
IkReal x4696=(gconst10*r01);
IkReal x4697=((3.5e-7)*sj0);
IkReal x4698=(cj0*sj4);
IkReal x4699=(cj0*r11);
IkReal x4700=((1.0)*sj0);
IkReal x4701=((3.5e-7)*r20);
IkReal x4702=((0.0008)*gconst11);
IkReal x4703=((0.0008)*gconst10);
IkReal x4704=(cj4*sj0);
IkReal x4705=(cj0*r10);
IkReal x4706=((1.0)*gconst11);
IkReal x4707=(gconst11*r20);
IkReal x4708=(cj1*x4692);
IkReal x4709=((1.0)*gconst10*r21);
IkReal x4710=(sj1*x4692);
IkReal x4711=(sj1*x4693);
IkReal x4712=(cj1*x4693);
IkReal x4713=((1.0)*x4710);
IkReal x4714=((1.0)*x4712);
IkReal x4715=(x4714+x4713);
evalcond[0]=(((sj4*x4707))+((cj4*r22))+(((-1.0)*x4708))+x4711+(((-1.0)*sj4*x4709)));
evalcond[1]=((((-1.0)*cj4*x4709))+((cj4*x4707))+(((-1.0)*r22*sj4))+(((-1.0)*x4715)));
evalcond[2]=((((-1.0)*r02*x4694))+(((-1.0)*x4711))+x4708+(((-1.0)*cj4*x4696*x4700))+((x4695*x4704))+((r12*x4698))+(((-1.0)*cj4*x4705*x4706))+((cj4*gconst10*x4699)));
evalcond[3]=((((-1.0)*x4694*x4696))+(((-1.0)*r10*x4698*x4706))+(((-1.0)*cj0*cj4*r12))+((gconst10*r11*x4698))+((x4694*x4695))+((r02*x4704))+(((-1.0)*x4715)));
CheckValue<IkReal> x4716=IKPowWithIntegerCheck(gconst11,-1);
if(!x4716.valid){
continue;
}
evalcond[4]=((((0.16)*cj1))+((gconst11*x4701))+(((0.02349986)*x4708))+(((-1.0)*pz))+(((7.7e-7)*sj1))+((x4701*(gconst10*gconst10)*(x4716.value)))+(((-0.02349986)*x4711))+(((0.16085006)*x4712))+(((0.16085006)*x4710)));
evalcond[5]=((((-3.5e-7)*gconst11*x4705))+(((0.02349986)*x4712))+(((0.02349986)*x4710))+(((-1.0)*r01*sj0*x4702))+((x4699*x4702))+(((-1.0)*x4696*x4697))+(((-1.0)*px*x4700))+(((3.5e-7)*gconst10*x4699))+(((-1.0)*r00*sj0*x4703))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((x4695*x4697))+((cj0*py))+(((-0.16085006)*x4708))+(((0.16085006)*x4711))+((x4703*x4705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4717=(gconst10*r21);
IkReal x4718=(cj1*sj4);
IkReal x4719=(sj1*sj4);
IkReal x4720=(gconst11*r20);
IkReal x4721=(cj4*sj1);
IkReal x4722=((1.0)*r22);
IkReal x4723=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*x4717*x4719))+(((-1.0)*x4717*x4723))+(((-1.0)*x4718*x4722))+((cj1*cj4*x4720))+((r22*x4721))+((x4719*x4720)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4717*x4721))+((x4717*x4718))+(((-1.0)*cj1*cj4*x4722))+((x4720*x4721))+(((-1.0)*x4718*x4720))+(((-1.0)*x4719*x4722)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4717*x4719))+(((-1.0)*x4717*x4723))+(((-1.0)*x4718*x4722))+((cj1*cj4*x4720))+((r22*x4721))+((x4719*x4720))))+IKsqr(((((-1.0)*x4717*x4721))+((x4717*x4718))+(((-1.0)*cj1*cj4*x4722))+((x4720*x4721))+(((-1.0)*x4718*x4720))+(((-1.0)*x4719*x4722))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4717*x4719))+(((-1.0)*x4717*x4723))+(((-1.0)*x4718*x4722))+((cj1*cj4*x4720))+((r22*x4721))+((x4719*x4720))), ((((-1.0)*x4717*x4721))+((x4717*x4718))+(((-1.0)*cj1*cj4*x4722))+((x4720*x4721))+(((-1.0)*x4718*x4720))+(((-1.0)*x4719*x4722))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4724=IKcos(j2);
IkReal x4725=IKsin(j2);
IkReal x4726=(sj0*sj4);
IkReal x4727=(gconst11*r00);
IkReal x4728=(gconst10*r01);
IkReal x4729=((3.5e-7)*sj0);
IkReal x4730=(cj0*sj4);
IkReal x4731=(cj0*r11);
IkReal x4732=((1.0)*sj0);
IkReal x4733=((3.5e-7)*r20);
IkReal x4734=((0.0008)*gconst11);
IkReal x4735=((0.0008)*gconst10);
IkReal x4736=(cj4*sj0);
IkReal x4737=(cj0*r10);
IkReal x4738=((1.0)*gconst11);
IkReal x4739=(gconst11*r20);
IkReal x4740=(cj1*x4724);
IkReal x4741=((1.0)*gconst10*r21);
IkReal x4742=(cj1*x4725);
IkReal x4743=(sj1*x4724);
IkReal x4744=(sj1*x4725);
IkReal x4745=((1.0)*x4744);
evalcond[0]=(((cj4*r22))+x4740+(((-1.0)*x4745))+(((-1.0)*sj4*x4741))+((sj4*x4739)));
evalcond[1]=(((cj4*x4739))+(((-1.0)*cj4*x4741))+(((-1.0)*r22*sj4))+(((-1.0)*x4742))+(((-1.0)*x4743)));
evalcond[2]=(((gconst10*r11*x4730))+(((-1.0)*cj0*cj4*r12))+x4743+x4742+((r02*x4736))+((x4726*x4727))+(((-1.0)*x4726*x4728))+(((-1.0)*r10*x4730*x4738)));
evalcond[3]=(x4740+(((-1.0)*x4745))+((x4727*x4736))+(((-1.0)*cj4*x4737*x4738))+(((-1.0)*cj4*x4728*x4732))+(((-1.0)*r02*x4726))+((cj4*gconst10*x4731))+((r12*x4730)));
CheckValue<IkReal> x4746=IKPowWithIntegerCheck(gconst11,-1);
if(!x4746.valid){
continue;
}
evalcond[4]=(((gconst11*x4733))+(((-0.02349986)*x4744))+(((0.16)*cj1))+((x4733*(gconst10*gconst10)*(x4746.value)))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.02349986)*x4740))+(((0.16085006)*x4743))+(((0.16085006)*x4742)));
evalcond[5]=(((x4735*x4737))+(((-1.0)*x4728*x4729))+((x4731*x4734))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*r00*sj0*x4735))+(((-1.0)*px*x4732))+((x4727*x4729))+(((-0.16085006)*x4740))+(((-3.5e-7)*gconst11*x4737))+(((0.02349986)*x4743))+(((0.02349986)*x4742))+(((-1.0)*r01*sj0*x4734))+(((0.16085006)*x4744))+((cj0*py))+(((3.5e-7)*gconst10*x4731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4747=(cj1*r22);
IkReal x4748=((1.0)*sj4);
IkReal x4749=(gconst10*r21);
IkReal x4750=(cj3*cj4);
IkReal x4751=(r22*sj1);
IkReal x4752=(cj1*gconst11*r20);
IkReal x4753=(gconst11*r20*sj1);
CheckValue<IkReal> x4754=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x4754.valid){
continue;
}
CheckValue<IkReal> x4755 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x4749*x4750))+(((-1.0)*x4748*x4753))+((sj1*sj4*x4749))+(((-1.0)*cj4*x4751))+((x4750*x4752))+(((-1.0)*cj3*x4747*x4748)))),IkReal(((((-1.0)*sj1*x4749*x4750))+((sj4*x4752))+(((-1.0)*cj3*x4748*x4751))+((x4750*x4753))+((cj4*x4747))+(((-1.0)*cj1*x4748*x4749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4755.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4754.value)))+(x4755.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4756=IKcos(j2);
IkReal x4757=IKsin(j2);
IkReal x4758=(gconst11*sj0);
IkReal x4759=((1.0)*sj4);
IkReal x4760=(gconst11*r21);
IkReal x4761=(cj0*sj4);
IkReal x4762=(gconst10*r21);
IkReal x4763=(cj0*gconst10);
IkReal x4764=(gconst11*r20);
IkReal x4765=((1.0)*cj4);
IkReal x4766=((1.0)*cj1);
IkReal x4767=(r02*sj0);
IkReal x4768=((1.0)*sj3);
IkReal x4769=(gconst10*r20);
IkReal x4770=((1.0)*cj3);
IkReal x4771=(cj1*x4756);
IkReal x4772=(gconst10*r01*sj0);
IkReal x4773=(cj0*gconst11*r11);
IkReal x4774=(sj3*x4757);
IkReal x4775=(sj1*x4756);
IkReal x4776=(gconst10*r00*sj0);
IkReal x4777=(cj0*gconst11*r10);
IkReal x4778=(sj1*x4757);
IkReal x4779=(cj1*x4757);
evalcond[0]=((((-1.0)*sj3*x4756*x4766))+x4760+x4769+((sj1*x4774)));
evalcond[1]=((((-1.0)*x4775))+(((-1.0)*x4762*x4765))+(((-1.0)*x4757*x4766))+(((-1.0)*r22*x4759))+((cj4*x4764)));
evalcond[2]=(((cj4*r22))+((sj4*x4764))+(((-1.0)*cj3*x4756*x4766))+((cj3*x4778))+(((-1.0)*x4759*x4762)));
evalcond[3]=((((-1.0)*x4773))+((r01*x4758))+(((-1.0)*x4766*x4774))+x4776+(((-1.0)*x4768*x4775))+(((-1.0)*r10*x4763)));
evalcond[4]=((((-1.0)*x4778))+((cj4*r11*x4763))+(((-1.0)*x4765*x4772))+(((-1.0)*x4765*x4777))+x4771+(((-1.0)*x4759*x4767))+((cj4*r00*x4758))+((r12*x4761)));
evalcond[5]=(((r00*sj4*x4758))+(((-1.0)*x4759*x4777))+(((-1.0)*x4759*x4772))+(((-1.0)*cj0*r12*x4765))+(((-1.0)*x4770*x4775))+(((-1.0)*cj3*x4757*x4766))+((cj4*x4767))+((gconst10*r11*x4761)));
evalcond[6]=((((-0.02349986)*x4778))+(((0.16)*cj1))+(((-0.0008)*x4769))+(((-0.0008)*x4760))+(((-3.5e-7)*x4762))+(((-1.0)*pz))+(((0.02349986)*x4771))+(((7.7e-7)*sj1))+(((0.16085006)*x4775))+(((0.16085006)*x4779))+(((3.5e-7)*x4764)));
evalcond[7]=((((-0.0008)*x4776))+(((-3.5e-7)*x4777))+(((-3.5e-7)*x4772))+(((0.0008)*r10*x4763))+(((-0.0008)*r01*x4758))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.0008)*x4773))+(((0.02349986)*x4775))+(((0.02349986)*x4779))+(((3.5e-7)*r00*x4758))+(((-0.16085006)*x4771))+(((0.16085006)*x4778))+(((-1.0)*px*sj0))+((cj0*py))+(((3.5e-7)*r11*x4763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4780=(cj1*gconst10);
IkReal x4781=(r00*sj0);
IkReal x4782=((1.0)*sj1);
IkReal x4783=(gconst11*r21);
IkReal x4784=(cj1*gconst11);
IkReal x4785=(r01*sj0);
IkReal x4786=(cj0*r10);
IkReal x4787=(cj0*r11);
CheckValue<IkReal> x4788 = IKatan2WithCheck(IkReal((((x4780*x4781))+(((-1.0)*gconst10*r20*x4782))+((x4784*x4785))+(((-1.0)*x4782*x4783))+(((-1.0)*x4784*x4787))+(((-1.0)*x4780*x4786)))),IkReal((((cj1*x4783))+((gconst10*sj1*x4781))+(((-1.0)*gconst11*x4782*x4787))+((r20*x4780))+((gconst11*sj1*x4785))+(((-1.0)*gconst10*x4782*x4786)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4788.valid){
continue;
}
CheckValue<IkReal> x4789=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4789.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4788.value)+(((1.5707963267949)*(x4789.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4790=IKcos(j2);
IkReal x4791=IKsin(j2);
IkReal x4792=(gconst11*sj0);
IkReal x4793=((1.0)*sj4);
IkReal x4794=(gconst11*r21);
IkReal x4795=(cj0*sj4);
IkReal x4796=(gconst10*r21);
IkReal x4797=(cj0*gconst10);
IkReal x4798=(gconst11*r20);
IkReal x4799=((1.0)*cj4);
IkReal x4800=((1.0)*cj1);
IkReal x4801=(r02*sj0);
IkReal x4802=((1.0)*sj3);
IkReal x4803=(gconst10*r20);
IkReal x4804=((1.0)*cj3);
IkReal x4805=(cj1*x4790);
IkReal x4806=(gconst10*r01*sj0);
IkReal x4807=(cj0*gconst11*r11);
IkReal x4808=(sj3*x4791);
IkReal x4809=(sj1*x4790);
IkReal x4810=(gconst10*r00*sj0);
IkReal x4811=(cj0*gconst11*r10);
IkReal x4812=(sj1*x4791);
IkReal x4813=(cj1*x4791);
evalcond[0]=((((-1.0)*sj3*x4790*x4800))+((sj1*x4808))+x4794+x4803);
evalcond[1]=((((-1.0)*x4791*x4800))+(((-1.0)*r22*x4793))+((cj4*x4798))+(((-1.0)*x4796*x4799))+(((-1.0)*x4809)));
evalcond[2]=(((cj4*r22))+(((-1.0)*cj3*x4790*x4800))+((cj3*x4812))+(((-1.0)*x4793*x4796))+((sj4*x4798)));
evalcond[3]=(((r01*x4792))+(((-1.0)*x4800*x4808))+(((-1.0)*x4802*x4809))+(((-1.0)*r10*x4797))+(((-1.0)*x4807))+x4810);
evalcond[4]=(((cj4*r00*x4792))+(((-1.0)*x4793*x4801))+(((-1.0)*x4812))+(((-1.0)*x4799*x4811))+(((-1.0)*x4799*x4806))+((r12*x4795))+((cj4*r11*x4797))+x4805);
evalcond[5]=(((r00*sj4*x4792))+(((-1.0)*x4793*x4806))+((gconst10*r11*x4795))+(((-1.0)*x4793*x4811))+(((-1.0)*x4804*x4809))+(((-1.0)*cj3*x4791*x4800))+((cj4*x4801))+(((-1.0)*cj0*r12*x4799)));
evalcond[6]=((((0.16)*cj1))+(((0.16085006)*x4809))+(((3.5e-7)*x4798))+(((0.02349986)*x4805))+(((-0.02349986)*x4812))+(((-1.0)*pz))+(((-3.5e-7)*x4796))+(((7.7e-7)*sj1))+(((-0.0008)*x4794))+(((-0.0008)*x4803))+(((0.16085006)*x4813)));
evalcond[7]=((((-3.5e-7)*x4806))+(((3.5e-7)*r11*x4797))+(((0.0008)*x4807))+(((3.5e-7)*r00*x4792))+(((0.02349986)*x4809))+(((-0.16085006)*x4805))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.0008)*x4810))+(((0.0008)*r10*x4797))+(((-3.5e-7)*x4811))+(((-0.0008)*r01*x4792))+(((-1.0)*px*sj0))+((cj0*py))+(((0.02349986)*x4813))+(((0.16085006)*x4812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4814=(gconst11*r21);
IkReal x4815=((1.0)*sj1);
IkReal x4816=(r22*sj4);
IkReal x4817=(gconst10*r20);
IkReal x4818=((1.0)*cj1*sj3);
IkReal x4819=(cj4*gconst10*r21);
IkReal x4820=(cj4*gconst11*r20*sj3);
CheckValue<IkReal> x4821 = IKatan2WithCheck(IkReal(((((-1.0)*x4815*x4817))+(((-1.0)*x4814*x4815))+(((-1.0)*x4816*x4818))+((cj1*x4820))+(((-1.0)*x4818*x4819)))),IkReal((((cj1*x4817))+((cj1*x4814))+(((-1.0)*sj3*x4815*x4819))+(((-1.0)*sj3*x4815*x4816))+((sj1*x4820)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4821.valid){
continue;
}
CheckValue<IkReal> x4822=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4822.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4821.value)+(((1.5707963267949)*(x4822.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4823=IKcos(j2);
IkReal x4824=IKsin(j2);
IkReal x4825=(gconst11*sj0);
IkReal x4826=((1.0)*sj4);
IkReal x4827=(gconst11*r21);
IkReal x4828=(cj0*sj4);
IkReal x4829=(gconst10*r21);
IkReal x4830=(cj0*gconst10);
IkReal x4831=(gconst11*r20);
IkReal x4832=((1.0)*cj4);
IkReal x4833=((1.0)*cj1);
IkReal x4834=(r02*sj0);
IkReal x4835=((1.0)*sj3);
IkReal x4836=(gconst10*r20);
IkReal x4837=((1.0)*cj3);
IkReal x4838=(cj1*x4823);
IkReal x4839=(gconst10*r01*sj0);
IkReal x4840=(cj0*gconst11*r11);
IkReal x4841=(sj3*x4824);
IkReal x4842=(sj1*x4823);
IkReal x4843=(gconst10*r00*sj0);
IkReal x4844=(cj0*gconst11*r10);
IkReal x4845=(sj1*x4824);
IkReal x4846=(cj1*x4824);
evalcond[0]=((((-1.0)*sj3*x4823*x4833))+((sj1*x4841))+x4827+x4836);
evalcond[1]=(((cj4*x4831))+(((-1.0)*x4824*x4833))+(((-1.0)*x4829*x4832))+(((-1.0)*r22*x4826))+(((-1.0)*x4842)));
evalcond[2]=((((-1.0)*x4826*x4829))+((cj4*r22))+((cj3*x4845))+((sj4*x4831))+(((-1.0)*cj3*x4823*x4833)));
evalcond[3]=((((-1.0)*x4833*x4841))+(((-1.0)*r10*x4830))+(((-1.0)*x4835*x4842))+(((-1.0)*x4840))+((r01*x4825))+x4843);
evalcond[4]=((((-1.0)*x4832*x4839))+((r12*x4828))+(((-1.0)*x4826*x4834))+((cj4*r00*x4825))+((cj4*r11*x4830))+(((-1.0)*x4832*x4844))+(((-1.0)*x4845))+x4838);
evalcond[5]=((((-1.0)*x4837*x4842))+(((-1.0)*cj3*x4824*x4833))+((cj4*x4834))+(((-1.0)*cj0*r12*x4832))+(((-1.0)*x4826*x4839))+(((-1.0)*x4826*x4844))+((r00*sj4*x4825))+((gconst10*r11*x4828)));
evalcond[6]=((((0.16)*cj1))+(((-0.0008)*x4827))+(((-1.0)*pz))+(((3.5e-7)*x4831))+(((-0.0008)*x4836))+(((7.7e-7)*sj1))+(((0.02349986)*x4838))+(((-3.5e-7)*x4829))+(((-0.02349986)*x4845))+(((0.16085006)*x4846))+(((0.16085006)*x4842)));
evalcond[7]=((((-0.16085006)*x4838))+(((0.0008)*x4840))+(((-0.0008)*x4843))+(((-3.5e-7)*x4844))+(((0.02349986)*x4846))+(((0.02349986)*x4842))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((3.5e-7)*r11*x4830))+(((0.16085006)*x4845))+(((-3.5e-7)*x4839))+(((-1.0)*px*sj0))+(((-0.0008)*r01*x4825))+((cj0*py))+(((0.0008)*r10*x4830))+(((3.5e-7)*r00*x4825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4847=(cj5*sj4);
IkReal x4848=((1.0)*sj5);
IkReal x4849=((((-1.0)*cj4*r21*x4848))+((cj4*cj5*r20))+(((-1.0)*r22*sj4)));
j0eval[0]=x4849;
j0eval[1]=((IKabs(((((-1.0)*r01*sj4*x4848))+((r00*x4847))+((cj4*r02)))))+(IKabs((((r11*sj4*sj5))+(((-1.0)*cj4*r12))+(((-1.0)*r10*x4847))))));
j0eval[2]=IKsign(x4849);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4850=(cj4*sj5);
IkReal x4851=((1.0)*sj4);
IkReal x4852=(cj4*cj5);
IkReal x4853=(((r21*sj4*sj5))+(((-1.0)*cj5*r20*x4851))+(((-1.0)*cj4*r22)));
j0eval[0]=x4853;
j0eval[1]=((IKabs((((r12*sj4))+(((-1.0)*r10*x4852))+((r11*x4850)))))+(IKabs((((r00*x4852))+(((-1.0)*r01*x4850))+(((-1.0)*r02*x4851))))));
j0eval[2]=IKsign(x4853);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4854=r20*r20;
IkReal x4855=cj5*cj5;
IkReal x4856=((1.0)*cj5);
IkReal x4857=((1.0)*sj5);
IkReal x4858=((1.0)+(((-2.0)*cj5*r20*r21*sj5))+(((-1.0)*x4854))+(((-1.0)*x4855*(r21*r21)))+((x4854*x4855)));
j0eval[0]=x4858;
j0eval[1]=((IKabs(((((-1.0)*r10*x4857))+(((-1.0)*r11*x4856)))))+(IKabs(((((-1.0)*r01*x4856))+(((-1.0)*r00*x4857))))));
j0eval[2]=IKsign(x4858);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4859=cj5*cj5;
IkReal x4860=((1.0)*cj5);
IkReal x4861=((1.0)*sj5);
CheckValue<IkReal> x4862=IKPowWithIntegerCheck(IKsign(((1.0)+(((-2.0)*cj5*r20*r21*sj5))+(((-1.0)*x4859*(r21*r21)))+(((r20*r20)*(((-1.0)+x4859)))))),-1);
if(!x4862.valid){
continue;
}
CheckValue<IkReal> x4863 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4861))+(((-1.0)*r11*x4860)))),IkReal(((((-1.0)*r00*x4861))+(((-1.0)*r01*x4860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4863.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4862.value)))+(x4863.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4864=IKcos(j0);
IkReal x4865=IKsin(j0);
IkReal x4866=(r00*sj5);
IkReal x4867=(sj4*sj5);
IkReal x4868=(r01*sj5);
IkReal x4869=(r10*sj5);
IkReal x4870=(r12*x4865);
IkReal x4871=((1.0)*x4864);
IkReal x4872=(cj5*x4865);
IkReal x4873=(r11*x4865);
IkReal x4874=(cj5*x4864);
evalcond[0]=((1.0)+((r01*x4874))+((r11*x4872))+((x4865*x4869))+((x4864*x4866)));
evalcond[1]=((((-1.0)*cj5*r11*x4871))+(((-1.0)*x4869*x4871))+((r01*x4872))+((x4865*x4866)));
evalcond[2]=(((r10*sj4*x4872))+(((-1.0)*x4867*x4873))+((r00*sj4*x4874))+((cj4*r02*x4864))+(((-1.0)*r01*x4867*x4871))+((cj4*x4870)));
evalcond[3]=((((-1.0)*sj4*x4870))+(((-1.0)*cj4*x4868*x4871))+((cj4*r00*x4874))+((cj4*r10*x4872))+(((-1.0)*cj4*sj5*x4873))+(((-1.0)*r02*sj4*x4871)));
evalcond[4]=((((-0.0008)*r11*x4872))+(((-0.0008)*r01*x4874))+(((-3.5e-7)*x4864*x4868))+(((3.5e-7)*r10*x4872))+(((3.5e-7)*r00*x4874))+(((-0.0008)*x4864*x4866))+(((-1.0)*px*x4871))+(((-1.0)*py*x4865))+(((-3.5e-7)*sj5*x4873))+(((-0.0008)*x4865*x4869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
CheckValue<IkReal> x4917=IKPowWithIntegerCheck(r20,-1);
if(!x4917.valid){
continue;
}
IkReal x4875=x4917.value;
IkReal x4876=r21*r21;
IkReal x4877=(cj0*py);
IkReal x4878=((35.0)*cj5);
IkReal x4879=(r22*sj4);
IkReal x4880=(cj4*r22);
IkReal x4881=(sj0*sj5);
IkReal x4882=(cj5*r20);
IkReal x4883=((0.28199832)*cj4);
IkReal x4884=((4.2e-6)*cj0);
IkReal x4885=(r11*sj5);
IkReal x4886=((0.64340024)*sj4);
IkReal x4887=(cj5*r10);
IkReal x4888=((1.4e-6)*cj0);
IkReal x4889=(r21*sj5);
IkReal x4890=((7049958.0)*sj4);
IkReal x4891=((0.09399944)*cj4);
IkReal x4892=((48255018.0)*cj4);
IkReal x4893=((1.93020072)*sj4);
IkReal x4894=(px*sj0);
IkReal x4895=(cj5*sj0);
IkReal x4896=((16085006.0)*cj4);
IkReal x4897=((2349986.0)*sj4);
IkReal x4898=((105.0)*x4882);
IkReal x4899=((7049958.0)*x4880);
IkReal x4900=((12.0)*x4877);
IkReal x4901=(x4875*x4876);
IkReal x4902=(cj0*r10*sj5);
IkReal x4903=(cj0*cj5*r11);
IkReal x4904=(x4882*x4892);
IkReal x4905=(x4882*x4890);
IkReal x4906=(x4889*x4893);
IkReal x4907=(x4884*x4885);
IkReal x4908=(x4882*x4883);
IkReal x4909=((4.2e-6)*r00*x4895);
IkReal x4910=((0.0096)*x4902);
IkReal x4911=((0.0096)*x4903);
IkReal x4912=((105.0)*cj5*x4901);
IkReal x4913=((((300000000.0)*pz))+(((48255018.0)*x4879))+((x4889*x4890))+((x4889*x4892)));
IkReal x4914=(x4912+x4905+x4904+x4899+x4898);
IkReal x4915=(x4910+x4911+x4909+x4908+x4900+x4907+x4906);
IkReal x4916=((((1.93020072)*x4880))+(((12.0)*x4894))+(((0.0096)*r00*x4881))+((x4882*x4893))+(((4.2e-6)*r01*x4881))+(((0.0096)*r01*x4895))+((x4883*x4889))+(((0.28199832)*x4879))+((x4884*x4887)));
j1eval[0]=((5.12002464)+(IKabs(((3.08e-6)+x4915+(((-1.0)*x4916)))))+(((4.0e-8)*(IKabs(((-16000000.0)+x4914+(((-1.0)*x4913)))))))+(IKabs(((-3.08e-6)+x4915+(((-1.0)*x4916)))))+(((4.0e-8)*(IKabs(((16000000.0)+x4914+(((-1.0)*x4913)))))))+(((4.0e-8)*(IKabs(((-16000000.0)+((r20*x4878))+(((-100000000.0)*pz))+((x4878*x4901))+(((-16085006.0)*x4879))+((x4882*x4896))+((x4882*x4897))+(((-1.0)*x4889*x4896))+(((-1.0)*x4889*x4897))+(((2349986.0)*x4880)))))))+(IKabs(((3.08e-6)+(((-0.64340024)*x4880))+((x4885*x4888))+(((-1.4e-6)*r01*x4881))+((x4886*x4889))+(((1.4e-6)*r00*x4895))+(((-4.0)*x4894))+(((-0.0032)*r00*x4881))+(((-1.0)*x4882*x4886))+(((4.0)*x4877))+(((-0.09399944)*x4879))+(((0.0032)*x4903))+(((0.0032)*x4902))+(((-1.0)*x4887*x4888))+((x4882*x4891))+(((-1.0)*x4889*x4891))+(((-0.0032)*r01*x4895))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x4918=r20*r20;
CheckValue<IkReal> x4953=IKPowWithIntegerCheck(r20,-1);
if(!x4953.valid){
continue;
}
IkReal x4919=x4953.value;
IkReal x4920=r21*r21;
IkReal x4921=((16000000.0)*r20);
IkReal x4922=((48255018.0)*cj4);
IkReal x4923=((4.0e-8)*x4919);
IkReal x4924=(r20*sj4);
IkReal x4925=(r21*sj5);
IkReal x4926=((16085006.0)*cj4);
IkReal x4927=(pz*r20);
IkReal x4928=((300000000.0)*x4927);
IkReal x4929=((100000000.0)*x4927);
IkReal x4930=(cj5*x4918);
IkReal x4931=(cj4*r20*r22);
IkReal x4932=(cj5*x4920);
IkReal x4933=((7049958.0)*x4931);
IkReal x4934=((105.0)*x4932);
IkReal x4935=((105.0)*x4930);
IkReal x4936=((48255018.0)*r22*x4924);
IkReal x4937=((35.0)*x4932);
IkReal x4938=((2349986.0)*x4931);
IkReal x4939=((35.0)*x4930);
IkReal x4940=((16085006.0)*r22*x4924);
IkReal x4941=(x4922*x4930);
IkReal x4942=((7049958.0)*sj4*x4930);
IkReal x4943=(r20*x4922*x4925);
IkReal x4944=((7049958.0)*x4924*x4925);
IkReal x4945=((2349986.0)*sj4*x4930);
IkReal x4946=(x4926*x4930);
IkReal x4947=((2349986.0)*x4924*x4925);
IkReal x4948=(r20*x4925*x4926);
IkReal x4949=(x4929+x4947+x4940+x4948);
IkReal x4950=(x4936+x4928+x4944+x4943);
IkReal x4951=(x4937+x4938+x4939+x4945+x4946);
IkReal x4952=(x4933+x4934+x4935+x4941+x4942);
op[0]=(x4923*((x4951+(((-1.0)*x4949))+(((-1.0)*x4921)))));
op[1]=6.16e-6;
op[2]=(x4923*((x4952+(((-1.0)*x4950))+(((-1.0)*x4921)))));
op[3]=1.232e-5;
op[4]=(x4923*((x4921+x4952+(((-1.0)*x4950)))));
op[5]=6.16e-6;
op[6]=(x4923*((x4921+x4951+(((-1.0)*x4949)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4954=(cj0*py);
IkReal x4955=(r22*sj4);
IkReal x4956=(cj4*r22);
IkReal x4957=(sj0*sj5);
IkReal x4958=(cj5*r20);
IkReal x4959=((0.28199832)*cj4);
IkReal x4960=((0.64340024)*sj4);
IkReal x4961=(cj0*r10);
IkReal x4962=((1.4e-6)*cj5);
IkReal x4963=((0.09399944)*cj4);
IkReal x4964=(px*sj0);
IkReal x4965=(r21*sj5);
IkReal x4966=((1.93020072)*sj4);
IkReal x4967=(cj5*sj0);
IkReal x4968=((4.0)*x4954);
IkReal x4969=((12.0)*x4954);
IkReal x4970=(cj0*r11*sj5);
IkReal x4971=(cj0*cj5*r11);
IkReal x4972=((0.0032)*sj5*x4961);
IkReal x4973=(r00*sj0*x4962);
IkReal x4974=(x4960*x4965);
IkReal x4975=((0.0032)*x4971);
IkReal x4976=(x4958*x4963);
IkReal x4977=((1.4e-6)*x4970);
IkReal x4978=(x4965*x4966);
IkReal x4979=((4.2e-6)*x4970);
IkReal x4980=(x4958*x4959);
IkReal x4981=((4.2e-6)*r00*x4967);
IkReal x4982=((0.0096)*sj5*x4961);
IkReal x4983=((0.0096)*x4971);
IkReal x4984=(x4974+x4975+x4976+x4977+x4972+x4973+x4968);
IkReal x4985=(x4981+x4980+x4983+x4982+x4978+x4979+x4969);
IkReal x4986=(((x4959*x4965))+(((4.2e-6)*r01*x4957))+(((0.0096)*r00*x4957))+(((0.0096)*r01*x4967))+(((12.0)*x4964))+(((1.93020072)*x4956))+(((4.2e-6)*cj5*x4961))+((x4958*x4966))+(((0.28199832)*x4955)));
IkReal x4987=(((x4963*x4965))+(((0.64340024)*x4956))+((x4961*x4962))+(((0.0032)*r01*x4967))+(((4.0)*x4964))+(((0.0032)*r00*x4957))+(((0.09399944)*x4955))+((x4958*x4960))+(((1.4e-6)*r01*x4957)));
j1evalpoly[0]=((-3.08e-6)+x4984+(((1.28)*htj1))+(((1.28)*(htj1*htj1*htj1*htj1*htj1)))+(((2.56)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((3.08e-6)+x4984+(((-1.0)*x4987))))))+(((htj1*htj1)*(((-3.08e-6)+x4985+(((-1.0)*x4986))))))+(((htj1*htj1*htj1*htj1)*(((3.08e-6)+x4985+(((-1.0)*x4986))))))+(((-1.0)*x4987)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4988=(r21*sj5);
IkReal x4989=((1.0)*cj4);
IkReal x4990=(sj1*sj4);
IkReal x4991=((1.0)*r22);
IkReal x4992=(cj1*sj4);
IkReal x4993=(cj1*cj4);
IkReal x4994=(cj5*r20);
IkReal x4995=(sj4*x4994);
if( IKabs((((x4993*x4994))+(((-1.0)*cj1*x4988*x4989))+((x4988*x4990))+(((-1.0)*x4991*x4992))+(((-1.0)*r22*sj1*x4989))+(((-1.0)*x4990*x4994)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4992*x4994))+((cj4*sj1*x4994))+(((-1.0)*x4988*x4992))+((r22*x4993))+(((-1.0)*x4990*x4991))+(((-1.0)*sj1*x4988*x4989)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x4993*x4994))+(((-1.0)*cj1*x4988*x4989))+((x4988*x4990))+(((-1.0)*x4991*x4992))+(((-1.0)*r22*sj1*x4989))+(((-1.0)*x4990*x4994))))+IKsqr((((x4992*x4994))+((cj4*sj1*x4994))+(((-1.0)*x4988*x4992))+((r22*x4993))+(((-1.0)*x4990*x4991))+(((-1.0)*sj1*x4988*x4989))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x4993*x4994))+(((-1.0)*cj1*x4988*x4989))+((x4988*x4990))+(((-1.0)*x4991*x4992))+(((-1.0)*r22*sj1*x4989))+(((-1.0)*x4990*x4994))), (((x4992*x4994))+((cj4*sj1*x4994))+(((-1.0)*x4988*x4992))+((r22*x4993))+(((-1.0)*x4990*x4991))+(((-1.0)*sj1*x4988*x4989))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4996=IKcos(j2);
IkReal x4997=IKsin(j2);
IkReal x4998=((3.5e-7)*cj5);
IkReal x4999=(sj0*sj5);
IkReal x5000=((1.0)*cj4);
IkReal x5001=(cj0*r10);
IkReal x5002=((1.0)*sj4);
IkReal x5003=(cj0*sj4);
IkReal x5004=(r11*sj5);
IkReal x5005=((0.02349986)*sj1);
IkReal x5006=(cj4*sj0);
IkReal x5007=(cj5*r00);
IkReal x5008=(r21*sj5);
IkReal x5009=((0.0008)*cj5);
IkReal x5010=(cj5*r20);
IkReal x5011=(cj1*x4996);
IkReal x5012=(sj1*x4996);
IkReal x5013=(sj1*x4997);
IkReal x5014=(cj1*x4997);
IkReal x5015=((1.0)*x5012);
IkReal x5016=((1.0)*x5014);
IkReal x5017=(x5015+x5016);
evalcond[0]=(((cj4*r22))+(((-1.0)*x5002*x5008))+x5013+((sj4*x5010))+(((-1.0)*x5011)));
evalcond[1]=((((-1.0)*x5000*x5008))+(((-1.0)*r22*x5002))+((cj4*x5010))+(((-1.0)*x5017)));
evalcond[2]=(((r12*x5003))+(((-1.0)*r02*sj0*x5002))+(((-1.0)*cj5*x5000*x5001))+x5011+((cj0*cj4*x5004))+(((-1.0)*r01*x4999*x5000))+(((-1.0)*x5013))+((x5006*x5007)));
evalcond[3]=((((-1.0)*cj0*r12*x5000))+((x5003*x5004))+((r02*x5006))+((sj0*sj4*x5007))+(((-1.0)*r01*x4999*x5002))+(((-1.0)*x5017))+(((-1.0)*cj5*x5001*x5002)));
CheckValue<IkReal> x5018=IKPowWithIntegerCheck(r20,-1);
if(!x5018.valid){
continue;
}
evalcond[4]=((((0.16)*cj1))+(((0.02349986)*x5011))+((r20*x4998))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-1.0)*x4997*x5005))+((x4998*(x5018.value)*(r21*r21)))+(((0.16085006)*x5014))+(((0.16085006)*x5012)));
evalcond[5]=((((-0.0008)*r00*x4999))+((x4996*x5005))+(((0.0008)*sj5*x5001))+(((0.02349986)*x5014))+(((-1.0)*x4998*x5001))+(((-1.0)*r01*sj0*x5009))+(((0.16)*sj1))+(((-3.5e-7)*r01*x4999))+(((-7.7e-7)*cj1))+(((3.5e-7)*cj0*x5004))+(((-1.0)*px*sj0))+(((-0.16085006)*x5011))+((cj0*r11*x5009))+((cj0*py))+((r00*sj0*x4998))+(((0.16085006)*x5013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5019=(cj4*sj5);
IkReal x5020=((1.0)*sj4);
IkReal x5021=(cj4*cj5);
CheckValue<IkReal> x5022 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5020))+(((-1.0)*r01*x5019))+((r00*x5021)))),IkReal((((r12*sj4))+(((-1.0)*r10*x5021))+((r11*x5019)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5022.valid){
continue;
}
CheckValue<IkReal> x5023=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+(((-1.0)*cj5*r20*x5020))+(((-1.0)*cj4*r22)))),-1);
if(!x5023.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5022.value)+(((1.5707963267949)*(x5023.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x5024=IKcos(j0);
IkReal x5025=IKsin(j0);
IkReal x5026=(r00*sj5);
IkReal x5027=(sj4*sj5);
IkReal x5028=(r01*sj5);
IkReal x5029=(r10*sj5);
IkReal x5030=(r12*x5025);
IkReal x5031=((1.0)*x5024);
IkReal x5032=(cj5*x5025);
IkReal x5033=(r11*x5025);
IkReal x5034=(cj5*x5024);
evalcond[0]=((1.0)+((r11*x5032))+((x5024*x5026))+((r01*x5034))+((x5025*x5029)));
evalcond[1]=((((-1.0)*x5029*x5031))+((r01*x5032))+((x5025*x5026))+(((-1.0)*cj5*r11*x5031)));
evalcond[2]=(((r10*sj4*x5032))+(((-1.0)*r01*x5027*x5031))+(((-1.0)*x5027*x5033))+((cj4*x5030))+((r00*sj4*x5034))+((cj4*r02*x5024)));
evalcond[3]=((((-1.0)*sj4*x5030))+(((-1.0)*cj4*x5028*x5031))+((cj4*r10*x5032))+(((-1.0)*r02*sj4*x5031))+(((-1.0)*cj4*sj5*x5033))+((cj4*r00*x5034)));
evalcond[4]=((((-1.0)*px*x5031))+(((-3.5e-7)*x5024*x5028))+(((-3.5e-7)*sj5*x5033))+(((-1.0)*py*x5025))+(((-0.0008)*x5025*x5029))+(((3.5e-7)*r00*x5034))+(((-0.0008)*x5024*x5026))+(((-0.0008)*r01*x5034))+(((-0.0008)*r11*x5032))+(((3.5e-7)*r10*x5032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
CheckValue<IkReal> x5077=IKPowWithIntegerCheck(r20,-1);
if(!x5077.valid){
continue;
}
IkReal x5035=x5077.value;
IkReal x5036=r21*r21;
IkReal x5037=(cj0*py);
IkReal x5038=((35.0)*cj5);
IkReal x5039=(r22*sj4);
IkReal x5040=(cj4*r22);
IkReal x5041=(sj0*sj5);
IkReal x5042=(cj5*r20);
IkReal x5043=((0.28199832)*cj4);
IkReal x5044=((4.2e-6)*cj0);
IkReal x5045=(r11*sj5);
IkReal x5046=((0.64340024)*sj4);
IkReal x5047=(cj5*r10);
IkReal x5048=((1.4e-6)*cj0);
IkReal x5049=(r21*sj5);
IkReal x5050=((7049958.0)*sj4);
IkReal x5051=((0.09399944)*cj4);
IkReal x5052=((48255018.0)*cj4);
IkReal x5053=((1.93020072)*sj4);
IkReal x5054=(px*sj0);
IkReal x5055=(cj5*sj0);
IkReal x5056=((16085006.0)*cj4);
IkReal x5057=((2349986.0)*sj4);
IkReal x5058=((105.0)*x5042);
IkReal x5059=((7049958.0)*x5040);
IkReal x5060=((12.0)*x5037);
IkReal x5061=(x5035*x5036);
IkReal x5062=(cj0*r10*sj5);
IkReal x5063=(cj0*cj5*r11);
IkReal x5064=(x5042*x5052);
IkReal x5065=(x5042*x5050);
IkReal x5066=(x5049*x5053);
IkReal x5067=(x5044*x5045);
IkReal x5068=(x5042*x5043);
IkReal x5069=((4.2e-6)*r00*x5055);
IkReal x5070=((0.0096)*x5062);
IkReal x5071=((0.0096)*x5063);
IkReal x5072=((105.0)*cj5*x5061);
IkReal x5073=(((x5049*x5052))+((x5049*x5050))+(((300000000.0)*pz))+(((48255018.0)*x5039)));
IkReal x5074=(x5072+x5065+x5064+x5058+x5059);
IkReal x5075=(x5070+x5071+x5067+x5066+x5060+x5069+x5068);
IkReal x5076=((((12.0)*x5054))+(((4.2e-6)*r01*x5041))+((x5043*x5049))+(((1.93020072)*x5040))+(((0.28199832)*x5039))+(((0.0096)*r00*x5041))+((x5044*x5047))+((x5042*x5053))+(((0.0096)*r01*x5055)));
j1eval[0]=((5.12002464)+(((4.0e-8)*(IKabs(((16000000.0)+(((-1.0)*x5073))+x5074)))))+(IKabs(((3.08e-6)+(((-1.0)*x5076))+x5075)))+(IKabs(((3.08e-6)+(((1.4e-6)*r00*x5055))+(((-0.0032)*r00*x5041))+(((-1.0)*x5042*x5046))+(((4.0)*x5037))+(((-4.0)*x5054))+(((-1.4e-6)*r01*x5041))+(((0.0032)*x5063))+(((0.0032)*x5062))+(((-0.09399944)*x5039))+(((-1.0)*x5047*x5048))+((x5046*x5049))+((x5045*x5048))+(((-0.64340024)*x5040))+((x5042*x5051))+(((-1.0)*x5049*x5051))+(((-0.0032)*r01*x5055)))))+(((4.0e-8)*(IKabs(((-16000000.0)+(((-100000000.0)*pz))+((r20*x5038))+((x5038*x5061))+(((-16085006.0)*x5039))+(((2349986.0)*x5040))+((x5042*x5056))+((x5042*x5057))+(((-1.0)*x5049*x5056))+(((-1.0)*x5049*x5057)))))))+(((4.0e-8)*(IKabs(((-16000000.0)+(((-1.0)*x5073))+x5074)))))+(IKabs(((-3.08e-6)+(((-1.0)*x5076))+x5075))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5078=r20*r20;
CheckValue<IkReal> x5113=IKPowWithIntegerCheck(r20,-1);
if(!x5113.valid){
continue;
}
IkReal x5079=x5113.value;
IkReal x5080=r21*r21;
IkReal x5081=((16000000.0)*r20);
IkReal x5082=((48255018.0)*cj4);
IkReal x5083=((4.0e-8)*x5079);
IkReal x5084=(r20*sj4);
IkReal x5085=(r21*sj5);
IkReal x5086=((16085006.0)*cj4);
IkReal x5087=(pz*r20);
IkReal x5088=((300000000.0)*x5087);
IkReal x5089=((100000000.0)*x5087);
IkReal x5090=(cj5*x5078);
IkReal x5091=(cj4*r20*r22);
IkReal x5092=(cj5*x5080);
IkReal x5093=((7049958.0)*x5091);
IkReal x5094=((105.0)*x5092);
IkReal x5095=((105.0)*x5090);
IkReal x5096=((48255018.0)*r22*x5084);
IkReal x5097=((35.0)*x5092);
IkReal x5098=((2349986.0)*x5091);
IkReal x5099=((35.0)*x5090);
IkReal x5100=((16085006.0)*r22*x5084);
IkReal x5101=(x5082*x5090);
IkReal x5102=((7049958.0)*sj4*x5090);
IkReal x5103=(r20*x5082*x5085);
IkReal x5104=((7049958.0)*x5084*x5085);
IkReal x5105=((2349986.0)*sj4*x5090);
IkReal x5106=(x5086*x5090);
IkReal x5107=((2349986.0)*x5084*x5085);
IkReal x5108=(r20*x5085*x5086);
IkReal x5109=(x5108+x5100+x5107+x5089);
IkReal x5110=(x5103+x5104+x5096+x5088);
IkReal x5111=(x5106+x5105+x5098+x5099+x5097);
IkReal x5112=(x5102+x5101+x5093+x5094+x5095);
op[0]=(x5083*(((((-1.0)*x5109))+x5111+(((-1.0)*x5081)))));
op[1]=6.16e-6;
op[2]=(x5083*((x5112+(((-1.0)*x5081))+(((-1.0)*x5110)))));
op[3]=1.232e-5;
op[4]=(x5083*((x5112+x5081+(((-1.0)*x5110)))));
op[5]=6.16e-6;
op[6]=(x5083*(((((-1.0)*x5109))+x5111+x5081)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x5114=(cj0*py);
IkReal x5115=(r22*sj4);
IkReal x5116=(cj4*r22);
IkReal x5117=(sj0*sj5);
IkReal x5118=(cj5*r20);
IkReal x5119=((0.28199832)*cj4);
IkReal x5120=((0.64340024)*sj4);
IkReal x5121=(cj0*r10);
IkReal x5122=((1.4e-6)*cj5);
IkReal x5123=((0.09399944)*cj4);
IkReal x5124=(px*sj0);
IkReal x5125=(r21*sj5);
IkReal x5126=((1.93020072)*sj4);
IkReal x5127=(cj5*sj0);
IkReal x5128=((4.0)*x5114);
IkReal x5129=((12.0)*x5114);
IkReal x5130=(cj0*r11*sj5);
IkReal x5131=(cj0*cj5*r11);
IkReal x5132=((0.0032)*sj5*x5121);
IkReal x5133=(r00*sj0*x5122);
IkReal x5134=(x5120*x5125);
IkReal x5135=((0.0032)*x5131);
IkReal x5136=(x5118*x5123);
IkReal x5137=((1.4e-6)*x5130);
IkReal x5138=(x5125*x5126);
IkReal x5139=((4.2e-6)*x5130);
IkReal x5140=(x5118*x5119);
IkReal x5141=((4.2e-6)*r00*x5127);
IkReal x5142=((0.0096)*sj5*x5121);
IkReal x5143=((0.0096)*x5131);
IkReal x5144=(x5128+x5137+x5136+x5135+x5134+x5133+x5132);
IkReal x5145=(x5142+x5143+x5140+x5141+x5129+x5139+x5138);
IkReal x5146=((((12.0)*x5124))+((x5119*x5125))+(((4.2e-6)*cj5*x5121))+(((0.0096)*r00*x5117))+(((1.93020072)*x5116))+(((4.2e-6)*r01*x5117))+((x5118*x5126))+(((0.28199832)*x5115))+(((0.0096)*r01*x5127)));
IkReal x5147=((((4.0)*x5124))+(((0.0032)*r01*x5127))+(((0.64340024)*x5116))+(((1.4e-6)*r01*x5117))+(((0.09399944)*x5115))+((x5123*x5125))+(((0.0032)*r00*x5117))+((x5118*x5120))+((x5121*x5122)));
j1evalpoly[0]=((-3.08e-6)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((3.08e-6)+x5144+(((-1.0)*x5147))))))+(((1.28)*htj1))+(((htj1*htj1)*(((-3.08e-6)+x5145+(((-1.0)*x5146))))))+(((htj1*htj1*htj1*htj1)*(((3.08e-6)+x5145+(((-1.0)*x5146))))))+(((1.28)*(htj1*htj1*htj1*htj1*htj1)))+x5144+(((-1.0)*x5147))+(((2.56)*(htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5148=(r21*sj5);
IkReal x5149=((1.0)*cj4);
IkReal x5150=(sj1*sj4);
IkReal x5151=((1.0)*r22);
IkReal x5152=(cj1*sj4);
IkReal x5153=(cj1*cj4);
IkReal x5154=(cj5*r20);
IkReal x5155=(sj4*x5154);
if( IKabs((((x5153*x5154))+(((-1.0)*cj1*x5148*x5149))+(((-1.0)*x5151*x5152))+(((-1.0)*r22*sj1*x5149))+((x5148*x5150))+(((-1.0)*x5150*x5154)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x5148*x5149))+((cj4*sj1*x5154))+(((-1.0)*x5150*x5151))+((r22*x5153))+(((-1.0)*x5148*x5152))+((x5152*x5154)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x5153*x5154))+(((-1.0)*cj1*x5148*x5149))+(((-1.0)*x5151*x5152))+(((-1.0)*r22*sj1*x5149))+((x5148*x5150))+(((-1.0)*x5150*x5154))))+IKsqr(((((-1.0)*sj1*x5148*x5149))+((cj4*sj1*x5154))+(((-1.0)*x5150*x5151))+((r22*x5153))+(((-1.0)*x5148*x5152))+((x5152*x5154))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x5153*x5154))+(((-1.0)*cj1*x5148*x5149))+(((-1.0)*x5151*x5152))+(((-1.0)*r22*sj1*x5149))+((x5148*x5150))+(((-1.0)*x5150*x5154))), ((((-1.0)*sj1*x5148*x5149))+((cj4*sj1*x5154))+(((-1.0)*x5150*x5151))+((r22*x5153))+(((-1.0)*x5148*x5152))+((x5152*x5154))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5156=IKcos(j2);
IkReal x5157=IKsin(j2);
IkReal x5158=((3.5e-7)*cj5);
IkReal x5159=(sj0*sj5);
IkReal x5160=((1.0)*cj4);
IkReal x5161=(cj0*r10);
IkReal x5162=((1.0)*sj4);
IkReal x5163=(cj0*sj4);
IkReal x5164=(r11*sj5);
IkReal x5165=((0.02349986)*sj1);
IkReal x5166=(cj4*sj0);
IkReal x5167=(cj5*r00);
IkReal x5168=(r21*sj5);
IkReal x5169=((0.0008)*cj5);
IkReal x5170=(cj5*r20);
IkReal x5171=(cj1*x5156);
IkReal x5172=(sj1*x5156);
IkReal x5173=(sj1*x5157);
IkReal x5174=(cj1*x5157);
IkReal x5175=((1.0)*x5172);
IkReal x5176=((1.0)*x5174);
IkReal x5177=(x5176+x5175);
evalcond[0]=(((cj4*r22))+x5173+(((-1.0)*x5171))+(((-1.0)*x5162*x5168))+((sj4*x5170)));
evalcond[1]=((((-1.0)*r22*x5162))+(((-1.0)*x5160*x5168))+(((-1.0)*x5177))+((cj4*x5170)));
evalcond[2]=((((-1.0)*r01*x5159*x5160))+((x5166*x5167))+x5171+((cj0*cj4*x5164))+(((-1.0)*x5173))+((r12*x5163))+(((-1.0)*r02*sj0*x5162))+(((-1.0)*cj5*x5160*x5161)));
evalcond[3]=((((-1.0)*r01*x5159*x5162))+(((-1.0)*cj0*r12*x5160))+(((-1.0)*x5177))+((sj0*sj4*x5167))+((r02*x5166))+(((-1.0)*cj5*x5161*x5162))+((x5163*x5164)));
CheckValue<IkReal> x5178=IKPowWithIntegerCheck(r20,-1);
if(!x5178.valid){
continue;
}
evalcond[4]=((((-1.0)*x5157*x5165))+((x5158*(x5178.value)*(r21*r21)))+(((0.16)*cj1))+((r20*x5158))+(((0.16085006)*x5172))+(((0.16085006)*x5174))+(((0.02349986)*x5171))+(((-1.0)*pz))+(((7.7e-7)*sj1)));
evalcond[5]=((((-0.0008)*r00*x5159))+((x5156*x5165))+(((0.16085006)*x5173))+(((0.02349986)*x5174))+(((0.16)*sj1))+(((0.0008)*sj5*x5161))+(((-7.7e-7)*cj1))+((cj0*r11*x5169))+(((3.5e-7)*cj0*x5164))+(((-1.0)*x5158*x5161))+(((-3.5e-7)*r01*x5159))+(((-1.0)*px*sj0))+(((-0.16085006)*x5171))+((r00*sj0*x5158))+((cj0*py))+(((-1.0)*r01*sj0*x5169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5179=(cj5*sj4);
IkReal x5180=((1.0)*sj5);
CheckValue<IkReal> x5181 = IKatan2WithCheck(IkReal((((r00*x5179))+(((-1.0)*r01*sj4*x5180))+((cj4*r02)))),IkReal(((((-1.0)*r10*x5179))+((r11*sj4*sj5))+(((-1.0)*cj4*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5181.valid){
continue;
}
CheckValue<IkReal> x5182=IKPowWithIntegerCheck(IKsign((((cj4*cj5*r20))+(((-1.0)*cj4*r21*x5180))+(((-1.0)*r22*sj4)))),-1);
if(!x5182.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5181.value)+(((1.5707963267949)*(x5182.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x5183=IKcos(j0);
IkReal x5184=IKsin(j0);
IkReal x5185=(r00*sj5);
IkReal x5186=(sj4*sj5);
IkReal x5187=(r01*sj5);
IkReal x5188=(r10*sj5);
IkReal x5189=(r12*x5184);
IkReal x5190=((1.0)*x5183);
IkReal x5191=(cj5*x5184);
IkReal x5192=(r11*x5184);
IkReal x5193=(cj5*x5183);
evalcond[0]=((1.0)+((r11*x5191))+((x5184*x5188))+((x5183*x5185))+((r01*x5193)));
evalcond[1]=((((-1.0)*cj5*r11*x5190))+((x5184*x5185))+((r01*x5191))+(((-1.0)*x5188*x5190)));
evalcond[2]=(((cj4*x5189))+(((-1.0)*x5186*x5192))+((r00*sj4*x5193))+((cj4*r02*x5183))+(((-1.0)*r01*x5186*x5190))+((r10*sj4*x5191)));
evalcond[3]=((((-1.0)*sj4*x5189))+(((-1.0)*cj4*sj5*x5192))+((cj4*r10*x5191))+((cj4*r00*x5193))+(((-1.0)*r02*sj4*x5190))+(((-1.0)*cj4*x5187*x5190)));
evalcond[4]=((((-0.0008)*r11*x5191))+(((3.5e-7)*r00*x5193))+(((-0.0008)*r01*x5193))+(((-3.5e-7)*sj5*x5192))+(((3.5e-7)*r10*x5191))+(((-3.5e-7)*x5183*x5187))+(((-0.0008)*x5183*x5185))+(((-0.0008)*x5184*x5188))+(((-1.0)*px*x5190))+(((-1.0)*py*x5184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
CheckValue<IkReal> x5236=IKPowWithIntegerCheck(r20,-1);
if(!x5236.valid){
continue;
}
IkReal x5194=x5236.value;
IkReal x5195=r21*r21;
IkReal x5196=(cj0*py);
IkReal x5197=((35.0)*cj5);
IkReal x5198=(r22*sj4);
IkReal x5199=(cj4*r22);
IkReal x5200=(sj0*sj5);
IkReal x5201=(cj5*r20);
IkReal x5202=((0.28199832)*cj4);
IkReal x5203=((4.2e-6)*cj0);
IkReal x5204=(r11*sj5);
IkReal x5205=((0.64340024)*sj4);
IkReal x5206=(cj5*r10);
IkReal x5207=((1.4e-6)*cj0);
IkReal x5208=(r21*sj5);
IkReal x5209=((7049958.0)*sj4);
IkReal x5210=((0.09399944)*cj4);
IkReal x5211=((48255018.0)*cj4);
IkReal x5212=((1.93020072)*sj4);
IkReal x5213=(px*sj0);
IkReal x5214=(cj5*sj0);
IkReal x5215=((16085006.0)*cj4);
IkReal x5216=((2349986.0)*sj4);
IkReal x5217=((105.0)*x5201);
IkReal x5218=((7049958.0)*x5199);
IkReal x5219=((12.0)*x5196);
IkReal x5220=(x5194*x5195);
IkReal x5221=(cj0*r10*sj5);
IkReal x5222=(cj0*cj5*r11);
IkReal x5223=(x5201*x5211);
IkReal x5224=(x5201*x5209);
IkReal x5225=(x5208*x5212);
IkReal x5226=(x5203*x5204);
IkReal x5227=(x5201*x5202);
IkReal x5228=((4.2e-6)*r00*x5214);
IkReal x5229=((0.0096)*x5221);
IkReal x5230=((0.0096)*x5222);
IkReal x5231=((105.0)*cj5*x5220);
IkReal x5232=(((x5208*x5211))+(((300000000.0)*pz))+((x5208*x5209))+(((48255018.0)*x5198)));
IkReal x5233=(x5223+x5224+x5217+x5218+x5231);
IkReal x5234=(x5229+x5228+x5227+x5226+x5225+x5219+x5230);
IkReal x5235=((((0.0096)*r01*x5214))+((x5203*x5206))+((x5202*x5208))+(((12.0)*x5213))+(((4.2e-6)*r01*x5200))+((x5201*x5212))+(((1.93020072)*x5199))+(((0.28199832)*x5198))+(((0.0096)*r00*x5200)));
j1eval[0]=((5.12002464)+(IKabs(((3.08e-6)+(((-1.0)*x5235))+x5234)))+(((4.0e-8)*(IKabs(((16000000.0)+(((-1.0)*x5232))+x5233)))))+(IKabs(((3.08e-6)+((x5205*x5208))+(((1.4e-6)*r00*x5214))+((x5204*x5207))+(((-1.0)*x5206*x5207))+(((-1.0)*x5201*x5205))+((x5201*x5210))+(((-4.0)*x5213))+(((4.0)*x5196))+(((-0.0032)*r01*x5214))+(((-0.09399944)*x5198))+(((0.0032)*x5222))+(((0.0032)*x5221))+(((-0.0032)*r00*x5200))+(((-1.4e-6)*r01*x5200))+(((-0.64340024)*x5199))+(((-1.0)*x5208*x5210)))))+(((4.0e-8)*(IKabs(((-16000000.0)+(((-100000000.0)*pz))+((x5201*x5215))+((x5201*x5216))+(((2349986.0)*x5199))+(((-16085006.0)*x5198))+((x5197*x5220))+(((-1.0)*x5208*x5215))+(((-1.0)*x5208*x5216))+((r20*x5197)))))))+(((4.0e-8)*(IKabs(((-16000000.0)+(((-1.0)*x5232))+x5233)))))+(IKabs(((-3.08e-6)+(((-1.0)*x5235))+x5234))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5237=r20*r20;
CheckValue<IkReal> x5272=IKPowWithIntegerCheck(r20,-1);
if(!x5272.valid){
continue;
}
IkReal x5238=x5272.value;
IkReal x5239=r21*r21;
IkReal x5240=((16000000.0)*r20);
IkReal x5241=((48255018.0)*cj4);
IkReal x5242=((4.0e-8)*x5238);
IkReal x5243=(r20*sj4);
IkReal x5244=(r21*sj5);
IkReal x5245=((16085006.0)*cj4);
IkReal x5246=(pz*r20);
IkReal x5247=((300000000.0)*x5246);
IkReal x5248=((100000000.0)*x5246);
IkReal x5249=(cj5*x5237);
IkReal x5250=(cj4*r20*r22);
IkReal x5251=(cj5*x5239);
IkReal x5252=((7049958.0)*x5250);
IkReal x5253=((105.0)*x5251);
IkReal x5254=((105.0)*x5249);
IkReal x5255=((48255018.0)*r22*x5243);
IkReal x5256=((35.0)*x5251);
IkReal x5257=((2349986.0)*x5250);
IkReal x5258=((35.0)*x5249);
IkReal x5259=((16085006.0)*r22*x5243);
IkReal x5260=(x5241*x5249);
IkReal x5261=((7049958.0)*sj4*x5249);
IkReal x5262=(r20*x5241*x5244);
IkReal x5263=((7049958.0)*x5243*x5244);
IkReal x5264=((2349986.0)*sj4*x5249);
IkReal x5265=(x5245*x5249);
IkReal x5266=((2349986.0)*x5243*x5244);
IkReal x5267=(r20*x5244*x5245);
IkReal x5268=(x5267+x5266+x5259+x5248);
IkReal x5269=(x5263+x5262+x5255+x5247);
IkReal x5270=(x5265+x5264+x5256+x5257+x5258);
IkReal x5271=(x5261+x5260+x5252+x5253+x5254);
op[0]=(x5242*(((((-1.0)*x5240))+(((-1.0)*x5268))+x5270)));
op[1]=6.16e-6;
op[2]=(x5242*(((((-1.0)*x5240))+(((-1.0)*x5269))+x5271)));
op[3]=1.232e-5;
op[4]=(x5242*(((((-1.0)*x5269))+x5240+x5271)));
op[5]=6.16e-6;
op[6]=(x5242*(((((-1.0)*x5268))+x5240+x5270)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x5273=(cj0*py);
IkReal x5274=(r22*sj4);
IkReal x5275=(cj4*r22);
IkReal x5276=(sj0*sj5);
IkReal x5277=(cj5*r20);
IkReal x5278=((0.28199832)*cj4);
IkReal x5279=((0.64340024)*sj4);
IkReal x5280=(cj0*r10);
IkReal x5281=((1.4e-6)*cj5);
IkReal x5282=((0.09399944)*cj4);
IkReal x5283=(px*sj0);
IkReal x5284=(r21*sj5);
IkReal x5285=((1.93020072)*sj4);
IkReal x5286=(cj5*sj0);
IkReal x5287=((4.0)*x5273);
IkReal x5288=((12.0)*x5273);
IkReal x5289=(cj0*r11*sj5);
IkReal x5290=(cj0*cj5*r11);
IkReal x5291=((0.0032)*sj5*x5280);
IkReal x5292=(r00*sj0*x5281);
IkReal x5293=(x5279*x5284);
IkReal x5294=((0.0032)*x5290);
IkReal x5295=(x5277*x5282);
IkReal x5296=((1.4e-6)*x5289);
IkReal x5297=(x5284*x5285);
IkReal x5298=((4.2e-6)*x5289);
IkReal x5299=(x5277*x5278);
IkReal x5300=((4.2e-6)*r00*x5286);
IkReal x5301=((0.0096)*sj5*x5280);
IkReal x5302=((0.0096)*x5290);
IkReal x5303=(x5296+x5294+x5295+x5292+x5293+x5291+x5287);
IkReal x5304=(x5300+x5301+x5302+x5298+x5299+x5297+x5288);
IkReal x5305=((((4.2e-6)*cj5*x5280))+((x5278*x5284))+(((0.0096)*r00*x5276))+(((0.0096)*r01*x5286))+((x5277*x5285))+(((1.93020072)*x5275))+(((4.2e-6)*r01*x5276))+(((0.28199832)*x5274))+(((12.0)*x5283)));
IkReal x5306=((((0.0032)*r00*x5276))+(((0.0032)*r01*x5286))+(((4.0)*x5283))+((x5282*x5284))+(((0.09399944)*x5274))+((x5280*x5281))+((x5277*x5279))+(((0.64340024)*x5275))+(((1.4e-6)*r01*x5276)));
j1evalpoly[0]=((-3.08e-6)+(((-1.0)*x5306))+(((1.28)*htj1))+x5303+(((1.28)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-3.08e-6)+(((-1.0)*x5305))+x5304))))+(((2.56)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((3.08e-6)+(((-1.0)*x5306))+x5303))))+(((htj1*htj1*htj1*htj1)*(((3.08e-6)+(((-1.0)*x5305))+x5304)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5307=(r21*sj5);
IkReal x5308=((1.0)*cj4);
IkReal x5309=(sj1*sj4);
IkReal x5310=((1.0)*r22);
IkReal x5311=(cj1*sj4);
IkReal x5312=(cj1*cj4);
IkReal x5313=(cj5*r20);
IkReal x5314=(sj4*x5313);
if( IKabs(((((-1.0)*r22*sj1*x5308))+(((-1.0)*x5310*x5311))+((x5307*x5309))+((x5312*x5313))+(((-1.0)*x5309*x5313))+(((-1.0)*cj1*x5307*x5308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5307*x5311))+((r22*x5312))+((x5311*x5313))+(((-1.0)*sj1*x5307*x5308))+((cj4*sj1*x5313))+(((-1.0)*x5309*x5310)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*sj1*x5308))+(((-1.0)*x5310*x5311))+((x5307*x5309))+((x5312*x5313))+(((-1.0)*x5309*x5313))+(((-1.0)*cj1*x5307*x5308))))+IKsqr(((((-1.0)*x5307*x5311))+((r22*x5312))+((x5311*x5313))+(((-1.0)*sj1*x5307*x5308))+((cj4*sj1*x5313))+(((-1.0)*x5309*x5310))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*sj1*x5308))+(((-1.0)*x5310*x5311))+((x5307*x5309))+((x5312*x5313))+(((-1.0)*x5309*x5313))+(((-1.0)*cj1*x5307*x5308))), ((((-1.0)*x5307*x5311))+((r22*x5312))+((x5311*x5313))+(((-1.0)*sj1*x5307*x5308))+((cj4*sj1*x5313))+(((-1.0)*x5309*x5310))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5315=IKcos(j2);
IkReal x5316=IKsin(j2);
IkReal x5317=((3.5e-7)*cj5);
IkReal x5318=(sj0*sj5);
IkReal x5319=((1.0)*cj4);
IkReal x5320=(cj0*r10);
IkReal x5321=((1.0)*sj4);
IkReal x5322=(cj0*sj4);
IkReal x5323=(r11*sj5);
IkReal x5324=((0.02349986)*sj1);
IkReal x5325=(cj4*sj0);
IkReal x5326=(cj5*r00);
IkReal x5327=(r21*sj5);
IkReal x5328=((0.0008)*cj5);
IkReal x5329=(cj5*r20);
IkReal x5330=(cj1*x5315);
IkReal x5331=(sj1*x5315);
IkReal x5332=(sj1*x5316);
IkReal x5333=(cj1*x5316);
IkReal x5334=((1.0)*x5331);
IkReal x5335=((1.0)*x5333);
IkReal x5336=(x5335+x5334);
evalcond[0]=(((sj4*x5329))+(((-1.0)*x5321*x5327))+(((-1.0)*x5330))+((cj4*r22))+x5332);
evalcond[1]=(((cj4*x5329))+(((-1.0)*r22*x5321))+(((-1.0)*x5336))+(((-1.0)*x5319*x5327)));
evalcond[2]=((((-1.0)*x5332))+((x5325*x5326))+(((-1.0)*r02*sj0*x5321))+x5330+((r12*x5322))+(((-1.0)*r01*x5318*x5319))+(((-1.0)*cj5*x5319*x5320))+((cj0*cj4*x5323)));
evalcond[3]=(((x5322*x5323))+(((-1.0)*cj0*r12*x5319))+(((-1.0)*cj5*x5320*x5321))+((sj0*sj4*x5326))+(((-1.0)*x5336))+(((-1.0)*r01*x5318*x5321))+((r02*x5325)));
CheckValue<IkReal> x5337=IKPowWithIntegerCheck(r20,-1);
if(!x5337.valid){
continue;
}
evalcond[4]=((((0.16)*cj1))+(((-1.0)*x5316*x5324))+((x5317*(x5337.value)*(r21*r21)))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x5333))+(((0.16085006)*x5331))+((r20*x5317))+(((0.02349986)*x5330)));
evalcond[5]=((((0.0008)*sj5*x5320))+(((-0.0008)*r00*x5318))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((r00*sj0*x5317))+(((-1.0)*x5317*x5320))+(((-1.0)*r01*sj0*x5328))+(((-3.5e-7)*r01*x5318))+(((0.16085006)*x5332))+(((-0.16085006)*x5330))+(((-1.0)*px*sj0))+((cj0*r11*x5328))+((cj0*py))+(((0.02349986)*x5333))+((x5315*x5324))+(((3.5e-7)*cj0*x5323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5338=(cj5*sj4);
IkReal x5339=(sj4*sj5);
IkReal x5340=((1.0)*cj4);
IkReal x5341=(((cj4*r21*sj5))+((r22*sj4))+(((-1.0)*cj5*r20*x5340)));
j0eval[0]=x5341;
j0eval[1]=IKsign(x5341);
j0eval[2]=((IKabs((((r11*x5339))+(((-1.0)*r10*x5338))+(((-1.0)*r12*x5340)))))+(IKabs(((((-1.0)*r01*x5339))+((r00*x5338))+((cj4*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5342=(cj4*sj5);
IkReal x5343=((1.0)*sj4);
IkReal x5344=(cj4*cj5);
IkReal x5345=(((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj5*x5343)));
j0eval[0]=x5345;
j0eval[1]=((IKabs(((((-1.0)*r10*x5344))+((r11*x5342))+((r12*sj4)))))+(IKabs(((((-1.0)*r02*x5343))+((r00*x5344))+(((-1.0)*r01*x5342))))));
j0eval[2]=IKsign(x5345);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5346=cj5*cj5;
IkReal x5347=r20*r20;
IkReal x5348=((1.0)*cj5);
IkReal x5349=((1.0)*sj5);
IkReal x5350=((-1.0)+(((2.0)*cj5*r20*r21*sj5))+((x5346*(r21*r21)))+x5347+(((-1.0)*x5346*x5347)));
j0eval[0]=x5350;
j0eval[1]=((IKabs(((((-1.0)*r01*x5348))+(((-1.0)*r00*x5349)))))+(IKabs(((((-1.0)*r10*x5349))+(((-1.0)*r11*x5348))))));
j0eval[2]=IKsign(x5350);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5351=cj5*cj5;
IkReal x5352=((1.0)*sj5);
IkReal x5353=((1.0)*cj5);
CheckValue<IkReal> x5354 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x5353))+(((-1.0)*r10*x5352)))),IkReal(((((-1.0)*r00*x5352))+(((-1.0)*r01*x5353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5354.valid){
continue;
}
CheckValue<IkReal> x5355=IKPowWithIntegerCheck(IKsign(((-1.0)+(((2.0)*cj5*r20*r21*sj5))+((x5351*(r21*r21)))+(((r20*r20)*(((1.0)+(((-1.0)*x5351)))))))),-1);
if(!x5355.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5354.value)+(((1.5707963267949)*(x5355.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x5356=IKcos(j0);
IkReal x5357=IKsin(j0);
IkReal x5358=(r00*sj5);
IkReal x5359=(sj4*sj5);
IkReal x5360=(r01*sj5);
IkReal x5361=(r10*sj5);
IkReal x5362=(r12*x5357);
IkReal x5363=((1.0)*x5356);
IkReal x5364=(cj5*x5357);
IkReal x5365=(r11*x5357);
IkReal x5366=(cj5*x5356);
evalcond[0]=((-1.0)+((x5357*x5361))+((x5356*x5358))+((r01*x5366))+((r11*x5364)));
evalcond[1]=(((x5357*x5358))+(((-1.0)*cj5*r11*x5363))+(((-1.0)*x5361*x5363))+((r01*x5364)));
evalcond[2]=((((-1.0)*r01*x5359*x5363))+((cj4*r02*x5356))+(((-1.0)*x5359*x5365))+((r10*sj4*x5364))+((r00*sj4*x5366))+((cj4*x5362)));
evalcond[3]=((((-1.0)*sj4*x5362))+(((-1.0)*cj4*x5360*x5363))+(((-1.0)*cj4*sj5*x5365))+((cj4*r10*x5364))+((cj4*r00*x5366))+(((-1.0)*r02*sj4*x5363)));
evalcond[4]=((((-3.5e-7)*sj5*x5365))+(((3.5e-7)*r10*x5364))+(((-3.5e-7)*x5356*x5360))+(((-0.0008)*x5356*x5358))+(((-0.0008)*r01*x5366))+(((-1.0)*px*x5363))+(((-1.0)*py*x5357))+(((-0.0008)*x5357*x5361))+(((-0.0008)*r11*x5364))+(((3.5e-7)*r00*x5366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
CheckValue<IkReal> x5410=IKPowWithIntegerCheck(r20,-1);
if(!x5410.valid){
continue;
}
IkReal x5367=x5410.value;
IkReal x5368=r21*r21;
IkReal x5369=((300000000.0)*pz);
IkReal x5370=(cj0*py);
IkReal x5371=(r22*sj4);
IkReal x5372=(cj4*r22);
IkReal x5373=(sj0*sj5);
IkReal x5374=(cj5*r20);
IkReal x5375=((1.93020072)*sj4);
IkReal x5376=((4.2e-6)*cj0);
IkReal x5377=(r11*sj5);
IkReal x5378=((48255018.0)*cj4);
IkReal x5379=(cj5*r10);
IkReal x5380=((1.4e-6)*cj0);
IkReal x5381=(px*sj0);
IkReal x5382=((0.09399944)*cj4);
IkReal x5383=(r21*sj5);
IkReal x5384=((16085006.0)*cj4);
IkReal x5385=((0.28199832)*cj4);
IkReal x5386=((0.0032)*cj0);
IkReal x5387=(cj5*r11);
IkReal x5388=(r10*sj5);
IkReal x5389=((0.0096)*cj0);
IkReal x5390=((0.28199832)*x5371);
IkReal x5391=((12.0)*x5381);
IkReal x5392=((48255018.0)*x5371);
IkReal x5393=((7049958.0)*x5372);
IkReal x5394=(sj4*x5383);
IkReal x5395=(cj5*r01*sj0);
IkReal x5396=(cj5*r00*sj0);
IkReal x5397=(x5375*x5383);
IkReal x5398=((0.0096)*r00*x5373);
IkReal x5399=(x5376*x5379);
IkReal x5400=((4.2e-6)*r01*x5373);
IkReal x5401=(x5383*x5385);
IkReal x5402=((0.0096)*x5395);
IkReal x5403=((7049958.0)*sj4*x5374);
IkReal x5404=(x5378*x5383);
IkReal x5405=(cj5*x5367*x5368);
IkReal x5406=((((105.0)*x5405))+(((105.0)*x5374))+(((7049958.0)*x5394))+((x5374*x5378)));
IkReal x5407=(x5404+x5403+x5369+x5393+x5392);
IkReal x5408=(((x5387*x5389))+((x5374*x5385))+((x5388*x5389))+(((1.93020072)*x5372))+(((4.2e-6)*x5396))+((x5376*x5377))+(((12.0)*x5370))+((x5374*x5375)));
IkReal x5409=(x5402+x5401+x5400+x5391+x5390+x5397+x5399+x5398);
j1eval[0]=((5.12002464)+(((4.0e-8)*(IKabs(((16000000.0)+x5407+(((-1.0)*x5406)))))))+(IKabs(((-3.08e-6)+(((4.0)*x5381))+((x5382*x5383))+(((-0.64340024)*x5372))+((x5379*x5380))+(((-0.64340024)*sj4*x5374))+(((-1.0)*x5386*x5388))+(((-1.0)*x5386*x5387))+(((-1.4e-6)*x5396))+(((-1.0)*x5374*x5382))+(((-1.0)*x5377*x5380))+(((1.4e-6)*r01*x5373))+(((0.09399944)*x5371))+(((0.64340024)*x5394))+(((0.0032)*r00*x5373))+(((0.0032)*x5395))+(((-4.0)*x5370)))))+(((4.0e-8)*(IKabs(((16000000.0)+((x5383*x5384))+(((-35.0)*x5374))+(((16085006.0)*x5371))+(((100000000.0)*pz))+(((2349986.0)*sj4*x5374))+(((-1.0)*x5374*x5384))+(((2349986.0)*x5372))+(((-2349986.0)*x5394))+(((-35.0)*x5405)))))))+(IKabs(((3.08e-6)+x5409+(((-1.0)*x5408)))))+(IKabs(((-3.08e-6)+x5409+(((-1.0)*x5408)))))+(((4.0e-8)*(IKabs(((-16000000.0)+x5407+(((-1.0)*x5406))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5411=r20*r20;
CheckValue<IkReal> x5446=IKPowWithIntegerCheck(r20,-1);
if(!x5446.valid){
continue;
}
IkReal x5412=x5446.value;
IkReal x5413=((16000000.0)*r20);
IkReal x5414=r21*r21;
IkReal x5415=((48255018.0)*cj4);
IkReal x5416=(r20*sj4);
IkReal x5417=(r21*sj5);
IkReal x5418=((4.0e-8)*x5412);
IkReal x5419=((16085006.0)*cj4);
IkReal x5420=(pz*r20);
IkReal x5421=((300000000.0)*x5420);
IkReal x5422=((100000000.0)*x5420);
IkReal x5423=(cj5*x5411);
IkReal x5424=(cj4*r20*r22);
IkReal x5425=(cj5*x5414);
IkReal x5426=((48255018.0)*r22*x5416);
IkReal x5427=((7049958.0)*x5424);
IkReal x5428=((105.0)*x5425);
IkReal x5429=((105.0)*x5423);
IkReal x5430=((16085006.0)*r22*x5416);
IkReal x5431=((2349986.0)*x5424);
IkReal x5432=((35.0)*x5425);
IkReal x5433=((35.0)*x5423);
IkReal x5434=(r20*x5415*x5417);
IkReal x5435=((7049958.0)*sj4*x5423);
IkReal x5436=(x5415*x5423);
IkReal x5437=((7049958.0)*x5416*x5417);
IkReal x5438=((2349986.0)*sj4*x5423);
IkReal x5439=(r20*x5417*x5419);
IkReal x5440=((2349986.0)*x5416*x5417);
IkReal x5441=(x5419*x5423);
IkReal x5442=(x5429+x5428+x5436+x5437);
IkReal x5443=(x5441+x5440+x5432+x5433);
IkReal x5444=(x5422+x5430+x5431+x5438+x5439);
IkReal x5445=(x5427+x5426+x5421+x5434+x5435);
op[0]=(x5418*((x5444+x5413+(((-1.0)*x5443)))));
op[1]=-6.16e-6;
op[2]=(x5418*((x5445+x5413+(((-1.0)*x5442)))));
op[3]=-1.232e-5;
op[4]=(x5418*((x5445+(((-1.0)*x5442))+(((-1.0)*x5413)))));
op[5]=-6.16e-6;
op[6]=(x5418*((x5444+(((-1.0)*x5443))+(((-1.0)*x5413)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x5447=(r22*sj4);
IkReal x5448=(cj4*r22);
IkReal x5449=(sj0*sj5);
IkReal x5450=(cj0*py);
IkReal x5451=(cj0*sj5);
IkReal x5452=(px*sj0);
IkReal x5453=((0.09399944)*cj4);
IkReal x5454=(cj5*r20);
IkReal x5455=(r21*sj5);
IkReal x5456=(cj5*sj0);
IkReal x5457=((0.28199832)*cj4);
IkReal x5458=((0.28199832)*x5447);
IkReal x5459=((12.0)*x5452);
IkReal x5460=((0.09399944)*x5447);
IkReal x5461=((4.0)*x5452);
IkReal x5462=((4.0)*x5450);
IkReal x5463=((0.64340024)*x5448);
IkReal x5464=(sj4*x5454);
IkReal x5465=(cj0*cj5*r10);
IkReal x5466=(cj0*cj5*r11);
IkReal x5467=((1.93020072)*sj4*x5455);
IkReal x5468=((0.0096)*r00*x5449);
IkReal x5469=((4.2e-6)*x5465);
IkReal x5470=((4.2e-6)*r01*x5449);
IkReal x5471=(x5455*x5457);
IkReal x5472=((0.0096)*r01*x5456);
IkReal x5473=((1.4e-6)*r01*x5449);
IkReal x5474=((0.0032)*r01*x5456);
IkReal x5475=((0.0032)*r00*x5449);
IkReal x5476=((1.4e-6)*x5465);
IkReal x5477=((0.64340024)*sj4*x5455);
IkReal x5478=(x5453*x5455);
IkReal x5479=((0.0032)*r10*x5451);
IkReal x5480=((1.4e-6)*r00*x5456);
IkReal x5481=((0.64340024)*x5464);
IkReal x5482=((0.0032)*x5466);
IkReal x5483=(x5453*x5454);
IkReal x5484=((1.4e-6)*r11*x5451);
IkReal x5485=((((4.2e-6)*r11*x5451))+(((0.0096)*x5466))+((x5454*x5457))+(((4.2e-6)*r00*x5456))+(((1.93020072)*x5448))+(((12.0)*x5450))+(((1.93020072)*x5464))+(((0.0096)*r10*x5451)));
IkReal x5486=(x5467+x5469+x5468+x5458+x5459+x5472+x5470+x5471);
IkReal x5487=(x5461+x5460+x5476+x5477+x5474+x5475+x5473+x5478);
IkReal x5488=(x5463+x5462+x5479+x5484+x5483+x5482+x5481+x5480);
j1evalpoly[0]=((3.08e-6)+(((-1.0)*x5488))+x5487+(((-1.28)*htj1))+(((-2.56)*(htj1*htj1*htj1)))+(((-1.28)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((-3.08e-6)+(((-1.0)*x5485))+x5486))))+(((htj1*htj1)*(((3.08e-6)+(((-1.0)*x5485))+x5486))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-3.08e-6)+(((-1.0)*x5488))+x5487)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5489=((1.0)*cj4);
IkReal x5490=(r22*sj1);
IkReal x5491=((1.0)*sj4);
IkReal x5492=(cj1*r22);
IkReal x5493=(cj1*r21*sj5);
IkReal x5494=(cj5*r20*sj1);
IkReal x5495=(r21*sj1*sj5);
IkReal x5496=(cj1*cj5*r20);
if( IKabs((((sj4*x5494))+((cj4*x5490))+((cj4*x5496))+(((-1.0)*x5489*x5493))+(((-1.0)*x5491*x5495))+(((-1.0)*x5491*x5492)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x5493))+((cj4*x5494))+(((-1.0)*x5489*x5492))+(((-1.0)*x5489*x5495))+(((-1.0)*x5491*x5496))+(((-1.0)*x5490*x5491)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x5494))+((cj4*x5490))+((cj4*x5496))+(((-1.0)*x5489*x5493))+(((-1.0)*x5491*x5495))+(((-1.0)*x5491*x5492))))+IKsqr((((sj4*x5493))+((cj4*x5494))+(((-1.0)*x5489*x5492))+(((-1.0)*x5489*x5495))+(((-1.0)*x5491*x5496))+(((-1.0)*x5490*x5491))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj4*x5494))+((cj4*x5490))+((cj4*x5496))+(((-1.0)*x5489*x5493))+(((-1.0)*x5491*x5495))+(((-1.0)*x5491*x5492))), (((sj4*x5493))+((cj4*x5494))+(((-1.0)*x5489*x5492))+(((-1.0)*x5489*x5495))+(((-1.0)*x5491*x5496))+(((-1.0)*x5490*x5491))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5497=IKcos(j2);
IkReal x5498=IKsin(j2);
IkReal x5499=((3.5e-7)*cj5);
IkReal x5500=(sj0*sj5);
IkReal x5501=(cj0*cj5);
IkReal x5502=((1.0)*cj4);
IkReal x5503=((1.0)*sj4);
IkReal x5504=(cj0*sj4);
IkReal x5505=(cj0*r10);
IkReal x5506=(r11*sj5);
IkReal x5507=((0.02349986)*sj1);
IkReal x5508=(cj4*sj0);
IkReal x5509=(cj5*r00);
IkReal x5510=(cj5*r20);
IkReal x5511=(r21*sj5);
IkReal x5512=(cj1*x5497);
IkReal x5513=(cj1*x5498);
IkReal x5514=(sj1*x5497);
IkReal x5515=(sj1*x5498);
IkReal x5516=((1.0)*x5515);
evalcond[0]=(x5512+((cj4*r22))+(((-1.0)*x5503*x5511))+(((-1.0)*x5516))+((sj4*x5510)));
evalcond[1]=((((-1.0)*r22*x5503))+(((-1.0)*x5502*x5511))+(((-1.0)*x5514))+(((-1.0)*x5513))+((cj4*x5510)));
evalcond[2]=((((-1.0)*cj0*r12*x5502))+x5513+x5514+((r02*x5508))+(((-1.0)*r10*x5501*x5503))+(((-1.0)*r01*x5500*x5503))+((x5504*x5506))+((sj0*sj4*x5509)));
evalcond[3]=(x5512+((cj0*cj4*x5506))+((x5508*x5509))+(((-1.0)*r10*x5501*x5502))+((r12*x5504))+(((-1.0)*x5516))+(((-1.0)*r01*x5500*x5502))+(((-1.0)*r02*sj0*x5503)));
CheckValue<IkReal> x5517=IKPowWithIntegerCheck(r20,-1);
if(!x5517.valid){
continue;
}
evalcond[4]=(((r20*x5499))+(((0.16)*cj1))+(((-1.0)*x5498*x5507))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.02349986)*x5512))+(((0.16085006)*x5514))+(((0.16085006)*x5513))+((x5499*(x5517.value)*(r21*r21))));
evalcond[5]=(((r00*sj0*x5499))+(((-0.16085006)*x5512))+(((0.0008)*r11*x5501))+(((-0.0008)*r00*x5500))+(((3.5e-7)*cj0*x5506))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-3.5e-7)*r01*x5500))+(((-0.0008)*cj5*r01*sj0))+(((0.02349986)*x5513))+(((0.0008)*sj5*x5505))+(((0.16085006)*x5515))+((x5497*x5507))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*x5499*x5505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5518=(cj4*sj5);
IkReal x5519=((1.0)*sj4);
IkReal x5520=(cj4*cj5);
CheckValue<IkReal> x5521=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj5*x5519)))),-1);
if(!x5521.valid){
continue;
}
CheckValue<IkReal> x5522 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5519))+((r00*x5520))+(((-1.0)*r01*x5518)))),IkReal((((r12*sj4))+((r11*x5518))+(((-1.0)*r10*x5520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5522.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5521.value)))+(x5522.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x5523=IKcos(j0);
IkReal x5524=IKsin(j0);
IkReal x5525=(r00*sj5);
IkReal x5526=(sj4*sj5);
IkReal x5527=(r01*sj5);
IkReal x5528=(r10*sj5);
IkReal x5529=(r12*x5524);
IkReal x5530=((1.0)*x5523);
IkReal x5531=(cj5*x5524);
IkReal x5532=(r11*x5524);
IkReal x5533=(cj5*x5523);
evalcond[0]=((-1.0)+((x5523*x5525))+((r01*x5533))+((r11*x5531))+((x5524*x5528)));
evalcond[1]=((((-1.0)*x5528*x5530))+((r01*x5531))+((x5524*x5525))+(((-1.0)*cj5*r11*x5530)));
evalcond[2]=(((r10*sj4*x5531))+((cj4*r02*x5523))+(((-1.0)*r01*x5526*x5530))+((r00*sj4*x5533))+(((-1.0)*x5526*x5532))+((cj4*x5529)));
evalcond[3]=((((-1.0)*cj4*sj5*x5532))+(((-1.0)*r02*sj4*x5530))+((cj4*r10*x5531))+(((-1.0)*cj4*x5527*x5530))+(((-1.0)*sj4*x5529))+((cj4*r00*x5533)));
evalcond[4]=((((-1.0)*py*x5524))+(((3.5e-7)*r00*x5533))+(((-0.0008)*r01*x5533))+(((3.5e-7)*r10*x5531))+(((-0.0008)*x5523*x5525))+(((-0.0008)*x5524*x5528))+(((-0.0008)*r11*x5531))+(((-1.0)*px*x5530))+(((-3.5e-7)*sj5*x5532))+(((-3.5e-7)*x5523*x5527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
CheckValue<IkReal> x5577=IKPowWithIntegerCheck(r20,-1);
if(!x5577.valid){
continue;
}
IkReal x5534=x5577.value;
IkReal x5535=r21*r21;
IkReal x5536=((300000000.0)*pz);
IkReal x5537=(cj0*py);
IkReal x5538=(r22*sj4);
IkReal x5539=(cj4*r22);
IkReal x5540=(sj0*sj5);
IkReal x5541=(cj5*r20);
IkReal x5542=((1.93020072)*sj4);
IkReal x5543=((4.2e-6)*cj0);
IkReal x5544=(r11*sj5);
IkReal x5545=((48255018.0)*cj4);
IkReal x5546=(cj5*r10);
IkReal x5547=((1.4e-6)*cj0);
IkReal x5548=(px*sj0);
IkReal x5549=((0.09399944)*cj4);
IkReal x5550=(r21*sj5);
IkReal x5551=((16085006.0)*cj4);
IkReal x5552=((0.28199832)*cj4);
IkReal x5553=((0.0032)*cj0);
IkReal x5554=(cj5*r11);
IkReal x5555=(r10*sj5);
IkReal x5556=((0.0096)*cj0);
IkReal x5557=((0.28199832)*x5538);
IkReal x5558=((12.0)*x5548);
IkReal x5559=((48255018.0)*x5538);
IkReal x5560=((7049958.0)*x5539);
IkReal x5561=(sj4*x5550);
IkReal x5562=(cj5*r01*sj0);
IkReal x5563=(cj5*r00*sj0);
IkReal x5564=(x5542*x5550);
IkReal x5565=((0.0096)*r00*x5540);
IkReal x5566=(x5543*x5546);
IkReal x5567=((4.2e-6)*r01*x5540);
IkReal x5568=(x5550*x5552);
IkReal x5569=((0.0096)*x5562);
IkReal x5570=((7049958.0)*sj4*x5541);
IkReal x5571=(x5545*x5550);
IkReal x5572=(cj5*x5534*x5535);
IkReal x5573=(((x5541*x5545))+(((105.0)*x5572))+(((7049958.0)*x5561))+(((105.0)*x5541)));
IkReal x5574=(x5536+x5560+x5571+x5570+x5559);
IkReal x5575=(((x5554*x5556))+((x5543*x5544))+((x5555*x5556))+((x5541*x5542))+(((12.0)*x5537))+((x5541*x5552))+(((4.2e-6)*x5563))+(((1.93020072)*x5539)));
IkReal x5576=(x5568+x5569+x5564+x5565+x5566+x5567+x5557+x5558);
j1eval[0]=((5.12002464)+(IKabs(((3.08e-6)+x5576+(((-1.0)*x5575)))))+(((4.0e-8)*(IKabs(((16000000.0)+(((2349986.0)*sj4*x5541))+(((-1.0)*x5541*x5551))+(((-35.0)*x5541))+(((100000000.0)*pz))+(((-35.0)*x5572))+(((2349986.0)*x5539))+(((16085006.0)*x5538))+((x5550*x5551))+(((-2349986.0)*x5561)))))))+(IKabs(((-3.08e-6)+x5576+(((-1.0)*x5575)))))+(((4.0e-8)*(IKabs(((-16000000.0)+x5574+(((-1.0)*x5573)))))))+(((4.0e-8)*(IKabs(((16000000.0)+x5574+(((-1.0)*x5573)))))))+(IKabs(((-3.08e-6)+(((-1.4e-6)*x5563))+(((0.0032)*x5562))+(((0.09399944)*x5538))+(((-1.0)*x5541*x5549))+(((-1.0)*x5553*x5555))+(((-1.0)*x5553*x5554))+(((-4.0)*x5537))+(((-1.0)*x5544*x5547))+(((-0.64340024)*sj4*x5541))+((x5549*x5550))+(((4.0)*x5548))+(((0.0032)*r00*x5540))+((x5546*x5547))+(((0.64340024)*x5561))+(((-0.64340024)*x5539))+(((1.4e-6)*r01*x5540))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5578=r20*r20;
CheckValue<IkReal> x5613=IKPowWithIntegerCheck(r20,-1);
if(!x5613.valid){
continue;
}
IkReal x5579=x5613.value;
IkReal x5580=((16000000.0)*r20);
IkReal x5581=r21*r21;
IkReal x5582=((48255018.0)*cj4);
IkReal x5583=(r20*sj4);
IkReal x5584=(r21*sj5);
IkReal x5585=((4.0e-8)*x5579);
IkReal x5586=((16085006.0)*cj4);
IkReal x5587=(pz*r20);
IkReal x5588=((300000000.0)*x5587);
IkReal x5589=((100000000.0)*x5587);
IkReal x5590=(cj5*x5578);
IkReal x5591=(cj4*r20*r22);
IkReal x5592=(cj5*x5581);
IkReal x5593=((48255018.0)*r22*x5583);
IkReal x5594=((7049958.0)*x5591);
IkReal x5595=((105.0)*x5592);
IkReal x5596=((105.0)*x5590);
IkReal x5597=((16085006.0)*r22*x5583);
IkReal x5598=((2349986.0)*x5591);
IkReal x5599=((35.0)*x5592);
IkReal x5600=((35.0)*x5590);
IkReal x5601=(r20*x5582*x5584);
IkReal x5602=((7049958.0)*sj4*x5590);
IkReal x5603=(x5582*x5590);
IkReal x5604=((7049958.0)*x5583*x5584);
IkReal x5605=((2349986.0)*sj4*x5590);
IkReal x5606=(r20*x5584*x5586);
IkReal x5607=((2349986.0)*x5583*x5584);
IkReal x5608=(x5586*x5590);
IkReal x5609=(x5604+x5603+x5595+x5596);
IkReal x5610=(x5607+x5600+x5608+x5599);
IkReal x5611=(x5605+x5606+x5589+x5597+x5598);
IkReal x5612=(x5601+x5602+x5588+x5593+x5594);
op[0]=(x5585*((x5611+x5580+(((-1.0)*x5610)))));
op[1]=-6.16e-6;
op[2]=(x5585*((x5612+x5580+(((-1.0)*x5609)))));
op[3]=-1.232e-5;
op[4]=(x5585*((x5612+(((-1.0)*x5580))+(((-1.0)*x5609)))));
op[5]=-6.16e-6;
op[6]=(x5585*((x5611+(((-1.0)*x5580))+(((-1.0)*x5610)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x5614=(r22*sj4);
IkReal x5615=(cj4*r22);
IkReal x5616=(sj0*sj5);
IkReal x5617=(cj0*py);
IkReal x5618=(cj0*sj5);
IkReal x5619=(px*sj0);
IkReal x5620=((0.09399944)*cj4);
IkReal x5621=(cj5*r20);
IkReal x5622=(r21*sj5);
IkReal x5623=(cj5*sj0);
IkReal x5624=((0.28199832)*cj4);
IkReal x5625=((0.28199832)*x5614);
IkReal x5626=((12.0)*x5619);
IkReal x5627=((0.09399944)*x5614);
IkReal x5628=((4.0)*x5619);
IkReal x5629=((4.0)*x5617);
IkReal x5630=((0.64340024)*x5615);
IkReal x5631=(sj4*x5621);
IkReal x5632=(cj0*cj5*r10);
IkReal x5633=(cj0*cj5*r11);
IkReal x5634=((1.93020072)*sj4*x5622);
IkReal x5635=((0.0096)*r00*x5616);
IkReal x5636=((4.2e-6)*x5632);
IkReal x5637=((4.2e-6)*r01*x5616);
IkReal x5638=(x5622*x5624);
IkReal x5639=((0.0096)*r01*x5623);
IkReal x5640=((1.4e-6)*r01*x5616);
IkReal x5641=((0.0032)*r01*x5623);
IkReal x5642=((0.0032)*r00*x5616);
IkReal x5643=((1.4e-6)*x5632);
IkReal x5644=((0.64340024)*sj4*x5622);
IkReal x5645=(x5620*x5622);
IkReal x5646=((0.0032)*r10*x5618);
IkReal x5647=((1.4e-6)*r00*x5623);
IkReal x5648=((0.64340024)*x5631);
IkReal x5649=((0.0032)*x5633);
IkReal x5650=(x5620*x5621);
IkReal x5651=((1.4e-6)*r11*x5618);
IkReal x5652=((((4.2e-6)*r00*x5623))+(((12.0)*x5617))+(((1.93020072)*x5631))+(((4.2e-6)*r11*x5618))+((x5621*x5624))+(((0.0096)*r10*x5618))+(((0.0096)*x5633))+(((1.93020072)*x5615)));
IkReal x5653=(x5626+x5625+x5638+x5639+x5634+x5635+x5636+x5637);
IkReal x5654=(x5641+x5640+x5643+x5642+x5645+x5644+x5628+x5627);
IkReal x5655=(x5650+x5651+x5649+x5648+x5647+x5646+x5629+x5630);
j1evalpoly[0]=((3.08e-6)+x5654+(((-1.28)*htj1))+(((htj1*htj1*htj1*htj1)*(((-3.08e-6)+x5653+(((-1.0)*x5652))))))+(((-2.56)*(htj1*htj1*htj1)))+(((-1.0)*x5655))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-3.08e-6)+x5654+(((-1.0)*x5655))))))+(((htj1*htj1)*(((3.08e-6)+x5653+(((-1.0)*x5652))))))+(((-1.28)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5656=((1.0)*cj4);
IkReal x5657=(r22*sj1);
IkReal x5658=((1.0)*sj4);
IkReal x5659=(cj1*r22);
IkReal x5660=(cj1*r21*sj5);
IkReal x5661=(cj5*r20*sj1);
IkReal x5662=(r21*sj1*sj5);
IkReal x5663=(cj1*cj5*r20);
if( IKabs(((((-1.0)*x5656*x5660))+((cj4*x5657))+((cj4*x5663))+((sj4*x5661))+(((-1.0)*x5658*x5659))+(((-1.0)*x5658*x5662)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5656*x5662))+((cj4*x5661))+(((-1.0)*x5656*x5659))+(((-1.0)*x5657*x5658))+((sj4*x5660))+(((-1.0)*x5658*x5663)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5656*x5660))+((cj4*x5657))+((cj4*x5663))+((sj4*x5661))+(((-1.0)*x5658*x5659))+(((-1.0)*x5658*x5662))))+IKsqr(((((-1.0)*x5656*x5662))+((cj4*x5661))+(((-1.0)*x5656*x5659))+(((-1.0)*x5657*x5658))+((sj4*x5660))+(((-1.0)*x5658*x5663))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5656*x5660))+((cj4*x5657))+((cj4*x5663))+((sj4*x5661))+(((-1.0)*x5658*x5659))+(((-1.0)*x5658*x5662))), ((((-1.0)*x5656*x5662))+((cj4*x5661))+(((-1.0)*x5656*x5659))+(((-1.0)*x5657*x5658))+((sj4*x5660))+(((-1.0)*x5658*x5663))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5664=IKcos(j2);
IkReal x5665=IKsin(j2);
IkReal x5666=((3.5e-7)*cj5);
IkReal x5667=(sj0*sj5);
IkReal x5668=(cj0*cj5);
IkReal x5669=((1.0)*cj4);
IkReal x5670=((1.0)*sj4);
IkReal x5671=(cj0*sj4);
IkReal x5672=(cj0*r10);
IkReal x5673=(r11*sj5);
IkReal x5674=((0.02349986)*sj1);
IkReal x5675=(cj4*sj0);
IkReal x5676=(cj5*r00);
IkReal x5677=(cj5*r20);
IkReal x5678=(r21*sj5);
IkReal x5679=(cj1*x5664);
IkReal x5680=(cj1*x5665);
IkReal x5681=(sj1*x5664);
IkReal x5682=(sj1*x5665);
IkReal x5683=((1.0)*x5682);
evalcond[0]=(x5679+(((-1.0)*x5670*x5678))+((cj4*r22))+(((-1.0)*x5683))+((sj4*x5677)));
evalcond[1]=((((-1.0)*r22*x5670))+(((-1.0)*x5669*x5678))+(((-1.0)*x5681))+(((-1.0)*x5680))+((cj4*x5677)));
evalcond[2]=(x5681+x5680+((r02*x5675))+(((-1.0)*cj0*r12*x5669))+(((-1.0)*r01*x5667*x5670))+((x5671*x5673))+(((-1.0)*r10*x5668*x5670))+((sj0*sj4*x5676)));
evalcond[3]=(((cj0*cj4*x5673))+x5679+(((-1.0)*x5683))+((x5675*x5676))+(((-1.0)*r10*x5668*x5669))+((r12*x5671))+(((-1.0)*r01*x5667*x5669))+(((-1.0)*r02*sj0*x5670)));
CheckValue<IkReal> x5684=IKPowWithIntegerCheck(r20,-1);
if(!x5684.valid){
continue;
}
evalcond[4]=((((0.16085006)*x5680))+(((0.16085006)*x5681))+(((0.16)*cj1))+(((0.02349986)*x5679))+((x5666*(x5684.value)*(r21*r21)))+(((-1.0)*pz))+((r20*x5666))+(((-1.0)*x5665*x5674))+(((7.7e-7)*sj1)));
evalcond[5]=((((-0.16085006)*x5679))+(((0.16085006)*x5682))+(((0.0008)*r11*x5668))+(((-1.0)*x5666*x5672))+(((-0.0008)*r00*x5667))+(((-3.5e-7)*r01*x5667))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.0008)*sj5*x5672))+(((0.02349986)*x5680))+(((-0.0008)*cj5*r01*sj0))+((x5664*x5674))+((r00*sj0*x5666))+(((-1.0)*px*sj0))+((cj0*py))+(((3.5e-7)*cj0*x5673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5685=(cj5*sj4);
IkReal x5686=(sj4*sj5);
IkReal x5687=((1.0)*cj4);
CheckValue<IkReal> x5688 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x5686))+((r00*x5685))+((cj4*r02)))),IkReal(((((-1.0)*r10*x5685))+((r11*x5686))+(((-1.0)*r12*x5687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5688.valid){
continue;
}
CheckValue<IkReal> x5689=IKPowWithIntegerCheck(IKsign((((cj4*r21*sj5))+((r22*sj4))+(((-1.0)*cj5*r20*x5687)))),-1);
if(!x5689.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5688.value)+(((1.5707963267949)*(x5689.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x5690=IKcos(j0);
IkReal x5691=IKsin(j0);
IkReal x5692=(r00*sj5);
IkReal x5693=(sj4*sj5);
IkReal x5694=(r01*sj5);
IkReal x5695=(r10*sj5);
IkReal x5696=(r12*x5691);
IkReal x5697=((1.0)*x5690);
IkReal x5698=(cj5*x5691);
IkReal x5699=(r11*x5691);
IkReal x5700=(cj5*x5690);
evalcond[0]=((-1.0)+((x5690*x5692))+((x5691*x5695))+((r01*x5700))+((r11*x5698)));
evalcond[1]=((((-1.0)*cj5*r11*x5697))+((x5691*x5692))+(((-1.0)*x5695*x5697))+((r01*x5698)));
evalcond[2]=(((r00*sj4*x5700))+((r10*sj4*x5698))+(((-1.0)*x5693*x5699))+((cj4*x5696))+(((-1.0)*r01*x5693*x5697))+((cj4*r02*x5690)));
evalcond[3]=((((-1.0)*r02*sj4*x5697))+(((-1.0)*cj4*sj5*x5699))+(((-1.0)*sj4*x5696))+((cj4*r00*x5700))+(((-1.0)*cj4*x5694*x5697))+((cj4*r10*x5698)));
evalcond[4]=((((-0.0008)*r01*x5700))+(((3.5e-7)*r10*x5698))+(((-3.5e-7)*sj5*x5699))+(((-1.0)*px*x5697))+(((-0.0008)*x5690*x5692))+(((-0.0008)*x5691*x5695))+(((-3.5e-7)*x5690*x5694))+(((-1.0)*py*x5691))+(((3.5e-7)*r00*x5700))+(((-0.0008)*r11*x5698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
CheckValue<IkReal> x5744=IKPowWithIntegerCheck(r20,-1);
if(!x5744.valid){
continue;
}
IkReal x5701=x5744.value;
IkReal x5702=r21*r21;
IkReal x5703=((300000000.0)*pz);
IkReal x5704=(cj0*py);
IkReal x5705=(r22*sj4);
IkReal x5706=(cj4*r22);
IkReal x5707=(sj0*sj5);
IkReal x5708=(cj5*r20);
IkReal x5709=((1.93020072)*sj4);
IkReal x5710=((4.2e-6)*cj0);
IkReal x5711=(r11*sj5);
IkReal x5712=((48255018.0)*cj4);
IkReal x5713=(cj5*r10);
IkReal x5714=((1.4e-6)*cj0);
IkReal x5715=(px*sj0);
IkReal x5716=((0.09399944)*cj4);
IkReal x5717=(r21*sj5);
IkReal x5718=((16085006.0)*cj4);
IkReal x5719=((0.28199832)*cj4);
IkReal x5720=((0.0032)*cj0);
IkReal x5721=(cj5*r11);
IkReal x5722=(r10*sj5);
IkReal x5723=((0.0096)*cj0);
IkReal x5724=((0.28199832)*x5705);
IkReal x5725=((12.0)*x5715);
IkReal x5726=((48255018.0)*x5705);
IkReal x5727=((7049958.0)*x5706);
IkReal x5728=(sj4*x5717);
IkReal x5729=(cj5*r01*sj0);
IkReal x5730=(cj5*r00*sj0);
IkReal x5731=(x5709*x5717);
IkReal x5732=((0.0096)*r00*x5707);
IkReal x5733=(x5710*x5713);
IkReal x5734=((4.2e-6)*r01*x5707);
IkReal x5735=(x5717*x5719);
IkReal x5736=((0.0096)*x5729);
IkReal x5737=((7049958.0)*sj4*x5708);
IkReal x5738=(x5712*x5717);
IkReal x5739=(cj5*x5701*x5702);
IkReal x5740=((((105.0)*x5708))+(((7049958.0)*x5728))+(((105.0)*x5739))+((x5708*x5712)));
IkReal x5741=(x5726+x5727+x5737+x5738+x5703);
IkReal x5742=(((x5721*x5723))+(((1.93020072)*x5706))+((x5708*x5709))+(((12.0)*x5704))+((x5710*x5711))+(((4.2e-6)*x5730))+((x5722*x5723))+((x5708*x5719)));
IkReal x5743=(x5724+x5725+x5735+x5734+x5736+x5731+x5733+x5732);
j1eval[0]=((5.12002464)+(IKabs(((-3.08e-6)+(((1.4e-6)*r01*x5707))+(((-1.0)*x5708*x5716))+(((-0.64340024)*sj4*x5708))+((x5716*x5717))+(((-1.4e-6)*x5730))+(((0.0032)*x5729))+(((-1.0)*x5711*x5714))+(((-0.64340024)*x5706))+(((4.0)*x5715))+(((-4.0)*x5704))+(((-1.0)*x5720*x5722))+(((-1.0)*x5720*x5721))+(((0.64340024)*x5728))+(((0.09399944)*x5705))+((x5713*x5714))+(((0.0032)*r00*x5707)))))+(((4.0e-8)*(IKabs(((16000000.0)+(((2349986.0)*sj4*x5708))+(((-1.0)*x5708*x5718))+(((-35.0)*x5708))+(((-2349986.0)*x5728))+(((2349986.0)*x5706))+(((100000000.0)*pz))+(((16085006.0)*x5705))+(((-35.0)*x5739))+((x5717*x5718)))))))+(IKabs(((-3.08e-6)+(((-1.0)*x5742))+x5743)))+(((4.0e-8)*(IKabs(((-16000000.0)+(((-1.0)*x5740))+x5741)))))+(((4.0e-8)*(IKabs(((16000000.0)+(((-1.0)*x5740))+x5741)))))+(IKabs(((3.08e-6)+(((-1.0)*x5742))+x5743))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5745=r20*r20;
CheckValue<IkReal> x5780=IKPowWithIntegerCheck(r20,-1);
if(!x5780.valid){
continue;
}
IkReal x5746=x5780.value;
IkReal x5747=((16000000.0)*r20);
IkReal x5748=r21*r21;
IkReal x5749=((48255018.0)*cj4);
IkReal x5750=(r20*sj4);
IkReal x5751=(r21*sj5);
IkReal x5752=((4.0e-8)*x5746);
IkReal x5753=((16085006.0)*cj4);
IkReal x5754=(pz*r20);
IkReal x5755=((300000000.0)*x5754);
IkReal x5756=((100000000.0)*x5754);
IkReal x5757=(cj5*x5745);
IkReal x5758=(cj4*r20*r22);
IkReal x5759=(cj5*x5748);
IkReal x5760=((48255018.0)*r22*x5750);
IkReal x5761=((7049958.0)*x5758);
IkReal x5762=((105.0)*x5759);
IkReal x5763=((105.0)*x5757);
IkReal x5764=((16085006.0)*r22*x5750);
IkReal x5765=((2349986.0)*x5758);
IkReal x5766=((35.0)*x5759);
IkReal x5767=((35.0)*x5757);
IkReal x5768=(r20*x5749*x5751);
IkReal x5769=((7049958.0)*sj4*x5757);
IkReal x5770=(x5749*x5757);
IkReal x5771=((7049958.0)*x5750*x5751);
IkReal x5772=((2349986.0)*sj4*x5757);
IkReal x5773=(r20*x5751*x5753);
IkReal x5774=((2349986.0)*x5750*x5751);
IkReal x5775=(x5753*x5757);
IkReal x5776=(x5762+x5763+x5771+x5770);
IkReal x5777=(x5766+x5767+x5775+x5774);
IkReal x5778=(x5756+x5764+x5765+x5773+x5772);
IkReal x5779=(x5755+x5768+x5769+x5760+x5761);
op[0]=(x5752*(((((-1.0)*x5777))+x5747+x5778)));
op[1]=-6.16e-6;
op[2]=(x5752*(((((-1.0)*x5776))+x5747+x5779)));
op[3]=-1.232e-5;
op[4]=(x5752*(((((-1.0)*x5747))+(((-1.0)*x5776))+x5779)));
op[5]=-6.16e-6;
op[6]=(x5752*(((((-1.0)*x5747))+(((-1.0)*x5777))+x5778)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x5781=(r22*sj4);
IkReal x5782=(cj4*r22);
IkReal x5783=(sj0*sj5);
IkReal x5784=(cj0*py);
IkReal x5785=(cj0*sj5);
IkReal x5786=(px*sj0);
IkReal x5787=((0.09399944)*cj4);
IkReal x5788=(cj5*r20);
IkReal x5789=(r21*sj5);
IkReal x5790=(cj5*sj0);
IkReal x5791=((0.28199832)*cj4);
IkReal x5792=((0.28199832)*x5781);
IkReal x5793=((12.0)*x5786);
IkReal x5794=((0.09399944)*x5781);
IkReal x5795=((4.0)*x5786);
IkReal x5796=((4.0)*x5784);
IkReal x5797=((0.64340024)*x5782);
IkReal x5798=(sj4*x5788);
IkReal x5799=(cj0*cj5*r10);
IkReal x5800=(cj0*cj5*r11);
IkReal x5801=((1.93020072)*sj4*x5789);
IkReal x5802=((0.0096)*r00*x5783);
IkReal x5803=((4.2e-6)*x5799);
IkReal x5804=((4.2e-6)*r01*x5783);
IkReal x5805=(x5789*x5791);
IkReal x5806=((0.0096)*r01*x5790);
IkReal x5807=((1.4e-6)*r01*x5783);
IkReal x5808=((0.0032)*r01*x5790);
IkReal x5809=((0.0032)*r00*x5783);
IkReal x5810=((1.4e-6)*x5799);
IkReal x5811=((0.64340024)*sj4*x5789);
IkReal x5812=(x5787*x5789);
IkReal x5813=((0.0032)*r10*x5785);
IkReal x5814=((1.4e-6)*r00*x5790);
IkReal x5815=((0.64340024)*x5798);
IkReal x5816=((0.0032)*x5800);
IkReal x5817=(x5787*x5788);
IkReal x5818=((1.4e-6)*r11*x5785);
IkReal x5819=((((12.0)*x5784))+((x5788*x5791))+(((4.2e-6)*r00*x5790))+(((0.0096)*x5800))+(((4.2e-6)*r11*x5785))+(((0.0096)*r10*x5785))+(((1.93020072)*x5782))+(((1.93020072)*x5798)));
IkReal x5820=(x5803+x5802+x5801+x5806+x5805+x5804+x5793+x5792);
IkReal x5821=(x5809+x5808+x5807+x5810+x5811+x5812+x5795+x5794);
IkReal x5822=(x5818+x5813+x5814+x5815+x5816+x5817+x5797+x5796);
j1evalpoly[0]=((3.08e-6)+(((-1.0)*x5822))+(((-1.28)*htj1))+(((htj1*htj1)*(((3.08e-6)+(((-1.0)*x5819))+x5820))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-3.08e-6)+(((-1.0)*x5822))+x5821))))+(((-2.56)*(htj1*htj1*htj1)))+(((-1.28)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((-3.08e-6)+(((-1.0)*x5819))+x5820))))+x5821);
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5823=((1.0)*cj4);
IkReal x5824=(r22*sj1);
IkReal x5825=((1.0)*sj4);
IkReal x5826=(cj1*r22);
IkReal x5827=(cj1*r21*sj5);
IkReal x5828=(cj5*r20*sj1);
IkReal x5829=(r21*sj1*sj5);
IkReal x5830=(cj1*cj5*r20);
if( IKabs(((((-1.0)*x5823*x5827))+((sj4*x5828))+(((-1.0)*x5825*x5829))+(((-1.0)*x5825*x5826))+((cj4*x5824))+((cj4*x5830)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5823*x5829))+(((-1.0)*x5823*x5826))+((sj4*x5827))+(((-1.0)*x5824*x5825))+((cj4*x5828))+(((-1.0)*x5825*x5830)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5823*x5827))+((sj4*x5828))+(((-1.0)*x5825*x5829))+(((-1.0)*x5825*x5826))+((cj4*x5824))+((cj4*x5830))))+IKsqr(((((-1.0)*x5823*x5829))+(((-1.0)*x5823*x5826))+((sj4*x5827))+(((-1.0)*x5824*x5825))+((cj4*x5828))+(((-1.0)*x5825*x5830))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5823*x5827))+((sj4*x5828))+(((-1.0)*x5825*x5829))+(((-1.0)*x5825*x5826))+((cj4*x5824))+((cj4*x5830))), ((((-1.0)*x5823*x5829))+(((-1.0)*x5823*x5826))+((sj4*x5827))+(((-1.0)*x5824*x5825))+((cj4*x5828))+(((-1.0)*x5825*x5830))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5831=IKcos(j2);
IkReal x5832=IKsin(j2);
IkReal x5833=((3.5e-7)*cj5);
IkReal x5834=(sj0*sj5);
IkReal x5835=(cj0*cj5);
IkReal x5836=((1.0)*cj4);
IkReal x5837=((1.0)*sj4);
IkReal x5838=(cj0*sj4);
IkReal x5839=(cj0*r10);
IkReal x5840=(r11*sj5);
IkReal x5841=((0.02349986)*sj1);
IkReal x5842=(cj4*sj0);
IkReal x5843=(cj5*r00);
IkReal x5844=(cj5*r20);
IkReal x5845=(r21*sj5);
IkReal x5846=(cj1*x5831);
IkReal x5847=(cj1*x5832);
IkReal x5848=(sj1*x5831);
IkReal x5849=(sj1*x5832);
IkReal x5850=((1.0)*x5849);
evalcond[0]=((((-1.0)*x5837*x5845))+((sj4*x5844))+((cj4*r22))+(((-1.0)*x5850))+x5846);
evalcond[1]=((((-1.0)*r22*x5837))+(((-1.0)*x5848))+(((-1.0)*x5847))+((cj4*x5844))+(((-1.0)*x5836*x5845)));
evalcond[2]=((((-1.0)*r01*x5834*x5837))+(((-1.0)*r10*x5835*x5837))+((r02*x5842))+(((-1.0)*cj0*r12*x5836))+((x5838*x5840))+x5847+x5848+((sj0*sj4*x5843)));
evalcond[3]=((((-1.0)*r02*sj0*x5837))+(((-1.0)*r01*x5834*x5836))+((x5842*x5843))+((r12*x5838))+(((-1.0)*x5850))+((cj0*cj4*x5840))+(((-1.0)*r10*x5835*x5836))+x5846);
CheckValue<IkReal> x5851=IKPowWithIntegerCheck(r20,-1);
if(!x5851.valid){
continue;
}
evalcond[4]=((((0.16)*cj1))+(((0.16085006)*x5847))+(((0.16085006)*x5848))+(((0.02349986)*x5846))+((r20*x5833))+(((-1.0)*pz))+(((7.7e-7)*sj1))+((x5833*(x5851.value)*(r21*r21)))+(((-1.0)*x5832*x5841)));
evalcond[5]=(((r00*sj0*x5833))+(((-0.0008)*r00*x5834))+(((-1.0)*x5833*x5839))+(((3.5e-7)*cj0*x5840))+(((-0.16085006)*x5846))+(((0.0008)*sj5*x5839))+((x5831*x5841))+(((0.16085006)*x5849))+(((0.02349986)*x5847))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.0008)*cj5*r01*sj0))+(((0.0008)*r11*x5835))+(((-1.0)*px*sj0))+((cj0*py))+(((-3.5e-7)*r01*x5834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[5];
IkReal x5852=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x5852);
rxp1_0=(pz*r11);
rxp1_1=(r01*x5852);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x5853=(cj4*r22);
j0eval[0]=x5853;
j0eval[1]=cj3;
j0eval[2]=cj4;
j0eval[3]=((cj5*cj5)+(sj5*sj5));
j0eval[4]=IKsign(x5853);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  || IKabs(j0eval[4]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x5854=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x5854);
rxp1_0=(pz*r11);
rxp1_1=(r01*x5854);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x5855=(r22*sj4);
IkReal x5856=cj5*cj5;
IkReal x5857=sj3*sj3;
IkReal x5858=cj3*cj3;
IkReal x5859=sj4*sj4;
IkReal x5860=sj5*sj5;
IkReal x5861=(x5858*x5859);
j0eval[0]=x5855;
j0eval[1]=IKsign(x5855);
j0eval[2]=(((x5860*x5861))+((x5856*x5857))+((x5856*x5861))+((x5857*x5860)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x5862=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x5862);
rxp1_0=(pz*r11);
rxp1_1=(r01*x5862);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x5863=((7.0)*cj3);
IkReal x5864=((20000000.0)*cj3);
IkReal x5865=(cj5*rxp1_2);
IkReal x5866=(rxp0_2*sj5);
IkReal x5867=((16000.0)*cj3*sj5);
IkReal x5868=((16000.0)*cj3*cj5);
j0eval[0]=((((-2857142.85714286)*x5866))+(((-2857142.85714286)*x5865))+(((-1.0)*r22)));
j0eval[1]=((IKabs(((((-1.0)*r01*sj5*x5863))+(((-1.0)*px*x5864))+((cj5*r00*x5863))+(((-1.0)*r00*x5867))+(((-1.0)*r01*x5868)))))+(IKabs((((py*x5864))+((r11*x5868))+(((-1.0)*cj5*r10*x5863))+((r10*x5867))+((r11*sj5*x5863))))));
j0eval[2]=IKsign(((((-1.0)*x5866))+(((-1.0)*x5865))+(((-3.5e-7)*r22))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5869=((((8163265306122.45)*(rxp0_2*rxp0_2)))+(((8163265306122.45)*(rxp1_2*rxp1_2))));
if((x5869) < -0.00001)
continue;
IkReal x5870=IKabs(IKsqrt(x5869));
IkReal x5877 = x5869;
if(IKabs(x5877)==0){
continue;
}
IkReal x5871=pow(x5877,-0.5);
IkReal x5872=((2857142.85714286)*x5871);
CheckValue<IkReal> x5878=IKPowWithIntegerCheck(x5870,-1);
if(!x5878.valid){
continue;
}
IkReal x5873=x5878.value;
IkReal x5874=(r22*x5873);
if((((1.0)+(((-1.0)*(x5874*x5874))))) < -0.00001)
continue;
IkReal x5875=IKsqrt(((1.0)+(((-1.0)*(x5874*x5874)))));
IkReal x5876=(x5872*x5875);
CheckValue<IkReal> x5879 = IKatan2WithCheck(IkReal(((-2857142.85714286)*rxp1_2)),IkReal(((-2857142.85714286)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x5879.valid){
continue;
}
if( (x5874) < -1-IKFAST_SINCOS_THRESH || (x5874) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst196=((((-1.0)*(x5879.value)))+(IKasin(x5874)));
IkReal gconst197=((((-1.0)*rxp0_2*x5872*x5874))+((rxp1_2*x5876)));
IkReal gconst198=((((-1.0)*rxp1_2*x5872*x5874))+(((-1.0)*rxp0_2*x5876)));
if((((((8163265306122.45)*(rxp0_2*rxp0_2)))+(((8163265306122.45)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x5880=IKPowWithIntegerCheck(IKabs(IKsqrt(((((8163265306122.45)*(rxp0_2*rxp0_2)))+(((8163265306122.45)*(rxp1_2*rxp1_2)))))),-1);
if(!x5880.valid){
continue;
}
if( ((r22*(x5880.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x5880.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x5881 = IKatan2WithCheck(IkReal(((-2857142.85714286)*rxp1_2)),IkReal(((-2857142.85714286)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x5881.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin((r22*(x5880.value))))))+j5+(x5881.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5882=((1.0)*cj4);
IkReal x5883=(cj3*gconst198);
IkReal x5884=(cj3*gconst197);
CheckValue<IkReal> x5885=IKPowWithIntegerCheck(IKsign((r22*(((((-1.0)*x5882*(gconst198*gconst198)))+(((-1.0)*x5882*(gconst197*gconst197))))))),-1);
if(!x5885.valid){
continue;
}
CheckValue<IkReal> x5886 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x5882*x5884))+((cj4*r00*x5883)))),IkReal(((((-1.0)*r10*x5882*x5883))+((cj4*r11*x5884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5886.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5885.value)))+(x5886.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5887=IKsin(j0);
IkReal x5888=IKcos(j0);
IkReal x5889=(gconst197*r01);
IkReal x5890=(gconst198*r00);
IkReal x5891=((1.0)*r11);
IkReal x5892=((1.0)*x5888);
IkReal x5893=((3.5e-7)*x5888);
IkReal x5894=(gconst197*x5887);
IkReal x5895=(gconst198*r10*x5887);
IkReal x5896=(gconst198*r11*x5887);
IkReal x5897=(gconst198*r01*x5888);
IkReal x5898=(gconst197*r00*x5888);
evalcond[0]=(cj3+((r10*x5894))+x5896+x5897+x5898);
evalcond[1]=((((-1.0)*cj4*x5889*x5892))+((cj4*x5895))+((cj4*x5888*x5890))+(((-1.0)*cj4*x5891*x5894)));
evalcond[2]=((((-1.0)*sj3))+((sj4*x5895))+((sj4*x5888*x5890))+(((-1.0)*sj4*x5889*x5892))+(((-1.0)*sj4*x5891*x5894)));
evalcond[3]=((((-1.0)*x5889*x5893))+(((-1.0)*px*x5892))+((x5890*x5893))+(((-0.0008)*r10*x5894))+(((-1.0)*py*x5887))+(((-3.5e-7)*r11*x5894))+(((3.5e-7)*x5895))+(((-0.0008)*x5898))+(((-0.0008)*x5897))+(((-0.0008)*x5896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x5899=((-1.0)*pz);
IkReal x5900=x5869;
if((x5900) < -0.00001)
continue;
IkReal x5901=IKabs(IKsqrt(x5900));
IkReal x5909 = x5900;
if(IKabs(x5909)==0){
continue;
}
IkReal x5902=pow(x5909,-0.5);
CheckValue<IkReal> x5910=IKPowWithIntegerCheck(x5901,-1);
if(!x5910.valid){
continue;
}
IkReal x5903=x5910.value;
IkReal x5904=((2857142.85714286)*rxp1_2*x5902);
IkReal x5905=(r22*x5903);
IkReal x5906=((2857142.85714286)*rxp0_2*x5902);
if((((1.0)+(((-1.0)*(x5905*x5905))))) < -0.00001)
continue;
IkReal x5907=IKsqrt(((1.0)+(((-1.0)*(x5905*x5905)))));
if( (x5905) < -1-IKFAST_SINCOS_THRESH || (x5905) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x5911 = IKatan2WithCheck(IkReal(((-2857142.85714286)*rxp1_2)),IkReal(((-2857142.85714286)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x5911.valid){
continue;
}
IkReal x5908=((IKasin(x5905))+(((-1.0)*(x5911.value))));
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x5899);
rxp1_0=(pz*r11);
rxp1_1=(r01*x5899);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj5=gconst197;
cj5=gconst198;
j5=x5908;
IkReal gconst196=x5908;
IkReal gconst197=((((-1.0)*x5905*x5906))+((x5904*x5907)));
IkReal gconst198=((((-1.0)*x5904*x5905))+(((-1.0)*x5906*x5907)));
IkReal x5912=cj3*cj3;
IkReal x5913=((0.64)*cj3);
IkReal x5914=(cj0*r11);
IkReal x5915=(r01*sj0);
IkReal x5916=(cj0*r10);
IkReal x5917=(r00*sj0);
IkReal x5918=(cj3*sj4);
IkReal x5919=((1.93020072)*gconst197);
IkReal x5920=(cj3*pz);
IkReal x5921=((0.28199832)*cj4*r22);
IkReal x5922=((12.0)*x5920);
IkReal x5923=((0.64)*x5912);
IkReal x5924=(pz*x5912);
IkReal x5925=(gconst198*x5918);
IkReal x5926=((0.09399944)*cj4*r22);
IkReal x5927=((1.93020072)*r22*x5918);
IkReal x5928=((12.0)*x5924);
IkReal x5929=(cj3*x5921);
IkReal x5930=((0.64340024)*gconst197*x5918);
IkReal x5931=((1.93020072)*x5916*x5925);
IkReal x5932=(x5915*x5918*x5919);
IkReal x5933=(x5914*x5918*x5919);
IkReal x5934=((1.93020072)*x5917*x5925);
IkReal x5935=(x5927+x5922);
IkReal x5936=(x5928+x5932+x5931);
IkReal x5937=(x5929+x5934+x5933);
j1eval[0]=((((40584.4155844156)*(IKabs(((((-4.0)*x5920))+(((-0.64340024)*r22*x5918))+x5926+(((-1.0)*x5913)))))))+(((40584.4155844156)*(IKabs(((((-1.0)*x5937))+(((-1.0)*x5923))+x5936)))))+(((40584.4155844156)*(IKabs(((((4.0)*x5924))+(((-0.64340024)*x5917*x5925))+(((-1.0)*x5914*x5930))+(((-1.0)*cj3*x5926))+(((0.64340024)*x5916*x5925))+x5923+((x5915*x5930)))))))+(IKabs(cj3))+(((40584.4155844156)*(IKabs(((((-1.0)*x5935))+x5921+(((-1.0)*x5913)))))))+(IKabs(x5912))+(((40584.4155844156)*(IKabs(((((-1.0)*x5935))+x5913+x5921)))))+(((40584.4155844156)*(IKabs(((((-1.0)*x5937))+x5923+x5936))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5938=((0.64)*cj3);
IkReal x5939=((6.16e-6)*cj3);
IkReal x5940=(cj4*r22);
IkReal x5941=(cj3*pz);
IkReal x5942=((0.28199832)*x5940);
IkReal x5943=((12.0)*x5941);
IkReal x5944=((0.09399944)*x5940);
IkReal x5945=((4.0)*x5941);
IkReal x5946=(cj3*r22*sj4);
IkReal x5947=((1.93020072)*x5946);
IkReal x5948=((0.64340024)*x5946);
IkReal x5949=(x5945+x5948);
IkReal x5950=(x5947+x5943);
op[0]=((((-1.0)*x5949))+(((-1.0)*x5938))+x5944);
op[1]=x5939;
op[2]=((((-1.0)*x5938))+(((-1.0)*x5950))+x5942);
op[3]=((1.232e-5)*cj3);
op[4]=((((-1.0)*x5950))+x5942+x5938);
op[5]=x5939;
op[6]=((((-1.0)*x5949))+x5944+x5938);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x5951=cj3*cj3;
IkReal x5952=(cj3*sj4);
IkReal x5953=((1.93020072)*sj0);
IkReal x5954=(gconst198*r00);
IkReal x5955=((0.64340024)*gconst197);
IkReal x5956=(cj0*r11);
IkReal x5957=((0.64)*x5951);
IkReal x5958=((6.16e-6)*x5951);
IkReal x5959=(pz*x5951);
IkReal x5960=(cj0*gconst198*r10);
IkReal x5961=(cj3*cj4*r22);
IkReal x5962=((4.0)*x5959);
IkReal x5963=((12.0)*x5959);
IkReal x5964=((0.28199832)*x5961);
IkReal x5965=((0.09399944)*x5961);
IkReal x5966=((0.64340024)*x5952*x5960);
IkReal x5967=(r01*sj0*x5952*x5955);
IkReal x5968=((1.93020072)*x5952*x5960);
IkReal x5969=(gconst197*r01*x5952*x5953);
IkReal x5970=((1.93020072)*gconst197*x5952*x5956);
IkReal x5971=(x5952*x5953*x5954);
IkReal x5972=(x5952*x5955*x5956);
IkReal x5973=((0.64340024)*sj0*x5952*x5954);
IkReal x5974=(x5962+x5966+x5967);
IkReal x5975=(x5964+x5971+x5970);
IkReal x5976=(x5965+x5973+x5972);
IkReal x5977=(x5968+x5969+x5963);
j1evalpoly[0]=((((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x5976))+x5957+x5974))))+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x5975))+x5957+x5977))))+(((-1.0)*x5976))+(((-1.0)*x5958*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*htj1*x5958))+(((htj1*htj1)*(((((-1.0)*x5975))+(((-1.0)*x5957))+x5977))))+(((-1.0)*x5957))+(((-1.232e-5)*x5951*(htj1*htj1*htj1)))+x5974);
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5978=((-1.0)*r22*sj4);
if( IKabs((cj1*x5978)) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj1*x5978)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*x5978))+IKsqr((sj1*x5978))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*x5978), (sj1*x5978));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5979=IKcos(j2);
IkReal x5980=IKsin(j2);
IkReal x5981=(r00*sj0);
IkReal x5982=((3.5e-7)*gconst198);
IkReal x5983=((1.0)*sj0);
IkReal x5984=(gconst197*r01);
IkReal x5985=(cj0*r10);
IkReal x5986=((0.0008)*gconst197);
IkReal x5987=((1.0)*cj1);
IkReal x5988=((1.0)*gconst198);
IkReal x5989=((1.0)*sj3);
IkReal x5990=((1.0)*cj3);
IkReal x5991=(cj1*x5979);
IkReal x5992=(cj0*gconst198*r11);
IkReal x5993=(sj3*x5980);
IkReal x5994=(sj1*x5979);
IkReal x5995=(sj1*x5980);
IkReal x5996=(gconst198*r01*sj0);
IkReal x5997=(cj0*gconst197*r11);
IkReal x5998=(cj1*x5980);
evalcond[0]=(((sj1*x5993))+(((-1.0)*sj3*x5979*x5987)));
evalcond[1]=((((-1.0)*x5980*x5987))+(((-1.0)*x5994))+(((-1.0)*r22*sj4)));
evalcond[2]=(((cj4*r22))+(((-1.0)*cj3*x5979*x5987))+((cj3*x5995)));
evalcond[3]=((((-1.0)*x5987*x5993))+(((-1.0)*cj0*r11*x5988))+((gconst197*x5981))+(((-1.0)*gconst197*x5985))+(((-1.0)*x5989*x5994))+x5996);
evalcond[4]=((((0.16)*cj1))+(((0.16085006)*x5994))+(((0.16085006)*x5998))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.02349986)*x5991))+(((-0.02349986)*x5995)));
evalcond[5]=((((-1.0)*cj4*x5985*x5988))+(((-1.0)*x5995))+((cj4*gconst198*x5981))+x5991+((cj4*x5997))+(((-1.0)*cj4*x5983*x5984)));
evalcond[6]=((((-1.0)*sj4*x5985*x5988))+((gconst198*sj4*x5981))+((sj4*x5997))+(((-1.0)*sj4*x5983*x5984))+(((-1.0)*x5990*x5994))+(((-1.0)*cj3*x5980*x5987)));
evalcond[7]=(((x5985*x5986))+(((-3.5e-7)*sj0*x5984))+(((-0.16085006)*x5991))+(((-1.0)*px*x5983))+(((0.16085006)*x5995))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.02349986)*x5994))+(((0.02349986)*x5998))+(((3.5e-7)*x5997))+(((-0.0008)*x5996))+(((-1.0)*x5981*x5986))+((cj0*py))+((x5981*x5982))+(((-1.0)*x5982*x5985))+(((0.0008)*x5992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5999=((((8163265306122.45)*(rxp0_2*rxp0_2)))+(((8163265306122.45)*(rxp1_2*rxp1_2))));
IkReal x6007 = x5999;
if(IKabs(x6007)==0){
continue;
}
IkReal x6000=pow(x6007,-0.5);
if((x5999) < -0.00001)
continue;
IkReal x6001=IKabs(IKsqrt(x5999));
CheckValue<IkReal> x6008=IKPowWithIntegerCheck(x6001,-1);
if(!x6008.valid){
continue;
}
IkReal x6002=x6008.value;
IkReal x6003=((2857142.85714286)*rxp0_2*x6000);
IkReal x6004=(r22*x6002);
IkReal x6005=((2857142.85714286)*rxp1_2*x6000);
if((((1.0)+(((-1.0)*(x6004*x6004))))) < -0.00001)
continue;
IkReal x6006=IKsqrt(((1.0)+(((-1.0)*(x6004*x6004)))));
if( (x6004) < -1-IKFAST_SINCOS_THRESH || (x6004) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x6009 = IKatan2WithCheck(IkReal(((-2857142.85714286)*rxp1_2)),IkReal(((-2857142.85714286)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x6009.valid){
continue;
}
IkReal gconst199=((3.14159265358979)+(((-1.0)*(IKasin(x6004))))+(((-1.0)*(x6009.value))));
IkReal gconst200=((((-1.0)*x6005*x6006))+(((-1.0)*x6003*x6004)));
IkReal gconst201=((((-1.0)*x6004*x6005))+((x6003*x6006)));
if((((((8163265306122.45)*(rxp0_2*rxp0_2)))+(((8163265306122.45)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x6010=IKPowWithIntegerCheck(IKabs(IKsqrt(((((8163265306122.45)*(rxp0_2*rxp0_2)))+(((8163265306122.45)*(rxp1_2*rxp1_2)))))),-1);
if(!x6010.valid){
continue;
}
if( ((r22*(x6010.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x6010.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x6011 = IKatan2WithCheck(IkReal(((-2857142.85714286)*rxp1_2)),IkReal(((-2857142.85714286)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x6011.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin((r22*(x6010.value))))+j5+(x6011.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6012=(cj3*cj4);
IkReal x6013=((1.0)*cj4);
IkReal x6014=((1.0)*x6012);
CheckValue<IkReal> x6015=IKPowWithIntegerCheck(IKsign((r22*(((((-1.0)*x6013*(gconst201*gconst201)))+(((-1.0)*x6013*(gconst200*gconst200))))))),-1);
if(!x6015.valid){
continue;
}
CheckValue<IkReal> x6016 = IKatan2WithCheck(IkReal((((gconst201*r00*x6012))+(((-1.0)*gconst200*r01*x6014)))),IkReal(((((-1.0)*gconst201*r10*x6014))+((gconst200*r11*x6012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6016.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6015.value)))+(x6016.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6017=IKsin(j0);
IkReal x6018=IKcos(j0);
IkReal x6019=(gconst201*r00);
IkReal x6020=(gconst200*r01);
IkReal x6021=((1.0)*r11);
IkReal x6022=(cj4*x6018);
IkReal x6023=((1.0)*x6018);
IkReal x6024=(gconst200*x6017);
IkReal x6025=((3.5e-7)*x6018);
IkReal x6026=(gconst201*r10*x6017);
IkReal x6027=(gconst200*r00*x6018);
IkReal x6028=(gconst201*r01*x6018);
IkReal x6029=(gconst201*r11*x6017);
evalcond[0]=(cj3+x6028+x6029+x6027+((r10*x6024)));
evalcond[1]=(((cj4*x6026))+(((-1.0)*cj4*x6021*x6024))+((x6019*x6022))+(((-1.0)*x6020*x6022)));
evalcond[2]=((((-1.0)*sj3))+((sj4*x6018*x6019))+(((-1.0)*sj4*x6021*x6024))+(((-1.0)*sj4*x6020*x6023))+((sj4*x6026)));
evalcond[3]=((((3.5e-7)*x6026))+(((-3.5e-7)*r11*x6024))+(((-1.0)*py*x6017))+(((-1.0)*x6020*x6025))+(((-0.0008)*r10*x6024))+((x6019*x6025))+(((-0.0008)*x6029))+(((-0.0008)*x6028))+(((-0.0008)*x6027))+(((-1.0)*px*x6023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x6030=((-1.0)*pz);
IkReal x6031=x5999;
IkReal x6040 = x6031;
if(IKabs(x6040)==0){
continue;
}
IkReal x6032=pow(x6040,-0.5);
if((x6031) < -0.00001)
continue;
IkReal x6033=IKabs(IKsqrt(x6031));
CheckValue<IkReal> x6041=IKPowWithIntegerCheck(x6033,-1);
if(!x6041.valid){
continue;
}
IkReal x6034=x6041.value;
IkReal x6035=((2857142.85714286)*rxp1_2*x6032);
IkReal x6036=(r22*x6034);
IkReal x6037=((2857142.85714286)*rxp0_2*x6032);
if((((1.0)+(((-1.0)*(x6036*x6036))))) < -0.00001)
continue;
IkReal x6038=IKsqrt(((1.0)+(((-1.0)*(x6036*x6036)))));
CheckValue<IkReal> x6042 = IKatan2WithCheck(IkReal(((-2857142.85714286)*rxp1_2)),IkReal(((-2857142.85714286)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x6042.valid){
continue;
}
if( (x6036) < -1-IKFAST_SINCOS_THRESH || (x6036) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x6039=((((1.0)*(x6042.value)))+(((1.0)*(IKasin(x6036)))));
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6030);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6030);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj5=gconst200;
cj5=gconst201;
j5=((3.14159265)+(((-1.0)*x6039)));
IkReal gconst199=((3.14159265358979)+(((-1.0)*x6039)));
IkReal gconst200=((((-1.0)*x6035*x6038))+(((-1.0)*x6036*x6037)));
IkReal gconst201=((((-1.0)*x6035*x6036))+((x6037*x6038)));
IkReal x6043=cj3*cj3;
IkReal x6044=((0.64)*cj3);
IkReal x6045=(cj3*r22);
IkReal x6046=((0.64340024)*sj4);
IkReal x6047=(cj4*r22);
IkReal x6048=((1.93020072)*sj4);
IkReal x6049=(cj3*pz);
IkReal x6050=((0.64)*x6043);
IkReal x6051=((0.28199832)*x6047);
IkReal x6052=((12.0)*x6049);
IkReal x6053=(pz*x6043);
IkReal x6054=((12.0)*x6053);
IkReal x6055=((0.28199832)*cj4*x6045);
IkReal x6056=(x6045*x6048);
IkReal x6057=(cj3*gconst200*r01*sj0);
IkReal x6058=(cj3*gconst201*r00*sj0);
IkReal x6059=(cj0*cj3*gconst201*r10);
IkReal x6060=(cj0*cj3*gconst200*r11);
IkReal x6061=(x6048*x6057);
IkReal x6062=(x6048*x6059);
IkReal x6063=(x6048*x6060);
IkReal x6064=(x6048*x6058);
IkReal x6065=(x6056+x6052);
IkReal x6066=(x6054+x6061+x6062);
IkReal x6067=(x6055+x6064+x6063);
j1eval[0]=((((40584.4155844156)*(IKabs((x6051+(((-1.0)*x6044))+(((-1.0)*x6065)))))))+(IKabs(x6043))+(((40584.4155844156)*(IKabs((x6044+x6051+(((-1.0)*x6065)))))))+(IKabs(cj3))+(((40584.4155844156)*(IKabs((x6050+(((-1.0)*x6046*x6058))+(((-0.09399944)*cj4*x6045))+(((4.0)*x6053))+(((-1.0)*x6046*x6060))+((x6046*x6057))+((x6046*x6059)))))))+(((40584.4155844156)*(IKabs(((((-4.0)*x6049))+(((-1.0)*x6044))+(((0.09399944)*x6047))+(((-1.0)*x6045*x6046)))))))+(((40584.4155844156)*(IKabs(((((-1.0)*x6050))+x6066+(((-1.0)*x6067)))))))+(((40584.4155844156)*(IKabs((x6050+x6066+(((-1.0)*x6067))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x6068=((0.64)*cj3);
IkReal x6069=((6.16e-6)*cj3);
IkReal x6070=(cj4*r22);
IkReal x6071=(cj3*pz);
IkReal x6072=((0.28199832)*x6070);
IkReal x6073=((12.0)*x6071);
IkReal x6074=((0.09399944)*x6070);
IkReal x6075=((4.0)*x6071);
IkReal x6076=(cj3*r22*sj4);
IkReal x6077=((1.93020072)*x6076);
IkReal x6078=((0.64340024)*x6076);
IkReal x6079=(x6075+x6078);
IkReal x6080=(x6077+x6073);
op[0]=(x6074+(((-1.0)*x6079))+(((-1.0)*x6068)));
op[1]=x6069;
op[2]=(x6072+(((-1.0)*x6068))+(((-1.0)*x6080)));
op[3]=((1.232e-5)*cj3);
op[4]=(x6072+x6068+(((-1.0)*x6080)));
op[5]=x6069;
op[6]=(x6074+x6068+(((-1.0)*x6079)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x6081=cj3*cj3;
IkReal x6082=((0.64340024)*cj0);
IkReal x6083=((1.93020072)*sj0);
IkReal x6084=((0.64340024)*sj0);
IkReal x6085=((1.93020072)*cj0);
IkReal x6086=((0.64)*x6081);
IkReal x6087=(cj3*gconst200*sj4);
IkReal x6088=(cj3*gconst201*sj4);
IkReal x6089=(cj3*cj4*r22);
IkReal x6090=(pz*x6081);
IkReal x6091=((6.16e-6)*x6081);
IkReal x6092=((12.0)*x6090);
IkReal x6093=((0.28199832)*x6089);
IkReal x6094=((4.0)*x6090);
IkReal x6095=((0.09399944)*x6089);
IkReal x6096=(r01*x6083*x6087);
IkReal x6097=(r10*x6085*x6088);
IkReal x6098=(r11*x6085*x6087);
IkReal x6099=(r00*x6083*x6088);
IkReal x6100=(r10*x6082*x6088);
IkReal x6101=(r01*x6084*x6087);
IkReal x6102=(r00*x6084*x6088);
IkReal x6103=(r11*x6082*x6087);
IkReal x6104=(x6092+x6097+x6096);
IkReal x6105=(x6094+x6101+x6100);
IkReal x6106=(x6095+x6103+x6102);
IkReal x6107=(x6099+x6098+x6093);
j1evalpoly[0]=((((-1.0)*htj1*x6091))+(((htj1*htj1)*((x6104+(((-1.0)*x6086))+(((-1.0)*x6107))))))+(((-1.0)*x6091*(htj1*htj1*htj1*htj1*htj1)))+x6105+(((-1.232e-5)*x6081*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x6086+x6105+(((-1.0)*x6106))))))+(((-1.0)*x6086))+(((htj1*htj1*htj1*htj1)*((x6086+x6104+(((-1.0)*x6107))))))+(((-1.0)*x6106)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6108=((-1.0)*r22*sj4);
if( IKabs((cj1*x6108)) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj1*x6108)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*x6108))+IKsqr((sj1*x6108))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*x6108), (sj1*x6108));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6109=IKcos(j2);
IkReal x6110=IKsin(j2);
IkReal x6111=(cj0*gconst200);
IkReal x6112=((3.5e-7)*sj0);
IkReal x6113=(gconst201*r00);
IkReal x6114=((1.0)*sj0);
IkReal x6115=(gconst200*r01);
IkReal x6116=(cj0*gconst201);
IkReal x6117=((1.0)*r10);
IkReal x6118=((1.0)*cj1);
IkReal x6119=((1.0)*sj3);
IkReal x6120=((1.0)*cj3);
IkReal x6121=(cj1*x6109);
IkReal x6122=(sj3*x6110);
IkReal x6123=(sj1*x6109);
IkReal x6124=(sj1*x6110);
IkReal x6125=(gconst201*r01*sj0);
IkReal x6126=(cj1*x6110);
IkReal x6127=(gconst200*r00*sj0);
evalcond[0]=(((sj1*x6122))+(((-1.0)*sj3*x6109*x6118)));
evalcond[1]=((((-1.0)*r22*sj4))+(((-1.0)*x6110*x6118))+(((-1.0)*x6123)));
evalcond[2]=(((cj4*r22))+(((-1.0)*cj3*x6109*x6118))+((cj3*x6124)));
evalcond[3]=(x6125+x6127+(((-1.0)*x6118*x6122))+(((-1.0)*x6119*x6123))+(((-1.0)*x6111*x6117))+(((-1.0)*r11*x6116)));
evalcond[4]=((((0.16085006)*x6126))+(((0.16085006)*x6123))+(((0.16)*cj1))+(((-1.0)*pz))+(((-0.02349986)*x6124))+(((7.7e-7)*sj1))+(((0.02349986)*x6121)));
evalcond[5]=((((-1.0)*cj4*x6116*x6117))+x6121+((cj4*r11*x6111))+((cj4*sj0*x6113))+(((-1.0)*cj4*x6114*x6115))+(((-1.0)*x6124)));
evalcond[6]=((((-1.0)*sj4*x6114*x6115))+((r11*sj4*x6111))+(((-1.0)*sj4*x6116*x6117))+((sj0*sj4*x6113))+(((-1.0)*x6120*x6123))+(((-1.0)*cj3*x6110*x6118)));
evalcond[7]=((((0.16085006)*x6124))+(((-1.0)*x6112*x6115))+(((-0.16085006)*x6121))+(((-0.0008)*x6127))+(((-0.0008)*x6125))+(((3.5e-7)*r11*x6111))+(((0.0008)*r11*x6116))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((x6112*x6113))+(((-3.5e-7)*r10*x6116))+(((0.0008)*r10*x6111))+(((-1.0)*px*x6114))+((cj0*py))+(((0.02349986)*x6126))+(((0.02349986)*x6123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x6128=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6128);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6128);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x6129=(r22*sj4);
j0eval[0]=x6129;
j0eval[1]=IKsign(x6129);
j0eval[2]=((cj5*cj5)+(sj5*sj5));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[4];
IkReal x6130=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6130);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6130);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x6131=((-1.0)+(cj4*cj4));
j0eval[0]=x6131;
j0eval[1]=IKsign(x6131);
j0eval[2]=sj4;
j0eval[3]=((cj5*cj5)+(sj5*sj5));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x6132=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6132);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6132);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x6133=(r22*sj4);
IkReal x6134=((3.5e-7)*cj5);
IkReal x6135=((3.5e-7)*sj5);
IkReal x6136=((0.0008)*sj5);
IkReal x6137=((0.0008)*cj5);
IkReal x6138=(cj5*rxp0_2*sj4);
IkReal x6139=(rxp1_2*sj4*sj5);
j0eval[0]=(x6133+(((-1250.0)*x6139))+(((1250.0)*x6138)));
j0eval[1]=IKsign((x6138+(((0.0008)*x6133))+(((-1.0)*x6139))));
j0eval[2]=((IKabs((((r11*x6135))+((r11*x6137))+((r10*x6136))+(((-1.0)*r10*x6134))+py)))+(IKabs(((((-1.0)*r01*x6135))+(((-1.0)*r01*x6137))+(((-1.0)*r00*x6136))+(((-1.0)*px))+((r00*x6134))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x6140=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6140);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6140);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
j0eval[0]=((cj5*cj5)+(sj5*sj5));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x6141=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6141);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6141);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x6142=((3.5e-7)*cj5);
IkReal x6143=((0.0008)*cj5);
IkReal x6144=((0.0008)*sj5);
IkReal x6145=((3.5e-7)*sj5);
j0eval[0]=((IKabs((((r10*x6142))+(((-1.0)*r10*x6144))+(((-1.0)*py))+(((-1.0)*r11*x6143))+(((-1.0)*r11*x6145)))))+(IKabs(((((-1.0)*r01*x6143))+(((-1.0)*r01*x6145))+(((-1.0)*r00*x6144))+(((-1.0)*px))+((r00*x6142))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x6146=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6146);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6146);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
j1eval[0]=60.0;
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[8+1], zeror[8];
int numroots;
op[0]=4.0;
op[1]=0;
op[2]=16.0;
op[3]=0;
op[4]=24.0;
op[5]=0;
op[6]=16.0;
op[7]=0;
op[8]=4.0;
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6147=cj1*cj1;
IkReal x6148=((6.21697001542928)*pz);
IkReal x6149=(cj1*sj1);
if( IKabs(((((-0.994715202468684)*x6147))+((cj1*x6148))+(((-4.78706691188054e-6)*x6149)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((-0.994715202468684)*x6149))+((sj1*x6148))+(((4.78706691188054e-6)*x6147)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.994715202468684)*x6147))+((cj1*x6148))+(((-4.78706691188054e-6)*x6149))))+IKsqr(((-4.78706691188054e-6)+(((-0.994715202468684)*x6149))+((sj1*x6148))+(((4.78706691188054e-6)*x6147))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.994715202468684)*x6147))+((cj1*x6148))+(((-4.78706691188054e-6)*x6149))), ((-4.78706691188054e-6)+(((-0.994715202468684)*x6149))+((sj1*x6148))+(((4.78706691188054e-6)*x6147))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x6150=IKcos(j2);
IkReal x6151=IKsin(j2);
IkReal x6152=(sj1*x6151);
IkReal x6153=(sj1*x6150);
IkReal x6154=(cj1*x6151);
IkReal x6155=(cj1*x6150);
evalcond[0]=(x6152+(((-1.0)*x6155)));
evalcond[1]=((((-1.0)*x6153))+(((-1.0)*x6154)));
evalcond[2]=((((0.16)*cj1))+(((-0.02349986)*x6152))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.02349986)*x6155))+(((0.16085006)*x6154))+(((0.16085006)*x6153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6156=(cj1*sj2);
IkReal x6157=(cj5*r01);
IkReal x6158=(cj2*sj1);
IkReal x6159=(r00*sj5);
IkReal x6160=((1.0)*r10*sj5);
IkReal x6161=((1.0)*cj5*r11);
if( IKabs((((x6156*x6157))+((x6156*x6159))+((x6158*x6159))+((x6157*x6158)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6156*x6161))+(((-1.0)*x6156*x6160))+(((-1.0)*x6158*x6161))+(((-1.0)*x6158*x6160)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x6156*x6157))+((x6156*x6159))+((x6158*x6159))+((x6157*x6158))))+IKsqr(((((-1.0)*x6156*x6161))+(((-1.0)*x6156*x6160))+(((-1.0)*x6158*x6161))+(((-1.0)*x6158*x6160))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x6156*x6157))+((x6156*x6159))+((x6158*x6159))+((x6157*x6158))), ((((-1.0)*x6156*x6161))+(((-1.0)*x6156*x6160))+(((-1.0)*x6158*x6161))+(((-1.0)*x6158*x6160))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6162=IKcos(j0);
IkReal x6163=IKsin(j0);
IkReal x6164=((1.0)*px);
IkReal x6165=((0.0008)*r11);
IkReal x6166=(r00*sj5);
IkReal x6167=((3.5e-7)*r01);
IkReal x6168=(cj1*sj2);
IkReal x6169=(cj2*sj1);
IkReal x6170=((3.5e-7)*r11);
IkReal x6171=((0.0008)*r01);
IkReal x6172=((3.5e-7)*r10);
IkReal x6173=((3.5e-7)*r00);
IkReal x6174=((0.0008)*r10);
IkReal x6175=(cj5*x6163);
IkReal x6176=(sj5*x6163);
IkReal x6177=(sj5*x6162);
IkReal x6178=(cj5*x6162);
evalcond[0]=(((r10*x6176))+((r11*x6175))+((x6162*x6166))+((r01*x6178)));
evalcond[1]=((((-1.0)*r10*x6177))+(((-1.0)*r11*x6178))+(((-1.0)*x6169))+(((-1.0)*x6168))+((r01*x6175))+((x6163*x6166)));
evalcond[2]=(((x6172*x6175))+((x6173*x6178))+(((-1.0)*x6167*x6177))+(((-1.0)*py*x6163))+(((-0.0008)*x6162*x6166))+(((-1.0)*x6174*x6176))+(((-1.0)*x6170*x6176))+(((-1.0)*x6171*x6178))+(((-1.0)*x6165*x6175))+(((-1.0)*x6162*x6164)));
evalcond[3]=(((x6174*x6177))+(((0.02349986)*x6168))+(((0.02349986)*x6169))+((x6173*x6175))+(((-0.0008)*x6163*x6166))+(((-1.0)*x6167*x6176))+((x6165*x6178))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*x6172*x6178))+(((-1.0)*x6171*x6175))+((x6170*x6177))+(((-0.16085006)*cj1*cj2))+(((0.16085006)*sj1*sj2))+(((-1.0)*x6163*x6164))+((py*x6162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x6179=((3.5e-7)*cj5);
IkReal x6180=((0.0008)*cj5);
IkReal x6181=((0.0008)*sj5);
IkReal x6182=((3.5e-7)*sj5);
CheckValue<IkReal> x6184 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x6181))+(((-1.0)*r01*x6182))+(((-1.0)*r01*x6180))+(((-1.0)*px))+((r00*x6179)))),IkReal((((r10*x6179))+(((-1.0)*py))+(((-1.0)*r11*x6182))+(((-1.0)*r11*x6180))+(((-1.0)*r10*x6181)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6184.valid){
continue;
}
IkReal x6183=x6184.value;
j0array[0]=((-1.0)*x6183);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x6183)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x6185=IKcos(j0);
IkReal x6186=IKsin(j0);
evalcond[0]=(((r10*sj5*x6186))+((cj5*r11*x6186))+((cj5*r01*x6185))+((r00*sj5*x6185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x6187=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6187);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6187);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x6188=(r00*sj0);
IkReal x6189=((6.75570252e-7)*cj5);
IkReal x6190=(r01*sj0);
IkReal x6191=((3.2899804e-8)*sj5);
IkReal x6192=((0.000514720192)*sj5);
IkReal x6193=(cj0*sj5);
IkReal x6194=((7.5199552e-5)*cj5);
IkReal x6195=((0.000225598656)*cj5);
IkReal x6196=(px*sj0);
IkReal x6197=(cj0*r10);
IkReal x6198=((2.25190084e-7)*cj5);
IkReal x6199=(cj0*r11);
IkReal x6200=((0.001544160576)*cj5);
IkReal x6201=((0.000514720192)*cj5);
IkReal x6202=(cj0*py);
IkReal x6203=((9.8699412e-8)*cj5);
IkReal x6204=((3.2899804e-8)*cj5);
IkReal x6205=((0.28199832)*x6202);
IkReal x6206=((1.93020072)*x6196);
IkReal x6207=(x6188*x6203);
IkReal x6208=((9.8699412e-8)*r11*x6193);
IkReal x6209=((0.000225598656)*r10*x6193);
IkReal x6210=(x6195*x6199);
IkReal x6211=(x6189*x6197);
IkReal x6212=((0.001544160576)*sj5*x6188);
IkReal x6213=(x6190*x6200);
IkReal x6214=((6.75570252e-7)*sj5*x6190);
IkReal x6215=(x6205+x6207+x6208+x6209+x6210);
IkReal x6216=(x6206+x6214+x6213+x6212+x6211);
IkReal x6217=(((x6190*x6195))+(((1.93020072)*pz))+(((9.8699412e-8)*sj5*x6190))+(((0.28199832)*x6196))+((x6197*x6203))+(((0.000225598656)*sj5*x6188)));
IkReal x6218=(((x6199*x6200))+(((1.93020072)*x6202))+(((6.75570252e-7)*r11*x6193))+(((0.001544160576)*r10*x6193))+(((0.28199832)*pz))+((x6188*x6189)));
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((-0.102943966020431)+x6215+(((-1.0)*x6217)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+x6216+(((-1.0)*x6218)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+x6215+(((-1.0)*x6217)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+x6216+(((-1.0)*x6218)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+((x6191*x6199))+(((-7.5199552e-5)*sj5*x6188))+(((-1.0)*x6197*x6204))+((x6188*x6204))+((x6194*x6199))+(((0.09399944)*x6202))+(((-1.0)*x6190*x6194))+(((-1.0)*x6190*x6191))+(((7.5199552e-5)*r10*x6193))+(((-0.64340024)*pz))+(((-0.09399944)*x6196)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x6199*x6201))+(((-1.0)*x6192*x6197))+((x6190*x6201))+((x6188*x6192))+(((0.64340024)*x6196))+(((2.25190084e-7)*sj5*x6190))+(((-2.25190084e-7)*r11*x6193))+(((-0.64340024)*x6202))+(((-1.0)*x6188*x6198))+((x6197*x6198))+(((-0.09399944)*pz))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x6219=(r01*sj0);
IkReal x6220=((3.2899804e-8)*sj5);
IkReal x6221=((7.5199552e-5)*sj5);
IkReal x6222=(cj0*r10);
IkReal x6223=((7.5199552e-5)*cj5);
IkReal x6224=((0.000225598656)*cj5);
IkReal x6225=(cj0*r11);
IkReal x6226=(cj0*py);
IkReal x6227=(r00*sj0);
IkReal x6228=((9.8699412e-8)*sj5);
IkReal x6229=(px*sj0);
IkReal x6230=((0.000225598656)*sj5);
IkReal x6231=((9.8699412e-8)*cj5);
IkReal x6232=((3.2899804e-8)*cj5);
IkReal x6233=((0.28199832)*x6226);
IkReal x6234=((0.09399944)*x6226);
IkReal x6235=(x6227*x6231);
IkReal x6236=(x6225*x6228);
IkReal x6237=(x6222*x6230);
IkReal x6238=(x6224*x6225);
IkReal x6239=(x6220*x6225);
IkReal x6240=(x6223*x6225);
IkReal x6241=(x6227*x6232);
IkReal x6242=(x6221*x6222);
IkReal x6243=(x6240+x6241+x6242+x6239+x6234);
IkReal x6244=(x6238+x6235+x6237+x6236+x6233);
IkReal x6245=((((1.93020072)*pz))+((x6222*x6231))+((x6219*x6228))+((x6219*x6224))+(((0.28199832)*x6229))+((x6227*x6230)));
IkReal x6246=((((0.09399944)*x6229))+((x6222*x6232))+((x6219*x6220))+((x6219*x6223))+(((0.64340024)*pz))+((x6221*x6227)));
op[0]=((-0.102943966020431)+x6243+(((-1.0)*x6246)));
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+x6244+(((-1.0)*x6245)));
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+x6244+(((-1.0)*x6245)));
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+x6243+(((-1.0)*x6246)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x6247=((0.09399944)*pz);
IkReal x6248=(r00*sj0);
IkReal x6249=((6.75570252e-7)*cj5);
IkReal x6250=((0.000514720192)*sj5);
IkReal x6251=(cj0*sj5);
IkReal x6252=(px*sj0);
IkReal x6253=((2.25190084e-7)*cj5);
IkReal x6254=(cj0*py);
IkReal x6255=(cj0*r10);
IkReal x6256=((0.64340024)*x6252);
IkReal x6257=((1.93020072)*x6252);
IkReal x6258=((0.64340024)*x6254);
IkReal x6259=(cj5*r01*sj0);
IkReal x6260=(cj0*cj5*r11);
IkReal x6261=(r01*sj0*sj5);
IkReal x6262=(x6248*x6250);
IkReal x6263=((2.25190084e-7)*x6261);
IkReal x6264=((0.000514720192)*x6259);
IkReal x6265=(x6253*x6255);
IkReal x6266=(x6249*x6255);
IkReal x6267=((0.001544160576)*sj5*x6248);
IkReal x6268=((0.001544160576)*x6259);
IkReal x6269=((6.75570252e-7)*x6261);
IkReal x6270=((0.000514720192)*x6260);
IkReal x6271=(x6248*x6253);
IkReal x6272=((2.25190084e-7)*r11*x6251);
IkReal x6273=(x6250*x6255);
IkReal x6274=(x6256+x6264+x6265+x6262+x6263);
IkReal x6275=(x6257+x6266+x6267+x6268+x6269);
IkReal x6276=((((1.93020072)*x6254))+((x6248*x6249))+(((0.001544160576)*r10*x6251))+(((0.001544160576)*x6260))+(((6.75570252e-7)*r11*x6251))+(((0.28199832)*pz)));
IkReal x6277=(x6247+x6258+x6271+x6270+x6273+x6272);
j1evalpoly[0]=((0.0150404058181848)+x6274+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x6275+(((-1.0)*x6276))))))+(((-0.205887932040862)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x6274+(((-1.0)*x6277))))))+(((htj1*htj1)*(((0.0150404058181848)+x6275+(((-1.0)*x6276))))))+(((-1.0)*x6277))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6278=cj1*cj1;
IkReal x6279=((6.21697001542928)*pz);
IkReal x6280=(cj1*sj1);
if( IKabs(((((-0.994715202468684)*x6278))+(((-4.78706691188054e-6)*x6280))+((cj1*x6279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x6278))+((sj1*x6279))+(((-0.994715202468684)*x6280)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.994715202468684)*x6278))+(((-4.78706691188054e-6)*x6280))+((cj1*x6279))))+IKsqr(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x6278))+((sj1*x6279))+(((-0.994715202468684)*x6280))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.994715202468684)*x6278))+(((-4.78706691188054e-6)*x6280))+((cj1*x6279))), ((-4.78706691188054e-6)+(((4.78706691188054e-6)*x6278))+((sj1*x6279))+(((-0.994715202468684)*x6280))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x6281=IKcos(j2);
IkReal x6282=IKsin(j2);
IkReal x6283=(cj0*cj5);
IkReal x6284=(sj0*sj5);
IkReal x6285=(cj5*sj0);
IkReal x6286=(cj0*sj5);
IkReal x6287=((1.0)*x6281);
IkReal x6288=((0.02349986)*x6281);
IkReal x6289=(sj1*x6282);
IkReal x6290=((0.16085006)*x6281);
IkReal x6291=(cj1*x6282);
IkReal x6292=(sj1*x6287);
IkReal x6293=((1.0)*x6291);
IkReal x6294=(x6293+x6292);
evalcond[0]=(x6289+(((-1.0)*cj1*x6287)));
evalcond[1]=((-1.0)*x6294);
evalcond[2]=((((-1.0)*r11*x6283))+(((-1.0)*x6294))+((r00*x6284))+(((-1.0)*r10*x6286))+((r01*x6285)));
evalcond[3]=((((0.16)*cj1))+(((-0.02349986)*x6289))+(((-1.0)*pz))+(((7.7e-7)*sj1))+((sj1*x6290))+(((0.16085006)*x6291))+((cj1*x6288)));
evalcond[4]=((((3.5e-7)*r00*x6285))+(((-1.0)*cj1*x6290))+(((0.0008)*r10*x6286))+(((-3.5e-7)*r01*x6284))+(((-3.5e-7)*r10*x6283))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.0008)*r11*x6283))+(((0.16085006)*x6289))+((sj1*x6288))+(((-0.0008)*r00*x6284))+(((0.02349986)*x6291))+(((-0.0008)*r01*x6285))+(((-1.0)*px*sj0))+((cj0*py))+(((3.5e-7)*r11*x6286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x6296 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6296.valid){
continue;
}
IkReal x6295=x6296.value;
j0array[0]=((-1.0)*x6295);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x6295)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x6297=IKcos(j0);
IkReal x6298=IKsin(j0);
IkReal x6299=((3.5e-7)*sj5);
IkReal x6300=((0.0008)*cj5);
IkReal x6301=((0.0008)*sj5);
IkReal x6302=((3.5e-7)*cj5);
IkReal x6303=(r01*x6297);
IkReal x6304=(r11*x6298);
IkReal x6305=(r10*x6298);
IkReal x6306=(r00*x6297);
evalcond[0]=(((x6302*x6306))+((x6302*x6305))+(((-1.0)*x6300*x6304))+(((-1.0)*x6300*x6303))+(((-1.0)*x6299*x6303))+(((-1.0)*x6299*x6304))+(((-1.0)*py*x6298))+(((-1.0)*px*x6297))+(((-1.0)*x6301*x6306))+(((-1.0)*x6301*x6305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x6307=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6307);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6307);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x6308=(r00*sj0);
IkReal x6309=((6.75570252e-7)*cj5);
IkReal x6310=(r01*sj0);
IkReal x6311=((3.2899804e-8)*sj5);
IkReal x6312=((0.000514720192)*sj5);
IkReal x6313=(cj0*sj5);
IkReal x6314=((7.5199552e-5)*cj5);
IkReal x6315=((0.000225598656)*cj5);
IkReal x6316=(px*sj0);
IkReal x6317=(cj0*r10);
IkReal x6318=((2.25190084e-7)*cj5);
IkReal x6319=(cj0*r11);
IkReal x6320=((0.001544160576)*cj5);
IkReal x6321=((0.000514720192)*cj5);
IkReal x6322=(cj0*py);
IkReal x6323=((9.8699412e-8)*cj5);
IkReal x6324=((3.2899804e-8)*cj5);
IkReal x6325=((0.28199832)*x6322);
IkReal x6326=((1.93020072)*x6316);
IkReal x6327=(x6308*x6323);
IkReal x6328=((9.8699412e-8)*r11*x6313);
IkReal x6329=((0.000225598656)*r10*x6313);
IkReal x6330=(x6315*x6319);
IkReal x6331=(x6309*x6317);
IkReal x6332=((0.001544160576)*sj5*x6308);
IkReal x6333=(x6310*x6320);
IkReal x6334=((6.75570252e-7)*sj5*x6310);
IkReal x6335=(x6330+x6327+x6325+x6329+x6328);
IkReal x6336=(x6334+x6331+x6332+x6333+x6326);
IkReal x6337=((((0.000225598656)*sj5*x6308))+((x6310*x6315))+(((1.93020072)*pz))+((x6317*x6323))+(((9.8699412e-8)*sj5*x6310))+(((0.28199832)*x6316)));
IkReal x6338=((((0.001544160576)*r10*x6313))+((x6319*x6320))+(((1.93020072)*x6322))+(((0.28199832)*pz))+(((6.75570252e-7)*r11*x6313))+((x6308*x6309)));
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+x6336+(((-1.0)*x6338)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x6310*x6311))+(((-1.0)*x6310*x6314))+((x6311*x6319))+(((-1.0)*x6317*x6324))+(((7.5199552e-5)*r10*x6313))+(((0.09399944)*x6322))+((x6308*x6324))+(((-0.64340024)*pz))+(((-7.5199552e-5)*sj5*x6308))+((x6314*x6319))+(((-0.09399944)*x6316)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+x6335+(((-1.0)*x6337)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+x6336+(((-1.0)*x6338)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x6312*x6317))+((x6308*x6312))+(((-0.64340024)*x6322))+(((-1.0)*x6308*x6318))+(((-2.25190084e-7)*r11*x6313))+(((0.64340024)*x6316))+((x6310*x6321))+((x6317*x6318))+(((-1.0)*x6319*x6321))+(((2.25190084e-7)*sj5*x6310))+(((-0.09399944)*pz)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+x6335+(((-1.0)*x6337))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x6339=(r01*sj0);
IkReal x6340=((3.2899804e-8)*sj5);
IkReal x6341=((7.5199552e-5)*sj5);
IkReal x6342=(cj0*r10);
IkReal x6343=((7.5199552e-5)*cj5);
IkReal x6344=((0.000225598656)*cj5);
IkReal x6345=(cj0*r11);
IkReal x6346=(cj0*py);
IkReal x6347=(r00*sj0);
IkReal x6348=((9.8699412e-8)*sj5);
IkReal x6349=(px*sj0);
IkReal x6350=((0.000225598656)*sj5);
IkReal x6351=((9.8699412e-8)*cj5);
IkReal x6352=((3.2899804e-8)*cj5);
IkReal x6353=((0.28199832)*x6346);
IkReal x6354=((0.09399944)*x6346);
IkReal x6355=(x6347*x6351);
IkReal x6356=(x6345*x6348);
IkReal x6357=(x6342*x6350);
IkReal x6358=(x6344*x6345);
IkReal x6359=(x6340*x6345);
IkReal x6360=(x6343*x6345);
IkReal x6361=(x6347*x6352);
IkReal x6362=(x6341*x6342);
IkReal x6363=(x6362+x6361+x6360+x6354+x6359);
IkReal x6364=(x6356+x6357+x6355+x6353+x6358);
IkReal x6365=(((x6342*x6351))+(((1.93020072)*pz))+((x6347*x6350))+(((0.28199832)*x6349))+((x6339*x6344))+((x6339*x6348)));
IkReal x6366=(((x6341*x6347))+(((0.09399944)*x6349))+((x6342*x6352))+((x6339*x6340))+((x6339*x6343))+(((0.64340024)*pz)));
op[0]=((-0.102943966020431)+x6363+(((-1.0)*x6366)));
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+x6364+(((-1.0)*x6365)));
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+x6364+(((-1.0)*x6365)));
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+x6363+(((-1.0)*x6366)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x6367=((0.09399944)*pz);
IkReal x6368=(r00*sj0);
IkReal x6369=((6.75570252e-7)*cj5);
IkReal x6370=((0.000514720192)*sj5);
IkReal x6371=(cj0*sj5);
IkReal x6372=(px*sj0);
IkReal x6373=((2.25190084e-7)*cj5);
IkReal x6374=(cj0*py);
IkReal x6375=(cj0*r10);
IkReal x6376=((0.64340024)*x6372);
IkReal x6377=((1.93020072)*x6372);
IkReal x6378=((0.64340024)*x6374);
IkReal x6379=(cj5*r01*sj0);
IkReal x6380=(cj0*cj5*r11);
IkReal x6381=(r01*sj0*sj5);
IkReal x6382=(x6368*x6370);
IkReal x6383=((2.25190084e-7)*x6381);
IkReal x6384=((0.000514720192)*x6379);
IkReal x6385=(x6373*x6375);
IkReal x6386=(x6369*x6375);
IkReal x6387=((0.001544160576)*sj5*x6368);
IkReal x6388=((0.001544160576)*x6379);
IkReal x6389=((6.75570252e-7)*x6381);
IkReal x6390=((0.000514720192)*x6380);
IkReal x6391=(x6368*x6373);
IkReal x6392=((2.25190084e-7)*r11*x6371);
IkReal x6393=(x6370*x6375);
IkReal x6394=(x6376+x6385+x6384+x6383+x6382);
IkReal x6395=(x6377+x6387+x6386+x6389+x6388);
IkReal x6396=((((0.001544160576)*r10*x6371))+(((0.001544160576)*x6380))+(((1.93020072)*x6374))+(((0.28199832)*pz))+((x6368*x6369))+(((6.75570252e-7)*r11*x6371)));
IkReal x6397=(x6378+x6367+x6392+x6393+x6390+x6391);
j1evalpoly[0]=((0.0150404058181848)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x6394+(((-1.0)*x6397))))))+x6394+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((-0.205887932040862)*htj1))+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x6395+(((-1.0)*x6396))))))+(((-1.0)*x6397))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((0.0150404058181848)+x6395+(((-1.0)*x6396)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6398=cj1*cj1;
IkReal x6399=((6.21697001542928)*pz);
IkReal x6400=(cj1*sj1);
if( IKabs((((cj1*x6399))+(((-0.994715202468684)*x6398))+(((-4.78706691188054e-6)*x6400)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((-0.994715202468684)*x6400))+((sj1*x6399))+(((4.78706691188054e-6)*x6398)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x6399))+(((-0.994715202468684)*x6398))+(((-4.78706691188054e-6)*x6400))))+IKsqr(((-4.78706691188054e-6)+(((-0.994715202468684)*x6400))+((sj1*x6399))+(((4.78706691188054e-6)*x6398))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x6399))+(((-0.994715202468684)*x6398))+(((-4.78706691188054e-6)*x6400))), ((-4.78706691188054e-6)+(((-0.994715202468684)*x6400))+((sj1*x6399))+(((4.78706691188054e-6)*x6398))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x6401=IKcos(j2);
IkReal x6402=IKsin(j2);
IkReal x6403=(cj0*cj5);
IkReal x6404=(sj0*sj5);
IkReal x6405=(cj5*sj0);
IkReal x6406=(cj0*sj5);
IkReal x6407=((1.0)*x6401);
IkReal x6408=((0.02349986)*x6401);
IkReal x6409=(sj1*x6402);
IkReal x6410=((0.16085006)*x6401);
IkReal x6411=(cj1*x6402);
IkReal x6412=(sj1*x6407);
IkReal x6413=((1.0)*x6411);
IkReal x6414=(x6413+x6412);
evalcond[0]=((((-1.0)*cj1*x6407))+x6409);
evalcond[1]=((-1.0)*x6414);
evalcond[2]=((((-1.0)*r10*x6406))+((r00*x6404))+((r01*x6405))+(((-1.0)*r11*x6403))+(((-1.0)*x6414)));
evalcond[3]=(((cj1*x6408))+(((0.16)*cj1))+((sj1*x6410))+(((-0.02349986)*x6409))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x6411)));
evalcond[4]=(((sj1*x6408))+(((-0.0008)*r00*x6404))+(((-1.0)*cj1*x6410))+(((-0.0008)*r01*x6405))+(((0.16)*sj1))+(((0.0008)*r10*x6406))+(((-7.7e-7)*cj1))+(((3.5e-7)*r00*x6405))+(((-3.5e-7)*r01*x6404))+(((-3.5e-7)*r10*x6403))+(((0.0008)*r11*x6403))+(((-1.0)*px*sj0))+(((0.16085006)*x6409))+((cj0*py))+(((3.5e-7)*r11*x6406))+(((0.02349986)*x6411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x6415=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6415);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6415);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j0eval[0]=((cj5*cj5)+(sj5*sj5));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x6416=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6416);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6416);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x6417=((3.5e-7)*cj5);
IkReal x6418=((0.0008)*cj5);
IkReal x6419=((0.0008)*sj5);
IkReal x6420=((3.5e-7)*sj5);
j0eval[0]=((IKabs((((r00*x6417))+(((-1.0)*px))+(((-1.0)*r01*x6420))+(((-1.0)*r01*x6418))+(((-1.0)*r00*x6419)))))+(IKabs((((r10*x6417))+(((-1.0)*r10*x6419))+(((-1.0)*py))+(((-1.0)*r11*x6418))+(((-1.0)*r11*x6420))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x6421=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6421);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6421);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j1eval[0]=60.0;
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[8+1], zeror[8];
int numroots;
op[0]=4.0;
op[1]=0;
op[2]=16.0;
op[3]=0;
op[4]=24.0;
op[5]=0;
op[6]=16.0;
op[7]=0;
op[8]=4.0;
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6422=cj1*cj1;
IkReal x6423=((6.21697001542928)*pz);
IkReal x6424=(cj1*sj1);
if( IKabs(((((-0.994715202468684)*x6422))+(((-4.78706691188054e-6)*x6424))+((cj1*x6423)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+((sj1*x6423))+(((-0.994715202468684)*x6424))+(((4.78706691188054e-6)*x6422)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.994715202468684)*x6422))+(((-4.78706691188054e-6)*x6424))+((cj1*x6423))))+IKsqr(((-4.78706691188054e-6)+((sj1*x6423))+(((-0.994715202468684)*x6424))+(((4.78706691188054e-6)*x6422))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.994715202468684)*x6422))+(((-4.78706691188054e-6)*x6424))+((cj1*x6423))), ((-4.78706691188054e-6)+((sj1*x6423))+(((-0.994715202468684)*x6424))+(((4.78706691188054e-6)*x6422))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x6425=IKcos(j2);
IkReal x6426=IKsin(j2);
IkReal x6427=(sj1*x6426);
IkReal x6428=(sj1*x6425);
IkReal x6429=(cj1*x6426);
IkReal x6430=(cj1*x6425);
evalcond[0]=(x6427+(((-1.0)*x6430)));
evalcond[1]=((((-1.0)*x6428))+(((-1.0)*x6429)));
evalcond[2]=((((-0.02349986)*x6427))+(((0.16085006)*x6429))+(((0.16085006)*x6428))+(((0.16)*cj1))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.02349986)*x6430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6431=(cj1*sj2);
IkReal x6432=(cj5*r01);
IkReal x6433=(cj2*sj1);
IkReal x6434=(r00*sj5);
IkReal x6435=((1.0)*r10*sj5);
IkReal x6436=((1.0)*cj5*r11);
if( IKabs((((x6433*x6434))+((x6432*x6433))+((x6431*x6434))+((x6431*x6432)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6431*x6436))+(((-1.0)*x6431*x6435))+(((-1.0)*x6433*x6435))+(((-1.0)*x6433*x6436)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x6433*x6434))+((x6432*x6433))+((x6431*x6434))+((x6431*x6432))))+IKsqr(((((-1.0)*x6431*x6436))+(((-1.0)*x6431*x6435))+(((-1.0)*x6433*x6435))+(((-1.0)*x6433*x6436))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x6433*x6434))+((x6432*x6433))+((x6431*x6434))+((x6431*x6432))), ((((-1.0)*x6431*x6436))+(((-1.0)*x6431*x6435))+(((-1.0)*x6433*x6435))+(((-1.0)*x6433*x6436))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6437=IKcos(j0);
IkReal x6438=IKsin(j0);
IkReal x6439=((1.0)*px);
IkReal x6440=((0.0008)*r11);
IkReal x6441=(r00*sj5);
IkReal x6442=((3.5e-7)*r01);
IkReal x6443=(cj1*sj2);
IkReal x6444=(cj2*sj1);
IkReal x6445=((3.5e-7)*r11);
IkReal x6446=((0.0008)*r01);
IkReal x6447=((3.5e-7)*r10);
IkReal x6448=((3.5e-7)*r00);
IkReal x6449=((0.0008)*r10);
IkReal x6450=(cj5*x6438);
IkReal x6451=(sj5*x6438);
IkReal x6452=(sj5*x6437);
IkReal x6453=(cj5*x6437);
evalcond[0]=(((r01*x6453))+((r11*x6450))+((x6437*x6441))+((r10*x6451)));
evalcond[1]=(((r01*x6450))+(((-1.0)*r10*x6452))+((x6438*x6441))+(((-1.0)*x6443))+(((-1.0)*x6444))+(((-1.0)*r11*x6453)));
evalcond[2]=((((-1.0)*x6449*x6451))+(((-1.0)*x6446*x6453))+((x6447*x6450))+(((-1.0)*x6445*x6451))+(((-0.0008)*x6437*x6441))+(((-1.0)*x6437*x6439))+((x6448*x6453))+(((-1.0)*x6442*x6452))+(((-1.0)*x6440*x6450))+(((-1.0)*py*x6438)));
evalcond[3]=((((-1.0)*x6438*x6439))+((x6445*x6452))+(((0.02349986)*x6443))+(((0.02349986)*x6444))+(((-1.0)*x6447*x6453))+(((-1.0)*x6446*x6450))+((x6449*x6452))+((x6440*x6453))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((py*x6437))+((x6448*x6450))+(((-1.0)*x6442*x6451))+(((-0.16085006)*cj1*cj2))+(((-0.0008)*x6438*x6441))+(((0.16085006)*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x6454=((3.5e-7)*cj5);
IkReal x6455=((0.0008)*cj5);
IkReal x6456=((0.0008)*sj5);
IkReal x6457=((3.5e-7)*sj5);
CheckValue<IkReal> x6459 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x6456))+((r00*x6454))+(((-1.0)*px))+(((-1.0)*r01*x6455))+(((-1.0)*r01*x6457)))),IkReal(((((-1.0)*r11*x6457))+(((-1.0)*r11*x6455))+(((-1.0)*py))+(((-1.0)*r10*x6456))+((r10*x6454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6459.valid){
continue;
}
IkReal x6458=x6459.value;
j0array[0]=((-1.0)*x6458);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x6458)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x6460=IKcos(j0);
IkReal x6461=IKsin(j0);
evalcond[0]=(((r00*sj5*x6460))+((cj5*r01*x6460))+((r10*sj5*x6461))+((cj5*r11*x6461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x6462=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6462);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6462);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x6463=(r00*sj0);
IkReal x6464=((6.75570252e-7)*cj5);
IkReal x6465=(r01*sj0);
IkReal x6466=((3.2899804e-8)*sj5);
IkReal x6467=((0.000514720192)*sj5);
IkReal x6468=(cj0*sj5);
IkReal x6469=((7.5199552e-5)*cj5);
IkReal x6470=((0.000225598656)*cj5);
IkReal x6471=(px*sj0);
IkReal x6472=(cj0*r10);
IkReal x6473=((2.25190084e-7)*cj5);
IkReal x6474=(cj0*r11);
IkReal x6475=((0.001544160576)*cj5);
IkReal x6476=((0.000514720192)*cj5);
IkReal x6477=(cj0*py);
IkReal x6478=((9.8699412e-8)*cj5);
IkReal x6479=((3.2899804e-8)*cj5);
IkReal x6480=((0.28199832)*x6477);
IkReal x6481=((1.93020072)*x6471);
IkReal x6482=(x6463*x6478);
IkReal x6483=((9.8699412e-8)*r11*x6468);
IkReal x6484=((0.000225598656)*r10*x6468);
IkReal x6485=(x6470*x6474);
IkReal x6486=(x6464*x6472);
IkReal x6487=((0.001544160576)*sj5*x6463);
IkReal x6488=(x6465*x6475);
IkReal x6489=((6.75570252e-7)*sj5*x6465);
IkReal x6490=(x6482+x6483+x6480+x6484+x6485);
IkReal x6491=(x6488+x6489+x6481+x6486+x6487);
IkReal x6492=((((1.93020072)*pz))+((x6465*x6470))+(((0.000225598656)*sj5*x6463))+((x6472*x6478))+(((9.8699412e-8)*sj5*x6465))+(((0.28199832)*x6471)));
IkReal x6493=((((1.93020072)*x6477))+((x6463*x6464))+((x6474*x6475))+(((0.28199832)*pz))+(((0.001544160576)*r10*x6468))+(((6.75570252e-7)*r11*x6468)));
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x6467*x6472))+((x6463*x6467))+(((-2.25190084e-7)*r11*x6468))+(((2.25190084e-7)*sj5*x6465))+(((-0.64340024)*x6477))+((x6465*x6476))+((x6472*x6473))+(((-1.0)*x6463*x6473))+(((0.64340024)*x6471))+(((-1.0)*x6474*x6476))+(((-0.09399944)*pz)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-1.0)*x6493))+x6491)))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x6492))+x6490)))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+(((-1.0)*x6492))+x6490)))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x6465*x6469))+(((-1.0)*x6465*x6466))+((x6466*x6474))+(((-1.0)*x6472*x6479))+(((7.5199552e-5)*r10*x6468))+((x6463*x6479))+(((-0.64340024)*pz))+(((0.09399944)*x6477))+(((-0.09399944)*x6471))+((x6469*x6474))+(((-7.5199552e-5)*sj5*x6463)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x6493))+x6491))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x6494=(r01*sj0);
IkReal x6495=((3.2899804e-8)*sj5);
IkReal x6496=((7.5199552e-5)*sj5);
IkReal x6497=(cj0*r10);
IkReal x6498=((7.5199552e-5)*cj5);
IkReal x6499=((0.000225598656)*cj5);
IkReal x6500=(cj0*r11);
IkReal x6501=(cj0*py);
IkReal x6502=(r00*sj0);
IkReal x6503=((9.8699412e-8)*sj5);
IkReal x6504=(px*sj0);
IkReal x6505=((0.000225598656)*sj5);
IkReal x6506=((9.8699412e-8)*cj5);
IkReal x6507=((3.2899804e-8)*cj5);
IkReal x6508=((0.28199832)*x6501);
IkReal x6509=((0.09399944)*x6501);
IkReal x6510=(x6502*x6506);
IkReal x6511=(x6500*x6503);
IkReal x6512=(x6497*x6505);
IkReal x6513=(x6499*x6500);
IkReal x6514=(x6495*x6500);
IkReal x6515=(x6498*x6500);
IkReal x6516=(x6502*x6507);
IkReal x6517=(x6496*x6497);
IkReal x6518=(x6509+x6514+x6515+x6516+x6517);
IkReal x6519=(x6508+x6510+x6511+x6512+x6513);
IkReal x6520=((((0.28199832)*x6504))+(((1.93020072)*pz))+((x6502*x6505))+((x6494*x6499))+((x6497*x6506))+((x6494*x6503)));
IkReal x6521=(((x6494*x6495))+((x6494*x6498))+(((0.09399944)*x6504))+(((0.64340024)*pz))+((x6497*x6507))+((x6496*x6502)));
op[0]=((-0.102943966020431)+(((-1.0)*x6521))+x6518);
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+(((-1.0)*x6520))+x6519);
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+(((-1.0)*x6520))+x6519);
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+(((-1.0)*x6521))+x6518);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x6522=((0.09399944)*pz);
IkReal x6523=(r00*sj0);
IkReal x6524=((6.75570252e-7)*cj5);
IkReal x6525=((0.000514720192)*sj5);
IkReal x6526=(cj0*sj5);
IkReal x6527=(px*sj0);
IkReal x6528=((2.25190084e-7)*cj5);
IkReal x6529=(cj0*py);
IkReal x6530=(cj0*r10);
IkReal x6531=((0.64340024)*x6527);
IkReal x6532=((1.93020072)*x6527);
IkReal x6533=((0.64340024)*x6529);
IkReal x6534=(cj5*r01*sj0);
IkReal x6535=(cj0*cj5*r11);
IkReal x6536=(r01*sj0*sj5);
IkReal x6537=(x6523*x6525);
IkReal x6538=((2.25190084e-7)*x6536);
IkReal x6539=((0.000514720192)*x6534);
IkReal x6540=(x6528*x6530);
IkReal x6541=(x6524*x6530);
IkReal x6542=((0.001544160576)*sj5*x6523);
IkReal x6543=((0.001544160576)*x6534);
IkReal x6544=((6.75570252e-7)*x6536);
IkReal x6545=((0.000514720192)*x6535);
IkReal x6546=(x6523*x6528);
IkReal x6547=((2.25190084e-7)*r11*x6526);
IkReal x6548=(x6525*x6530);
IkReal x6549=(x6537+x6531+x6538+x6539+x6540);
IkReal x6550=(x6532+x6544+x6543+x6542+x6541);
IkReal x6551=((((0.001544160576)*x6535))+(((6.75570252e-7)*r11*x6526))+(((0.28199832)*pz))+(((0.001544160576)*r10*x6526))+((x6523*x6524))+(((1.93020072)*x6529)));
IkReal x6552=(x6533+x6522+x6547+x6546+x6545+x6548);
j1evalpoly[0]=((0.0150404058181848)+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x6552))+x6549))))+(((-0.205887932040862)*htj1))+(((-1.0)*x6552))+x6549+(((htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x6551))+x6550))))+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x6551))+x6550))))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6553=cj1*cj1;
IkReal x6554=((6.21697001542928)*pz);
IkReal x6555=(cj1*sj1);
if( IKabs((((cj1*x6554))+(((-0.994715202468684)*x6553))+(((-4.78706691188054e-6)*x6555)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x6553))+(((-0.994715202468684)*x6555))+((sj1*x6554)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x6554))+(((-0.994715202468684)*x6553))+(((-4.78706691188054e-6)*x6555))))+IKsqr(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x6553))+(((-0.994715202468684)*x6555))+((sj1*x6554))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x6554))+(((-0.994715202468684)*x6553))+(((-4.78706691188054e-6)*x6555))), ((-4.78706691188054e-6)+(((4.78706691188054e-6)*x6553))+(((-0.994715202468684)*x6555))+((sj1*x6554))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x6556=IKcos(j2);
IkReal x6557=IKsin(j2);
IkReal x6558=(cj0*cj5);
IkReal x6559=(sj0*sj5);
IkReal x6560=(cj5*sj0);
IkReal x6561=(cj0*sj5);
IkReal x6562=((1.0)*x6556);
IkReal x6563=((0.02349986)*x6556);
IkReal x6564=(sj1*x6557);
IkReal x6565=((0.16085006)*x6556);
IkReal x6566=(cj1*x6557);
IkReal x6567=(sj1*x6562);
IkReal x6568=((1.0)*x6566);
IkReal x6569=(x6568+x6567);
evalcond[0]=((((-1.0)*cj1*x6562))+x6564);
evalcond[1]=((-1.0)*x6569);
evalcond[2]=((((-1.0)*r11*x6558))+(((-1.0)*r10*x6561))+(((-1.0)*x6569))+((r01*x6560))+((r00*x6559)));
evalcond[3]=((((-0.02349986)*x6564))+(((0.16)*cj1))+(((-1.0)*pz))+((sj1*x6565))+(((0.16085006)*x6566))+(((7.7e-7)*sj1))+((cj1*x6563)));
evalcond[4]=((((3.5e-7)*r11*x6561))+(((-0.0008)*r00*x6559))+(((-1.0)*cj1*x6565))+(((0.02349986)*x6566))+(((0.0008)*r11*x6558))+(((-3.5e-7)*r10*x6558))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((3.5e-7)*r00*x6560))+(((-3.5e-7)*r01*x6559))+((sj1*x6563))+(((0.16085006)*x6564))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0008)*r01*x6560))+(((0.0008)*r10*x6561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x6571 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6571.valid){
continue;
}
IkReal x6570=x6571.value;
j0array[0]=((-1.0)*x6570);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x6570)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x6572=IKcos(j0);
IkReal x6573=IKsin(j0);
IkReal x6574=((3.5e-7)*sj5);
IkReal x6575=((0.0008)*cj5);
IkReal x6576=((0.0008)*sj5);
IkReal x6577=((3.5e-7)*cj5);
IkReal x6578=(r01*x6572);
IkReal x6579=(r11*x6573);
IkReal x6580=(r10*x6573);
IkReal x6581=(r00*x6572);
evalcond[0]=((((-1.0)*py*x6573))+(((-1.0)*x6576*x6580))+(((-1.0)*x6576*x6581))+(((-1.0)*x6574*x6579))+(((-1.0)*x6574*x6578))+(((-1.0)*px*x6572))+(((-1.0)*x6575*x6578))+(((-1.0)*x6575*x6579))+((x6577*x6580))+((x6577*x6581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x6582=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6582);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6582);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x6583=(r00*sj0);
IkReal x6584=((6.75570252e-7)*cj5);
IkReal x6585=(r01*sj0);
IkReal x6586=((3.2899804e-8)*sj5);
IkReal x6587=((0.000514720192)*sj5);
IkReal x6588=(cj0*sj5);
IkReal x6589=((7.5199552e-5)*cj5);
IkReal x6590=((0.000225598656)*cj5);
IkReal x6591=(px*sj0);
IkReal x6592=(cj0*r10);
IkReal x6593=((2.25190084e-7)*cj5);
IkReal x6594=(cj0*r11);
IkReal x6595=((0.001544160576)*cj5);
IkReal x6596=((0.000514720192)*cj5);
IkReal x6597=(cj0*py);
IkReal x6598=((9.8699412e-8)*cj5);
IkReal x6599=((3.2899804e-8)*cj5);
IkReal x6600=((0.28199832)*x6597);
IkReal x6601=((1.93020072)*x6591);
IkReal x6602=(x6583*x6598);
IkReal x6603=((9.8699412e-8)*r11*x6588);
IkReal x6604=((0.000225598656)*r10*x6588);
IkReal x6605=(x6590*x6594);
IkReal x6606=(x6584*x6592);
IkReal x6607=((0.001544160576)*sj5*x6583);
IkReal x6608=(x6585*x6595);
IkReal x6609=((6.75570252e-7)*sj5*x6585);
IkReal x6610=(x6600+x6602+x6603+x6604+x6605);
IkReal x6611=(x6601+x6606+x6607+x6608+x6609);
IkReal x6612=((((1.93020072)*pz))+((x6585*x6590))+((x6592*x6598))+(((0.000225598656)*sj5*x6583))+(((9.8699412e-8)*sj5*x6585))+(((0.28199832)*x6591)));
IkReal x6613=(((x6594*x6595))+(((1.93020072)*x6597))+((x6583*x6584))+(((6.75570252e-7)*r11*x6588))+(((0.28199832)*pz))+(((0.001544160576)*r10*x6588)));
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x6613))+x6611)))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-2.25190084e-7)*r11*x6588))+((x6585*x6596))+((x6592*x6593))+((x6583*x6587))+(((-0.64340024)*x6597))+(((2.25190084e-7)*sj5*x6585))+(((-1.0)*x6587*x6592))+(((-1.0)*x6594*x6596))+(((0.64340024)*x6591))+(((-1.0)*x6583*x6593))+(((-0.09399944)*pz)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+(((-1.0)*x6612))+x6610)))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-7.5199552e-5)*sj5*x6583))+(((-0.09399944)*x6591))+(((7.5199552e-5)*r10*x6588))+((x6583*x6599))+(((-1.0)*x6592*x6599))+((x6589*x6594))+(((-0.64340024)*pz))+((x6586*x6594))+(((0.09399944)*x6597))+(((-1.0)*x6585*x6586))+(((-1.0)*x6585*x6589)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x6612))+x6610)))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-1.0)*x6613))+x6611))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x6614=(r01*sj0);
IkReal x6615=((3.2899804e-8)*sj5);
IkReal x6616=((7.5199552e-5)*sj5);
IkReal x6617=(cj0*r10);
IkReal x6618=((7.5199552e-5)*cj5);
IkReal x6619=((0.000225598656)*cj5);
IkReal x6620=(cj0*r11);
IkReal x6621=(cj0*py);
IkReal x6622=(r00*sj0);
IkReal x6623=((9.8699412e-8)*sj5);
IkReal x6624=(px*sj0);
IkReal x6625=((0.000225598656)*sj5);
IkReal x6626=((9.8699412e-8)*cj5);
IkReal x6627=((3.2899804e-8)*cj5);
IkReal x6628=((0.28199832)*x6621);
IkReal x6629=((0.09399944)*x6621);
IkReal x6630=(x6622*x6626);
IkReal x6631=(x6620*x6623);
IkReal x6632=(x6617*x6625);
IkReal x6633=(x6619*x6620);
IkReal x6634=(x6615*x6620);
IkReal x6635=(x6618*x6620);
IkReal x6636=(x6622*x6627);
IkReal x6637=(x6616*x6617);
IkReal x6638=(x6629+x6635+x6634+x6637+x6636);
IkReal x6639=(x6628+x6631+x6630+x6633+x6632);
IkReal x6640=((((1.93020072)*pz))+(((0.28199832)*x6624))+((x6614*x6619))+((x6614*x6623))+((x6617*x6626))+((x6622*x6625)));
IkReal x6641=((((0.09399944)*x6624))+((x6614*x6618))+((x6614*x6615))+(((0.64340024)*pz))+((x6617*x6627))+((x6616*x6622)));
op[0]=((-0.102943966020431)+(((-1.0)*x6641))+x6638);
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+(((-1.0)*x6640))+x6639);
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+(((-1.0)*x6640))+x6639);
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+(((-1.0)*x6641))+x6638);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x6642=((0.09399944)*pz);
IkReal x6643=(r00*sj0);
IkReal x6644=((6.75570252e-7)*cj5);
IkReal x6645=((0.000514720192)*sj5);
IkReal x6646=(cj0*sj5);
IkReal x6647=(px*sj0);
IkReal x6648=((2.25190084e-7)*cj5);
IkReal x6649=(cj0*py);
IkReal x6650=(cj0*r10);
IkReal x6651=((0.64340024)*x6647);
IkReal x6652=((1.93020072)*x6647);
IkReal x6653=((0.64340024)*x6649);
IkReal x6654=(cj5*r01*sj0);
IkReal x6655=(cj0*cj5*r11);
IkReal x6656=(r01*sj0*sj5);
IkReal x6657=(x6643*x6645);
IkReal x6658=((2.25190084e-7)*x6656);
IkReal x6659=((0.000514720192)*x6654);
IkReal x6660=(x6648*x6650);
IkReal x6661=(x6644*x6650);
IkReal x6662=((0.001544160576)*sj5*x6643);
IkReal x6663=((0.001544160576)*x6654);
IkReal x6664=((6.75570252e-7)*x6656);
IkReal x6665=((0.000514720192)*x6655);
IkReal x6666=(x6643*x6648);
IkReal x6667=((2.25190084e-7)*r11*x6646);
IkReal x6668=(x6645*x6650);
IkReal x6669=(x6659+x6658+x6657+x6651+x6660);
IkReal x6670=(x6652+x6662+x6663+x6661+x6664);
IkReal x6671=((((1.93020072)*x6649))+(((0.001544160576)*r10*x6646))+((x6643*x6644))+(((0.001544160576)*x6655))+(((0.28199832)*pz))+(((6.75570252e-7)*r11*x6646)));
IkReal x6672=(x6642+x6653+x6668+x6666+x6667+x6665);
j1evalpoly[0]=((0.0150404058181848)+(((htj1*htj1)*(((0.0150404058181848)+x6670+(((-1.0)*x6671))))))+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x6670+(((-1.0)*x6671))))))+(((-0.205887932040862)*htj1))+x6669+(((-1.0)*x6672))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x6669+(((-1.0)*x6672)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6673=cj1*cj1;
IkReal x6674=((6.21697001542928)*pz);
IkReal x6675=(cj1*sj1);
if( IKabs(((((-0.994715202468684)*x6673))+(((-4.78706691188054e-6)*x6675))+((cj1*x6674)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x6673))+(((-0.994715202468684)*x6675))+((sj1*x6674)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.994715202468684)*x6673))+(((-4.78706691188054e-6)*x6675))+((cj1*x6674))))+IKsqr(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x6673))+(((-0.994715202468684)*x6675))+((sj1*x6674))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.994715202468684)*x6673))+(((-4.78706691188054e-6)*x6675))+((cj1*x6674))), ((-4.78706691188054e-6)+(((4.78706691188054e-6)*x6673))+(((-0.994715202468684)*x6675))+((sj1*x6674))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x6676=IKcos(j2);
IkReal x6677=IKsin(j2);
IkReal x6678=(cj0*cj5);
IkReal x6679=(sj0*sj5);
IkReal x6680=(cj5*sj0);
IkReal x6681=(cj0*sj5);
IkReal x6682=((1.0)*x6676);
IkReal x6683=((0.02349986)*x6676);
IkReal x6684=(sj1*x6677);
IkReal x6685=((0.16085006)*x6676);
IkReal x6686=(cj1*x6677);
IkReal x6687=(sj1*x6682);
IkReal x6688=((1.0)*x6686);
IkReal x6689=(x6688+x6687);
evalcond[0]=(x6684+(((-1.0)*cj1*x6682)));
evalcond[1]=((-1.0)*x6689);
evalcond[2]=((((-1.0)*r10*x6681))+(((-1.0)*r11*x6678))+((r01*x6680))+((r00*x6679))+(((-1.0)*x6689)));
evalcond[3]=((((-0.02349986)*x6684))+(((0.16)*cj1))+((sj1*x6685))+(((-1.0)*pz))+((cj1*x6683))+(((7.7e-7)*sj1))+(((0.16085006)*x6686)));
evalcond[4]=((((3.5e-7)*r00*x6680))+(((-3.5e-7)*r01*x6679))+(((-0.0008)*r00*x6679))+((sj1*x6683))+(((-3.5e-7)*r10*x6678))+(((3.5e-7)*r11*x6681))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.02349986)*x6686))+(((0.0008)*r10*x6681))+(((0.16085006)*x6684))+(((-0.0008)*r01*x6680))+(((-1.0)*px*sj0))+(((-1.0)*cj1*x6685))+((cj0*py))+(((0.0008)*r11*x6678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((-1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x6690=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6690);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6690);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
j0eval[0]=((cj5*cj5)+(sj5*sj5));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x6691=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6691);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6691);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x6692=((3.5e-7)*cj5);
IkReal x6693=((0.0008)*cj5);
IkReal x6694=((0.0008)*sj5);
IkReal x6695=((3.5e-7)*sj5);
j0eval[0]=((IKabs(((((-1.0)*r00*x6694))+(((-1.0)*r01*x6693))+(((-1.0)*r01*x6695))+(((-1.0)*px))+((r00*x6692)))))+(IKabs(((((-1.0)*r10*x6694))+((r10*x6692))+(((-1.0)*py))+(((-1.0)*r11*x6693))+(((-1.0)*r11*x6695))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x6696=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6696);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6696);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
j1eval[0]=60.0;
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[8+1], zeror[8];
int numroots;
op[0]=4.0;
op[1]=0;
op[2]=16.0;
op[3]=0;
op[4]=24.0;
op[5]=0;
op[6]=16.0;
op[7]=0;
op[8]=4.0;
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6697=cj1*cj1;
IkReal x6698=((6.21697001542928)*pz);
IkReal x6699=(cj1*sj1);
if( IKabs(((((-0.994715202468684)*x6697))+((cj1*x6698))+(((-4.78706691188054e-6)*x6699)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((-0.994715202468684)*x6699))+((sj1*x6698))+(((4.78706691188054e-6)*x6697)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.994715202468684)*x6697))+((cj1*x6698))+(((-4.78706691188054e-6)*x6699))))+IKsqr(((-4.78706691188054e-6)+(((-0.994715202468684)*x6699))+((sj1*x6698))+(((4.78706691188054e-6)*x6697))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.994715202468684)*x6697))+((cj1*x6698))+(((-4.78706691188054e-6)*x6699))), ((-4.78706691188054e-6)+(((-0.994715202468684)*x6699))+((sj1*x6698))+(((4.78706691188054e-6)*x6697))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x6700=IKcos(j2);
IkReal x6701=IKsin(j2);
IkReal x6702=(sj1*x6701);
IkReal x6703=(sj1*x6700);
IkReal x6704=(cj1*x6701);
IkReal x6705=(cj1*x6700);
evalcond[0]=(x6702+(((-1.0)*x6705)));
evalcond[1]=((((-1.0)*x6704))+(((-1.0)*x6703)));
evalcond[2]=((((0.16)*cj1))+(((0.16085006)*x6703))+(((0.16085006)*x6704))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-0.02349986)*x6702))+(((0.02349986)*x6705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6706=(cj1*sj2);
IkReal x6707=(cj5*r01);
IkReal x6708=(cj2*sj1);
IkReal x6709=(r00*sj5);
IkReal x6710=((1.0)*r10*sj5);
IkReal x6711=((1.0)*cj5*r11);
if( IKabs((((x6706*x6707))+((x6706*x6709))+((x6707*x6708))+((x6708*x6709)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6708*x6710))+(((-1.0)*x6708*x6711))+(((-1.0)*x6706*x6710))+(((-1.0)*x6706*x6711)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x6706*x6707))+((x6706*x6709))+((x6707*x6708))+((x6708*x6709))))+IKsqr(((((-1.0)*x6708*x6710))+(((-1.0)*x6708*x6711))+(((-1.0)*x6706*x6710))+(((-1.0)*x6706*x6711))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x6706*x6707))+((x6706*x6709))+((x6707*x6708))+((x6708*x6709))), ((((-1.0)*x6708*x6710))+(((-1.0)*x6708*x6711))+(((-1.0)*x6706*x6710))+(((-1.0)*x6706*x6711))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6712=IKcos(j0);
IkReal x6713=IKsin(j0);
IkReal x6714=((1.0)*px);
IkReal x6715=((0.0008)*r11);
IkReal x6716=(r00*sj5);
IkReal x6717=((3.5e-7)*r01);
IkReal x6718=(cj1*sj2);
IkReal x6719=(cj2*sj1);
IkReal x6720=((3.5e-7)*r11);
IkReal x6721=((0.0008)*r01);
IkReal x6722=((3.5e-7)*r10);
IkReal x6723=((3.5e-7)*r00);
IkReal x6724=((0.0008)*r10);
IkReal x6725=(cj5*x6713);
IkReal x6726=(sj5*x6713);
IkReal x6727=(sj5*x6712);
IkReal x6728=(cj5*x6712);
evalcond[0]=(((r11*x6725))+((x6712*x6716))+((r10*x6726))+((r01*x6728)));
evalcond[1]=((((-1.0)*x6718))+(((-1.0)*x6719))+(((-1.0)*r11*x6728))+(((-1.0)*r10*x6727))+((x6713*x6716))+((r01*x6725)));
evalcond[2]=((((-0.0008)*x6712*x6716))+(((-1.0)*x6724*x6726))+(((-1.0)*x6717*x6727))+((x6723*x6728))+(((-1.0)*x6712*x6714))+(((-1.0)*py*x6713))+(((-1.0)*x6715*x6725))+(((-1.0)*x6721*x6728))+(((-1.0)*x6720*x6726))+((x6722*x6725)));
evalcond[3]=(((x6724*x6727))+((x6715*x6728))+((py*x6712))+(((0.02349986)*x6719))+(((0.02349986)*x6718))+(((-1.0)*x6713*x6714))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*x6717*x6726))+((x6723*x6725))+(((-1.0)*x6722*x6728))+(((-1.0)*x6721*x6725))+((x6720*x6727))+(((-0.16085006)*cj1*cj2))+(((0.16085006)*sj1*sj2))+(((-0.0008)*x6713*x6716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x6729=((3.5e-7)*cj5);
IkReal x6730=((0.0008)*cj5);
IkReal x6731=((0.0008)*sj5);
IkReal x6732=((3.5e-7)*sj5);
CheckValue<IkReal> x6734 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x6730))+(((-1.0)*r01*x6732))+(((-1.0)*r00*x6731))+(((-1.0)*px))+((r00*x6729)))),IkReal(((((-1.0)*r11*x6732))+(((-1.0)*r11*x6730))+(((-1.0)*r10*x6731))+(((-1.0)*py))+((r10*x6729)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6734.valid){
continue;
}
IkReal x6733=x6734.value;
j0array[0]=((-1.0)*x6733);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x6733)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x6735=IKcos(j0);
IkReal x6736=IKsin(j0);
evalcond[0]=(((r00*sj5*x6735))+((cj5*r01*x6735))+((r10*sj5*x6736))+((cj5*r11*x6736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x6737=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6737);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6737);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x6738=(r00*sj0);
IkReal x6739=((6.75570252e-7)*cj5);
IkReal x6740=(r01*sj0);
IkReal x6741=((3.2899804e-8)*sj5);
IkReal x6742=((0.000514720192)*sj5);
IkReal x6743=(cj0*sj5);
IkReal x6744=((7.5199552e-5)*cj5);
IkReal x6745=((0.000225598656)*cj5);
IkReal x6746=(px*sj0);
IkReal x6747=(cj0*r10);
IkReal x6748=((2.25190084e-7)*cj5);
IkReal x6749=(cj0*r11);
IkReal x6750=((0.001544160576)*cj5);
IkReal x6751=((0.000514720192)*cj5);
IkReal x6752=(cj0*py);
IkReal x6753=((9.8699412e-8)*cj5);
IkReal x6754=((3.2899804e-8)*cj5);
IkReal x6755=((0.28199832)*x6752);
IkReal x6756=((1.93020072)*x6746);
IkReal x6757=(x6738*x6753);
IkReal x6758=((9.8699412e-8)*r11*x6743);
IkReal x6759=((0.000225598656)*r10*x6743);
IkReal x6760=(x6745*x6749);
IkReal x6761=(x6739*x6747);
IkReal x6762=((0.001544160576)*sj5*x6738);
IkReal x6763=(x6740*x6750);
IkReal x6764=((6.75570252e-7)*sj5*x6740);
IkReal x6765=(x6760+x6758+x6759+x6757+x6755);
IkReal x6766=(x6764+x6763+x6762+x6761+x6756);
IkReal x6767=((((0.000225598656)*sj5*x6738))+(((1.93020072)*pz))+(((9.8699412e-8)*sj5*x6740))+(((0.28199832)*x6746))+((x6747*x6753))+((x6740*x6745)));
IkReal x6768=((((1.93020072)*x6752))+(((6.75570252e-7)*r11*x6743))+((x6738*x6739))+((x6749*x6750))+(((0.28199832)*pz))+(((0.001544160576)*r10*x6743)));
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((0.0150404058181848)+x6766+(((-1.0)*x6768)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+x6766+(((-1.0)*x6768)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+x6765+(((-1.0)*x6767)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+x6765+(((-1.0)*x6767)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x6742*x6747))+(((-2.25190084e-7)*r11*x6743))+(((-0.64340024)*x6752))+((x6747*x6748))+((x6738*x6742))+(((0.64340024)*x6746))+(((-1.0)*x6749*x6751))+(((-1.0)*x6738*x6748))+((x6740*x6751))+(((2.25190084e-7)*sj5*x6740))+(((-0.09399944)*pz)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+((x6738*x6754))+((x6741*x6749))+(((0.09399944)*x6752))+((x6744*x6749))+(((-0.09399944)*x6746))+(((-0.64340024)*pz))+(((-7.5199552e-5)*sj5*x6738))+(((-1.0)*x6747*x6754))+(((7.5199552e-5)*r10*x6743))+(((-1.0)*x6740*x6744))+(((-1.0)*x6740*x6741))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x6769=(r01*sj0);
IkReal x6770=((3.2899804e-8)*sj5);
IkReal x6771=((7.5199552e-5)*sj5);
IkReal x6772=(cj0*r10);
IkReal x6773=((7.5199552e-5)*cj5);
IkReal x6774=((0.000225598656)*cj5);
IkReal x6775=(cj0*r11);
IkReal x6776=(cj0*py);
IkReal x6777=(r00*sj0);
IkReal x6778=((9.8699412e-8)*sj5);
IkReal x6779=(px*sj0);
IkReal x6780=((0.000225598656)*sj5);
IkReal x6781=((9.8699412e-8)*cj5);
IkReal x6782=((3.2899804e-8)*cj5);
IkReal x6783=((0.28199832)*x6776);
IkReal x6784=((0.09399944)*x6776);
IkReal x6785=(x6777*x6781);
IkReal x6786=(x6775*x6778);
IkReal x6787=(x6772*x6780);
IkReal x6788=(x6774*x6775);
IkReal x6789=(x6770*x6775);
IkReal x6790=(x6773*x6775);
IkReal x6791=(x6777*x6782);
IkReal x6792=(x6771*x6772);
IkReal x6793=(x6784+x6789+x6792+x6790+x6791);
IkReal x6794=(x6783+x6785+x6787+x6786+x6788);
IkReal x6795=(((x6777*x6780))+(((1.93020072)*pz))+((x6772*x6781))+((x6769*x6774))+((x6769*x6778))+(((0.28199832)*x6779)));
IkReal x6796=(((x6772*x6782))+((x6769*x6773))+((x6769*x6770))+(((0.09399944)*x6779))+((x6771*x6777))+(((0.64340024)*pz)));
op[0]=((-0.102943966020431)+x6793+(((-1.0)*x6796)));
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+x6794+(((-1.0)*x6795)));
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+x6794+(((-1.0)*x6795)));
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+x6793+(((-1.0)*x6796)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x6797=((0.09399944)*pz);
IkReal x6798=(r00*sj0);
IkReal x6799=((6.75570252e-7)*cj5);
IkReal x6800=((0.000514720192)*sj5);
IkReal x6801=(cj0*sj5);
IkReal x6802=(px*sj0);
IkReal x6803=((2.25190084e-7)*cj5);
IkReal x6804=(cj0*py);
IkReal x6805=(cj0*r10);
IkReal x6806=((0.64340024)*x6802);
IkReal x6807=((1.93020072)*x6802);
IkReal x6808=((0.64340024)*x6804);
IkReal x6809=(cj5*r01*sj0);
IkReal x6810=(cj0*cj5*r11);
IkReal x6811=(r01*sj0*sj5);
IkReal x6812=(x6798*x6800);
IkReal x6813=((2.25190084e-7)*x6811);
IkReal x6814=((0.000514720192)*x6809);
IkReal x6815=(x6803*x6805);
IkReal x6816=(x6799*x6805);
IkReal x6817=((0.001544160576)*sj5*x6798);
IkReal x6818=((0.001544160576)*x6809);
IkReal x6819=((6.75570252e-7)*x6811);
IkReal x6820=((0.000514720192)*x6810);
IkReal x6821=(x6798*x6803);
IkReal x6822=((2.25190084e-7)*r11*x6801);
IkReal x6823=(x6800*x6805);
IkReal x6824=(x6813+x6812+x6815+x6814+x6806);
IkReal x6825=(x6819+x6818+x6817+x6816+x6807);
IkReal x6826=((((1.93020072)*x6804))+(((0.001544160576)*x6810))+(((0.001544160576)*r10*x6801))+(((6.75570252e-7)*r11*x6801))+((x6798*x6799))+(((0.28199832)*pz)));
IkReal x6827=(x6797+x6820+x6821+x6822+x6823+x6808);
j1evalpoly[0]=((0.0150404058181848)+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((-1.0)*x6827))+(((-0.205887932040862)*htj1))+x6824+(((htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x6826))+x6825))))+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x6826))+x6825))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x6827))+x6824))))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6828=cj1*cj1;
IkReal x6829=((6.21697001542928)*pz);
IkReal x6830=(cj1*sj1);
if( IKabs(((((-4.78706691188054e-6)*x6830))+((cj1*x6829))+(((-0.994715202468684)*x6828)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+((sj1*x6829))+(((-0.994715202468684)*x6830))+(((4.78706691188054e-6)*x6828)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-4.78706691188054e-6)*x6830))+((cj1*x6829))+(((-0.994715202468684)*x6828))))+IKsqr(((-4.78706691188054e-6)+((sj1*x6829))+(((-0.994715202468684)*x6830))+(((4.78706691188054e-6)*x6828))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-4.78706691188054e-6)*x6830))+((cj1*x6829))+(((-0.994715202468684)*x6828))), ((-4.78706691188054e-6)+((sj1*x6829))+(((-0.994715202468684)*x6830))+(((4.78706691188054e-6)*x6828))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x6831=IKcos(j2);
IkReal x6832=IKsin(j2);
IkReal x6833=(cj0*cj5);
IkReal x6834=(sj0*sj5);
IkReal x6835=(cj5*sj0);
IkReal x6836=(cj0*sj5);
IkReal x6837=((1.0)*x6831);
IkReal x6838=((0.02349986)*x6831);
IkReal x6839=(sj1*x6832);
IkReal x6840=((0.16085006)*x6831);
IkReal x6841=(cj1*x6832);
IkReal x6842=(sj1*x6837);
IkReal x6843=((1.0)*x6841);
IkReal x6844=(x6842+x6843);
evalcond[0]=(x6839+(((-1.0)*cj1*x6837)));
evalcond[1]=((-1.0)*x6844);
evalcond[2]=((((-1.0)*x6844))+((r00*x6834))+(((-1.0)*r10*x6836))+((r01*x6835))+(((-1.0)*r11*x6833)));
evalcond[3]=(((sj1*x6840))+(((0.16)*cj1))+(((0.16085006)*x6841))+(((-1.0)*pz))+((cj1*x6838))+(((7.7e-7)*sj1))+(((-0.02349986)*x6839)));
evalcond[4]=((((0.16085006)*x6839))+((sj1*x6838))+(((0.0008)*r11*x6833))+(((3.5e-7)*r11*x6836))+(((0.0008)*r10*x6836))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.0008)*r01*x6835))+(((-1.0)*cj1*x6840))+(((-3.5e-7)*r01*x6834))+(((-0.0008)*r00*x6834))+(((-1.0)*px*sj0))+((cj0*py))+(((-3.5e-7)*r10*x6833))+(((3.5e-7)*r00*x6835))+(((0.02349986)*x6841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x6846 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6846.valid){
continue;
}
IkReal x6845=x6846.value;
j0array[0]=((-1.0)*x6845);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x6845)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x6847=IKcos(j0);
IkReal x6848=IKsin(j0);
IkReal x6849=((3.5e-7)*sj5);
IkReal x6850=((0.0008)*cj5);
IkReal x6851=((0.0008)*sj5);
IkReal x6852=((3.5e-7)*cj5);
IkReal x6853=(r01*x6847);
IkReal x6854=(r11*x6848);
IkReal x6855=(r10*x6848);
IkReal x6856=(r00*x6847);
evalcond[0]=((((-1.0)*py*x6848))+(((-1.0)*px*x6847))+(((-1.0)*x6851*x6856))+(((-1.0)*x6851*x6855))+(((-1.0)*x6849*x6853))+(((-1.0)*x6849*x6854))+(((-1.0)*x6850*x6853))+(((-1.0)*x6850*x6854))+((x6852*x6856))+((x6852*x6855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x6857=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6857);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6857);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x6858=(r00*sj0);
IkReal x6859=((6.75570252e-7)*cj5);
IkReal x6860=(r01*sj0);
IkReal x6861=((3.2899804e-8)*sj5);
IkReal x6862=((0.000514720192)*sj5);
IkReal x6863=(cj0*sj5);
IkReal x6864=((7.5199552e-5)*cj5);
IkReal x6865=((0.000225598656)*cj5);
IkReal x6866=(px*sj0);
IkReal x6867=(cj0*r10);
IkReal x6868=((2.25190084e-7)*cj5);
IkReal x6869=(cj0*r11);
IkReal x6870=((0.001544160576)*cj5);
IkReal x6871=((0.000514720192)*cj5);
IkReal x6872=(cj0*py);
IkReal x6873=((9.8699412e-8)*cj5);
IkReal x6874=((3.2899804e-8)*cj5);
IkReal x6875=((0.28199832)*x6872);
IkReal x6876=((1.93020072)*x6866);
IkReal x6877=(x6858*x6873);
IkReal x6878=((9.8699412e-8)*r11*x6863);
IkReal x6879=((0.000225598656)*r10*x6863);
IkReal x6880=(x6865*x6869);
IkReal x6881=(x6859*x6867);
IkReal x6882=((0.001544160576)*sj5*x6858);
IkReal x6883=(x6860*x6870);
IkReal x6884=((6.75570252e-7)*sj5*x6860);
IkReal x6885=(x6880+x6879+x6878+x6877+x6875);
IkReal x6886=(x6884+x6882+x6883+x6881+x6876);
IkReal x6887=((((1.93020072)*pz))+(((0.000225598656)*sj5*x6858))+(((9.8699412e-8)*sj5*x6860))+((x6860*x6865))+(((0.28199832)*x6866))+((x6867*x6873)));
IkReal x6888=((((1.93020072)*x6872))+(((6.75570252e-7)*r11*x6863))+(((0.001544160576)*r10*x6863))+(((0.28199832)*pz))+((x6858*x6859))+((x6869*x6870)));
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-0.09399944)*x6866))+(((7.5199552e-5)*r10*x6863))+(((0.09399944)*x6872))+(((-1.0)*x6860*x6861))+(((-1.0)*x6860*x6864))+(((-7.5199552e-5)*sj5*x6858))+((x6864*x6869))+(((-0.64340024)*pz))+(((-1.0)*x6867*x6874))+((x6858*x6874))+((x6861*x6869)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+x6886+(((-1.0)*x6888)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+x6885+(((-1.0)*x6887)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+x6886+(((-1.0)*x6888)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+x6885+(((-1.0)*x6887)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x6869*x6871))+(((2.25190084e-7)*sj5*x6860))+((x6860*x6871))+(((-1.0)*x6862*x6867))+(((0.64340024)*x6866))+((x6858*x6862))+(((-0.64340024)*x6872))+(((-2.25190084e-7)*r11*x6863))+(((-1.0)*x6858*x6868))+((x6867*x6868))+(((-0.09399944)*pz))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x6889=(r01*sj0);
IkReal x6890=((3.2899804e-8)*sj5);
IkReal x6891=((7.5199552e-5)*sj5);
IkReal x6892=(cj0*r10);
IkReal x6893=((7.5199552e-5)*cj5);
IkReal x6894=((0.000225598656)*cj5);
IkReal x6895=(cj0*r11);
IkReal x6896=(cj0*py);
IkReal x6897=(r00*sj0);
IkReal x6898=((9.8699412e-8)*sj5);
IkReal x6899=(px*sj0);
IkReal x6900=((0.000225598656)*sj5);
IkReal x6901=((9.8699412e-8)*cj5);
IkReal x6902=((3.2899804e-8)*cj5);
IkReal x6903=((0.28199832)*x6896);
IkReal x6904=((0.09399944)*x6896);
IkReal x6905=(x6897*x6901);
IkReal x6906=(x6895*x6898);
IkReal x6907=(x6892*x6900);
IkReal x6908=(x6894*x6895);
IkReal x6909=(x6890*x6895);
IkReal x6910=(x6893*x6895);
IkReal x6911=(x6897*x6902);
IkReal x6912=(x6891*x6892);
IkReal x6913=(x6910+x6911+x6912+x6904+x6909);
IkReal x6914=(x6907+x6906+x6905+x6903+x6908);
IkReal x6915=(((x6897*x6900))+(((1.93020072)*pz))+((x6889*x6894))+((x6889*x6898))+((x6892*x6901))+(((0.28199832)*x6899)));
IkReal x6916=(((x6891*x6897))+((x6889*x6890))+((x6889*x6893))+(((0.09399944)*x6899))+((x6892*x6902))+(((0.64340024)*pz)));
op[0]=((-0.102943966020431)+(((-1.0)*x6916))+x6913);
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+(((-1.0)*x6915))+x6914);
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+(((-1.0)*x6915))+x6914);
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+(((-1.0)*x6916))+x6913);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x6917=((0.09399944)*pz);
IkReal x6918=(r00*sj0);
IkReal x6919=((6.75570252e-7)*cj5);
IkReal x6920=((0.000514720192)*sj5);
IkReal x6921=(cj0*sj5);
IkReal x6922=(px*sj0);
IkReal x6923=((2.25190084e-7)*cj5);
IkReal x6924=(cj0*py);
IkReal x6925=(cj0*r10);
IkReal x6926=((0.64340024)*x6922);
IkReal x6927=((1.93020072)*x6922);
IkReal x6928=((0.64340024)*x6924);
IkReal x6929=(cj5*r01*sj0);
IkReal x6930=(cj0*cj5*r11);
IkReal x6931=(r01*sj0*sj5);
IkReal x6932=(x6918*x6920);
IkReal x6933=((2.25190084e-7)*x6931);
IkReal x6934=((0.000514720192)*x6929);
IkReal x6935=(x6923*x6925);
IkReal x6936=(x6919*x6925);
IkReal x6937=((0.001544160576)*sj5*x6918);
IkReal x6938=((0.001544160576)*x6929);
IkReal x6939=((6.75570252e-7)*x6931);
IkReal x6940=((0.000514720192)*x6930);
IkReal x6941=(x6918*x6923);
IkReal x6942=((2.25190084e-7)*r11*x6921);
IkReal x6943=(x6920*x6925);
IkReal x6944=(x6932+x6933+x6934+x6935+x6926);
IkReal x6945=(x6936+x6937+x6938+x6939+x6927);
IkReal x6946=((((1.93020072)*x6924))+(((0.001544160576)*x6930))+((x6918*x6919))+(((0.001544160576)*r10*x6921))+(((0.28199832)*pz))+(((6.75570252e-7)*r11*x6921)));
IkReal x6947=(x6928+x6943+x6942+x6941+x6940+x6917);
j1evalpoly[0]=((0.0150404058181848)+(((htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x6946))+x6945))))+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((-0.205887932040862)*htj1))+(((-1.0)*x6947))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x6947))+x6944))))+x6944+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x6946))+x6945))))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6948=cj1*cj1;
IkReal x6949=((6.21697001542928)*pz);
IkReal x6950=(cj1*sj1);
if( IKabs((((cj1*x6949))+(((-0.994715202468684)*x6948))+(((-4.78706691188054e-6)*x6950)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((-0.994715202468684)*x6950))+(((4.78706691188054e-6)*x6948))+((sj1*x6949)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x6949))+(((-0.994715202468684)*x6948))+(((-4.78706691188054e-6)*x6950))))+IKsqr(((-4.78706691188054e-6)+(((-0.994715202468684)*x6950))+(((4.78706691188054e-6)*x6948))+((sj1*x6949))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x6949))+(((-0.994715202468684)*x6948))+(((-4.78706691188054e-6)*x6950))), ((-4.78706691188054e-6)+(((-0.994715202468684)*x6950))+(((4.78706691188054e-6)*x6948))+((sj1*x6949))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x6951=IKcos(j2);
IkReal x6952=IKsin(j2);
IkReal x6953=(cj0*cj5);
IkReal x6954=(sj0*sj5);
IkReal x6955=(cj5*sj0);
IkReal x6956=(cj0*sj5);
IkReal x6957=((1.0)*x6951);
IkReal x6958=((0.02349986)*x6951);
IkReal x6959=(sj1*x6952);
IkReal x6960=((0.16085006)*x6951);
IkReal x6961=(cj1*x6952);
IkReal x6962=(sj1*x6957);
IkReal x6963=((1.0)*x6961);
IkReal x6964=(x6963+x6962);
evalcond[0]=((((-1.0)*cj1*x6957))+x6959);
evalcond[1]=((-1.0)*x6964);
evalcond[2]=((((-1.0)*r10*x6956))+(((-1.0)*x6964))+((r01*x6955))+(((-1.0)*r11*x6953))+((r00*x6954)));
evalcond[3]=(((cj1*x6958))+(((0.16)*cj1))+(((0.16085006)*x6961))+(((-0.02349986)*x6959))+(((-1.0)*pz))+((sj1*x6960))+(((7.7e-7)*sj1)));
evalcond[4]=((((0.0008)*r11*x6953))+(((3.5e-7)*r11*x6956))+(((0.02349986)*x6961))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((3.5e-7)*r00*x6955))+(((-0.0008)*r00*x6954))+(((0.16085006)*x6959))+(((-1.0)*px*sj0))+(((-3.5e-7)*r01*x6954))+((cj0*py))+(((-1.0)*cj1*x6960))+(((0.0008)*r10*x6956))+(((-0.0008)*r01*x6955))+((sj1*x6958))+(((-3.5e-7)*r10*x6953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x6965=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6965);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6965);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
j0eval[0]=((cj5*cj5)+(sj5*sj5));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x6966=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6966);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6966);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x6967=((3.5e-7)*cj5);
IkReal x6968=((0.0008)*cj5);
IkReal x6969=((0.0008)*sj5);
IkReal x6970=((3.5e-7)*sj5);
j0eval[0]=((IKabs((((r10*x6967))+(((-1.0)*r10*x6969))+(((-1.0)*r11*x6968))+(((-1.0)*r11*x6970))+(((-1.0)*py)))))+(IKabs((((r00*x6967))+(((-1.0)*px))+(((-1.0)*r01*x6968))+(((-1.0)*r01*x6970))+(((-1.0)*r00*x6969))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x6971=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x6971);
rxp1_0=(pz*r11);
rxp1_1=(r01*x6971);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
j1eval[0]=60.0;
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[8+1], zeror[8];
int numroots;
op[0]=4.0;
op[1]=0;
op[2]=16.0;
op[3]=0;
op[4]=24.0;
op[5]=0;
op[6]=16.0;
op[7]=0;
op[8]=4.0;
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6972=cj1*cj1;
IkReal x6973=((6.21697001542928)*pz);
IkReal x6974=(cj1*sj1);
if( IKabs(((((-4.78706691188054e-6)*x6974))+((cj1*x6973))+(((-0.994715202468684)*x6972)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x6972))+((sj1*x6973))+(((-0.994715202468684)*x6974)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-4.78706691188054e-6)*x6974))+((cj1*x6973))+(((-0.994715202468684)*x6972))))+IKsqr(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x6972))+((sj1*x6973))+(((-0.994715202468684)*x6974))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-4.78706691188054e-6)*x6974))+((cj1*x6973))+(((-0.994715202468684)*x6972))), ((-4.78706691188054e-6)+(((4.78706691188054e-6)*x6972))+((sj1*x6973))+(((-0.994715202468684)*x6974))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x6975=IKcos(j2);
IkReal x6976=IKsin(j2);
IkReal x6977=(sj1*x6976);
IkReal x6978=(sj1*x6975);
IkReal x6979=(cj1*x6976);
IkReal x6980=(cj1*x6975);
evalcond[0]=((((-1.0)*x6980))+x6977);
evalcond[1]=((((-1.0)*x6978))+(((-1.0)*x6979)));
evalcond[2]=((((0.02349986)*x6980))+(((-0.02349986)*x6977))+(((0.16)*cj1))+(((0.16085006)*x6979))+(((0.16085006)*x6978))+(((-1.0)*pz))+(((7.7e-7)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6981=(cj1*sj2);
IkReal x6982=(cj5*r01);
IkReal x6983=(cj2*sj1);
IkReal x6984=(r00*sj5);
IkReal x6985=((1.0)*r10*sj5);
IkReal x6986=((1.0)*cj5*r11);
if( IKabs((((x6982*x6983))+((x6983*x6984))+((x6981*x6982))+((x6981*x6984)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6983*x6985))+(((-1.0)*x6983*x6986))+(((-1.0)*x6981*x6985))+(((-1.0)*x6981*x6986)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x6982*x6983))+((x6983*x6984))+((x6981*x6982))+((x6981*x6984))))+IKsqr(((((-1.0)*x6983*x6985))+(((-1.0)*x6983*x6986))+(((-1.0)*x6981*x6985))+(((-1.0)*x6981*x6986))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x6982*x6983))+((x6983*x6984))+((x6981*x6982))+((x6981*x6984))), ((((-1.0)*x6983*x6985))+(((-1.0)*x6983*x6986))+(((-1.0)*x6981*x6985))+(((-1.0)*x6981*x6986))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6987=IKcos(j0);
IkReal x6988=IKsin(j0);
IkReal x6989=((1.0)*px);
IkReal x6990=((0.0008)*r11);
IkReal x6991=(r00*sj5);
IkReal x6992=((3.5e-7)*r01);
IkReal x6993=(cj1*sj2);
IkReal x6994=(cj2*sj1);
IkReal x6995=((3.5e-7)*r11);
IkReal x6996=((0.0008)*r01);
IkReal x6997=((3.5e-7)*r10);
IkReal x6998=((3.5e-7)*r00);
IkReal x6999=((0.0008)*r10);
IkReal x7000=(cj5*x6988);
IkReal x7001=(sj5*x6988);
IkReal x7002=(sj5*x6987);
IkReal x7003=(cj5*x6987);
evalcond[0]=(((x6987*x6991))+((r11*x7000))+((r10*x7001))+((r01*x7003)));
evalcond[1]=((((-1.0)*r11*x7003))+(((-1.0)*x6993))+(((-1.0)*x6994))+(((-1.0)*r10*x7002))+((x6988*x6991))+((r01*x7000)));
evalcond[2]=((((-1.0)*x6990*x7000))+(((-1.0)*x6987*x6989))+(((-0.0008)*x6987*x6991))+((x6998*x7003))+(((-1.0)*x6999*x7001))+(((-1.0)*py*x6988))+(((-1.0)*x6996*x7003))+(((-1.0)*x6995*x7001))+(((-1.0)*x6992*x7002))+((x6997*x7000)));
evalcond[3]=(((x6995*x7002))+((py*x6987))+(((0.02349986)*x6993))+(((0.02349986)*x6994))+((x6998*x7000))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.0008)*x6988*x6991))+((x6990*x7003))+(((-1.0)*x6996*x7000))+(((-1.0)*x6988*x6989))+(((-0.16085006)*cj1*cj2))+(((-1.0)*x6992*x7001))+(((0.16085006)*sj1*sj2))+(((-1.0)*x6997*x7003))+((x6999*x7002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x7004=((3.5e-7)*cj5);
IkReal x7005=((0.0008)*cj5);
IkReal x7006=((0.0008)*sj5);
IkReal x7007=((3.5e-7)*sj5);
CheckValue<IkReal> x7009 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x7006))+(((-1.0)*px))+(((-1.0)*r01*x7007))+(((-1.0)*r01*x7005))+((r00*x7004)))),IkReal(((((-1.0)*r11*x7005))+(((-1.0)*r11*x7007))+(((-1.0)*r10*x7006))+(((-1.0)*py))+((r10*x7004)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7009.valid){
continue;
}
IkReal x7008=x7009.value;
j0array[0]=((-1.0)*x7008);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x7008)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x7010=IKcos(j0);
IkReal x7011=IKsin(j0);
evalcond[0]=(((r00*sj5*x7010))+((cj5*r11*x7011))+((r10*sj5*x7011))+((cj5*r01*x7010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x7012=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x7012);
rxp1_0=(pz*r11);
rxp1_1=(r01*x7012);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x7013=(r00*sj0);
IkReal x7014=((6.75570252e-7)*cj5);
IkReal x7015=(r01*sj0);
IkReal x7016=((3.2899804e-8)*sj5);
IkReal x7017=((0.000514720192)*sj5);
IkReal x7018=(cj0*sj5);
IkReal x7019=((7.5199552e-5)*cj5);
IkReal x7020=((0.000225598656)*cj5);
IkReal x7021=(px*sj0);
IkReal x7022=(cj0*r10);
IkReal x7023=((2.25190084e-7)*cj5);
IkReal x7024=(cj0*r11);
IkReal x7025=((0.001544160576)*cj5);
IkReal x7026=((0.000514720192)*cj5);
IkReal x7027=(cj0*py);
IkReal x7028=((9.8699412e-8)*cj5);
IkReal x7029=((3.2899804e-8)*cj5);
IkReal x7030=((0.28199832)*x7027);
IkReal x7031=((1.93020072)*x7021);
IkReal x7032=(x7013*x7028);
IkReal x7033=((9.8699412e-8)*r11*x7018);
IkReal x7034=((0.000225598656)*r10*x7018);
IkReal x7035=(x7020*x7024);
IkReal x7036=(x7014*x7022);
IkReal x7037=((0.001544160576)*sj5*x7013);
IkReal x7038=(x7015*x7025);
IkReal x7039=((6.75570252e-7)*sj5*x7015);
IkReal x7040=(x7030+x7032+x7033+x7034+x7035);
IkReal x7041=(x7031+x7036+x7037+x7038+x7039);
IkReal x7042=((((0.000225598656)*sj5*x7013))+(((1.93020072)*pz))+(((0.28199832)*x7021))+((x7022*x7028))+(((9.8699412e-8)*sj5*x7015))+((x7015*x7020)));
IkReal x7043=((((1.93020072)*x7027))+(((6.75570252e-7)*r11*x7018))+((x7013*x7014))+((x7024*x7025))+(((0.28199832)*pz))+(((0.001544160576)*r10*x7018)));
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-2.25190084e-7)*r11*x7018))+(((2.25190084e-7)*sj5*x7015))+(((-1.0)*x7024*x7026))+((x7013*x7017))+(((0.64340024)*x7021))+((x7022*x7023))+(((-0.64340024)*x7027))+(((-1.0)*x7017*x7022))+(((-1.0)*x7013*x7023))+((x7015*x7026))+(((-0.09399944)*pz)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x7043))+x7041)))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+(((-1.0)*x7042))+x7040)))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+((x7019*x7024))+((x7016*x7024))+(((-1.0)*x7015*x7019))+(((-1.0)*x7015*x7016))+((x7013*x7029))+(((0.09399944)*x7027))+(((-7.5199552e-5)*sj5*x7013))+(((-0.64340024)*pz))+(((-1.0)*x7022*x7029))+(((-0.09399944)*x7021))+(((7.5199552e-5)*r10*x7018)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-1.0)*x7043))+x7041)))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x7042))+x7040))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x7044=(r01*sj0);
IkReal x7045=((3.2899804e-8)*sj5);
IkReal x7046=((7.5199552e-5)*sj5);
IkReal x7047=(cj0*r10);
IkReal x7048=((7.5199552e-5)*cj5);
IkReal x7049=((0.000225598656)*cj5);
IkReal x7050=(cj0*r11);
IkReal x7051=(cj0*py);
IkReal x7052=(r00*sj0);
IkReal x7053=((9.8699412e-8)*sj5);
IkReal x7054=(px*sj0);
IkReal x7055=((0.000225598656)*sj5);
IkReal x7056=((9.8699412e-8)*cj5);
IkReal x7057=((3.2899804e-8)*cj5);
IkReal x7058=((0.28199832)*x7051);
IkReal x7059=((0.09399944)*x7051);
IkReal x7060=(x7052*x7056);
IkReal x7061=(x7050*x7053);
IkReal x7062=(x7047*x7055);
IkReal x7063=(x7049*x7050);
IkReal x7064=(x7045*x7050);
IkReal x7065=(x7048*x7050);
IkReal x7066=(x7052*x7057);
IkReal x7067=(x7046*x7047);
IkReal x7068=(x7059+x7067+x7066+x7065+x7064);
IkReal x7069=(x7058+x7063+x7062+x7061+x7060);
IkReal x7070=((((1.93020072)*pz))+(((0.28199832)*x7054))+((x7047*x7056))+((x7044*x7053))+((x7052*x7055))+((x7044*x7049)));
IkReal x7071=((((0.09399944)*x7054))+((x7046*x7052))+((x7047*x7057))+(((0.64340024)*pz))+((x7044*x7045))+((x7044*x7048)));
op[0]=((-0.102943966020431)+x7068+(((-1.0)*x7071)));
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+x7069+(((-1.0)*x7070)));
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+x7069+(((-1.0)*x7070)));
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+x7068+(((-1.0)*x7071)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x7072=((0.09399944)*pz);
IkReal x7073=(r00*sj0);
IkReal x7074=((6.75570252e-7)*cj5);
IkReal x7075=((0.000514720192)*sj5);
IkReal x7076=(cj0*sj5);
IkReal x7077=(px*sj0);
IkReal x7078=((2.25190084e-7)*cj5);
IkReal x7079=(cj0*py);
IkReal x7080=(cj0*r10);
IkReal x7081=((0.64340024)*x7077);
IkReal x7082=((1.93020072)*x7077);
IkReal x7083=((0.64340024)*x7079);
IkReal x7084=(cj5*r01*sj0);
IkReal x7085=(cj0*cj5*r11);
IkReal x7086=(r01*sj0*sj5);
IkReal x7087=(x7073*x7075);
IkReal x7088=((2.25190084e-7)*x7086);
IkReal x7089=((0.000514720192)*x7084);
IkReal x7090=(x7078*x7080);
IkReal x7091=(x7074*x7080);
IkReal x7092=((0.001544160576)*sj5*x7073);
IkReal x7093=((0.001544160576)*x7084);
IkReal x7094=((6.75570252e-7)*x7086);
IkReal x7095=((0.000514720192)*x7085);
IkReal x7096=(x7073*x7078);
IkReal x7097=((2.25190084e-7)*r11*x7076);
IkReal x7098=(x7075*x7080);
IkReal x7099=(x7090+x7081+x7087+x7089+x7088);
IkReal x7100=(x7094+x7092+x7093+x7091+x7082);
IkReal x7101=((((0.001544160576)*x7085))+((x7073*x7074))+(((1.93020072)*x7079))+(((0.28199832)*pz))+(((0.001544160576)*r10*x7076))+(((6.75570252e-7)*r11*x7076)));
IkReal x7102=(x7096+x7097+x7095+x7098+x7083+x7072);
j1evalpoly[0]=((0.0150404058181848)+(((-1.0)*x7102))+x7099+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((0.0150404058181848)+x7100+(((-1.0)*x7101))))))+(((-0.205887932040862)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x7102))+x7099))))+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x7100+(((-1.0)*x7101))))))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7103=cj1*cj1;
IkReal x7104=((6.21697001542928)*pz);
IkReal x7105=(cj1*sj1);
if( IKabs(((((-4.78706691188054e-6)*x7105))+((cj1*x7104))+(((-0.994715202468684)*x7103)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+((sj1*x7104))+(((4.78706691188054e-6)*x7103))+(((-0.994715202468684)*x7105)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-4.78706691188054e-6)*x7105))+((cj1*x7104))+(((-0.994715202468684)*x7103))))+IKsqr(((-4.78706691188054e-6)+((sj1*x7104))+(((4.78706691188054e-6)*x7103))+(((-0.994715202468684)*x7105))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-4.78706691188054e-6)*x7105))+((cj1*x7104))+(((-0.994715202468684)*x7103))), ((-4.78706691188054e-6)+((sj1*x7104))+(((4.78706691188054e-6)*x7103))+(((-0.994715202468684)*x7105))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x7106=IKcos(j2);
IkReal x7107=IKsin(j2);
IkReal x7108=(cj0*cj5);
IkReal x7109=(sj0*sj5);
IkReal x7110=(cj5*sj0);
IkReal x7111=(cj0*sj5);
IkReal x7112=((1.0)*x7106);
IkReal x7113=((0.02349986)*x7106);
IkReal x7114=(sj1*x7107);
IkReal x7115=((0.16085006)*x7106);
IkReal x7116=(cj1*x7107);
IkReal x7117=(sj1*x7112);
IkReal x7118=((1.0)*x7116);
IkReal x7119=(x7117+x7118);
evalcond[0]=(x7114+(((-1.0)*cj1*x7112)));
evalcond[1]=((-1.0)*x7119);
evalcond[2]=((((-1.0)*r10*x7111))+(((-1.0)*r11*x7108))+((r01*x7110))+((r00*x7109))+(((-1.0)*x7119)));
evalcond[3]=((((0.16)*cj1))+(((-0.02349986)*x7114))+((sj1*x7115))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x7116))+((cj1*x7113)));
evalcond[4]=((((-3.5e-7)*r01*x7109))+(((3.5e-7)*r11*x7111))+(((0.0008)*r10*x7111))+(((0.0008)*r11*x7108))+(((-3.5e-7)*r10*x7108))+((sj1*x7113))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.0008)*r01*x7110))+(((-1.0)*cj1*x7115))+(((-0.0008)*r00*x7109))+(((0.16085006)*x7114))+(((-1.0)*px*sj0))+((cj0*py))+(((0.02349986)*x7116))+(((3.5e-7)*r00*x7110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x7121 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7121.valid){
continue;
}
IkReal x7120=x7121.value;
j0array[0]=((-1.0)*x7120);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x7120)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x7122=IKcos(j0);
IkReal x7123=IKsin(j0);
IkReal x7124=((3.5e-7)*sj5);
IkReal x7125=((0.0008)*cj5);
IkReal x7126=((0.0008)*sj5);
IkReal x7127=((3.5e-7)*cj5);
IkReal x7128=(r01*x7122);
IkReal x7129=(r11*x7123);
IkReal x7130=(r10*x7123);
IkReal x7131=(r00*x7122);
evalcond[0]=(((x7127*x7130))+((x7127*x7131))+(((-1.0)*px*x7122))+(((-1.0)*py*x7123))+(((-1.0)*x7124*x7129))+(((-1.0)*x7124*x7128))+(((-1.0)*x7126*x7131))+(((-1.0)*x7126*x7130))+(((-1.0)*x7125*x7128))+(((-1.0)*x7125*x7129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x7132=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x7132);
rxp1_0=(pz*r11);
rxp1_1=(r01*x7132);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x7133=(r00*sj0);
IkReal x7134=((6.75570252e-7)*cj5);
IkReal x7135=(r01*sj0);
IkReal x7136=((3.2899804e-8)*sj5);
IkReal x7137=((0.000514720192)*sj5);
IkReal x7138=(cj0*sj5);
IkReal x7139=((7.5199552e-5)*cj5);
IkReal x7140=((0.000225598656)*cj5);
IkReal x7141=(px*sj0);
IkReal x7142=(cj0*r10);
IkReal x7143=((2.25190084e-7)*cj5);
IkReal x7144=(cj0*r11);
IkReal x7145=((0.001544160576)*cj5);
IkReal x7146=((0.000514720192)*cj5);
IkReal x7147=(cj0*py);
IkReal x7148=((9.8699412e-8)*cj5);
IkReal x7149=((3.2899804e-8)*cj5);
IkReal x7150=((0.28199832)*x7147);
IkReal x7151=((1.93020072)*x7141);
IkReal x7152=(x7133*x7148);
IkReal x7153=((9.8699412e-8)*r11*x7138);
IkReal x7154=((0.000225598656)*r10*x7138);
IkReal x7155=(x7140*x7144);
IkReal x7156=(x7134*x7142);
IkReal x7157=((0.001544160576)*sj5*x7133);
IkReal x7158=(x7135*x7145);
IkReal x7159=((6.75570252e-7)*sj5*x7135);
IkReal x7160=(x7155+x7154+x7153+x7152+x7150);
IkReal x7161=(x7159+x7158+x7157+x7156+x7151);
IkReal x7162=((((9.8699412e-8)*sj5*x7135))+((x7135*x7140))+(((1.93020072)*pz))+(((0.28199832)*x7141))+(((0.000225598656)*sj5*x7133))+((x7142*x7148)));
IkReal x7163=(((x7133*x7134))+(((6.75570252e-7)*r11*x7138))+(((1.93020072)*x7147))+((x7144*x7145))+(((0.001544160576)*r10*x7138))+(((0.28199832)*pz)));
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x7142*x7149))+((x7139*x7144))+(((0.09399944)*x7147))+(((7.5199552e-5)*r10*x7138))+(((-7.5199552e-5)*sj5*x7133))+((x7136*x7144))+((x7133*x7149))+(((-0.09399944)*x7141))+(((-0.64340024)*pz))+(((-1.0)*x7135*x7136))+(((-1.0)*x7135*x7139)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((2.25190084e-7)*sj5*x7135))+(((0.64340024)*x7141))+((x7135*x7146))+((x7133*x7137))+(((-1.0)*x7144*x7146))+(((-0.64340024)*x7147))+(((-1.0)*x7137*x7142))+(((-1.0)*x7133*x7143))+(((-2.25190084e-7)*r11*x7138))+((x7142*x7143))+(((-0.09399944)*pz)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+x7161+(((-1.0)*x7163)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+x7160+(((-1.0)*x7162)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+x7160+(((-1.0)*x7162)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+x7161+(((-1.0)*x7163))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x7164=(r01*sj0);
IkReal x7165=((3.2899804e-8)*sj5);
IkReal x7166=((7.5199552e-5)*sj5);
IkReal x7167=(cj0*r10);
IkReal x7168=((7.5199552e-5)*cj5);
IkReal x7169=((0.000225598656)*cj5);
IkReal x7170=(cj0*r11);
IkReal x7171=(cj0*py);
IkReal x7172=(r00*sj0);
IkReal x7173=((9.8699412e-8)*sj5);
IkReal x7174=(px*sj0);
IkReal x7175=((0.000225598656)*sj5);
IkReal x7176=((9.8699412e-8)*cj5);
IkReal x7177=((3.2899804e-8)*cj5);
IkReal x7178=((0.28199832)*x7171);
IkReal x7179=((0.09399944)*x7171);
IkReal x7180=(x7172*x7176);
IkReal x7181=(x7170*x7173);
IkReal x7182=(x7167*x7175);
IkReal x7183=(x7169*x7170);
IkReal x7184=(x7165*x7170);
IkReal x7185=(x7168*x7170);
IkReal x7186=(x7172*x7177);
IkReal x7187=(x7166*x7167);
IkReal x7188=(x7184+x7185+x7186+x7187+x7179);
IkReal x7189=(x7180+x7181+x7182+x7183+x7178);
IkReal x7190=((((1.93020072)*pz))+((x7164*x7169))+(((0.28199832)*x7174))+((x7172*x7175))+((x7167*x7176))+((x7164*x7173)));
IkReal x7191=(((x7166*x7172))+((x7164*x7168))+((x7164*x7165))+(((0.64340024)*pz))+((x7167*x7177))+(((0.09399944)*x7174)));
op[0]=((-0.102943966020431)+x7188+(((-1.0)*x7191)));
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+x7189+(((-1.0)*x7190)));
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+x7189+(((-1.0)*x7190)));
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+x7188+(((-1.0)*x7191)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x7192=((0.09399944)*pz);
IkReal x7193=(r00*sj0);
IkReal x7194=((6.75570252e-7)*cj5);
IkReal x7195=((0.000514720192)*sj5);
IkReal x7196=(cj0*sj5);
IkReal x7197=(px*sj0);
IkReal x7198=((2.25190084e-7)*cj5);
IkReal x7199=(cj0*py);
IkReal x7200=(cj0*r10);
IkReal x7201=((0.64340024)*x7197);
IkReal x7202=((1.93020072)*x7197);
IkReal x7203=((0.64340024)*x7199);
IkReal x7204=(cj5*r01*sj0);
IkReal x7205=(cj0*cj5*r11);
IkReal x7206=(r01*sj0*sj5);
IkReal x7207=(x7193*x7195);
IkReal x7208=((2.25190084e-7)*x7206);
IkReal x7209=((0.000514720192)*x7204);
IkReal x7210=(x7198*x7200);
IkReal x7211=(x7194*x7200);
IkReal x7212=((0.001544160576)*sj5*x7193);
IkReal x7213=((0.001544160576)*x7204);
IkReal x7214=((6.75570252e-7)*x7206);
IkReal x7215=((0.000514720192)*x7205);
IkReal x7216=(x7193*x7198);
IkReal x7217=((2.25190084e-7)*r11*x7196);
IkReal x7218=(x7195*x7200);
IkReal x7219=(x7210+x7209+x7208+x7201+x7207);
IkReal x7220=(x7211+x7212+x7213+x7214+x7202);
IkReal x7221=((((0.001544160576)*x7205))+(((6.75570252e-7)*r11*x7196))+(((0.28199832)*pz))+((x7193*x7194))+(((0.001544160576)*r10*x7196))+(((1.93020072)*x7199)));
IkReal x7222=(x7192+x7218+x7215+x7216+x7217+x7203);
j1evalpoly[0]=((0.0150404058181848)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x7219+(((-1.0)*x7222))))))+x7219+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((-0.205887932040862)*htj1))+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x7220+(((-1.0)*x7221))))))+(((htj1*htj1)*(((0.0150404058181848)+x7220+(((-1.0)*x7221))))))+(((-1.0)*x7222))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7223=cj1*cj1;
IkReal x7224=((6.21697001542928)*pz);
IkReal x7225=(cj1*sj1);
if( IKabs(((((-4.78706691188054e-6)*x7225))+((cj1*x7224))+(((-0.994715202468684)*x7223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((-0.994715202468684)*x7225))+(((4.78706691188054e-6)*x7223))+((sj1*x7224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-4.78706691188054e-6)*x7225))+((cj1*x7224))+(((-0.994715202468684)*x7223))))+IKsqr(((-4.78706691188054e-6)+(((-0.994715202468684)*x7225))+(((4.78706691188054e-6)*x7223))+((sj1*x7224))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-4.78706691188054e-6)*x7225))+((cj1*x7224))+(((-0.994715202468684)*x7223))), ((-4.78706691188054e-6)+(((-0.994715202468684)*x7225))+(((4.78706691188054e-6)*x7223))+((sj1*x7224))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x7226=IKcos(j2);
IkReal x7227=IKsin(j2);
IkReal x7228=(cj0*cj5);
IkReal x7229=(sj0*sj5);
IkReal x7230=(cj5*sj0);
IkReal x7231=(cj0*sj5);
IkReal x7232=((1.0)*x7226);
IkReal x7233=((0.02349986)*x7226);
IkReal x7234=(sj1*x7227);
IkReal x7235=((0.16085006)*x7226);
IkReal x7236=(cj1*x7227);
IkReal x7237=(sj1*x7232);
IkReal x7238=((1.0)*x7236);
IkReal x7239=(x7237+x7238);
evalcond[0]=(x7234+(((-1.0)*cj1*x7232)));
evalcond[1]=((-1.0)*x7239);
evalcond[2]=(((r01*x7230))+((r00*x7229))+(((-1.0)*r10*x7231))+(((-1.0)*x7239))+(((-1.0)*r11*x7228)));
evalcond[3]=((((-0.02349986)*x7234))+(((0.16)*cj1))+(((0.16085006)*x7236))+((cj1*x7233))+(((-1.0)*pz))+(((7.7e-7)*sj1))+((sj1*x7235)));
evalcond[4]=((((-0.0008)*r01*x7230))+(((-0.0008)*r00*x7229))+(((3.5e-7)*r00*x7230))+(((0.16085006)*x7234))+(((-1.0)*cj1*x7235))+(((-3.5e-7)*r01*x7229))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.02349986)*x7236))+(((3.5e-7)*r11*x7231))+(((0.0008)*r10*x7231))+(((0.0008)*r11*x7228))+(((-1.0)*px*sj0))+((cj0*py))+((sj1*x7233))+(((-3.5e-7)*r10*x7228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x7240=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x7240);
rxp1_0=(pz*r11);
rxp1_1=(r01*x7240);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265;
j0eval[0]=((cj5*cj5)+(sj5*sj5));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x7241=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x7241);
rxp1_0=(pz*r11);
rxp1_1=(r01*x7241);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265;
IkReal x7242=((3.5e-7)*cj5);
IkReal x7243=((0.0008)*cj5);
IkReal x7244=((0.0008)*sj5);
IkReal x7245=((3.5e-7)*sj5);
j0eval[0]=((IKabs(((((-1.0)*r11*x7243))+(((-1.0)*r11*x7245))+(((-1.0)*r10*x7244))+((r10*x7242))+(((-1.0)*py)))))+(IKabs((((r00*x7242))+(((-1.0)*px))+(((-1.0)*r00*x7244))+(((-1.0)*r01*x7245))+(((-1.0)*r01*x7243))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x7246=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x7246);
rxp1_0=(pz*r11);
rxp1_1=(r01*x7246);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265;
j1eval[0]=60.0;
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[8+1], zeror[8];
int numroots;
op[0]=4.0;
op[1]=0;
op[2]=16.0;
op[3]=0;
op[4]=24.0;
op[5]=0;
op[6]=16.0;
op[7]=0;
op[8]=4.0;
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7247=cj1*cj1;
IkReal x7248=((6.21697001542928)*pz);
IkReal x7249=(cj1*sj1);
if( IKabs(((((-0.994715202468684)*x7247))+(((-4.78706691188054e-6)*x7249))+((cj1*x7248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((-0.994715202468684)*x7249))+((sj1*x7248))+(((4.78706691188054e-6)*x7247)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.994715202468684)*x7247))+(((-4.78706691188054e-6)*x7249))+((cj1*x7248))))+IKsqr(((-4.78706691188054e-6)+(((-0.994715202468684)*x7249))+((sj1*x7248))+(((4.78706691188054e-6)*x7247))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.994715202468684)*x7247))+(((-4.78706691188054e-6)*x7249))+((cj1*x7248))), ((-4.78706691188054e-6)+(((-0.994715202468684)*x7249))+((sj1*x7248))+(((4.78706691188054e-6)*x7247))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x7250=IKcos(j2);
IkReal x7251=IKsin(j2);
IkReal x7252=(sj1*x7251);
IkReal x7253=(sj1*x7250);
IkReal x7254=(cj1*x7251);
IkReal x7255=(cj1*x7250);
evalcond[0]=(x7252+(((-1.0)*x7255)));
evalcond[1]=((((-1.0)*x7254))+(((-1.0)*x7253)));
evalcond[2]=((((0.16)*cj1))+(((0.02349986)*x7255))+(((-1.0)*pz))+(((0.16085006)*x7253))+(((0.16085006)*x7254))+(((7.7e-7)*sj1))+(((-0.02349986)*x7252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7256=(cj1*sj2);
IkReal x7257=(cj5*r01);
IkReal x7258=(cj2*sj1);
IkReal x7259=(r00*sj5);
IkReal x7260=((1.0)*r10*sj5);
IkReal x7261=((1.0)*cj5*r11);
if( IKabs((((x7257*x7258))+((x7258*x7259))+((x7256*x7259))+((x7256*x7257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x7258*x7260))+(((-1.0)*x7258*x7261))+(((-1.0)*x7256*x7261))+(((-1.0)*x7256*x7260)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x7257*x7258))+((x7258*x7259))+((x7256*x7259))+((x7256*x7257))))+IKsqr(((((-1.0)*x7258*x7260))+(((-1.0)*x7258*x7261))+(((-1.0)*x7256*x7261))+(((-1.0)*x7256*x7260))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x7257*x7258))+((x7258*x7259))+((x7256*x7259))+((x7256*x7257))), ((((-1.0)*x7258*x7260))+(((-1.0)*x7258*x7261))+(((-1.0)*x7256*x7261))+(((-1.0)*x7256*x7260))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7262=IKcos(j0);
IkReal x7263=IKsin(j0);
IkReal x7264=((1.0)*px);
IkReal x7265=((0.0008)*r11);
IkReal x7266=(r00*sj5);
IkReal x7267=((3.5e-7)*r01);
IkReal x7268=(cj1*sj2);
IkReal x7269=(cj2*sj1);
IkReal x7270=((3.5e-7)*r11);
IkReal x7271=((0.0008)*r01);
IkReal x7272=((3.5e-7)*r10);
IkReal x7273=((3.5e-7)*r00);
IkReal x7274=((0.0008)*r10);
IkReal x7275=(cj5*x7263);
IkReal x7276=(sj5*x7263);
IkReal x7277=(sj5*x7262);
IkReal x7278=(cj5*x7262);
evalcond[0]=(((r11*x7275))+((r10*x7276))+((r01*x7278))+((x7262*x7266)));
evalcond[1]=(((x7263*x7266))+(((-1.0)*x7269))+(((-1.0)*x7268))+((r01*x7275))+(((-1.0)*r10*x7277))+(((-1.0)*r11*x7278)));
evalcond[2]=((((-1.0)*x7267*x7277))+(((-1.0)*x7265*x7275))+(((-1.0)*py*x7263))+(((-0.0008)*x7262*x7266))+(((-1.0)*x7274*x7276))+(((-1.0)*x7262*x7264))+((x7273*x7278))+((x7272*x7275))+(((-1.0)*x7271*x7278))+(((-1.0)*x7270*x7276)));
evalcond[3]=(((x7265*x7278))+(((-1.0)*x7267*x7276))+(((-0.0008)*x7263*x7266))+(((-1.0)*x7263*x7264))+(((-1.0)*x7272*x7278))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((x7270*x7277))+((py*x7262))+((x7273*x7275))+(((-1.0)*x7271*x7275))+((x7274*x7277))+(((-0.16085006)*cj1*cj2))+(((0.16085006)*sj1*sj2))+(((0.02349986)*x7268))+(((0.02349986)*x7269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x7279=((3.5e-7)*cj5);
IkReal x7280=((0.0008)*cj5);
IkReal x7281=((0.0008)*sj5);
IkReal x7282=((3.5e-7)*sj5);
CheckValue<IkReal> x7284 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x7281))+(((-1.0)*r01*x7282))+(((-1.0)*r01*x7280))+(((-1.0)*px))+((r00*x7279)))),IkReal((((r10*x7279))+(((-1.0)*py))+(((-1.0)*r11*x7280))+(((-1.0)*r11*x7282))+(((-1.0)*r10*x7281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7284.valid){
continue;
}
IkReal x7283=x7284.value;
j0array[0]=((-1.0)*x7283);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x7283)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x7285=IKcos(j0);
IkReal x7286=IKsin(j0);
evalcond[0]=(((r10*sj5*x7286))+((cj5*r11*x7286))+((r00*sj5*x7285))+((cj5*r01*x7285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x7287=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x7287);
rxp1_0=(pz*r11);
rxp1_1=(r01*x7287);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265;
IkReal x7288=(r00*sj0);
IkReal x7289=((6.75570252e-7)*cj5);
IkReal x7290=(r01*sj0);
IkReal x7291=((3.2899804e-8)*sj5);
IkReal x7292=((0.000514720192)*sj5);
IkReal x7293=(cj0*sj5);
IkReal x7294=((7.5199552e-5)*cj5);
IkReal x7295=((0.000225598656)*cj5);
IkReal x7296=(px*sj0);
IkReal x7297=(cj0*r10);
IkReal x7298=((2.25190084e-7)*cj5);
IkReal x7299=(cj0*r11);
IkReal x7300=((0.001544160576)*cj5);
IkReal x7301=((0.000514720192)*cj5);
IkReal x7302=(cj0*py);
IkReal x7303=((9.8699412e-8)*cj5);
IkReal x7304=((3.2899804e-8)*cj5);
IkReal x7305=((0.28199832)*x7302);
IkReal x7306=((1.93020072)*x7296);
IkReal x7307=(x7288*x7303);
IkReal x7308=((9.8699412e-8)*r11*x7293);
IkReal x7309=((0.000225598656)*r10*x7293);
IkReal x7310=(x7295*x7299);
IkReal x7311=(x7289*x7297);
IkReal x7312=((0.001544160576)*sj5*x7288);
IkReal x7313=(x7290*x7300);
IkReal x7314=((6.75570252e-7)*sj5*x7290);
IkReal x7315=(x7307+x7305+x7308+x7309+x7310);
IkReal x7316=(x7306+x7314+x7311+x7313+x7312);
IkReal x7317=((((0.000225598656)*sj5*x7288))+(((1.93020072)*pz))+(((0.28199832)*x7296))+(((9.8699412e-8)*sj5*x7290))+((x7290*x7295))+((x7297*x7303)));
IkReal x7318=((((1.93020072)*x7302))+(((6.75570252e-7)*r11*x7293))+(((0.001544160576)*r10*x7293))+((x7299*x7300))+(((0.28199832)*pz))+((x7288*x7289)));
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+((x7297*x7298))+(((2.25190084e-7)*sj5*x7290))+(((-1.0)*x7288*x7298))+((x7290*x7301))+(((-1.0)*x7299*x7301))+((x7288*x7292))+(((-1.0)*x7292*x7297))+(((-2.25190084e-7)*r11*x7293))+(((-0.64340024)*x7302))+(((0.64340024)*x7296))+(((-0.09399944)*pz)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+x7316+(((-1.0)*x7318)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+x7316+(((-1.0)*x7318)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+x7315+(((-1.0)*x7317)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x7297*x7304))+(((-1.0)*x7290*x7291))+(((-1.0)*x7290*x7294))+(((0.09399944)*x7302))+(((-0.09399944)*x7296))+(((7.5199552e-5)*r10*x7293))+((x7291*x7299))+(((-7.5199552e-5)*sj5*x7288))+(((-0.64340024)*pz))+((x7288*x7304))+((x7294*x7299)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+x7315+(((-1.0)*x7317))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x7319=(r01*sj0);
IkReal x7320=((3.2899804e-8)*sj5);
IkReal x7321=((7.5199552e-5)*sj5);
IkReal x7322=(cj0*r10);
IkReal x7323=((7.5199552e-5)*cj5);
IkReal x7324=((0.000225598656)*cj5);
IkReal x7325=(cj0*r11);
IkReal x7326=(cj0*py);
IkReal x7327=(r00*sj0);
IkReal x7328=((9.8699412e-8)*sj5);
IkReal x7329=(px*sj0);
IkReal x7330=((0.000225598656)*sj5);
IkReal x7331=((9.8699412e-8)*cj5);
IkReal x7332=((3.2899804e-8)*cj5);
IkReal x7333=((0.28199832)*x7326);
IkReal x7334=((0.09399944)*x7326);
IkReal x7335=(x7327*x7331);
IkReal x7336=(x7325*x7328);
IkReal x7337=(x7322*x7330);
IkReal x7338=(x7324*x7325);
IkReal x7339=(x7320*x7325);
IkReal x7340=(x7323*x7325);
IkReal x7341=(x7327*x7332);
IkReal x7342=(x7321*x7322);
IkReal x7343=(x7342+x7340+x7341+x7334+x7339);
IkReal x7344=(x7337+x7336+x7335+x7333+x7338);
IkReal x7345=((((0.28199832)*x7329))+(((1.93020072)*pz))+((x7327*x7330))+((x7319*x7328))+((x7319*x7324))+((x7322*x7331)));
IkReal x7346=((((0.09399944)*x7329))+(((0.64340024)*pz))+((x7319*x7320))+((x7319*x7323))+((x7321*x7327))+((x7322*x7332)));
op[0]=((-0.102943966020431)+x7343+(((-1.0)*x7346)));
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+x7344+(((-1.0)*x7345)));
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+x7344+(((-1.0)*x7345)));
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+x7343+(((-1.0)*x7346)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x7347=((0.09399944)*pz);
IkReal x7348=(r00*sj0);
IkReal x7349=((6.75570252e-7)*cj5);
IkReal x7350=((0.000514720192)*sj5);
IkReal x7351=(cj0*sj5);
IkReal x7352=(px*sj0);
IkReal x7353=((2.25190084e-7)*cj5);
IkReal x7354=(cj0*py);
IkReal x7355=(cj0*r10);
IkReal x7356=((0.64340024)*x7352);
IkReal x7357=((1.93020072)*x7352);
IkReal x7358=((0.64340024)*x7354);
IkReal x7359=(cj5*r01*sj0);
IkReal x7360=(cj0*cj5*r11);
IkReal x7361=(r01*sj0*sj5);
IkReal x7362=(x7348*x7350);
IkReal x7363=((2.25190084e-7)*x7361);
IkReal x7364=((0.000514720192)*x7359);
IkReal x7365=(x7353*x7355);
IkReal x7366=(x7349*x7355);
IkReal x7367=((0.001544160576)*sj5*x7348);
IkReal x7368=((0.001544160576)*x7359);
IkReal x7369=((6.75570252e-7)*x7361);
IkReal x7370=((0.000514720192)*x7360);
IkReal x7371=(x7348*x7353);
IkReal x7372=((2.25190084e-7)*r11*x7351);
IkReal x7373=(x7350*x7355);
IkReal x7374=(x7356+x7362+x7363+x7364+x7365);
IkReal x7375=(x7357+x7368+x7369+x7366+x7367);
IkReal x7376=((((0.001544160576)*x7360))+(((6.75570252e-7)*r11*x7351))+(((0.28199832)*pz))+(((0.001544160576)*r10*x7351))+((x7348*x7349))+(((1.93020072)*x7354)));
IkReal x7377=(x7373+x7372+x7371+x7370+x7347+x7358);
j1evalpoly[0]=((0.0150404058181848)+x7374+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((-0.205887932040862)*htj1))+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x7375+(((-1.0)*x7376))))))+(((-1.0)*x7377))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x7374+(((-1.0)*x7377))))))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((0.0150404058181848)+x7375+(((-1.0)*x7376)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7378=cj1*cj1;
IkReal x7379=((6.21697001542928)*pz);
IkReal x7380=(cj1*sj1);
if( IKabs(((((-4.78706691188054e-6)*x7380))+((cj1*x7379))+(((-0.994715202468684)*x7378)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((-0.994715202468684)*x7380))+(((4.78706691188054e-6)*x7378))+((sj1*x7379)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-4.78706691188054e-6)*x7380))+((cj1*x7379))+(((-0.994715202468684)*x7378))))+IKsqr(((-4.78706691188054e-6)+(((-0.994715202468684)*x7380))+(((4.78706691188054e-6)*x7378))+((sj1*x7379))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-4.78706691188054e-6)*x7380))+((cj1*x7379))+(((-0.994715202468684)*x7378))), ((-4.78706691188054e-6)+(((-0.994715202468684)*x7380))+(((4.78706691188054e-6)*x7378))+((sj1*x7379))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x7381=IKcos(j2);
IkReal x7382=IKsin(j2);
IkReal x7383=(cj0*cj5);
IkReal x7384=(sj0*sj5);
IkReal x7385=(cj5*sj0);
IkReal x7386=(cj0*sj5);
IkReal x7387=((1.0)*x7381);
IkReal x7388=((0.02349986)*x7381);
IkReal x7389=(sj1*x7382);
IkReal x7390=((0.16085006)*x7381);
IkReal x7391=(cj1*x7382);
IkReal x7392=(sj1*x7387);
IkReal x7393=((1.0)*x7391);
IkReal x7394=(x7393+x7392);
evalcond[0]=((((-1.0)*cj1*x7387))+x7389);
evalcond[1]=((-1.0)*x7394);
evalcond[2]=(((r01*x7385))+((r00*x7384))+(((-1.0)*r10*x7386))+(((-1.0)*x7394))+(((-1.0)*r11*x7383)));
evalcond[3]=((((0.16)*cj1))+(((-0.02349986)*x7389))+((cj1*x7388))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x7391))+((sj1*x7390)));
evalcond[4]=(((sj1*x7388))+(((-3.5e-7)*r01*x7384))+(((-0.0008)*r01*x7385))+(((-0.0008)*r00*x7384))+(((3.5e-7)*r00*x7385))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-3.5e-7)*r10*x7383))+(((0.02349986)*x7391))+(((0.16085006)*x7389))+(((0.0008)*r10*x7386))+(((-1.0)*px*sj0))+((cj0*py))+(((3.5e-7)*r11*x7386))+(((-1.0)*cj1*x7390))+(((0.0008)*r11*x7383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x7396 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7396.valid){
continue;
}
IkReal x7395=x7396.value;
j0array[0]=((-1.0)*x7395);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x7395)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x7397=IKcos(j0);
IkReal x7398=IKsin(j0);
IkReal x7399=((3.5e-7)*sj5);
IkReal x7400=((0.0008)*cj5);
IkReal x7401=((0.0008)*sj5);
IkReal x7402=((3.5e-7)*cj5);
IkReal x7403=(r01*x7397);
IkReal x7404=(r11*x7398);
IkReal x7405=(r10*x7398);
IkReal x7406=(r00*x7397);
evalcond[0]=(((x7402*x7405))+((x7402*x7406))+(((-1.0)*py*x7398))+(((-1.0)*x7399*x7404))+(((-1.0)*x7399*x7403))+(((-1.0)*px*x7397))+(((-1.0)*x7400*x7404))+(((-1.0)*x7400*x7403))+(((-1.0)*x7401*x7406))+(((-1.0)*x7401*x7405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x7407=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x7407);
rxp1_0=(pz*r11);
rxp1_1=(r01*x7407);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265;
IkReal x7408=(r00*sj0);
IkReal x7409=((6.75570252e-7)*cj5);
IkReal x7410=(r01*sj0);
IkReal x7411=((3.2899804e-8)*sj5);
IkReal x7412=((0.000514720192)*sj5);
IkReal x7413=(cj0*sj5);
IkReal x7414=((7.5199552e-5)*cj5);
IkReal x7415=((0.000225598656)*cj5);
IkReal x7416=(px*sj0);
IkReal x7417=(cj0*r10);
IkReal x7418=((2.25190084e-7)*cj5);
IkReal x7419=(cj0*r11);
IkReal x7420=((0.001544160576)*cj5);
IkReal x7421=((0.000514720192)*cj5);
IkReal x7422=(cj0*py);
IkReal x7423=((9.8699412e-8)*cj5);
IkReal x7424=((3.2899804e-8)*cj5);
IkReal x7425=((0.28199832)*x7422);
IkReal x7426=((1.93020072)*x7416);
IkReal x7427=(x7408*x7423);
IkReal x7428=((9.8699412e-8)*r11*x7413);
IkReal x7429=((0.000225598656)*r10*x7413);
IkReal x7430=(x7415*x7419);
IkReal x7431=(x7409*x7417);
IkReal x7432=((0.001544160576)*sj5*x7408);
IkReal x7433=(x7410*x7420);
IkReal x7434=((6.75570252e-7)*sj5*x7410);
IkReal x7435=(x7430+x7427+x7425+x7429+x7428);
IkReal x7436=(x7434+x7431+x7432+x7433+x7426);
IkReal x7437=(((x7410*x7415))+(((0.28199832)*x7416))+(((1.93020072)*pz))+(((0.000225598656)*sj5*x7408))+(((9.8699412e-8)*sj5*x7410))+((x7417*x7423)));
IkReal x7438=(((x7419*x7420))+(((6.75570252e-7)*r11*x7413))+(((0.28199832)*pz))+(((1.93020072)*x7422))+((x7408*x7409))+(((0.001544160576)*r10*x7413)));
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((0.09399944)*x7422))+(((7.5199552e-5)*r10*x7413))+((x7411*x7419))+((x7408*x7424))+(((-0.64340024)*pz))+(((-7.5199552e-5)*sj5*x7408))+(((-1.0)*x7410*x7411))+(((-1.0)*x7410*x7414))+(((-0.09399944)*x7416))+((x7414*x7419))+(((-1.0)*x7417*x7424)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x7437))+x7435)))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((0.64340024)*x7416))+(((-2.25190084e-7)*r11*x7413))+(((-0.64340024)*x7422))+(((-1.0)*x7419*x7421))+(((-1.0)*x7408*x7418))+((x7410*x7421))+(((2.25190084e-7)*sj5*x7410))+((x7408*x7412))+(((-1.0)*x7412*x7417))+((x7417*x7418))+(((-0.09399944)*pz)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+(((-1.0)*x7437))+x7435)))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-1.0)*x7438))+x7436)))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x7438))+x7436))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x7439=(r01*sj0);
IkReal x7440=((3.2899804e-8)*sj5);
IkReal x7441=((7.5199552e-5)*sj5);
IkReal x7442=(cj0*r10);
IkReal x7443=((7.5199552e-5)*cj5);
IkReal x7444=((0.000225598656)*cj5);
IkReal x7445=(cj0*r11);
IkReal x7446=(cj0*py);
IkReal x7447=(r00*sj0);
IkReal x7448=((9.8699412e-8)*sj5);
IkReal x7449=(px*sj0);
IkReal x7450=((0.000225598656)*sj5);
IkReal x7451=((9.8699412e-8)*cj5);
IkReal x7452=((3.2899804e-8)*cj5);
IkReal x7453=((0.28199832)*x7446);
IkReal x7454=((0.09399944)*x7446);
IkReal x7455=(x7447*x7451);
IkReal x7456=(x7445*x7448);
IkReal x7457=(x7442*x7450);
IkReal x7458=(x7444*x7445);
IkReal x7459=(x7440*x7445);
IkReal x7460=(x7443*x7445);
IkReal x7461=(x7447*x7452);
IkReal x7462=(x7441*x7442);
IkReal x7463=(x7454+x7459+x7462+x7461+x7460);
IkReal x7464=(x7456+x7457+x7455+x7453+x7458);
IkReal x7465=((((0.28199832)*x7449))+(((1.93020072)*pz))+((x7442*x7451))+((x7439*x7444))+((x7439*x7448))+((x7447*x7450)));
IkReal x7466=(((x7442*x7452))+(((0.09399944)*x7449))+(((0.64340024)*pz))+((x7439*x7443))+((x7439*x7440))+((x7441*x7447)));
op[0]=((-0.102943966020431)+(((-1.0)*x7466))+x7463);
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+(((-1.0)*x7465))+x7464);
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+(((-1.0)*x7465))+x7464);
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+(((-1.0)*x7466))+x7463);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x7467=((0.09399944)*pz);
IkReal x7468=(r00*sj0);
IkReal x7469=((6.75570252e-7)*cj5);
IkReal x7470=((0.000514720192)*sj5);
IkReal x7471=(cj0*sj5);
IkReal x7472=(px*sj0);
IkReal x7473=((2.25190084e-7)*cj5);
IkReal x7474=(cj0*py);
IkReal x7475=(cj0*r10);
IkReal x7476=((0.64340024)*x7472);
IkReal x7477=((1.93020072)*x7472);
IkReal x7478=((0.64340024)*x7474);
IkReal x7479=(cj5*r01*sj0);
IkReal x7480=(cj0*cj5*r11);
IkReal x7481=(r01*sj0*sj5);
IkReal x7482=(x7468*x7470);
IkReal x7483=((2.25190084e-7)*x7481);
IkReal x7484=((0.000514720192)*x7479);
IkReal x7485=(x7473*x7475);
IkReal x7486=(x7469*x7475);
IkReal x7487=((0.001544160576)*sj5*x7468);
IkReal x7488=((0.001544160576)*x7479);
IkReal x7489=((6.75570252e-7)*x7481);
IkReal x7490=((0.000514720192)*x7480);
IkReal x7491=(x7468*x7473);
IkReal x7492=((2.25190084e-7)*r11*x7471);
IkReal x7493=(x7470*x7475);
IkReal x7494=(x7485+x7484+x7483+x7482+x7476);
IkReal x7495=(x7487+x7486+x7489+x7488+x7477);
IkReal x7496=(((x7468*x7469))+(((1.93020072)*x7474))+(((6.75570252e-7)*r11*x7471))+(((0.28199832)*pz))+(((0.001544160576)*r10*x7471))+(((0.001544160576)*x7480)));
IkReal x7497=(x7492+x7493+x7490+x7491+x7478+x7467);
j1evalpoly[0]=((0.0150404058181848)+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x7496))+x7495))))+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((-0.205887932040862)*htj1))+(((-1.0)*x7497))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x7497))+x7494))))+(((htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x7496))+x7495))))+x7494+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7498=cj1*cj1;
IkReal x7499=((6.21697001542928)*pz);
IkReal x7500=(cj1*sj1);
if( IKabs((((cj1*x7499))+(((-4.78706691188054e-6)*x7500))+(((-0.994715202468684)*x7498)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((-0.994715202468684)*x7500))+(((4.78706691188054e-6)*x7498))+((sj1*x7499)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x7499))+(((-4.78706691188054e-6)*x7500))+(((-0.994715202468684)*x7498))))+IKsqr(((-4.78706691188054e-6)+(((-0.994715202468684)*x7500))+(((4.78706691188054e-6)*x7498))+((sj1*x7499))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x7499))+(((-4.78706691188054e-6)*x7500))+(((-0.994715202468684)*x7498))), ((-4.78706691188054e-6)+(((-0.994715202468684)*x7500))+(((4.78706691188054e-6)*x7498))+((sj1*x7499))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x7501=IKcos(j2);
IkReal x7502=IKsin(j2);
IkReal x7503=(cj0*cj5);
IkReal x7504=(sj0*sj5);
IkReal x7505=(cj5*sj0);
IkReal x7506=(cj0*sj5);
IkReal x7507=((1.0)*x7501);
IkReal x7508=((0.02349986)*x7501);
IkReal x7509=(sj1*x7502);
IkReal x7510=((0.16085006)*x7501);
IkReal x7511=(cj1*x7502);
IkReal x7512=(sj1*x7507);
IkReal x7513=((1.0)*x7511);
IkReal x7514=(x7513+x7512);
evalcond[0]=((((-1.0)*cj1*x7507))+x7509);
evalcond[1]=((-1.0)*x7514);
evalcond[2]=(((r00*x7504))+(((-1.0)*r11*x7503))+(((-1.0)*r10*x7506))+(((-1.0)*x7514))+((r01*x7505)));
evalcond[3]=(((sj1*x7510))+(((0.16)*cj1))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-0.02349986)*x7509))+(((0.16085006)*x7511))+((cj1*x7508)));
evalcond[4]=(((sj1*x7508))+(((-1.0)*cj1*x7510))+(((0.0008)*r10*x7506))+(((3.5e-7)*r11*x7506))+(((-3.5e-7)*r10*x7503))+(((0.0008)*r11*x7503))+(((3.5e-7)*r00*x7505))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.16085006)*x7509))+(((-0.0008)*r00*x7504))+(((0.02349986)*x7511))+(((-1.0)*px*sj0))+(((-0.0008)*r01*x7505))+((cj0*py))+(((-3.5e-7)*r01*x7504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x7515=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x7515);
rxp1_0=(pz*r11);
rxp1_1=(r01*x7515);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=-3.14159265;
j0eval[0]=((cj5*cj5)+(sj5*sj5));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x7516=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x7516);
rxp1_0=(pz*r11);
rxp1_1=(r01*x7516);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=-3.14159265;
IkReal x7517=((3.5e-7)*cj5);
IkReal x7518=((0.0008)*cj5);
IkReal x7519=((0.0008)*sj5);
IkReal x7520=((3.5e-7)*sj5);
j0eval[0]=((IKabs((((r00*x7517))+(((-1.0)*r01*x7520))+(((-1.0)*r00*x7519))+(((-1.0)*r01*x7518))+(((-1.0)*px)))))+(IKabs(((((-1.0)*r10*x7519))+((r10*x7517))+(((-1.0)*py))+(((-1.0)*r11*x7520))+(((-1.0)*r11*x7518))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x7521=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x7521);
rxp1_0=(pz*r11);
rxp1_1=(r01*x7521);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=-3.14159265;
j1eval[0]=60.0;
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[8+1], zeror[8];
int numroots;
op[0]=4.0;
op[1]=0;
op[2]=16.0;
op[3]=0;
op[4]=24.0;
op[5]=0;
op[6]=16.0;
op[7]=0;
op[8]=4.0;
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7522=cj1*cj1;
IkReal x7523=((6.21697001542928)*pz);
IkReal x7524=(cj1*sj1);
if( IKabs((((cj1*x7523))+(((-4.78706691188054e-6)*x7524))+(((-0.994715202468684)*x7522)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+((sj1*x7523))+(((4.78706691188054e-6)*x7522))+(((-0.994715202468684)*x7524)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x7523))+(((-4.78706691188054e-6)*x7524))+(((-0.994715202468684)*x7522))))+IKsqr(((-4.78706691188054e-6)+((sj1*x7523))+(((4.78706691188054e-6)*x7522))+(((-0.994715202468684)*x7524))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x7523))+(((-4.78706691188054e-6)*x7524))+(((-0.994715202468684)*x7522))), ((-4.78706691188054e-6)+((sj1*x7523))+(((4.78706691188054e-6)*x7522))+(((-0.994715202468684)*x7524))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x7525=IKcos(j2);
IkReal x7526=IKsin(j2);
IkReal x7527=(sj1*x7526);
IkReal x7528=(sj1*x7525);
IkReal x7529=(cj1*x7526);
IkReal x7530=(cj1*x7525);
evalcond[0]=((((-1.0)*x7530))+x7527);
evalcond[1]=((((-1.0)*x7528))+(((-1.0)*x7529)));
evalcond[2]=((((0.02349986)*x7530))+(((0.16)*cj1))+(((-1.0)*pz))+(((-0.02349986)*x7527))+(((7.7e-7)*sj1))+(((0.16085006)*x7529))+(((0.16085006)*x7528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7531=(cj1*sj2);
IkReal x7532=(cj5*r01);
IkReal x7533=(cj2*sj1);
IkReal x7534=(r00*sj5);
IkReal x7535=((1.0)*r10*sj5);
IkReal x7536=((1.0)*cj5*r11);
if( IKabs((((x7533*x7534))+((x7531*x7532))+((x7531*x7534))+((x7532*x7533)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x7533*x7536))+(((-1.0)*x7533*x7535))+(((-1.0)*x7531*x7535))+(((-1.0)*x7531*x7536)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x7533*x7534))+((x7531*x7532))+((x7531*x7534))+((x7532*x7533))))+IKsqr(((((-1.0)*x7533*x7536))+(((-1.0)*x7533*x7535))+(((-1.0)*x7531*x7535))+(((-1.0)*x7531*x7536))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x7533*x7534))+((x7531*x7532))+((x7531*x7534))+((x7532*x7533))), ((((-1.0)*x7533*x7536))+(((-1.0)*x7533*x7535))+(((-1.0)*x7531*x7535))+(((-1.0)*x7531*x7536))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7537=IKcos(j0);
IkReal x7538=IKsin(j0);
IkReal x7539=((1.0)*px);
IkReal x7540=((0.0008)*r11);
IkReal x7541=(r00*sj5);
IkReal x7542=((3.5e-7)*r01);
IkReal x7543=(cj1*sj2);
IkReal x7544=(cj2*sj1);
IkReal x7545=((3.5e-7)*r11);
IkReal x7546=((0.0008)*r01);
IkReal x7547=((3.5e-7)*r10);
IkReal x7548=((3.5e-7)*r00);
IkReal x7549=((0.0008)*r10);
IkReal x7550=(cj5*x7538);
IkReal x7551=(sj5*x7538);
IkReal x7552=(sj5*x7537);
IkReal x7553=(cj5*x7537);
evalcond[0]=(((r10*x7551))+((x7537*x7541))+((r11*x7550))+((r01*x7553)));
evalcond[1]=((((-1.0)*x7543))+(((-1.0)*x7544))+((x7538*x7541))+((r01*x7550))+(((-1.0)*r11*x7553))+(((-1.0)*r10*x7552)));
evalcond[2]=(((x7548*x7553))+(((-1.0)*x7542*x7552))+(((-1.0)*py*x7538))+((x7547*x7550))+(((-1.0)*x7540*x7550))+(((-0.0008)*x7537*x7541))+(((-1.0)*x7537*x7539))+(((-1.0)*x7546*x7553))+(((-1.0)*x7545*x7551))+(((-1.0)*x7549*x7551)));
evalcond[3]=(((x7545*x7552))+((x7548*x7550))+(((-1.0)*x7542*x7551))+((x7549*x7552))+(((-1.0)*x7538*x7539))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((py*x7537))+(((-1.0)*x7546*x7550))+(((-0.16085006)*cj1*cj2))+(((-1.0)*x7547*x7553))+(((-0.0008)*x7538*x7541))+(((0.02349986)*x7544))+(((0.02349986)*x7543))+(((0.16085006)*sj1*sj2))+((x7540*x7553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x7554=((3.5e-7)*cj5);
IkReal x7555=((0.0008)*cj5);
IkReal x7556=((0.0008)*sj5);
IkReal x7557=((3.5e-7)*sj5);
CheckValue<IkReal> x7559 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7557))+(((-1.0)*r01*x7555))+(((-1.0)*px))+(((-1.0)*r00*x7556))+((r00*x7554)))),IkReal((((r10*x7554))+(((-1.0)*r10*x7556))+(((-1.0)*py))+(((-1.0)*r11*x7557))+(((-1.0)*r11*x7555)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7559.valid){
continue;
}
IkReal x7558=x7559.value;
j0array[0]=((-1.0)*x7558);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x7558)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x7560=IKcos(j0);
IkReal x7561=IKsin(j0);
evalcond[0]=(((cj5*r01*x7560))+((r00*sj5*x7560))+((cj5*r11*x7561))+((r10*sj5*x7561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x7562=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x7562);
rxp1_0=(pz*r11);
rxp1_1=(r01*x7562);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=-3.14159265;
IkReal x7563=(r00*sj0);
IkReal x7564=((6.75570252e-7)*cj5);
IkReal x7565=(r01*sj0);
IkReal x7566=((3.2899804e-8)*sj5);
IkReal x7567=((0.000514720192)*sj5);
IkReal x7568=(cj0*sj5);
IkReal x7569=((7.5199552e-5)*cj5);
IkReal x7570=((0.000225598656)*cj5);
IkReal x7571=(px*sj0);
IkReal x7572=(cj0*r10);
IkReal x7573=((2.25190084e-7)*cj5);
IkReal x7574=(cj0*r11);
IkReal x7575=((0.001544160576)*cj5);
IkReal x7576=((0.000514720192)*cj5);
IkReal x7577=(cj0*py);
IkReal x7578=((9.8699412e-8)*cj5);
IkReal x7579=((3.2899804e-8)*cj5);
IkReal x7580=((0.28199832)*x7577);
IkReal x7581=((1.93020072)*x7571);
IkReal x7582=(x7563*x7578);
IkReal x7583=((9.8699412e-8)*r11*x7568);
IkReal x7584=((0.000225598656)*r10*x7568);
IkReal x7585=(x7570*x7574);
IkReal x7586=(x7564*x7572);
IkReal x7587=((0.001544160576)*sj5*x7563);
IkReal x7588=(x7565*x7575);
IkReal x7589=((6.75570252e-7)*sj5*x7565);
IkReal x7590=(x7584+x7585+x7580+x7582+x7583);
IkReal x7591=(x7588+x7589+x7586+x7587+x7581);
IkReal x7592=((((0.28199832)*x7571))+((x7565*x7570))+(((0.000225598656)*sj5*x7563))+(((1.93020072)*pz))+(((9.8699412e-8)*sj5*x7565))+((x7572*x7578)));
IkReal x7593=((((1.93020072)*x7577))+((x7574*x7575))+(((0.28199832)*pz))+((x7563*x7564))+(((0.001544160576)*r10*x7568))+(((6.75570252e-7)*r11*x7568)));
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+x7591+(((-1.0)*x7593)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x7565*x7566))+(((-1.0)*x7565*x7569))+(((7.5199552e-5)*r10*x7568))+(((0.09399944)*x7577))+((x7563*x7579))+((x7566*x7574))+(((-0.09399944)*x7571))+((x7569*x7574))+(((-0.64340024)*pz))+(((-7.5199552e-5)*sj5*x7563))+(((-1.0)*x7572*x7579)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+x7590+(((-1.0)*x7592)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x7567*x7572))+(((2.25190084e-7)*sj5*x7565))+((x7565*x7576))+(((-0.64340024)*x7577))+(((-2.25190084e-7)*r11*x7568))+(((-1.0)*x7574*x7576))+(((0.64340024)*x7571))+(((-1.0)*x7563*x7573))+((x7563*x7567))+((x7572*x7573))+(((-0.09399944)*pz)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+x7590+(((-1.0)*x7592)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+x7591+(((-1.0)*x7593))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x7594=(r01*sj0);
IkReal x7595=((3.2899804e-8)*sj5);
IkReal x7596=((7.5199552e-5)*sj5);
IkReal x7597=(cj0*r10);
IkReal x7598=((7.5199552e-5)*cj5);
IkReal x7599=((0.000225598656)*cj5);
IkReal x7600=(cj0*r11);
IkReal x7601=(cj0*py);
IkReal x7602=(r00*sj0);
IkReal x7603=((9.8699412e-8)*sj5);
IkReal x7604=(px*sj0);
IkReal x7605=((0.000225598656)*sj5);
IkReal x7606=((9.8699412e-8)*cj5);
IkReal x7607=((3.2899804e-8)*cj5);
IkReal x7608=((0.28199832)*x7601);
IkReal x7609=((0.09399944)*x7601);
IkReal x7610=(x7602*x7606);
IkReal x7611=(x7600*x7603);
IkReal x7612=(x7597*x7605);
IkReal x7613=(x7599*x7600);
IkReal x7614=(x7595*x7600);
IkReal x7615=(x7598*x7600);
IkReal x7616=(x7602*x7607);
IkReal x7617=(x7596*x7597);
IkReal x7618=(x7614+x7615+x7616+x7617+x7609);
IkReal x7619=(x7610+x7611+x7612+x7613+x7608);
IkReal x7620=(((x7594*x7599))+(((0.28199832)*x7604))+(((1.93020072)*pz))+((x7602*x7605))+((x7597*x7606))+((x7594*x7603)));
IkReal x7621=(((x7596*x7602))+((x7594*x7595))+((x7594*x7598))+((x7597*x7607))+(((0.64340024)*pz))+(((0.09399944)*x7604)));
op[0]=((-0.102943966020431)+(((-1.0)*x7621))+x7618);
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+(((-1.0)*x7620))+x7619);
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+(((-1.0)*x7620))+x7619);
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+(((-1.0)*x7621))+x7618);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x7622=((0.09399944)*pz);
IkReal x7623=(r00*sj0);
IkReal x7624=((6.75570252e-7)*cj5);
IkReal x7625=((0.000514720192)*sj5);
IkReal x7626=(cj0*sj5);
IkReal x7627=(px*sj0);
IkReal x7628=((2.25190084e-7)*cj5);
IkReal x7629=(cj0*py);
IkReal x7630=(cj0*r10);
IkReal x7631=((0.64340024)*x7627);
IkReal x7632=((1.93020072)*x7627);
IkReal x7633=((0.64340024)*x7629);
IkReal x7634=(cj5*r01*sj0);
IkReal x7635=(cj0*cj5*r11);
IkReal x7636=(r01*sj0*sj5);
IkReal x7637=(x7623*x7625);
IkReal x7638=((2.25190084e-7)*x7636);
IkReal x7639=((0.000514720192)*x7634);
IkReal x7640=(x7628*x7630);
IkReal x7641=(x7624*x7630);
IkReal x7642=((0.001544160576)*sj5*x7623);
IkReal x7643=((0.001544160576)*x7634);
IkReal x7644=((6.75570252e-7)*x7636);
IkReal x7645=((0.000514720192)*x7635);
IkReal x7646=(x7623*x7628);
IkReal x7647=((2.25190084e-7)*r11*x7626);
IkReal x7648=(x7625*x7630);
IkReal x7649=(x7640+x7638+x7639+x7631+x7637);
IkReal x7650=(x7643+x7642+x7641+x7644+x7632);
IkReal x7651=((((0.001544160576)*x7635))+(((0.28199832)*pz))+(((0.001544160576)*r10*x7626))+(((1.93020072)*x7629))+(((6.75570252e-7)*r11*x7626))+((x7623*x7624)));
IkReal x7652=(x7647+x7646+x7645+x7648+x7633+x7622);
j1evalpoly[0]=((0.0150404058181848)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x7652))+x7649))))+(((htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x7651))+x7650))))+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((-0.205887932040862)*htj1))+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x7651))+x7650))))+(((-1.0)*x7652))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+x7649);
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7653=cj1*cj1;
IkReal x7654=((6.21697001542928)*pz);
IkReal x7655=(cj1*sj1);
if( IKabs(((((-4.78706691188054e-6)*x7655))+((cj1*x7654))+(((-0.994715202468684)*x7653)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+((sj1*x7654))+(((-0.994715202468684)*x7655))+(((4.78706691188054e-6)*x7653)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-4.78706691188054e-6)*x7655))+((cj1*x7654))+(((-0.994715202468684)*x7653))))+IKsqr(((-4.78706691188054e-6)+((sj1*x7654))+(((-0.994715202468684)*x7655))+(((4.78706691188054e-6)*x7653))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-4.78706691188054e-6)*x7655))+((cj1*x7654))+(((-0.994715202468684)*x7653))), ((-4.78706691188054e-6)+((sj1*x7654))+(((-0.994715202468684)*x7655))+(((4.78706691188054e-6)*x7653))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x7656=IKcos(j2);
IkReal x7657=IKsin(j2);
IkReal x7658=(cj0*cj5);
IkReal x7659=(sj0*sj5);
IkReal x7660=(cj5*sj0);
IkReal x7661=(cj0*sj5);
IkReal x7662=((1.0)*x7656);
IkReal x7663=((0.02349986)*x7656);
IkReal x7664=(sj1*x7657);
IkReal x7665=((0.16085006)*x7656);
IkReal x7666=(cj1*x7657);
IkReal x7667=(sj1*x7662);
IkReal x7668=((1.0)*x7666);
IkReal x7669=(x7668+x7667);
evalcond[0]=((((-1.0)*cj1*x7662))+x7664);
evalcond[1]=((-1.0)*x7669);
evalcond[2]=((((-1.0)*r10*x7661))+((r01*x7660))+(((-1.0)*x7669))+(((-1.0)*r11*x7658))+((r00*x7659)));
evalcond[3]=((((0.16)*cj1))+((cj1*x7663))+(((0.16085006)*x7666))+(((-1.0)*pz))+(((7.7e-7)*sj1))+((sj1*x7665))+(((-0.02349986)*x7664)));
evalcond[4]=((((-3.5e-7)*r01*x7659))+(((-0.0008)*r01*x7660))+(((0.0008)*r10*x7661))+(((0.0008)*r11*x7658))+(((-3.5e-7)*r10*x7658))+(((0.16)*sj1))+(((3.5e-7)*r11*x7661))+(((-7.7e-7)*cj1))+(((0.16085006)*x7664))+(((-1.0)*cj1*x7665))+(((3.5e-7)*r00*x7660))+(((0.02349986)*x7666))+(((-0.0008)*r00*x7659))+((sj1*x7663))+(((-1.0)*px*sj0))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x7671 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7671.valid){
continue;
}
IkReal x7670=x7671.value;
j0array[0]=((-1.0)*x7670);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x7670)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x7672=IKcos(j0);
IkReal x7673=IKsin(j0);
IkReal x7674=((3.5e-7)*sj5);
IkReal x7675=((0.0008)*cj5);
IkReal x7676=((0.0008)*sj5);
IkReal x7677=((3.5e-7)*cj5);
IkReal x7678=(r01*x7672);
IkReal x7679=(r11*x7673);
IkReal x7680=(r10*x7673);
IkReal x7681=(r00*x7672);
evalcond[0]=((((-1.0)*x7676*x7681))+(((-1.0)*x7676*x7680))+((x7677*x7680))+((x7677*x7681))+(((-1.0)*x7674*x7678))+(((-1.0)*x7674*x7679))+(((-1.0)*py*x7673))+(((-1.0)*x7675*x7679))+(((-1.0)*x7675*x7678))+(((-1.0)*px*x7672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x7682=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x7682);
rxp1_0=(pz*r11);
rxp1_1=(r01*x7682);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=-3.14159265;
IkReal x7683=(r00*sj0);
IkReal x7684=((6.75570252e-7)*cj5);
IkReal x7685=(r01*sj0);
IkReal x7686=((3.2899804e-8)*sj5);
IkReal x7687=((0.000514720192)*sj5);
IkReal x7688=(cj0*sj5);
IkReal x7689=((7.5199552e-5)*cj5);
IkReal x7690=((0.000225598656)*cj5);
IkReal x7691=(px*sj0);
IkReal x7692=(cj0*r10);
IkReal x7693=((2.25190084e-7)*cj5);
IkReal x7694=(cj0*r11);
IkReal x7695=((0.001544160576)*cj5);
IkReal x7696=((0.000514720192)*cj5);
IkReal x7697=(cj0*py);
IkReal x7698=((9.8699412e-8)*cj5);
IkReal x7699=((3.2899804e-8)*cj5);
IkReal x7700=((0.28199832)*x7697);
IkReal x7701=((1.93020072)*x7691);
IkReal x7702=(x7683*x7698);
IkReal x7703=((9.8699412e-8)*r11*x7688);
IkReal x7704=((0.000225598656)*r10*x7688);
IkReal x7705=(x7690*x7694);
IkReal x7706=(x7684*x7692);
IkReal x7707=((0.001544160576)*sj5*x7683);
IkReal x7708=(x7685*x7695);
IkReal x7709=((6.75570252e-7)*sj5*x7685);
IkReal x7710=(x7704+x7705+x7702+x7703+x7700);
IkReal x7711=(x7706+x7707+x7701+x7708+x7709);
IkReal x7712=((((1.93020072)*pz))+((x7692*x7698))+((x7685*x7690))+(((0.28199832)*x7691))+(((0.000225598656)*sj5*x7683))+(((9.8699412e-8)*sj5*x7685)));
IkReal x7713=((((1.93020072)*x7697))+(((0.001544160576)*r10*x7688))+((x7683*x7684))+(((6.75570252e-7)*r11*x7688))+((x7694*x7695))+(((0.28199832)*pz)));
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x7712))+x7710)))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x7713))+x7711)))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-1.0)*x7713))+x7711)))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x7687*x7692))+((x7692*x7693))+(((-0.64340024)*x7697))+((x7685*x7696))+((x7683*x7687))+(((0.64340024)*x7691))+(((2.25190084e-7)*sj5*x7685))+(((-2.25190084e-7)*r11*x7688))+(((-1.0)*x7694*x7696))+(((-1.0)*x7683*x7693))+(((-0.09399944)*pz)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+((x7689*x7694))+((x7686*x7694))+(((0.09399944)*x7697))+(((7.5199552e-5)*r10*x7688))+((x7683*x7699))+(((-7.5199552e-5)*sj5*x7683))+(((-0.64340024)*pz))+(((-1.0)*x7685*x7686))+(((-1.0)*x7685*x7689))+(((-0.09399944)*x7691))+(((-1.0)*x7692*x7699)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+(((-1.0)*x7712))+x7710))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x7714=(r01*sj0);
IkReal x7715=((3.2899804e-8)*sj5);
IkReal x7716=((7.5199552e-5)*sj5);
IkReal x7717=(cj0*r10);
IkReal x7718=((7.5199552e-5)*cj5);
IkReal x7719=((0.000225598656)*cj5);
IkReal x7720=(cj0*r11);
IkReal x7721=(cj0*py);
IkReal x7722=(r00*sj0);
IkReal x7723=((9.8699412e-8)*sj5);
IkReal x7724=(px*sj0);
IkReal x7725=((0.000225598656)*sj5);
IkReal x7726=((9.8699412e-8)*cj5);
IkReal x7727=((3.2899804e-8)*cj5);
IkReal x7728=((0.28199832)*x7721);
IkReal x7729=((0.09399944)*x7721);
IkReal x7730=(x7722*x7726);
IkReal x7731=(x7720*x7723);
IkReal x7732=(x7717*x7725);
IkReal x7733=(x7719*x7720);
IkReal x7734=(x7715*x7720);
IkReal x7735=(x7718*x7720);
IkReal x7736=(x7722*x7727);
IkReal x7737=(x7716*x7717);
IkReal x7738=(x7737+x7736+x7735+x7734+x7729);
IkReal x7739=(x7733+x7732+x7731+x7730+x7728);
IkReal x7740=((((0.28199832)*x7724))+(((1.93020072)*pz))+((x7722*x7725))+((x7717*x7726))+((x7714*x7719))+((x7714*x7723)));
IkReal x7741=(((x7717*x7727))+((x7716*x7722))+((x7714*x7715))+((x7714*x7718))+(((0.09399944)*x7724))+(((0.64340024)*pz)));
op[0]=((-0.102943966020431)+(((-1.0)*x7741))+x7738);
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+(((-1.0)*x7740))+x7739);
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+(((-1.0)*x7740))+x7739);
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+(((-1.0)*x7741))+x7738);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x7742=((0.09399944)*pz);
IkReal x7743=(r00*sj0);
IkReal x7744=((6.75570252e-7)*cj5);
IkReal x7745=((0.000514720192)*sj5);
IkReal x7746=(cj0*sj5);
IkReal x7747=(px*sj0);
IkReal x7748=((2.25190084e-7)*cj5);
IkReal x7749=(cj0*py);
IkReal x7750=(cj0*r10);
IkReal x7751=((0.64340024)*x7747);
IkReal x7752=((1.93020072)*x7747);
IkReal x7753=((0.64340024)*x7749);
IkReal x7754=(cj5*r01*sj0);
IkReal x7755=(cj0*cj5*r11);
IkReal x7756=(r01*sj0*sj5);
IkReal x7757=(x7743*x7745);
IkReal x7758=((2.25190084e-7)*x7756);
IkReal x7759=((0.000514720192)*x7754);
IkReal x7760=(x7748*x7750);
IkReal x7761=(x7744*x7750);
IkReal x7762=((0.001544160576)*sj5*x7743);
IkReal x7763=((0.001544160576)*x7754);
IkReal x7764=((6.75570252e-7)*x7756);
IkReal x7765=((0.000514720192)*x7755);
IkReal x7766=(x7743*x7748);
IkReal x7767=((2.25190084e-7)*r11*x7746);
IkReal x7768=(x7745*x7750);
IkReal x7769=(x7760+x7759+x7758+x7757+x7751);
IkReal x7770=(x7764+x7761+x7762+x7763+x7752);
IkReal x7771=((((0.001544160576)*r10*x7746))+((x7743*x7744))+(((0.001544160576)*x7755))+(((1.93020072)*x7749))+(((0.28199832)*pz))+(((6.75570252e-7)*r11*x7746)));
IkReal x7772=(x7765+x7766+x7767+x7768+x7742+x7753);
j1evalpoly[0]=((0.0150404058181848)+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x7771))+x7770))))+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x7772))+x7769))))+(((-0.205887932040862)*htj1))+(((-1.0)*x7772))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x7771))+x7770))))+x7769);
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7773=cj1*cj1;
IkReal x7774=((6.21697001542928)*pz);
IkReal x7775=(cj1*sj1);
if( IKabs(((((-4.78706691188054e-6)*x7775))+(((-0.994715202468684)*x7773))+((cj1*x7774)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+((sj1*x7774))+(((-0.994715202468684)*x7775))+(((4.78706691188054e-6)*x7773)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-4.78706691188054e-6)*x7775))+(((-0.994715202468684)*x7773))+((cj1*x7774))))+IKsqr(((-4.78706691188054e-6)+((sj1*x7774))+(((-0.994715202468684)*x7775))+(((4.78706691188054e-6)*x7773))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-4.78706691188054e-6)*x7775))+(((-0.994715202468684)*x7773))+((cj1*x7774))), ((-4.78706691188054e-6)+((sj1*x7774))+(((-0.994715202468684)*x7775))+(((4.78706691188054e-6)*x7773))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x7776=IKcos(j2);
IkReal x7777=IKsin(j2);
IkReal x7778=(cj0*cj5);
IkReal x7779=(sj0*sj5);
IkReal x7780=(cj5*sj0);
IkReal x7781=(cj0*sj5);
IkReal x7782=((1.0)*x7776);
IkReal x7783=((0.02349986)*x7776);
IkReal x7784=(sj1*x7777);
IkReal x7785=((0.16085006)*x7776);
IkReal x7786=(cj1*x7777);
IkReal x7787=(sj1*x7782);
IkReal x7788=((1.0)*x7786);
IkReal x7789=(x7788+x7787);
evalcond[0]=((((-1.0)*cj1*x7782))+x7784);
evalcond[1]=((-1.0)*x7789);
evalcond[2]=(((r00*x7779))+(((-1.0)*r11*x7778))+((r01*x7780))+(((-1.0)*r10*x7781))+(((-1.0)*x7789)));
evalcond[3]=((((-0.02349986)*x7784))+((sj1*x7785))+(((0.16)*cj1))+(((0.16085006)*x7786))+((cj1*x7783))+(((-1.0)*pz))+(((7.7e-7)*sj1)));
evalcond[4]=((((-0.0008)*r00*x7779))+(((-1.0)*cj1*x7785))+((sj1*x7783))+(((-3.5e-7)*r01*x7779))+(((0.16085006)*x7784))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((3.5e-7)*r11*x7781))+(((0.0008)*r10*x7781))+(((0.02349986)*x7786))+(((-3.5e-7)*r10*x7778))+(((-0.0008)*r01*x7780))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0008)*r11*x7778))+(((3.5e-7)*r00*x7780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7790=((3.5e-7)*cj5);
IkReal x7791=((0.0008)*cj5);
IkReal x7792=((0.0008)*sj5);
IkReal x7793=((3.5e-7)*sj5);
CheckValue<IkReal> x7794 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x7792))+(((-1.0)*px))+(((-1.0)*r01*x7793))+(((-1.0)*r01*x7791))+((r00*x7790)))),IkReal(((((-1.0)*r10*x7790))+((r10*x7792))+py+((r11*x7793))+((r11*x7791)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7794.valid){
continue;
}
CheckValue<IkReal> x7795=IKPowWithIntegerCheck(IKsign(((((0.0008)*r22*sj4))+(((-1.0)*rxp1_2*sj4*sj5))+((cj5*rxp0_2*sj4)))),-1);
if(!x7795.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x7794.value)+(((1.5707963267949)*(x7795.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7796=IKcos(j0);
IkReal x7797=IKsin(j0);
IkReal x7798=(r11*sj4);
IkReal x7799=(r10*sj4);
IkReal x7800=(r01*sj4);
IkReal x7801=(r00*sj4);
IkReal x7802=((1.0)*x7796);
IkReal x7803=(sj5*x7796);
IkReal x7804=(cj5*x7797);
IkReal x7805=(cj5*x7796);
IkReal x7806=(sj5*x7797);
IkReal x7807=((1.0)*x7806);
evalcond[0]=(((r11*x7804))+((r00*x7803))+((r01*x7805))+((r10*x7806)));
evalcond[1]=((((-1.0)*cj5*x7799*x7802))+((x7798*x7803))+(((-1.0)*x7800*x7807))+((x7801*x7804)));
evalcond[2]=((-1.0)+(((-1.0)*x7798*x7807))+((x7799*x7804))+(((-1.0)*sj5*x7800*x7802))+((x7801*x7805)));
evalcond[3]=((((3.5e-7)*r00*x7805))+(((-1.0)*px*x7802))+(((-0.0008)*r11*x7804))+(((-0.0008)*r01*x7805))+(((-1.0)*py*x7797))+(((-3.5e-7)*r11*x7806))+(((-0.0008)*r10*x7806))+(((3.5e-7)*r10*x7804))+(((-0.0008)*r00*x7803))+(((-3.5e-7)*r01*x7803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x7808=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x7808);
rxp1_0=(pz*r11);
rxp1_1=(r01*x7808);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x7809=(r00*sj0);
IkReal x7810=((6.75570252e-7)*cj5);
IkReal x7811=(r01*sj0);
IkReal x7812=((3.2899804e-8)*sj5);
IkReal x7813=((0.000514720192)*sj5);
IkReal x7814=(cj0*sj5);
IkReal x7815=((7.5199552e-5)*cj5);
IkReal x7816=((0.000225598656)*cj5);
IkReal x7817=(px*sj0);
IkReal x7818=(cj0*r10);
IkReal x7819=((2.25190084e-7)*cj5);
IkReal x7820=(cj0*r11);
IkReal x7821=((0.001544160576)*cj5);
IkReal x7822=((0.000514720192)*cj5);
IkReal x7823=(cj0*py);
IkReal x7824=((9.8699412e-8)*cj5);
IkReal x7825=((3.2899804e-8)*cj5);
IkReal x7826=((0.28199832)*x7823);
IkReal x7827=((1.93020072)*x7817);
IkReal x7828=(x7809*x7824);
IkReal x7829=((9.8699412e-8)*r11*x7814);
IkReal x7830=((0.000225598656)*r10*x7814);
IkReal x7831=(x7816*x7820);
IkReal x7832=(x7810*x7818);
IkReal x7833=((0.001544160576)*sj5*x7809);
IkReal x7834=(x7811*x7821);
IkReal x7835=((6.75570252e-7)*sj5*x7811);
IkReal x7836=(x7830+x7831+x7829+x7828+x7826);
IkReal x7837=(x7832+x7833+x7834+x7835+x7827);
IkReal x7838=((((0.28199832)*x7817))+(((9.8699412e-8)*sj5*x7811))+(((1.93020072)*pz))+(((0.000225598656)*sj5*x7809))+((x7811*x7816))+((x7818*x7824)));
IkReal x7839=(((x7820*x7821))+(((0.001544160576)*r10*x7814))+(((6.75570252e-7)*r11*x7814))+((x7809*x7810))+(((1.93020072)*x7823))+(((0.28199832)*pz)));
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((0.102943966020431)+x7836+(((-1.0)*x7838)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+x7837+(((-1.0)*x7839)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+x7836+(((-1.0)*x7838)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((0.64340024)*x7817))+(((-0.64340024)*x7823))+((x7818*x7819))+(((-1.0)*x7820*x7822))+(((2.25190084e-7)*sj5*x7811))+((x7809*x7813))+((x7811*x7822))+(((-1.0)*x7813*x7818))+(((-2.25190084e-7)*r11*x7814))+(((-1.0)*x7809*x7819))+(((-0.09399944)*pz)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+x7837+(((-1.0)*x7839)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+((x7812*x7820))+(((-1.0)*x7811*x7815))+(((-1.0)*x7811*x7812))+(((7.5199552e-5)*r10*x7814))+((x7815*x7820))+((x7809*x7825))+(((-7.5199552e-5)*sj5*x7809))+(((0.09399944)*x7823))+(((-0.09399944)*x7817))+(((-0.64340024)*pz))+(((-1.0)*x7818*x7825))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x7840=(r01*sj0);
IkReal x7841=((3.2899804e-8)*sj5);
IkReal x7842=((7.5199552e-5)*sj5);
IkReal x7843=(cj0*r10);
IkReal x7844=((7.5199552e-5)*cj5);
IkReal x7845=((0.000225598656)*cj5);
IkReal x7846=(cj0*r11);
IkReal x7847=(cj0*py);
IkReal x7848=(r00*sj0);
IkReal x7849=((9.8699412e-8)*sj5);
IkReal x7850=(px*sj0);
IkReal x7851=((0.000225598656)*sj5);
IkReal x7852=((9.8699412e-8)*cj5);
IkReal x7853=((3.2899804e-8)*cj5);
IkReal x7854=((0.28199832)*x7847);
IkReal x7855=((0.09399944)*x7847);
IkReal x7856=(x7848*x7852);
IkReal x7857=(x7846*x7849);
IkReal x7858=(x7843*x7851);
IkReal x7859=(x7845*x7846);
IkReal x7860=(x7841*x7846);
IkReal x7861=(x7844*x7846);
IkReal x7862=(x7848*x7853);
IkReal x7863=(x7842*x7843);
IkReal x7864=(x7863+x7862+x7861+x7860+x7855);
IkReal x7865=(x7856+x7857+x7854+x7858+x7859);
IkReal x7866=((((1.93020072)*pz))+((x7848*x7851))+(((0.28199832)*x7850))+((x7840*x7849))+((x7840*x7845))+((x7843*x7852)));
IkReal x7867=(((x7842*x7848))+(((0.09399944)*x7850))+(((0.64340024)*pz))+((x7840*x7844))+((x7840*x7841))+((x7843*x7853)));
op[0]=((-0.102943966020431)+(((-1.0)*x7867))+x7864);
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+(((-1.0)*x7866))+x7865);
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+(((-1.0)*x7866))+x7865);
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+(((-1.0)*x7867))+x7864);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x7868=((0.09399944)*pz);
IkReal x7869=(r00*sj0);
IkReal x7870=((6.75570252e-7)*cj5);
IkReal x7871=((0.000514720192)*sj5);
IkReal x7872=(cj0*sj5);
IkReal x7873=(px*sj0);
IkReal x7874=((2.25190084e-7)*cj5);
IkReal x7875=(cj0*py);
IkReal x7876=(cj0*r10);
IkReal x7877=((0.64340024)*x7873);
IkReal x7878=((1.93020072)*x7873);
IkReal x7879=((0.64340024)*x7875);
IkReal x7880=(cj5*r01*sj0);
IkReal x7881=(cj0*cj5*r11);
IkReal x7882=(r01*sj0*sj5);
IkReal x7883=(x7869*x7871);
IkReal x7884=((2.25190084e-7)*x7882);
IkReal x7885=((0.000514720192)*x7880);
IkReal x7886=(x7874*x7876);
IkReal x7887=(x7870*x7876);
IkReal x7888=((0.001544160576)*sj5*x7869);
IkReal x7889=((0.001544160576)*x7880);
IkReal x7890=((6.75570252e-7)*x7882);
IkReal x7891=((0.000514720192)*x7881);
IkReal x7892=(x7869*x7874);
IkReal x7893=((2.25190084e-7)*r11*x7872);
IkReal x7894=(x7871*x7876);
IkReal x7895=(x7883+x7885+x7884+x7886+x7877);
IkReal x7896=(x7889+x7888+x7887+x7878+x7890);
IkReal x7897=((((0.001544160576)*r10*x7872))+(((0.001544160576)*x7881))+((x7869*x7870))+(((6.75570252e-7)*r11*x7872))+(((0.28199832)*pz))+(((1.93020072)*x7875)));
IkReal x7898=(x7879+x7868+x7894+x7892+x7893+x7891);
j1evalpoly[0]=((0.0150404058181848)+(((-1.0)*x7898))+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((-0.205887932040862)*htj1))+x7895+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x7897))+x7896))))+(((htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x7897))+x7896))))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x7898))+x7895)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x7899=cj1*cj1;
IkReal x7900=((6.21697001542928)*pz);
IkReal x7901=(cj1*sj1);
if( IKabs(((((-4.78706691188054e-6)*x7901))+((cj1*x7900))+(((-0.994715202468684)*x7899)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((-0.994715202468684)*x7901))+((sj1*x7900))+(((4.78706691188054e-6)*x7899)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-4.78706691188054e-6)*x7901))+((cj1*x7900))+(((-0.994715202468684)*x7899))))+IKsqr(((-4.78706691188054e-6)+(((-0.994715202468684)*x7901))+((sj1*x7900))+(((4.78706691188054e-6)*x7899))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-4.78706691188054e-6)*x7901))+((cj1*x7900))+(((-0.994715202468684)*x7899))), ((-4.78706691188054e-6)+(((-0.994715202468684)*x7901))+((sj1*x7900))+(((4.78706691188054e-6)*x7899))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x7902=IKcos(j2);
IkReal x7903=IKsin(j2);
IkReal x7904=(cj0*cj5);
IkReal x7905=(sj0*sj5);
IkReal x7906=(cj5*sj0);
IkReal x7907=(cj0*sj5);
IkReal x7908=((1.0)*x7902);
IkReal x7909=((0.02349986)*x7902);
IkReal x7910=(sj1*x7903);
IkReal x7911=((0.16085006)*x7902);
IkReal x7912=(cj1*x7903);
IkReal x7913=(sj1*x7908);
IkReal x7914=((1.0)*x7912);
IkReal x7915=(x7913+x7914);
evalcond[0]=(x7910+(((-1.0)*cj1*x7908)));
evalcond[1]=((-1.0)*x7915);
evalcond[2]=((((-1.0)*x7915))+((r01*x7906))+((r00*x7905))+(((-1.0)*r10*x7907))+(((-1.0)*r11*x7904)));
evalcond[3]=((((0.16)*cj1))+(((-0.02349986)*x7910))+(((-1.0)*pz))+((cj1*x7909))+(((7.7e-7)*sj1))+(((0.16085006)*x7912))+((sj1*x7911)));
evalcond[4]=((((0.02349986)*x7912))+(((0.0008)*r10*x7907))+(((3.5e-7)*r11*x7907))+(((-3.5e-7)*r01*x7905))+((sj1*x7909))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*cj1*x7911))+(((0.0008)*r11*x7904))+(((-0.0008)*r01*x7906))+(((-0.0008)*r00*x7905))+(((-3.5e-7)*r10*x7904))+(((3.5e-7)*r00*x7906))+(((-1.0)*px*sj0))+(((0.16085006)*x7910))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7916=(sj4*sj5);
IkReal x7917=((1.0)*cj5*sj4);
CheckValue<IkReal> x7918=IKPowWithIntegerCheck(IKsign(((-1.0)+(cj4*cj4))),-1);
if(!x7918.valid){
continue;
}
CheckValue<IkReal> x7919 = IKatan2WithCheck(IkReal((((r11*x7916))+(((-1.0)*r10*x7917)))),IkReal((((r01*x7916))+(((-1.0)*r00*x7917)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7919.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7918.value)))+(x7919.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7920=IKcos(j0);
IkReal x7921=IKsin(j0);
IkReal x7922=(r11*sj4);
IkReal x7923=(r10*sj4);
IkReal x7924=(r01*sj4);
IkReal x7925=(r00*sj4);
IkReal x7926=((1.0)*x7920);
IkReal x7927=(sj5*x7920);
IkReal x7928=(cj5*x7921);
IkReal x7929=(cj5*x7920);
IkReal x7930=(sj5*x7921);
IkReal x7931=((1.0)*x7930);
evalcond[0]=(((r10*x7930))+((r11*x7928))+((r01*x7929))+((r00*x7927)));
evalcond[1]=((((-1.0)*x7924*x7931))+(((-1.0)*cj5*x7923*x7926))+((x7925*x7928))+((x7922*x7927)));
evalcond[2]=((-1.0)+(((-1.0)*sj5*x7924*x7926))+(((-1.0)*x7922*x7931))+((x7923*x7928))+((x7925*x7929)));
evalcond[3]=((((-1.0)*py*x7921))+(((3.5e-7)*r10*x7928))+(((-0.0008)*r00*x7927))+(((-0.0008)*r10*x7930))+(((-0.0008)*r11*x7928))+(((-0.0008)*r01*x7929))+(((3.5e-7)*r00*x7929))+(((-3.5e-7)*r11*x7930))+(((-1.0)*px*x7926))+(((-3.5e-7)*r01*x7927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x7932=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x7932);
rxp1_0=(pz*r11);
rxp1_1=(r01*x7932);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x7933=(r00*sj0);
IkReal x7934=((6.75570252e-7)*cj5);
IkReal x7935=(r01*sj0);
IkReal x7936=((3.2899804e-8)*sj5);
IkReal x7937=((0.000514720192)*sj5);
IkReal x7938=(cj0*sj5);
IkReal x7939=((7.5199552e-5)*cj5);
IkReal x7940=((0.000225598656)*cj5);
IkReal x7941=(px*sj0);
IkReal x7942=(cj0*r10);
IkReal x7943=((2.25190084e-7)*cj5);
IkReal x7944=(cj0*r11);
IkReal x7945=((0.001544160576)*cj5);
IkReal x7946=((0.000514720192)*cj5);
IkReal x7947=(cj0*py);
IkReal x7948=((9.8699412e-8)*cj5);
IkReal x7949=((3.2899804e-8)*cj5);
IkReal x7950=((0.28199832)*x7947);
IkReal x7951=((1.93020072)*x7941);
IkReal x7952=(x7933*x7948);
IkReal x7953=((9.8699412e-8)*r11*x7938);
IkReal x7954=((0.000225598656)*r10*x7938);
IkReal x7955=(x7940*x7944);
IkReal x7956=(x7934*x7942);
IkReal x7957=((0.001544160576)*sj5*x7933);
IkReal x7958=(x7935*x7945);
IkReal x7959=((6.75570252e-7)*sj5*x7935);
IkReal x7960=(x7955+x7954+x7953+x7952+x7950);
IkReal x7961=(x7957+x7956+x7951+x7959+x7958);
IkReal x7962=(((x7935*x7940))+(((0.28199832)*x7941))+(((1.93020072)*pz))+(((0.000225598656)*sj5*x7933))+((x7942*x7948))+(((9.8699412e-8)*sj5*x7935)));
IkReal x7963=(((x7933*x7934))+(((1.93020072)*x7947))+(((0.001544160576)*r10*x7938))+(((0.28199832)*pz))+(((6.75570252e-7)*r11*x7938))+((x7944*x7945)));
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x7963))+x7961)))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-0.09399944)*x7941))+(((-1.0)*x7935*x7939))+(((-1.0)*x7935*x7936))+(((7.5199552e-5)*r10*x7938))+((x7933*x7949))+(((-0.64340024)*pz))+((x7939*x7944))+((x7936*x7944))+(((0.09399944)*x7947))+(((-1.0)*x7942*x7949))+(((-7.5199552e-5)*sj5*x7933)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+((x7935*x7946))+(((-2.25190084e-7)*r11*x7938))+((x7933*x7937))+(((2.25190084e-7)*sj5*x7935))+(((-1.0)*x7937*x7942))+((x7942*x7943))+(((-1.0)*x7944*x7946))+(((-0.64340024)*x7947))+(((-1.0)*x7933*x7943))+(((0.64340024)*x7941))+(((-0.09399944)*pz)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+(((-1.0)*x7962))+x7960)))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-1.0)*x7963))+x7961)))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x7962))+x7960))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x7964=(r01*sj0);
IkReal x7965=((3.2899804e-8)*sj5);
IkReal x7966=((7.5199552e-5)*sj5);
IkReal x7967=(cj0*r10);
IkReal x7968=((7.5199552e-5)*cj5);
IkReal x7969=((0.000225598656)*cj5);
IkReal x7970=(cj0*r11);
IkReal x7971=(cj0*py);
IkReal x7972=(r00*sj0);
IkReal x7973=((9.8699412e-8)*sj5);
IkReal x7974=(px*sj0);
IkReal x7975=((0.000225598656)*sj5);
IkReal x7976=((9.8699412e-8)*cj5);
IkReal x7977=((3.2899804e-8)*cj5);
IkReal x7978=((0.28199832)*x7971);
IkReal x7979=((0.09399944)*x7971);
IkReal x7980=(x7972*x7976);
IkReal x7981=(x7970*x7973);
IkReal x7982=(x7967*x7975);
IkReal x7983=(x7969*x7970);
IkReal x7984=(x7965*x7970);
IkReal x7985=(x7968*x7970);
IkReal x7986=(x7972*x7977);
IkReal x7987=(x7966*x7967);
IkReal x7988=(x7979+x7984+x7985+x7986+x7987);
IkReal x7989=(x7978+x7980+x7981+x7982+x7983);
IkReal x7990=(((x7964*x7969))+((x7964*x7973))+(((1.93020072)*pz))+(((0.28199832)*x7974))+((x7967*x7976))+((x7972*x7975)));
IkReal x7991=(((x7964*x7965))+((x7964*x7968))+((x7967*x7977))+(((0.64340024)*pz))+((x7966*x7972))+(((0.09399944)*x7974)));
op[0]=((-0.102943966020431)+x7988+(((-1.0)*x7991)));
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+x7989+(((-1.0)*x7990)));
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+x7989+(((-1.0)*x7990)));
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+x7988+(((-1.0)*x7991)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x7992=((0.09399944)*pz);
IkReal x7993=(r00*sj0);
IkReal x7994=((6.75570252e-7)*cj5);
IkReal x7995=((0.000514720192)*sj5);
IkReal x7996=(cj0*sj5);
IkReal x7997=(px*sj0);
IkReal x7998=((2.25190084e-7)*cj5);
IkReal x7999=(cj0*py);
IkReal x8000=(cj0*r10);
IkReal x8001=((0.64340024)*x7997);
IkReal x8002=((1.93020072)*x7997);
IkReal x8003=((0.64340024)*x7999);
IkReal x8004=(cj5*r01*sj0);
IkReal x8005=(cj0*cj5*r11);
IkReal x8006=(r01*sj0*sj5);
IkReal x8007=(x7993*x7995);
IkReal x8008=((2.25190084e-7)*x8006);
IkReal x8009=((0.000514720192)*x8004);
IkReal x8010=(x7998*x8000);
IkReal x8011=(x7994*x8000);
IkReal x8012=((0.001544160576)*sj5*x7993);
IkReal x8013=((0.001544160576)*x8004);
IkReal x8014=((6.75570252e-7)*x8006);
IkReal x8015=((0.000514720192)*x8005);
IkReal x8016=(x7993*x7998);
IkReal x8017=((2.25190084e-7)*r11*x7996);
IkReal x8018=(x7995*x8000);
IkReal x8019=(x8008+x8009+x8007+x8001+x8010);
IkReal x8020=(x8002+x8014+x8013+x8012+x8011);
IkReal x8021=((((1.93020072)*x7999))+(((6.75570252e-7)*r11*x7996))+(((0.001544160576)*x8005))+(((0.001544160576)*r10*x7996))+((x7993*x7994))+(((0.28199832)*pz)));
IkReal x8022=(x7992+x8003+x8018+x8017+x8016+x8015);
j1evalpoly[0]=((0.0150404058181848)+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((0.0150404058181848)+x8020+(((-1.0)*x8021))))))+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x8020+(((-1.0)*x8021))))))+(((-0.205887932040862)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x8019+(((-1.0)*x8022))))))+x8019+(((-1.0)*x8022))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x8023=cj1*cj1;
IkReal x8024=((6.21697001542928)*pz);
IkReal x8025=(cj1*sj1);
if( IKabs((((cj1*x8024))+(((-4.78706691188054e-6)*x8025))+(((-0.994715202468684)*x8023)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+((sj1*x8024))+(((-0.994715202468684)*x8025))+(((4.78706691188054e-6)*x8023)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x8024))+(((-4.78706691188054e-6)*x8025))+(((-0.994715202468684)*x8023))))+IKsqr(((-4.78706691188054e-6)+((sj1*x8024))+(((-0.994715202468684)*x8025))+(((4.78706691188054e-6)*x8023))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x8024))+(((-4.78706691188054e-6)*x8025))+(((-0.994715202468684)*x8023))), ((-4.78706691188054e-6)+((sj1*x8024))+(((-0.994715202468684)*x8025))+(((4.78706691188054e-6)*x8023))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x8026=IKcos(j2);
IkReal x8027=IKsin(j2);
IkReal x8028=(cj0*cj5);
IkReal x8029=(sj0*sj5);
IkReal x8030=(cj5*sj0);
IkReal x8031=(cj0*sj5);
IkReal x8032=((1.0)*x8026);
IkReal x8033=((0.02349986)*x8026);
IkReal x8034=(sj1*x8027);
IkReal x8035=((0.16085006)*x8026);
IkReal x8036=(cj1*x8027);
IkReal x8037=(sj1*x8032);
IkReal x8038=((1.0)*x8036);
IkReal x8039=(x8037+x8038);
evalcond[0]=((((-1.0)*cj1*x8032))+x8034);
evalcond[1]=((-1.0)*x8039);
evalcond[2]=((((-1.0)*r11*x8028))+((r00*x8029))+((r01*x8030))+(((-1.0)*x8039))+(((-1.0)*r10*x8031)));
evalcond[3]=(((cj1*x8033))+(((0.16)*cj1))+((sj1*x8035))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x8036))+(((-0.02349986)*x8034)));
evalcond[4]=((((0.0008)*r10*x8031))+(((0.02349986)*x8036))+(((3.5e-7)*r11*x8031))+(((0.0008)*r11*x8028))+(((-3.5e-7)*r01*x8029))+(((-0.0008)*r01*x8030))+((sj1*x8033))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*cj1*x8035))+(((-3.5e-7)*r10*x8028))+(((3.5e-7)*r00*x8030))+(((0.16085006)*x8034))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0008)*r00*x8029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8040=IKPowWithIntegerCheck(IKsign((r22*sj4)),-1);
if(!x8040.valid){
continue;
}
CheckValue<IkReal> x8041 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8041.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x8040.value)))+(x8041.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8042=IKcos(j0);
IkReal x8043=IKsin(j0);
IkReal x8044=(r11*sj4);
IkReal x8045=(r10*sj4);
IkReal x8046=(r01*sj4);
IkReal x8047=(r00*sj4);
IkReal x8048=((1.0)*x8042);
IkReal x8049=(sj5*x8042);
IkReal x8050=(cj5*x8043);
IkReal x8051=(cj5*x8042);
IkReal x8052=(sj5*x8043);
IkReal x8053=((1.0)*x8052);
evalcond[0]=(((r10*x8052))+((r11*x8050))+((r00*x8049))+((r01*x8051)));
evalcond[1]=((((-1.0)*x8046*x8053))+((x8047*x8050))+((x8044*x8049))+(((-1.0)*cj5*x8045*x8048)));
evalcond[2]=((-1.0)+((x8047*x8051))+((x8045*x8050))+(((-1.0)*sj5*x8046*x8048))+(((-1.0)*x8044*x8053)));
evalcond[3]=((((-0.0008)*r01*x8051))+(((-0.0008)*r00*x8049))+(((-1.0)*py*x8043))+(((-3.5e-7)*r01*x8049))+(((3.5e-7)*r00*x8051))+(((3.5e-7)*r10*x8050))+(((-0.0008)*r10*x8052))+(((-1.0)*px*x8048))+(((-3.5e-7)*r11*x8052))+(((-0.0008)*r11*x8050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x8054=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8054);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8054);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x8055=(r00*sj0);
IkReal x8056=((6.75570252e-7)*cj5);
IkReal x8057=(r01*sj0);
IkReal x8058=((3.2899804e-8)*sj5);
IkReal x8059=((0.000514720192)*sj5);
IkReal x8060=(cj0*sj5);
IkReal x8061=((7.5199552e-5)*cj5);
IkReal x8062=((0.000225598656)*cj5);
IkReal x8063=(px*sj0);
IkReal x8064=(cj0*r10);
IkReal x8065=((2.25190084e-7)*cj5);
IkReal x8066=(cj0*r11);
IkReal x8067=((0.001544160576)*cj5);
IkReal x8068=((0.000514720192)*cj5);
IkReal x8069=(cj0*py);
IkReal x8070=((9.8699412e-8)*cj5);
IkReal x8071=((3.2899804e-8)*cj5);
IkReal x8072=((0.28199832)*x8069);
IkReal x8073=((1.93020072)*x8063);
IkReal x8074=(x8055*x8070);
IkReal x8075=((9.8699412e-8)*r11*x8060);
IkReal x8076=((0.000225598656)*r10*x8060);
IkReal x8077=(x8062*x8066);
IkReal x8078=(x8056*x8064);
IkReal x8079=((0.001544160576)*sj5*x8055);
IkReal x8080=(x8057*x8067);
IkReal x8081=((6.75570252e-7)*sj5*x8057);
IkReal x8082=(x8072+x8075+x8074+x8077+x8076);
IkReal x8083=(x8079+x8078+x8073+x8080+x8081);
IkReal x8084=(((x8057*x8062))+(((9.8699412e-8)*sj5*x8057))+(((1.93020072)*pz))+(((0.000225598656)*sj5*x8055))+((x8064*x8070))+(((0.28199832)*x8063)));
IkReal x8085=((((6.75570252e-7)*r11*x8060))+((x8066*x8067))+(((0.28199832)*pz))+(((1.93020072)*x8069))+(((0.001544160576)*r10*x8060))+((x8055*x8056)));
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+((x8057*x8068))+((x8064*x8065))+(((2.25190084e-7)*sj5*x8057))+(((-1.0)*x8055*x8065))+(((-1.0)*x8059*x8064))+(((-0.64340024)*x8069))+(((-1.0)*x8066*x8068))+(((-2.25190084e-7)*r11*x8060))+((x8055*x8059))+(((0.64340024)*x8063))+(((-0.09399944)*pz)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+(((-1.0)*x8084))+x8082)))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x8084))+x8082)))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-1.0)*x8085))+x8083)))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+((x8061*x8066))+(((-1.0)*x8057*x8058))+(((-1.0)*x8057*x8061))+(((7.5199552e-5)*r10*x8060))+(((-0.09399944)*x8063))+(((-7.5199552e-5)*sj5*x8055))+(((-1.0)*x8064*x8071))+((x8058*x8066))+((x8055*x8071))+(((-0.64340024)*pz))+(((0.09399944)*x8069)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x8085))+x8083))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x8086=(r01*sj0);
IkReal x8087=((3.2899804e-8)*sj5);
IkReal x8088=((7.5199552e-5)*sj5);
IkReal x8089=(cj0*r10);
IkReal x8090=((7.5199552e-5)*cj5);
IkReal x8091=((0.000225598656)*cj5);
IkReal x8092=(cj0*r11);
IkReal x8093=(cj0*py);
IkReal x8094=(r00*sj0);
IkReal x8095=((9.8699412e-8)*sj5);
IkReal x8096=(px*sj0);
IkReal x8097=((0.000225598656)*sj5);
IkReal x8098=((9.8699412e-8)*cj5);
IkReal x8099=((3.2899804e-8)*cj5);
IkReal x8100=((0.28199832)*x8093);
IkReal x8101=((0.09399944)*x8093);
IkReal x8102=(x8094*x8098);
IkReal x8103=(x8092*x8095);
IkReal x8104=(x8089*x8097);
IkReal x8105=(x8091*x8092);
IkReal x8106=(x8087*x8092);
IkReal x8107=(x8090*x8092);
IkReal x8108=(x8094*x8099);
IkReal x8109=(x8088*x8089);
IkReal x8110=(x8107+x8106+x8101+x8109+x8108);
IkReal x8111=(x8105+x8104+x8100+x8103+x8102);
IkReal x8112=(((x8086*x8095))+((x8086*x8091))+(((0.28199832)*x8096))+((x8089*x8098))+(((1.93020072)*pz))+((x8094*x8097)));
IkReal x8113=(((x8086*x8090))+(((0.09399944)*x8096))+((x8089*x8099))+((x8086*x8087))+((x8088*x8094))+(((0.64340024)*pz)));
op[0]=((-0.102943966020431)+(((-1.0)*x8113))+x8110);
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+(((-1.0)*x8112))+x8111);
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+(((-1.0)*x8112))+x8111);
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+(((-1.0)*x8113))+x8110);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x8114=((0.09399944)*pz);
IkReal x8115=(r00*sj0);
IkReal x8116=((6.75570252e-7)*cj5);
IkReal x8117=((0.000514720192)*sj5);
IkReal x8118=(cj0*sj5);
IkReal x8119=(px*sj0);
IkReal x8120=((2.25190084e-7)*cj5);
IkReal x8121=(cj0*py);
IkReal x8122=(cj0*r10);
IkReal x8123=((0.64340024)*x8119);
IkReal x8124=((1.93020072)*x8119);
IkReal x8125=((0.64340024)*x8121);
IkReal x8126=(cj5*r01*sj0);
IkReal x8127=(cj0*cj5*r11);
IkReal x8128=(r01*sj0*sj5);
IkReal x8129=(x8115*x8117);
IkReal x8130=((2.25190084e-7)*x8128);
IkReal x8131=((0.000514720192)*x8126);
IkReal x8132=(x8120*x8122);
IkReal x8133=(x8116*x8122);
IkReal x8134=((0.001544160576)*sj5*x8115);
IkReal x8135=((0.001544160576)*x8126);
IkReal x8136=((6.75570252e-7)*x8128);
IkReal x8137=((0.000514720192)*x8127);
IkReal x8138=(x8115*x8120);
IkReal x8139=((2.25190084e-7)*r11*x8118);
IkReal x8140=(x8117*x8122);
IkReal x8141=(x8129+x8123+x8130+x8131+x8132);
IkReal x8142=(x8124+x8134+x8135+x8136+x8133);
IkReal x8143=(((x8115*x8116))+(((6.75570252e-7)*r11*x8118))+(((0.001544160576)*r10*x8118))+(((1.93020072)*x8121))+(((0.28199832)*pz))+(((0.001544160576)*x8127)));
IkReal x8144=(x8140+x8125+x8114+x8138+x8139+x8137);
j1evalpoly[0]=((0.0150404058181848)+(((-0.411775864081725)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((0.0150404058181848)+x8142+(((-1.0)*x8143))))))+(((-0.205887932040862)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x8141+(((-1.0)*x8144))))))+(((-0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+x8141+(((-1.0)*x8144))+(((htj1*htj1*htj1*htj1)*(((-0.0150404058181848)+x8142+(((-1.0)*x8143)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x8145=cj1*cj1;
IkReal x8146=((6.21697001542928)*pz);
IkReal x8147=(cj1*sj1);
if( IKabs(((((-0.994715202468684)*x8145))+(((-4.78706691188054e-6)*x8147))+((cj1*x8146)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((-0.994715202468684)*x8147))+((sj1*x8146))+(((4.78706691188054e-6)*x8145)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.994715202468684)*x8145))+(((-4.78706691188054e-6)*x8147))+((cj1*x8146))))+IKsqr(((-4.78706691188054e-6)+(((-0.994715202468684)*x8147))+((sj1*x8146))+(((4.78706691188054e-6)*x8145))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.994715202468684)*x8145))+(((-4.78706691188054e-6)*x8147))+((cj1*x8146))), ((-4.78706691188054e-6)+(((-0.994715202468684)*x8147))+((sj1*x8146))+(((4.78706691188054e-6)*x8145))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x8148=IKcos(j2);
IkReal x8149=IKsin(j2);
IkReal x8150=(cj0*cj5);
IkReal x8151=(sj0*sj5);
IkReal x8152=(cj5*sj0);
IkReal x8153=(cj0*sj5);
IkReal x8154=((1.0)*x8148);
IkReal x8155=((0.02349986)*x8148);
IkReal x8156=(sj1*x8149);
IkReal x8157=((0.16085006)*x8148);
IkReal x8158=(cj1*x8149);
IkReal x8159=(sj1*x8154);
IkReal x8160=((1.0)*x8158);
IkReal x8161=(x8160+x8159);
evalcond[0]=((((-1.0)*cj1*x8154))+x8156);
evalcond[1]=((-1.0)*x8161);
evalcond[2]=((((-1.0)*r10*x8153))+((r00*x8151))+((r01*x8152))+(((-1.0)*x8161))+(((-1.0)*r11*x8150)));
evalcond[3]=(((sj1*x8157))+(((0.16)*cj1))+(((-0.02349986)*x8156))+((cj1*x8155))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x8158)));
evalcond[4]=((((0.0008)*r11*x8150))+(((-3.5e-7)*r10*x8150))+(((-3.5e-7)*r01*x8151))+((sj1*x8155))+(((3.5e-7)*r00*x8152))+(((0.0008)*r10*x8153))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.02349986)*x8158))+(((-0.0008)*r00*x8151))+(((-1.0)*cj1*x8157))+(((-0.0008)*r01*x8152))+(((3.5e-7)*r11*x8153))+(((-1.0)*px*sj0))+((cj0*py))+(((0.16085006)*x8156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x8162=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8162);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8162);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x8163=(r22*sj4);
j0eval[0]=x8163;
j0eval[1]=IKsign(x8163);
j0eval[2]=((cj5*cj5)+(sj5*sj5));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[4];
IkReal x8164=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8164);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8164);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x8165=((1.0)+(((-1.0)*(cj4*cj4))));
j0eval[0]=x8165;
j0eval[1]=sj4;
j0eval[2]=((cj5*cj5)+(sj5*sj5));
j0eval[3]=IKsign(x8165);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x8166=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8166);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8166);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x8167=((1250.0)*sj4);
IkReal x8168=(cj5*rxp0_2);
IkReal x8169=(rxp1_2*sj5);
IkReal x8170=(r22*sj4);
IkReal x8171=((3.5e-7)*cj5);
IkReal x8172=((0.0008)*cj5);
IkReal x8173=((0.0008)*sj5);
IkReal x8174=((3.5e-7)*sj5);
j0eval[0]=(((x8167*x8169))+(((-1.0)*x8170))+(((-1.0)*x8167*x8168)));
j0eval[1]=((IKabs((((r11*x8174))+((r11*x8172))+py+((r10*x8173))+(((-1.0)*r10*x8171)))))+(IKabs(((((-1.0)*r01*x8174))+(((-1.0)*r01*x8172))+(((-1.0)*r00*x8173))+(((-1.0)*px))+((r00*x8171))))));
j0eval[2]=IKsign(((((-0.0008)*x8170))+(((-1.0)*sj4*x8168))+((sj4*x8169))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x8175=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8175);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8175);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
j0eval[0]=((cj5*cj5)+(sj5*sj5));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x8176=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8176);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8176);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x8177=((3.5e-7)*cj5);
IkReal x8178=((0.0008)*cj5);
IkReal x8179=((0.0008)*sj5);
IkReal x8180=((3.5e-7)*sj5);
j0eval[0]=((IKabs(((((-1.0)*r01*x8178))+(((-1.0)*r00*x8179))+(((-1.0)*r01*x8180))+(((-1.0)*px))+((r00*x8177)))))+(IKabs(((((-1.0)*r11*x8178))+(((-1.0)*py))+(((-1.0)*r11*x8180))+((r10*x8177))+(((-1.0)*r10*x8179))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x8181=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8181);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8181);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
j1eval[0]=60.0;
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[8+1], zeror[8];
int numroots;
op[0]=4.0;
op[1]=0;
op[2]=16.0;
op[3]=0;
op[4]=24.0;
op[5]=0;
op[6]=16.0;
op[7]=0;
op[8]=4.0;
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x8182=cj1*cj1;
IkReal x8183=((6.21697001542928)*pz);
IkReal x8184=(cj1*sj1);
if( IKabs((((cj1*x8183))+(((-4.78706691188054e-6)*x8184))+(((-0.994715202468684)*x8182)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+((sj1*x8183))+(((-0.994715202468684)*x8184))+(((4.78706691188054e-6)*x8182)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x8183))+(((-4.78706691188054e-6)*x8184))+(((-0.994715202468684)*x8182))))+IKsqr(((-4.78706691188054e-6)+((sj1*x8183))+(((-0.994715202468684)*x8184))+(((4.78706691188054e-6)*x8182))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x8183))+(((-4.78706691188054e-6)*x8184))+(((-0.994715202468684)*x8182))), ((-4.78706691188054e-6)+((sj1*x8183))+(((-0.994715202468684)*x8184))+(((4.78706691188054e-6)*x8182))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x8185=IKcos(j2);
IkReal x8186=IKsin(j2);
IkReal x8187=(cj1*x8185);
IkReal x8188=(sj1*x8186);
IkReal x8189=(sj1*x8185);
IkReal x8190=(cj1*x8186);
evalcond[0]=((((-1.0)*x8188))+x8187);
evalcond[1]=((((-1.0)*x8190))+(((-1.0)*x8189)));
evalcond[2]=((((0.16)*cj1))+(((-0.02349986)*x8188))+(((-1.0)*pz))+(((0.16085006)*x8189))+(((0.16085006)*x8190))+(((7.7e-7)*sj1))+(((0.02349986)*x8187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8191=(cj2*sj1);
IkReal x8192=(cj5*r11);
IkReal x8193=(cj1*sj2);
IkReal x8194=(r10*sj5);
IkReal x8195=((1.0)*r00*sj5);
IkReal x8196=((1.0)*cj5*r01);
if( IKabs(((((-1.0)*x8193*x8195))+(((-1.0)*x8193*x8196))+(((-1.0)*x8191*x8196))+(((-1.0)*x8191*x8195)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x8191*x8194))+((x8191*x8192))+((x8192*x8193))+((x8193*x8194)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x8193*x8195))+(((-1.0)*x8193*x8196))+(((-1.0)*x8191*x8196))+(((-1.0)*x8191*x8195))))+IKsqr((((x8191*x8194))+((x8191*x8192))+((x8192*x8193))+((x8193*x8194))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x8193*x8195))+(((-1.0)*x8193*x8196))+(((-1.0)*x8191*x8196))+(((-1.0)*x8191*x8195))), (((x8191*x8194))+((x8191*x8192))+((x8192*x8193))+((x8193*x8194))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8197=IKcos(j0);
IkReal x8198=IKsin(j0);
IkReal x8199=((1.0)*px);
IkReal x8200=((0.0008)*r11);
IkReal x8201=(r00*sj5);
IkReal x8202=((3.5e-7)*r01);
IkReal x8203=(cj1*sj2);
IkReal x8204=(cj2*sj1);
IkReal x8205=((3.5e-7)*r11);
IkReal x8206=((0.0008)*r01);
IkReal x8207=((3.5e-7)*r10);
IkReal x8208=((3.5e-7)*r00);
IkReal x8209=((0.0008)*r10);
IkReal x8210=(cj5*x8198);
IkReal x8211=(sj5*x8198);
IkReal x8212=(sj5*x8197);
IkReal x8213=(cj5*x8197);
evalcond[0]=(((r11*x8210))+((r01*x8213))+((r10*x8211))+((x8197*x8201)));
evalcond[1]=((((-1.0)*r11*x8213))+(((-1.0)*r10*x8212))+((x8198*x8201))+((r01*x8210))+x8204+x8203);
evalcond[2]=((((-1.0)*x8202*x8212))+(((-1.0)*x8197*x8199))+(((-1.0)*x8205*x8211))+(((-1.0)*py*x8198))+((x8208*x8213))+(((-1.0)*x8209*x8211))+(((-1.0)*x8200*x8210))+(((-0.0008)*x8197*x8201))+(((-1.0)*x8206*x8213))+((x8207*x8210)));
evalcond[3]=((((-1.0)*x8202*x8211))+((x8209*x8212))+((x8208*x8210))+(((0.02349986)*x8203))+(((0.02349986)*x8204))+((x8205*x8212))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((py*x8197))+((x8200*x8213))+(((-0.0008)*x8198*x8201))+(((-1.0)*x8207*x8213))+(((-1.0)*x8198*x8199))+(((-0.16085006)*cj1*cj2))+(((-1.0)*x8206*x8210))+(((0.16085006)*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x8214=((3.5e-7)*cj5);
IkReal x8215=((0.0008)*cj5);
IkReal x8216=((0.0008)*sj5);
IkReal x8217=((3.5e-7)*sj5);
CheckValue<IkReal> x8219 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x8215))+(((-1.0)*r01*x8217))+(((-1.0)*r00*x8216))+(((-1.0)*px))+((r00*x8214)))),IkReal(((((-1.0)*r11*x8215))+(((-1.0)*r11*x8217))+(((-1.0)*py))+((r10*x8214))+(((-1.0)*r10*x8216)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8219.valid){
continue;
}
IkReal x8218=x8219.value;
j0array[0]=((-1.0)*x8218);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x8218)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x8220=IKcos(j0);
IkReal x8221=IKsin(j0);
evalcond[0]=(((r00*sj5*x8220))+((cj5*r11*x8221))+((r10*sj5*x8221))+((cj5*r01*x8220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x8222=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8222);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8222);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x8223=((0.28199832)*pz);
IkReal x8224=(cj5*sj0);
IkReal x8225=(sj0*sj5);
IkReal x8226=(cj0*sj5);
IkReal x8227=(px*sj0);
IkReal x8228=(cj0*py);
IkReal x8229=((0.28199832)*x8228);
IkReal x8230=((1.93020072)*x8228);
IkReal x8231=(cj0*cj5*r11);
IkReal x8232=(cj0*cj5*r10);
IkReal x8233=((9.8699412e-8)*r00*x8224);
IkReal x8234=((9.8699412e-8)*r11*x8226);
IkReal x8235=((0.000225598656)*r10*x8226);
IkReal x8236=((0.000225598656)*x8231);
IkReal x8237=((0.001544160576)*x8231);
IkReal x8238=((6.75570252e-7)*r11*x8226);
IkReal x8239=((6.75570252e-7)*r00*x8224);
IkReal x8240=((0.001544160576)*r10*x8226);
IkReal x8241=((((1.93020072)*x8227))+(((0.001544160576)*r01*x8224))+(((6.75570252e-7)*x8232))+(((0.001544160576)*r00*x8225))+(((6.75570252e-7)*r01*x8225)));
IkReal x8242=(x8229+x8233+x8236+x8235+x8234);
IkReal x8243=((((0.28199832)*x8227))+(((9.8699412e-8)*r01*x8225))+(((1.93020072)*pz))+(((9.8699412e-8)*x8232))+(((0.000225598656)*r00*x8225))+(((0.000225598656)*r01*x8224)));
IkReal x8244=(x8223+x8230+x8237+x8239+x8238+x8240);
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((0.09399944)*x8228))+(((-7.5199552e-5)*r01*x8224))+(((-7.5199552e-5)*r00*x8225))+(((3.2899804e-8)*r11*x8226))+(((7.5199552e-5)*x8231))+(((-3.2899804e-8)*x8232))+(((3.2899804e-8)*r00*x8224))+(((7.5199552e-5)*r10*x8226))+(((-0.64340024)*pz))+(((-0.09399944)*x8227))+(((-3.2899804e-8)*r01*x8225)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-1.0)*x8241))+x8244)))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((2.25190084e-7)*r11*x8226))+(((-0.64340024)*x8227))+(((0.09399944)*pz))+(((-0.000514720192)*r01*x8224))+(((2.25190084e-7)*r00*x8224))+(((-0.000514720192)*r00*x8225))+(((0.64340024)*x8228))+(((-2.25190084e-7)*x8232))+(((0.000514720192)*r10*x8226))+(((-2.25190084e-7)*r01*x8225))+(((0.000514720192)*x8231)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x8241))+x8244)))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+(((-1.0)*x8243))+x8242)))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x8243))+x8242))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x8245=(r01*sj0);
IkReal x8246=((3.2899804e-8)*sj5);
IkReal x8247=((7.5199552e-5)*sj5);
IkReal x8248=(cj0*r10);
IkReal x8249=((7.5199552e-5)*cj5);
IkReal x8250=((0.000225598656)*cj5);
IkReal x8251=(cj0*r11);
IkReal x8252=(cj0*py);
IkReal x8253=(r00*sj0);
IkReal x8254=((9.8699412e-8)*sj5);
IkReal x8255=(px*sj0);
IkReal x8256=((0.000225598656)*sj5);
IkReal x8257=((9.8699412e-8)*cj5);
IkReal x8258=((3.2899804e-8)*cj5);
IkReal x8259=((0.28199832)*x8252);
IkReal x8260=((0.09399944)*x8252);
IkReal x8261=(x8253*x8257);
IkReal x8262=(x8251*x8254);
IkReal x8263=(x8248*x8256);
IkReal x8264=(x8250*x8251);
IkReal x8265=(x8246*x8251);
IkReal x8266=(x8249*x8251);
IkReal x8267=(x8253*x8258);
IkReal x8268=(x8247*x8248);
IkReal x8269=(x8268+x8265+x8266+x8267+x8260);
IkReal x8270=(x8264+x8261+x8262+x8263+x8259);
IkReal x8271=(((x8245*x8250))+((x8245*x8254))+(((1.93020072)*pz))+(((0.28199832)*x8255))+((x8253*x8256))+((x8248*x8257)));
IkReal x8272=(((x8247*x8253))+(((0.09399944)*x8255))+(((0.64340024)*pz))+((x8245*x8246))+((x8245*x8249))+((x8248*x8258)));
op[0]=((-0.102943966020431)+(((-1.0)*x8272))+x8269);
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+(((-1.0)*x8271))+x8270);
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+(((-1.0)*x8271))+x8270);
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+(((-1.0)*x8272))+x8269);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x8273=((0.28199832)*pz);
IkReal x8274=((0.09399944)*pz);
IkReal x8275=(px*sj0);
IkReal x8276=((0.000514720192)*sj0);
IkReal x8277=(r00*sj5);
IkReal x8278=(cj5*r01);
IkReal x8279=((0.001544160576)*sj0);
IkReal x8280=(cj0*py);
IkReal x8281=((1.93020072)*x8280);
IkReal x8282=((0.64340024)*x8280);
IkReal x8283=(cj5*r00*sj0);
IkReal x8284=(cj0*r11*sj5);
IkReal x8285=(cj0*r10*sj5);
IkReal x8286=(cj0*cj5*r10);
IkReal x8287=(cj0*cj5*r11);
IkReal x8288=(r01*sj0*sj5);
IkReal x8289=((0.001544160576)*x8287);
IkReal x8290=((6.75570252e-7)*x8284);
IkReal x8291=((6.75570252e-7)*x8283);
IkReal x8292=((0.001544160576)*x8285);
IkReal x8293=((0.000514720192)*x8287);
IkReal x8294=((2.25190084e-7)*x8283);
IkReal x8295=((2.25190084e-7)*x8284);
IkReal x8296=((0.000514720192)*x8285);
IkReal x8297=((((1.93020072)*x8275))+((x8278*x8279))+(((6.75570252e-7)*x8288))+(((6.75570252e-7)*x8286))+((x8277*x8279)));
IkReal x8298=((((2.25190084e-7)*x8286))+(((2.25190084e-7)*x8288))+((x8276*x8277))+((x8276*x8278))+(((0.64340024)*x8275)));
IkReal x8299=(x8282+x8293+x8295+x8294+x8296+x8274);
IkReal x8300=(x8281+x8289+x8291+x8290+x8292+x8273);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.0150404058181848)+x8300+(((-1.0)*x8297))))))+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x8300+(((-1.0)*x8297))))))+(((-1.0)*x8298))+(((0.205887932040862)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x8298))+x8299))))+x8299);
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x8301=cj1*cj1;
IkReal x8302=((6.21697001542928)*pz);
IkReal x8303=(cj1*sj1);
if( IKabs((((cj1*x8302))+(((-0.994715202468684)*x8301))+(((-4.78706691188054e-6)*x8303)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x8301))+(((-0.994715202468684)*x8303))+((sj1*x8302)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x8302))+(((-0.994715202468684)*x8301))+(((-4.78706691188054e-6)*x8303))))+IKsqr(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x8301))+(((-0.994715202468684)*x8303))+((sj1*x8302))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x8302))+(((-0.994715202468684)*x8301))+(((-4.78706691188054e-6)*x8303))), ((-4.78706691188054e-6)+(((4.78706691188054e-6)*x8301))+(((-0.994715202468684)*x8303))+((sj1*x8302))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x8304=IKcos(j2);
IkReal x8305=IKsin(j2);
IkReal x8306=(cj0*cj5);
IkReal x8307=(sj0*sj5);
IkReal x8308=(cj5*sj0);
IkReal x8309=(cj0*sj5);
IkReal x8310=(cj1*x8304);
IkReal x8311=(cj1*x8305);
IkReal x8312=(sj1*x8304);
IkReal x8313=(sj1*x8305);
evalcond[0]=(x8310+(((-1.0)*x8313)));
evalcond[1]=((((-1.0)*x8312))+(((-1.0)*x8311)));
evalcond[2]=((((-1.0)*r10*x8309))+x8311+x8312+((r00*x8307))+((r01*x8308))+(((-1.0)*r11*x8306)));
evalcond[3]=((((0.16)*cj1))+(((-1.0)*pz))+(((-0.02349986)*x8313))+(((0.16085006)*x8311))+(((0.16085006)*x8312))+(((7.7e-7)*sj1))+(((0.02349986)*x8310)));
evalcond[4]=((((-3.5e-7)*r01*x8307))+(((-0.16085006)*x8310))+(((-3.5e-7)*r10*x8306))+(((0.0008)*r11*x8306))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.0008)*r00*x8307))+(((0.16085006)*x8313))+(((-0.0008)*r01*x8308))+(((3.5e-7)*r11*x8309))+(((0.0008)*r10*x8309))+(((-1.0)*px*sj0))+((cj0*py))+(((0.02349986)*x8311))+(((0.02349986)*x8312))+(((3.5e-7)*r00*x8308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x8315 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8315.valid){
continue;
}
IkReal x8314=x8315.value;
j0array[0]=((-1.0)*x8314);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x8314)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x8316=IKcos(j0);
IkReal x8317=IKsin(j0);
IkReal x8318=((3.5e-7)*sj5);
IkReal x8319=((0.0008)*cj5);
IkReal x8320=((0.0008)*sj5);
IkReal x8321=((3.5e-7)*cj5);
IkReal x8322=(r01*x8316);
IkReal x8323=(r11*x8317);
IkReal x8324=(r10*x8317);
IkReal x8325=(r00*x8316);
evalcond[0]=((((-1.0)*py*x8317))+((x8321*x8324))+((x8321*x8325))+(((-1.0)*x8318*x8323))+(((-1.0)*x8318*x8322))+(((-1.0)*px*x8316))+(((-1.0)*x8320*x8325))+(((-1.0)*x8320*x8324))+(((-1.0)*x8319*x8322))+(((-1.0)*x8319*x8323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x8326=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8326);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8326);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x8327=((0.28199832)*pz);
IkReal x8328=(cj5*sj0);
IkReal x8329=(sj0*sj5);
IkReal x8330=(cj0*sj5);
IkReal x8331=(px*sj0);
IkReal x8332=(cj0*py);
IkReal x8333=((0.28199832)*x8332);
IkReal x8334=((1.93020072)*x8332);
IkReal x8335=(cj0*cj5*r11);
IkReal x8336=(cj0*cj5*r10);
IkReal x8337=((9.8699412e-8)*r00*x8328);
IkReal x8338=((9.8699412e-8)*r11*x8330);
IkReal x8339=((0.000225598656)*r10*x8330);
IkReal x8340=((0.000225598656)*x8335);
IkReal x8341=((0.001544160576)*x8335);
IkReal x8342=((6.75570252e-7)*r11*x8330);
IkReal x8343=((6.75570252e-7)*r00*x8328);
IkReal x8344=((0.001544160576)*r10*x8330);
IkReal x8345=((((6.75570252e-7)*r01*x8329))+(((0.001544160576)*r01*x8328))+(((6.75570252e-7)*x8336))+(((1.93020072)*x8331))+(((0.001544160576)*r00*x8329)));
IkReal x8346=(x8340+x8333+x8337+x8338+x8339);
IkReal x8347=((((0.000225598656)*r00*x8329))+(((9.8699412e-8)*x8336))+(((1.93020072)*pz))+(((0.000225598656)*r01*x8328))+(((9.8699412e-8)*r01*x8329))+(((0.28199832)*x8331)));
IkReal x8348=(x8327+x8343+x8342+x8341+x8344+x8334);
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((0.102943966020431)+x8346+(((-1.0)*x8347)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+x8346+(((-1.0)*x8347)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((7.5199552e-5)*r10*x8330))+(((-0.09399944)*x8331))+(((-3.2899804e-8)*x8336))+(((7.5199552e-5)*x8335))+(((-7.5199552e-5)*r00*x8329))+(((0.09399944)*x8332))+(((-7.5199552e-5)*r01*x8328))+(((-3.2899804e-8)*r01*x8329))+(((3.2899804e-8)*r00*x8328))+(((-0.64340024)*pz))+(((3.2899804e-8)*r11*x8330)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+x8348+(((-1.0)*x8345)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+x8348+(((-1.0)*x8345)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((0.000514720192)*x8335))+(((2.25190084e-7)*r00*x8328))+(((-0.64340024)*x8331))+(((0.09399944)*pz))+(((0.000514720192)*r10*x8330))+(((0.64340024)*x8332))+(((-0.000514720192)*r00*x8329))+(((2.25190084e-7)*r11*x8330))+(((-2.25190084e-7)*r01*x8329))+(((-0.000514720192)*r01*x8328))+(((-2.25190084e-7)*x8336))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x8349=(r01*sj0);
IkReal x8350=((3.2899804e-8)*sj5);
IkReal x8351=((7.5199552e-5)*sj5);
IkReal x8352=(cj0*r10);
IkReal x8353=((7.5199552e-5)*cj5);
IkReal x8354=((0.000225598656)*cj5);
IkReal x8355=(cj0*r11);
IkReal x8356=(cj0*py);
IkReal x8357=(r00*sj0);
IkReal x8358=((9.8699412e-8)*sj5);
IkReal x8359=(px*sj0);
IkReal x8360=((0.000225598656)*sj5);
IkReal x8361=((9.8699412e-8)*cj5);
IkReal x8362=((3.2899804e-8)*cj5);
IkReal x8363=((0.28199832)*x8356);
IkReal x8364=((0.09399944)*x8356);
IkReal x8365=(x8357*x8361);
IkReal x8366=(x8355*x8358);
IkReal x8367=(x8352*x8360);
IkReal x8368=(x8354*x8355);
IkReal x8369=(x8350*x8355);
IkReal x8370=(x8353*x8355);
IkReal x8371=(x8357*x8362);
IkReal x8372=(x8351*x8352);
IkReal x8373=(x8364+x8369+x8372+x8370+x8371);
IkReal x8374=(x8363+x8365+x8367+x8366+x8368);
IkReal x8375=((((1.93020072)*pz))+((x8352*x8361))+(((0.28199832)*x8359))+((x8357*x8360))+((x8349*x8358))+((x8349*x8354)));
IkReal x8376=(((x8351*x8357))+(((0.09399944)*x8359))+((x8352*x8362))+(((0.64340024)*pz))+((x8349*x8350))+((x8349*x8353)));
op[0]=((-0.102943966020431)+x8373+(((-1.0)*x8376)));
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+x8374+(((-1.0)*x8375)));
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+x8374+(((-1.0)*x8375)));
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+x8373+(((-1.0)*x8376)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x8377=((0.28199832)*pz);
IkReal x8378=((0.09399944)*pz);
IkReal x8379=(px*sj0);
IkReal x8380=((0.000514720192)*sj0);
IkReal x8381=(r00*sj5);
IkReal x8382=(cj5*r01);
IkReal x8383=((0.001544160576)*sj0);
IkReal x8384=(cj0*py);
IkReal x8385=((1.93020072)*x8384);
IkReal x8386=((0.64340024)*x8384);
IkReal x8387=(cj5*r00*sj0);
IkReal x8388=(cj0*r11*sj5);
IkReal x8389=(cj0*r10*sj5);
IkReal x8390=(cj0*cj5*r10);
IkReal x8391=(cj0*cj5*r11);
IkReal x8392=(r01*sj0*sj5);
IkReal x8393=((0.001544160576)*x8391);
IkReal x8394=((6.75570252e-7)*x8388);
IkReal x8395=((6.75570252e-7)*x8387);
IkReal x8396=((0.001544160576)*x8389);
IkReal x8397=((0.000514720192)*x8391);
IkReal x8398=((2.25190084e-7)*x8387);
IkReal x8399=((2.25190084e-7)*x8388);
IkReal x8400=((0.000514720192)*x8389);
IkReal x8401=(((x8381*x8383))+(((1.93020072)*x8379))+(((6.75570252e-7)*x8390))+(((6.75570252e-7)*x8392))+((x8382*x8383)));
IkReal x8402=((((0.64340024)*x8379))+((x8380*x8382))+((x8380*x8381))+(((2.25190084e-7)*x8392))+(((2.25190084e-7)*x8390)));
IkReal x8403=(x8378+x8398+x8399+x8397+x8386+x8400);
IkReal x8404=(x8377+x8394+x8395+x8396+x8393+x8385);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+x8403+(((-1.0)*x8402))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x8403+(((-1.0)*x8402))))))+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x8404+(((-1.0)*x8401))))))+(((0.205887932040862)*htj1))+(((htj1*htj1)*(((-0.0150404058181848)+x8404+(((-1.0)*x8401)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x8405=cj1*cj1;
IkReal x8406=((6.21697001542928)*pz);
IkReal x8407=(cj1*sj1);
if( IKabs((((cj1*x8406))+(((-4.78706691188054e-6)*x8407))+(((-0.994715202468684)*x8405)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x8405))+((sj1*x8406))+(((-0.994715202468684)*x8407)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x8406))+(((-4.78706691188054e-6)*x8407))+(((-0.994715202468684)*x8405))))+IKsqr(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x8405))+((sj1*x8406))+(((-0.994715202468684)*x8407))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x8406))+(((-4.78706691188054e-6)*x8407))+(((-0.994715202468684)*x8405))), ((-4.78706691188054e-6)+(((4.78706691188054e-6)*x8405))+((sj1*x8406))+(((-0.994715202468684)*x8407))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x8408=IKcos(j2);
IkReal x8409=IKsin(j2);
IkReal x8410=(cj0*cj5);
IkReal x8411=(sj0*sj5);
IkReal x8412=(cj5*sj0);
IkReal x8413=(cj0*sj5);
IkReal x8414=(cj1*x8408);
IkReal x8415=(cj1*x8409);
IkReal x8416=(sj1*x8408);
IkReal x8417=(sj1*x8409);
evalcond[0]=((((-1.0)*x8417))+x8414);
evalcond[1]=((((-1.0)*x8416))+(((-1.0)*x8415)));
evalcond[2]=(x8416+x8415+(((-1.0)*r10*x8413))+((r00*x8411))+((r01*x8412))+(((-1.0)*r11*x8410)));
evalcond[3]=((((0.16)*cj1))+(((0.02349986)*x8414))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-0.02349986)*x8417))+(((0.16085006)*x8415))+(((0.16085006)*x8416)));
evalcond[4]=((((-3.5e-7)*r10*x8410))+(((-3.5e-7)*r01*x8411))+(((3.5e-7)*r11*x8413))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.16085006)*x8414))+(((0.02349986)*x8415))+(((0.02349986)*x8416))+(((0.0008)*r10*x8413))+(((3.5e-7)*r00*x8412))+(((0.0008)*r11*x8410))+(((-0.0008)*r00*x8411))+(((-1.0)*px*sj0))+(((-0.0008)*r01*x8412))+((cj0*py))+(((0.16085006)*x8417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x8418=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8418);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8418);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j0eval[0]=((cj5*cj5)+(sj5*sj5));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x8419=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8419);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8419);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x8420=((3.5e-7)*cj5);
IkReal x8421=((0.0008)*cj5);
IkReal x8422=((0.0008)*sj5);
IkReal x8423=((3.5e-7)*sj5);
j0eval[0]=((IKabs(((((-1.0)*px))+(((-1.0)*r01*x8423))+(((-1.0)*r01*x8421))+((r00*x8420))+(((-1.0)*r00*x8422)))))+(IKabs((((r10*x8420))+(((-1.0)*r10*x8422))+(((-1.0)*py))+(((-1.0)*r11*x8421))+(((-1.0)*r11*x8423))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x8424=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8424);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8424);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j1eval[0]=60.0;
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[8+1], zeror[8];
int numroots;
op[0]=4.0;
op[1]=0;
op[2]=16.0;
op[3]=0;
op[4]=24.0;
op[5]=0;
op[6]=16.0;
op[7]=0;
op[8]=4.0;
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x8425=cj1*cj1;
IkReal x8426=((6.21697001542928)*pz);
IkReal x8427=(cj1*sj1);
if( IKabs(((((-0.994715202468684)*x8425))+((cj1*x8426))+(((-4.78706691188054e-6)*x8427)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((-0.994715202468684)*x8427))+(((4.78706691188054e-6)*x8425))+((sj1*x8426)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.994715202468684)*x8425))+((cj1*x8426))+(((-4.78706691188054e-6)*x8427))))+IKsqr(((-4.78706691188054e-6)+(((-0.994715202468684)*x8427))+(((4.78706691188054e-6)*x8425))+((sj1*x8426))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.994715202468684)*x8425))+((cj1*x8426))+(((-4.78706691188054e-6)*x8427))), ((-4.78706691188054e-6)+(((-0.994715202468684)*x8427))+(((4.78706691188054e-6)*x8425))+((sj1*x8426))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x8428=IKcos(j2);
IkReal x8429=IKsin(j2);
IkReal x8430=(cj1*x8428);
IkReal x8431=(sj1*x8429);
IkReal x8432=(sj1*x8428);
IkReal x8433=(cj1*x8429);
evalcond[0]=(x8430+(((-1.0)*x8431)));
evalcond[1]=((((-1.0)*x8433))+(((-1.0)*x8432)));
evalcond[2]=((((0.16)*cj1))+(((0.16085006)*x8432))+(((0.16085006)*x8433))+(((-0.02349986)*x8431))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.02349986)*x8430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8434=(cj2*sj1);
IkReal x8435=(cj5*r11);
IkReal x8436=(cj1*sj2);
IkReal x8437=(r10*sj5);
IkReal x8438=((1.0)*r00*sj5);
IkReal x8439=((1.0)*cj5*r01);
if( IKabs(((((-1.0)*x8434*x8439))+(((-1.0)*x8434*x8438))+(((-1.0)*x8436*x8438))+(((-1.0)*x8436*x8439)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x8434*x8437))+((x8434*x8435))+((x8436*x8437))+((x8435*x8436)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x8434*x8439))+(((-1.0)*x8434*x8438))+(((-1.0)*x8436*x8438))+(((-1.0)*x8436*x8439))))+IKsqr((((x8434*x8437))+((x8434*x8435))+((x8436*x8437))+((x8435*x8436))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x8434*x8439))+(((-1.0)*x8434*x8438))+(((-1.0)*x8436*x8438))+(((-1.0)*x8436*x8439))), (((x8434*x8437))+((x8434*x8435))+((x8436*x8437))+((x8435*x8436))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8440=IKcos(j0);
IkReal x8441=IKsin(j0);
IkReal x8442=((1.0)*px);
IkReal x8443=((0.0008)*r11);
IkReal x8444=(r00*sj5);
IkReal x8445=((3.5e-7)*r01);
IkReal x8446=(cj1*sj2);
IkReal x8447=(cj2*sj1);
IkReal x8448=((3.5e-7)*r11);
IkReal x8449=((0.0008)*r01);
IkReal x8450=((3.5e-7)*r10);
IkReal x8451=((3.5e-7)*r00);
IkReal x8452=((0.0008)*r10);
IkReal x8453=(cj5*x8441);
IkReal x8454=(sj5*x8441);
IkReal x8455=(sj5*x8440);
IkReal x8456=(cj5*x8440);
evalcond[0]=(((r11*x8453))+((r01*x8456))+((r10*x8454))+((x8440*x8444)));
evalcond[1]=(x8446+x8447+((x8441*x8444))+(((-1.0)*r11*x8456))+((r01*x8453))+(((-1.0)*r10*x8455)));
evalcond[2]=((((-1.0)*x8452*x8454))+((x8451*x8456))+((x8450*x8453))+(((-1.0)*x8440*x8442))+(((-1.0)*x8443*x8453))+(((-1.0)*x8448*x8454))+(((-1.0)*x8445*x8455))+(((-1.0)*x8449*x8456))+(((-1.0)*py*x8441))+(((-0.0008)*x8440*x8444)));
evalcond[3]=((((-0.0008)*x8441*x8444))+((x8448*x8455))+((py*x8440))+((x8451*x8453))+(((0.02349986)*x8446))+(((0.02349986)*x8447))+((x8443*x8456))+(((-1.0)*x8450*x8456))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*x8445*x8454))+(((-1.0)*x8449*x8453))+(((-0.16085006)*cj1*cj2))+((x8452*x8455))+(((0.16085006)*sj1*sj2))+(((-1.0)*x8441*x8442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x8457=((3.5e-7)*cj5);
IkReal x8458=((0.0008)*cj5);
IkReal x8459=((0.0008)*sj5);
IkReal x8460=((3.5e-7)*sj5);
CheckValue<IkReal> x8462 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x8458))+(((-1.0)*r00*x8459))+(((-1.0)*px))+(((-1.0)*r01*x8460))+((r00*x8457)))),IkReal(((((-1.0)*r11*x8458))+(((-1.0)*py))+(((-1.0)*r10*x8459))+(((-1.0)*r11*x8460))+((r10*x8457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8462.valid){
continue;
}
IkReal x8461=x8462.value;
j0array[0]=((-1.0)*x8461);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x8461)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x8463=IKcos(j0);
IkReal x8464=IKsin(j0);
evalcond[0]=(((cj5*r01*x8463))+((cj5*r11*x8464))+((r10*sj5*x8464))+((r00*sj5*x8463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x8465=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8465);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8465);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x8466=((0.28199832)*pz);
IkReal x8467=(cj5*sj0);
IkReal x8468=(sj0*sj5);
IkReal x8469=(cj0*sj5);
IkReal x8470=(px*sj0);
IkReal x8471=(cj0*py);
IkReal x8472=((0.28199832)*x8471);
IkReal x8473=((1.93020072)*x8471);
IkReal x8474=(cj0*cj5*r11);
IkReal x8475=(cj0*cj5*r10);
IkReal x8476=((9.8699412e-8)*r00*x8467);
IkReal x8477=((9.8699412e-8)*r11*x8469);
IkReal x8478=((0.000225598656)*r10*x8469);
IkReal x8479=((0.000225598656)*x8474);
IkReal x8480=((0.001544160576)*x8474);
IkReal x8481=((6.75570252e-7)*r11*x8469);
IkReal x8482=((6.75570252e-7)*r00*x8467);
IkReal x8483=((0.001544160576)*r10*x8469);
IkReal x8484=((((0.001544160576)*r00*x8468))+(((6.75570252e-7)*x8475))+(((0.001544160576)*r01*x8467))+(((6.75570252e-7)*r01*x8468))+(((1.93020072)*x8470)));
IkReal x8485=(x8479+x8478+x8477+x8476+x8472);
IkReal x8486=((((0.28199832)*x8470))+(((1.93020072)*pz))+(((0.000225598656)*r00*x8468))+(((9.8699412e-8)*x8475))+(((0.000225598656)*r01*x8467))+(((9.8699412e-8)*r01*x8468)));
IkReal x8487=(x8466+x8473+x8480+x8481+x8482+x8483);
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((2.25190084e-7)*r00*x8467))+(((0.64340024)*x8471))+(((-0.000514720192)*r00*x8468))+(((-0.000514720192)*r01*x8467))+(((0.09399944)*pz))+(((2.25190084e-7)*r11*x8469))+(((0.000514720192)*r10*x8469))+(((-2.25190084e-7)*x8475))+(((-2.25190084e-7)*r01*x8468))+(((-0.64340024)*x8470))+(((0.000514720192)*x8474)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+(((-1.0)*x8486))+x8485)))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x8484))+x8487)))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((3.2899804e-8)*r11*x8469))+(((-0.09399944)*x8470))+(((7.5199552e-5)*r10*x8469))+(((-7.5199552e-5)*r00*x8468))+(((0.09399944)*x8471))+(((-0.64340024)*pz))+(((3.2899804e-8)*r00*x8467))+(((-3.2899804e-8)*r01*x8468))+(((-3.2899804e-8)*x8475))+(((-7.5199552e-5)*r01*x8467))+(((7.5199552e-5)*x8474)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x8486))+x8485)))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-1.0)*x8484))+x8487))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x8488=(r01*sj0);
IkReal x8489=((3.2899804e-8)*sj5);
IkReal x8490=((7.5199552e-5)*sj5);
IkReal x8491=(cj0*r10);
IkReal x8492=((7.5199552e-5)*cj5);
IkReal x8493=((0.000225598656)*cj5);
IkReal x8494=(cj0*r11);
IkReal x8495=(cj0*py);
IkReal x8496=(r00*sj0);
IkReal x8497=((9.8699412e-8)*sj5);
IkReal x8498=(px*sj0);
IkReal x8499=((0.000225598656)*sj5);
IkReal x8500=((9.8699412e-8)*cj5);
IkReal x8501=((3.2899804e-8)*cj5);
IkReal x8502=((0.28199832)*x8495);
IkReal x8503=((0.09399944)*x8495);
IkReal x8504=(x8496*x8500);
IkReal x8505=(x8494*x8497);
IkReal x8506=(x8491*x8499);
IkReal x8507=(x8493*x8494);
IkReal x8508=(x8489*x8494);
IkReal x8509=(x8492*x8494);
IkReal x8510=(x8496*x8501);
IkReal x8511=(x8490*x8491);
IkReal x8512=(x8510+x8511+x8503+x8509+x8508);
IkReal x8513=(x8502+x8505+x8504+x8507+x8506);
IkReal x8514=((((0.28199832)*x8498))+(((1.93020072)*pz))+((x8488*x8493))+((x8488*x8497))+((x8496*x8499))+((x8491*x8500)));
IkReal x8515=((((0.09399944)*x8498))+((x8488*x8489))+((x8488*x8492))+((x8490*x8496))+(((0.64340024)*pz))+((x8491*x8501)));
op[0]=((-0.102943966020431)+x8512+(((-1.0)*x8515)));
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+x8513+(((-1.0)*x8514)));
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+x8513+(((-1.0)*x8514)));
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+x8512+(((-1.0)*x8515)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x8516=((0.28199832)*pz);
IkReal x8517=((0.09399944)*pz);
IkReal x8518=(px*sj0);
IkReal x8519=((0.000514720192)*sj0);
IkReal x8520=(r00*sj5);
IkReal x8521=(cj5*r01);
IkReal x8522=((0.001544160576)*sj0);
IkReal x8523=(cj0*py);
IkReal x8524=((1.93020072)*x8523);
IkReal x8525=((0.64340024)*x8523);
IkReal x8526=(cj5*r00*sj0);
IkReal x8527=(cj0*r11*sj5);
IkReal x8528=(cj0*r10*sj5);
IkReal x8529=(cj0*cj5*r10);
IkReal x8530=(cj0*cj5*r11);
IkReal x8531=(r01*sj0*sj5);
IkReal x8532=((0.001544160576)*x8530);
IkReal x8533=((6.75570252e-7)*x8527);
IkReal x8534=((6.75570252e-7)*x8526);
IkReal x8535=((0.001544160576)*x8528);
IkReal x8536=((0.000514720192)*x8530);
IkReal x8537=((2.25190084e-7)*x8526);
IkReal x8538=((2.25190084e-7)*x8527);
IkReal x8539=((0.000514720192)*x8528);
IkReal x8540=((((6.75570252e-7)*x8529))+((x8521*x8522))+(((6.75570252e-7)*x8531))+(((1.93020072)*x8518))+((x8520*x8522)));
IkReal x8541=((((0.64340024)*x8518))+(((2.25190084e-7)*x8529))+((x8519*x8521))+((x8519*x8520))+(((2.25190084e-7)*x8531)));
IkReal x8542=(x8525+x8517+x8538+x8539+x8536+x8537);
IkReal x8543=(x8524+x8516+x8532+x8533+x8534+x8535);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+(((-1.0)*x8541))+x8542+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x8541))+x8542))))+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x8540))+x8543))))+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x8540))+x8543))))+(((0.205887932040862)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x8544=cj1*cj1;
IkReal x8545=((6.21697001542928)*pz);
IkReal x8546=(cj1*sj1);
if( IKabs(((((-4.78706691188054e-6)*x8546))+(((-0.994715202468684)*x8544))+((cj1*x8545)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((-0.994715202468684)*x8546))+(((4.78706691188054e-6)*x8544))+((sj1*x8545)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-4.78706691188054e-6)*x8546))+(((-0.994715202468684)*x8544))+((cj1*x8545))))+IKsqr(((-4.78706691188054e-6)+(((-0.994715202468684)*x8546))+(((4.78706691188054e-6)*x8544))+((sj1*x8545))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-4.78706691188054e-6)*x8546))+(((-0.994715202468684)*x8544))+((cj1*x8545))), ((-4.78706691188054e-6)+(((-0.994715202468684)*x8546))+(((4.78706691188054e-6)*x8544))+((sj1*x8545))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x8547=IKcos(j2);
IkReal x8548=IKsin(j2);
IkReal x8549=(cj0*cj5);
IkReal x8550=(sj0*sj5);
IkReal x8551=(cj5*sj0);
IkReal x8552=(cj0*sj5);
IkReal x8553=(cj1*x8547);
IkReal x8554=(cj1*x8548);
IkReal x8555=(sj1*x8547);
IkReal x8556=(sj1*x8548);
evalcond[0]=(x8553+(((-1.0)*x8556)));
evalcond[1]=((((-1.0)*x8554))+(((-1.0)*x8555)));
evalcond[2]=(((r01*x8551))+x8554+x8555+((r00*x8550))+(((-1.0)*r11*x8549))+(((-1.0)*r10*x8552)));
evalcond[3]=((((0.16)*cj1))+(((0.02349986)*x8553))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x8555))+(((0.16085006)*x8554))+(((-0.02349986)*x8556)));
evalcond[4]=((((-3.5e-7)*r01*x8550))+(((0.0008)*r11*x8549))+(((3.5e-7)*r11*x8552))+(((3.5e-7)*r00*x8551))+(((0.0008)*r10*x8552))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.02349986)*x8555))+(((0.02349986)*x8554))+(((-0.0008)*r01*x8551))+(((0.16085006)*x8556))+(((-0.0008)*r00*x8550))+(((-3.5e-7)*r10*x8549))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.16085006)*x8553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x8558 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8558.valid){
continue;
}
IkReal x8557=x8558.value;
j0array[0]=((-1.0)*x8557);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x8557)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x8559=IKcos(j0);
IkReal x8560=IKsin(j0);
IkReal x8561=((3.5e-7)*sj5);
IkReal x8562=((0.0008)*cj5);
IkReal x8563=((0.0008)*sj5);
IkReal x8564=((3.5e-7)*cj5);
IkReal x8565=(r01*x8559);
IkReal x8566=(r11*x8560);
IkReal x8567=(r10*x8560);
IkReal x8568=(r00*x8559);
evalcond[0]=((((-1.0)*x8563*x8567))+(((-1.0)*x8563*x8568))+((x8564*x8568))+((x8564*x8567))+(((-1.0)*px*x8559))+(((-1.0)*x8561*x8566))+(((-1.0)*x8561*x8565))+(((-1.0)*py*x8560))+(((-1.0)*x8562*x8565))+(((-1.0)*x8562*x8566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x8569=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8569);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8569);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x8570=((0.28199832)*pz);
IkReal x8571=(cj5*sj0);
IkReal x8572=(sj0*sj5);
IkReal x8573=(cj0*sj5);
IkReal x8574=(px*sj0);
IkReal x8575=(cj0*py);
IkReal x8576=((0.28199832)*x8575);
IkReal x8577=((1.93020072)*x8575);
IkReal x8578=(cj0*cj5*r11);
IkReal x8579=(cj0*cj5*r10);
IkReal x8580=((9.8699412e-8)*r00*x8571);
IkReal x8581=((9.8699412e-8)*r11*x8573);
IkReal x8582=((0.000225598656)*r10*x8573);
IkReal x8583=((0.000225598656)*x8578);
IkReal x8584=((0.001544160576)*x8578);
IkReal x8585=((6.75570252e-7)*r11*x8573);
IkReal x8586=((6.75570252e-7)*r00*x8571);
IkReal x8587=((0.001544160576)*r10*x8573);
IkReal x8588=((((0.001544160576)*r01*x8571))+(((6.75570252e-7)*x8579))+(((6.75570252e-7)*r01*x8572))+(((1.93020072)*x8574))+(((0.001544160576)*r00*x8572)));
IkReal x8589=(x8581+x8580+x8583+x8582+x8576);
IkReal x8590=((((1.93020072)*pz))+(((9.8699412e-8)*x8579))+(((0.28199832)*x8574))+(((0.000225598656)*r00*x8572))+(((9.8699412e-8)*r01*x8572))+(((0.000225598656)*r01*x8571)));
IkReal x8591=(x8585+x8584+x8587+x8586+x8577+x8570);
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-2.25190084e-7)*r01*x8572))+(((0.000514720192)*r10*x8573))+(((2.25190084e-7)*r00*x8571))+(((2.25190084e-7)*r11*x8573))+(((0.09399944)*pz))+(((0.000514720192)*x8578))+(((-0.000514720192)*r00*x8572))+(((-0.64340024)*x8574))+(((-0.000514720192)*r01*x8571))+(((-2.25190084e-7)*x8579))+(((0.64340024)*x8575)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+x8589+(((-1.0)*x8590)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((7.5199552e-5)*x8578))+(((-3.2899804e-8)*x8579))+(((0.09399944)*x8575))+(((7.5199552e-5)*r10*x8573))+(((-7.5199552e-5)*r00*x8572))+(((-0.64340024)*pz))+(((-7.5199552e-5)*r01*x8571))+(((3.2899804e-8)*r11*x8573))+(((3.2899804e-8)*r00*x8571))+(((-3.2899804e-8)*r01*x8572))+(((-0.09399944)*x8574)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+x8591+(((-1.0)*x8588)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+x8591+(((-1.0)*x8588)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+x8589+(((-1.0)*x8590))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x8592=(r01*sj0);
IkReal x8593=((3.2899804e-8)*sj5);
IkReal x8594=((7.5199552e-5)*sj5);
IkReal x8595=(cj0*r10);
IkReal x8596=((7.5199552e-5)*cj5);
IkReal x8597=((0.000225598656)*cj5);
IkReal x8598=(cj0*r11);
IkReal x8599=(cj0*py);
IkReal x8600=(r00*sj0);
IkReal x8601=((9.8699412e-8)*sj5);
IkReal x8602=(px*sj0);
IkReal x8603=((0.000225598656)*sj5);
IkReal x8604=((9.8699412e-8)*cj5);
IkReal x8605=((3.2899804e-8)*cj5);
IkReal x8606=((0.28199832)*x8599);
IkReal x8607=((0.09399944)*x8599);
IkReal x8608=(x8600*x8604);
IkReal x8609=(x8598*x8601);
IkReal x8610=(x8595*x8603);
IkReal x8611=(x8597*x8598);
IkReal x8612=(x8593*x8598);
IkReal x8613=(x8596*x8598);
IkReal x8614=(x8600*x8605);
IkReal x8615=(x8594*x8595);
IkReal x8616=(x8607+x8615+x8614+x8613+x8612);
IkReal x8617=(x8608+x8609+x8606+x8611+x8610);
IkReal x8618=((((1.93020072)*pz))+((x8592*x8601))+((x8592*x8597))+(((0.28199832)*x8602))+((x8595*x8604))+((x8600*x8603)));
IkReal x8619=(((x8594*x8600))+(((0.09399944)*x8602))+(((0.64340024)*pz))+((x8592*x8596))+((x8592*x8593))+((x8595*x8605)));
op[0]=((-0.102943966020431)+x8616+(((-1.0)*x8619)));
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+x8617+(((-1.0)*x8618)));
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+x8617+(((-1.0)*x8618)));
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+x8616+(((-1.0)*x8619)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x8620=((0.28199832)*pz);
IkReal x8621=((0.09399944)*pz);
IkReal x8622=(px*sj0);
IkReal x8623=((0.000514720192)*sj0);
IkReal x8624=(r00*sj5);
IkReal x8625=(cj5*r01);
IkReal x8626=((0.001544160576)*sj0);
IkReal x8627=(cj0*py);
IkReal x8628=((1.93020072)*x8627);
IkReal x8629=((0.64340024)*x8627);
IkReal x8630=(cj5*r00*sj0);
IkReal x8631=(cj0*r11*sj5);
IkReal x8632=(cj0*r10*sj5);
IkReal x8633=(cj0*cj5*r10);
IkReal x8634=(cj0*cj5*r11);
IkReal x8635=(r01*sj0*sj5);
IkReal x8636=((0.001544160576)*x8634);
IkReal x8637=((6.75570252e-7)*x8631);
IkReal x8638=((6.75570252e-7)*x8630);
IkReal x8639=((0.001544160576)*x8632);
IkReal x8640=((0.000514720192)*x8634);
IkReal x8641=((2.25190084e-7)*x8630);
IkReal x8642=((2.25190084e-7)*x8631);
IkReal x8643=((0.000514720192)*x8632);
IkReal x8644=((((1.93020072)*x8622))+(((6.75570252e-7)*x8633))+(((6.75570252e-7)*x8635))+((x8624*x8626))+((x8625*x8626)));
IkReal x8645=((((0.64340024)*x8622))+((x8623*x8624))+((x8623*x8625))+(((2.25190084e-7)*x8635))+(((2.25190084e-7)*x8633)));
IkReal x8646=(x8629+x8621+x8642+x8643+x8640+x8641);
IkReal x8647=(x8628+x8620+x8639+x8638+x8637+x8636);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+x8646+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.0150404058181848)+x8647+(((-1.0)*x8644))))))+(((0.205887932040862)*htj1))+(((-1.0)*x8645))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x8646+(((-1.0)*x8645))))))+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x8647+(((-1.0)*x8644)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x8648=cj1*cj1;
IkReal x8649=((6.21697001542928)*pz);
IkReal x8650=(cj1*sj1);
if( IKabs(((((-4.78706691188054e-6)*x8650))+(((-0.994715202468684)*x8648))+((cj1*x8649)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((-0.994715202468684)*x8650))+(((4.78706691188054e-6)*x8648))+((sj1*x8649)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-4.78706691188054e-6)*x8650))+(((-0.994715202468684)*x8648))+((cj1*x8649))))+IKsqr(((-4.78706691188054e-6)+(((-0.994715202468684)*x8650))+(((4.78706691188054e-6)*x8648))+((sj1*x8649))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-4.78706691188054e-6)*x8650))+(((-0.994715202468684)*x8648))+((cj1*x8649))), ((-4.78706691188054e-6)+(((-0.994715202468684)*x8650))+(((4.78706691188054e-6)*x8648))+((sj1*x8649))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x8651=IKcos(j2);
IkReal x8652=IKsin(j2);
IkReal x8653=(cj0*cj5);
IkReal x8654=(sj0*sj5);
IkReal x8655=(cj5*sj0);
IkReal x8656=(cj0*sj5);
IkReal x8657=(cj1*x8651);
IkReal x8658=(cj1*x8652);
IkReal x8659=(sj1*x8651);
IkReal x8660=(sj1*x8652);
evalcond[0]=(x8657+(((-1.0)*x8660)));
evalcond[1]=((((-1.0)*x8659))+(((-1.0)*x8658)));
evalcond[2]=(((r00*x8654))+((r01*x8655))+x8659+x8658+(((-1.0)*r11*x8653))+(((-1.0)*r10*x8656)));
evalcond[3]=((((0.16085006)*x8658))+(((0.16085006)*x8659))+(((0.02349986)*x8657))+(((-0.02349986)*x8660))+(((0.16)*cj1))+(((-1.0)*pz))+(((7.7e-7)*sj1)));
evalcond[4]=((((3.5e-7)*r11*x8656))+(((0.02349986)*x8658))+(((0.02349986)*x8659))+(((0.0008)*r10*x8656))+(((-0.0008)*r00*x8654))+(((-3.5e-7)*r01*x8654))+(((-0.0008)*r01*x8655))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.16085006)*x8660))+(((-0.16085006)*x8657))+(((3.5e-7)*r00*x8655))+(((0.0008)*r11*x8653))+(((-1.0)*px*sj0))+(((-3.5e-7)*r10*x8653))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((-1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x8661=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8661);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8661);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
j0eval[0]=((cj5*cj5)+(sj5*sj5));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x8662=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8662);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8662);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x8663=((3.5e-7)*cj5);
IkReal x8664=((0.0008)*cj5);
IkReal x8665=((0.0008)*sj5);
IkReal x8666=((3.5e-7)*sj5);
j0eval[0]=((IKabs(((((-1.0)*r11*x8664))+(((-1.0)*r11*x8666))+(((-1.0)*py))+((r10*x8663))+(((-1.0)*r10*x8665)))))+(IKabs(((((-1.0)*r00*x8665))+(((-1.0)*r01*x8666))+(((-1.0)*r01*x8664))+((r00*x8663))+(((-1.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x8667=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8667);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8667);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
j1eval[0]=60.0;
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[8+1], zeror[8];
int numroots;
op[0]=4.0;
op[1]=0;
op[2]=16.0;
op[3]=0;
op[4]=24.0;
op[5]=0;
op[6]=16.0;
op[7]=0;
op[8]=4.0;
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x8668=cj1*cj1;
IkReal x8669=((6.21697001542928)*pz);
IkReal x8670=(cj1*sj1);
if( IKabs(((((-0.994715202468684)*x8668))+((cj1*x8669))+(((-4.78706691188054e-6)*x8670)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+((sj1*x8669))+(((-0.994715202468684)*x8670))+(((4.78706691188054e-6)*x8668)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.994715202468684)*x8668))+((cj1*x8669))+(((-4.78706691188054e-6)*x8670))))+IKsqr(((-4.78706691188054e-6)+((sj1*x8669))+(((-0.994715202468684)*x8670))+(((4.78706691188054e-6)*x8668))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.994715202468684)*x8668))+((cj1*x8669))+(((-4.78706691188054e-6)*x8670))), ((-4.78706691188054e-6)+((sj1*x8669))+(((-0.994715202468684)*x8670))+(((4.78706691188054e-6)*x8668))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x8671=IKcos(j2);
IkReal x8672=IKsin(j2);
IkReal x8673=(cj1*x8671);
IkReal x8674=(sj1*x8672);
IkReal x8675=(sj1*x8671);
IkReal x8676=(cj1*x8672);
evalcond[0]=(x8673+(((-1.0)*x8674)));
evalcond[1]=((((-1.0)*x8676))+(((-1.0)*x8675)));
evalcond[2]=((((-0.02349986)*x8674))+(((0.16)*cj1))+(((0.16085006)*x8675))+(((0.16085006)*x8676))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.02349986)*x8673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8677=(cj2*sj1);
IkReal x8678=(cj5*r11);
IkReal x8679=(cj1*sj2);
IkReal x8680=(r10*sj5);
IkReal x8681=((1.0)*r00*sj5);
IkReal x8682=((1.0)*cj5*r01);
if( IKabs(((((-1.0)*x8677*x8682))+(((-1.0)*x8677*x8681))+(((-1.0)*x8679*x8682))+(((-1.0)*x8679*x8681)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x8679*x8680))+((x8677*x8680))+((x8677*x8678))+((x8678*x8679)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x8677*x8682))+(((-1.0)*x8677*x8681))+(((-1.0)*x8679*x8682))+(((-1.0)*x8679*x8681))))+IKsqr((((x8679*x8680))+((x8677*x8680))+((x8677*x8678))+((x8678*x8679))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x8677*x8682))+(((-1.0)*x8677*x8681))+(((-1.0)*x8679*x8682))+(((-1.0)*x8679*x8681))), (((x8679*x8680))+((x8677*x8680))+((x8677*x8678))+((x8678*x8679))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8683=IKcos(j0);
IkReal x8684=IKsin(j0);
IkReal x8685=((1.0)*px);
IkReal x8686=((0.0008)*r11);
IkReal x8687=(r00*sj5);
IkReal x8688=((3.5e-7)*r01);
IkReal x8689=(cj1*sj2);
IkReal x8690=(cj2*sj1);
IkReal x8691=((3.5e-7)*r11);
IkReal x8692=((0.0008)*r01);
IkReal x8693=((3.5e-7)*r10);
IkReal x8694=((3.5e-7)*r00);
IkReal x8695=((0.0008)*r10);
IkReal x8696=(cj5*x8684);
IkReal x8697=(sj5*x8684);
IkReal x8698=(sj5*x8683);
IkReal x8699=(cj5*x8683);
evalcond[0]=(((x8683*x8687))+((r01*x8699))+((r10*x8697))+((r11*x8696)));
evalcond[1]=(x8690+x8689+(((-1.0)*r10*x8698))+((r01*x8696))+((x8684*x8687))+(((-1.0)*r11*x8699)));
evalcond[2]=((((-1.0)*x8683*x8685))+(((-1.0)*py*x8684))+(((-1.0)*x8691*x8697))+(((-1.0)*x8688*x8698))+((x8694*x8699))+(((-1.0)*x8695*x8697))+((x8693*x8696))+(((-0.0008)*x8683*x8687))+(((-1.0)*x8686*x8696))+(((-1.0)*x8692*x8699)));
evalcond[3]=(((x8686*x8699))+((x8695*x8698))+(((0.02349986)*x8690))+(((-1.0)*x8688*x8697))+((x8694*x8696))+((py*x8683))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*x8684*x8685))+(((-0.0008)*x8684*x8687))+((x8691*x8698))+(((-0.16085006)*cj1*cj2))+(((0.16085006)*sj1*sj2))+(((0.02349986)*x8689))+(((-1.0)*x8693*x8699))+(((-1.0)*x8692*x8696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x8700=((3.5e-7)*cj5);
IkReal x8701=((0.0008)*cj5);
IkReal x8702=((0.0008)*sj5);
IkReal x8703=((3.5e-7)*sj5);
CheckValue<IkReal> x8705 = IKatan2WithCheck(IkReal(((((-1.0)*px))+(((-1.0)*r00*x8702))+((r00*x8700))+(((-1.0)*r01*x8703))+(((-1.0)*r01*x8701)))),IkReal((((r10*x8700))+(((-1.0)*py))+(((-1.0)*r10*x8702))+(((-1.0)*r11*x8701))+(((-1.0)*r11*x8703)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8705.valid){
continue;
}
IkReal x8704=x8705.value;
j0array[0]=((-1.0)*x8704);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x8704)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x8706=IKcos(j0);
IkReal x8707=IKsin(j0);
evalcond[0]=(((r00*sj5*x8706))+((cj5*r01*x8706))+((cj5*r11*x8707))+((r10*sj5*x8707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x8708=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8708);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8708);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x8709=((0.28199832)*pz);
IkReal x8710=(cj5*sj0);
IkReal x8711=(sj0*sj5);
IkReal x8712=(cj0*sj5);
IkReal x8713=(px*sj0);
IkReal x8714=(cj0*py);
IkReal x8715=((0.28199832)*x8714);
IkReal x8716=((1.93020072)*x8714);
IkReal x8717=(cj0*cj5*r11);
IkReal x8718=(cj0*cj5*r10);
IkReal x8719=((9.8699412e-8)*r00*x8710);
IkReal x8720=((9.8699412e-8)*r11*x8712);
IkReal x8721=((0.000225598656)*r10*x8712);
IkReal x8722=((0.000225598656)*x8717);
IkReal x8723=((0.001544160576)*x8717);
IkReal x8724=((6.75570252e-7)*r11*x8712);
IkReal x8725=((6.75570252e-7)*r00*x8710);
IkReal x8726=((0.001544160576)*r10*x8712);
IkReal x8727=((((6.75570252e-7)*x8718))+(((0.001544160576)*r01*x8710))+(((0.001544160576)*r00*x8711))+(((6.75570252e-7)*r01*x8711))+(((1.93020072)*x8713)));
IkReal x8728=(x8721+x8720+x8722+x8715+x8719);
IkReal x8729=((((0.000225598656)*r01*x8710))+(((1.93020072)*pz))+(((9.8699412e-8)*r01*x8711))+(((0.000225598656)*r00*x8711))+(((9.8699412e-8)*x8718))+(((0.28199832)*x8713)));
IkReal x8730=(x8709+x8723+x8725+x8724+x8726+x8716);
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((0.0150404058181848)+x8730+(((-1.0)*x8727)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+x8728+(((-1.0)*x8729)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-7.5199552e-5)*r01*x8710))+(((-7.5199552e-5)*r00*x8711))+(((3.2899804e-8)*r00*x8710))+(((3.2899804e-8)*r11*x8712))+(((0.09399944)*x8714))+(((-0.09399944)*x8713))+(((7.5199552e-5)*r10*x8712))+(((-3.2899804e-8)*x8718))+(((-0.64340024)*pz))+(((7.5199552e-5)*x8717))+(((-3.2899804e-8)*r01*x8711)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+x8728+(((-1.0)*x8729)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((2.25190084e-7)*r11*x8712))+(((2.25190084e-7)*r00*x8710))+(((-2.25190084e-7)*r01*x8711))+(((-2.25190084e-7)*x8718))+(((-0.64340024)*x8713))+(((-0.000514720192)*r01*x8710))+(((-0.000514720192)*r00*x8711))+(((0.09399944)*pz))+(((0.000514720192)*x8717))+(((0.64340024)*x8714))+(((0.000514720192)*r10*x8712)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+x8730+(((-1.0)*x8727))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x8731=(r01*sj0);
IkReal x8732=((3.2899804e-8)*sj5);
IkReal x8733=((7.5199552e-5)*sj5);
IkReal x8734=(cj0*r10);
IkReal x8735=((7.5199552e-5)*cj5);
IkReal x8736=((0.000225598656)*cj5);
IkReal x8737=(cj0*r11);
IkReal x8738=(cj0*py);
IkReal x8739=(r00*sj0);
IkReal x8740=((9.8699412e-8)*sj5);
IkReal x8741=(px*sj0);
IkReal x8742=((0.000225598656)*sj5);
IkReal x8743=((9.8699412e-8)*cj5);
IkReal x8744=((3.2899804e-8)*cj5);
IkReal x8745=((0.28199832)*x8738);
IkReal x8746=((0.09399944)*x8738);
IkReal x8747=(x8739*x8743);
IkReal x8748=(x8737*x8740);
IkReal x8749=(x8734*x8742);
IkReal x8750=(x8736*x8737);
IkReal x8751=(x8732*x8737);
IkReal x8752=(x8735*x8737);
IkReal x8753=(x8739*x8744);
IkReal x8754=(x8733*x8734);
IkReal x8755=(x8746+x8754+x8751+x8752+x8753);
IkReal x8756=(x8749+x8748+x8747+x8745+x8750);
IkReal x8757=(((x8731*x8740))+(((1.93020072)*pz))+((x8731*x8736))+(((0.28199832)*x8741))+((x8739*x8742))+((x8734*x8743)));
IkReal x8758=(((x8731*x8732))+((x8731*x8735))+(((0.09399944)*x8741))+((x8733*x8739))+(((0.64340024)*pz))+((x8734*x8744)));
op[0]=((-0.102943966020431)+x8755+(((-1.0)*x8758)));
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+x8756+(((-1.0)*x8757)));
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+x8756+(((-1.0)*x8757)));
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+x8755+(((-1.0)*x8758)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x8759=((0.28199832)*pz);
IkReal x8760=((0.09399944)*pz);
IkReal x8761=(px*sj0);
IkReal x8762=((0.000514720192)*sj0);
IkReal x8763=(r00*sj5);
IkReal x8764=(cj5*r01);
IkReal x8765=((0.001544160576)*sj0);
IkReal x8766=(cj0*py);
IkReal x8767=((1.93020072)*x8766);
IkReal x8768=((0.64340024)*x8766);
IkReal x8769=(cj5*r00*sj0);
IkReal x8770=(cj0*r11*sj5);
IkReal x8771=(cj0*r10*sj5);
IkReal x8772=(cj0*cj5*r10);
IkReal x8773=(cj0*cj5*r11);
IkReal x8774=(r01*sj0*sj5);
IkReal x8775=((0.001544160576)*x8773);
IkReal x8776=((6.75570252e-7)*x8770);
IkReal x8777=((6.75570252e-7)*x8769);
IkReal x8778=((0.001544160576)*x8771);
IkReal x8779=((0.000514720192)*x8773);
IkReal x8780=((2.25190084e-7)*x8769);
IkReal x8781=((2.25190084e-7)*x8770);
IkReal x8782=((0.000514720192)*x8771);
IkReal x8783=(((x8764*x8765))+(((1.93020072)*x8761))+(((6.75570252e-7)*x8774))+(((6.75570252e-7)*x8772))+((x8763*x8765)));
IkReal x8784=((((0.64340024)*x8761))+(((2.25190084e-7)*x8772))+(((2.25190084e-7)*x8774))+((x8762*x8763))+((x8762*x8764)));
IkReal x8785=(x8782+x8781+x8780+x8779+x8760+x8768);
IkReal x8786=(x8778+x8776+x8777+x8775+x8767+x8759);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+x8785+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x8785+(((-1.0)*x8784))))))+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.0150404058181848)+x8786+(((-1.0)*x8783))))))+(((-1.0)*x8784))+(((0.205887932040862)*htj1))+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x8786+(((-1.0)*x8783)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x8787=cj1*cj1;
IkReal x8788=((6.21697001542928)*pz);
IkReal x8789=(cj1*sj1);
if( IKabs((((cj1*x8788))+(((-4.78706691188054e-6)*x8789))+(((-0.994715202468684)*x8787)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x8787))+(((-0.994715202468684)*x8789))+((sj1*x8788)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x8788))+(((-4.78706691188054e-6)*x8789))+(((-0.994715202468684)*x8787))))+IKsqr(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x8787))+(((-0.994715202468684)*x8789))+((sj1*x8788))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x8788))+(((-4.78706691188054e-6)*x8789))+(((-0.994715202468684)*x8787))), ((-4.78706691188054e-6)+(((4.78706691188054e-6)*x8787))+(((-0.994715202468684)*x8789))+((sj1*x8788))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x8790=IKcos(j2);
IkReal x8791=IKsin(j2);
IkReal x8792=(cj0*cj5);
IkReal x8793=(sj0*sj5);
IkReal x8794=(cj5*sj0);
IkReal x8795=(cj0*sj5);
IkReal x8796=(cj1*x8790);
IkReal x8797=(cj1*x8791);
IkReal x8798=(sj1*x8790);
IkReal x8799=(sj1*x8791);
evalcond[0]=(x8796+(((-1.0)*x8799)));
evalcond[1]=((((-1.0)*x8798))+(((-1.0)*x8797)));
evalcond[2]=(x8798+x8797+(((-1.0)*r10*x8795))+(((-1.0)*r11*x8792))+((r00*x8793))+((r01*x8794)));
evalcond[3]=((((0.16)*cj1))+(((-0.02349986)*x8799))+(((-1.0)*pz))+(((0.02349986)*x8796))+(((7.7e-7)*sj1))+(((0.16085006)*x8797))+(((0.16085006)*x8798)));
evalcond[4]=((((-3.5e-7)*r01*x8793))+(((0.16)*sj1))+(((0.0008)*r10*x8795))+(((-7.7e-7)*cj1))+(((-0.0008)*r00*x8793))+(((0.0008)*r11*x8792))+(((3.5e-7)*r11*x8795))+(((-0.0008)*r01*x8794))+(((0.02349986)*x8797))+(((0.02349986)*x8798))+(((-1.0)*px*sj0))+(((3.5e-7)*r00*x8794))+((cj0*py))+(((0.16085006)*x8799))+(((-0.16085006)*x8796))+(((-3.5e-7)*r10*x8792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x8801 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8801.valid){
continue;
}
IkReal x8800=x8801.value;
j0array[0]=((-1.0)*x8800);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x8800)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x8802=IKcos(j0);
IkReal x8803=IKsin(j0);
IkReal x8804=((3.5e-7)*sj5);
IkReal x8805=((0.0008)*cj5);
IkReal x8806=((0.0008)*sj5);
IkReal x8807=((3.5e-7)*cj5);
IkReal x8808=(r01*x8802);
IkReal x8809=(r11*x8803);
IkReal x8810=(r10*x8803);
IkReal x8811=(r00*x8802);
evalcond[0]=(((x8807*x8810))+((x8807*x8811))+(((-1.0)*x8806*x8811))+(((-1.0)*x8806*x8810))+(((-1.0)*px*x8802))+(((-1.0)*py*x8803))+(((-1.0)*x8805*x8809))+(((-1.0)*x8805*x8808))+(((-1.0)*x8804*x8808))+(((-1.0)*x8804*x8809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x8812=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8812);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8812);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x8813=((0.28199832)*pz);
IkReal x8814=(cj5*sj0);
IkReal x8815=(sj0*sj5);
IkReal x8816=(cj0*sj5);
IkReal x8817=(px*sj0);
IkReal x8818=(cj0*py);
IkReal x8819=((0.28199832)*x8818);
IkReal x8820=((1.93020072)*x8818);
IkReal x8821=(cj0*cj5*r11);
IkReal x8822=(cj0*cj5*r10);
IkReal x8823=((9.8699412e-8)*r00*x8814);
IkReal x8824=((9.8699412e-8)*r11*x8816);
IkReal x8825=((0.000225598656)*r10*x8816);
IkReal x8826=((0.000225598656)*x8821);
IkReal x8827=((0.001544160576)*x8821);
IkReal x8828=((6.75570252e-7)*r11*x8816);
IkReal x8829=((6.75570252e-7)*r00*x8814);
IkReal x8830=((0.001544160576)*r10*x8816);
IkReal x8831=((((1.93020072)*x8817))+(((6.75570252e-7)*r01*x8815))+(((0.001544160576)*r00*x8815))+(((6.75570252e-7)*x8822))+(((0.001544160576)*r01*x8814)));
IkReal x8832=(x8819+x8823+x8826+x8824+x8825);
IkReal x8833=((((0.000225598656)*r00*x8815))+(((1.93020072)*pz))+(((9.8699412e-8)*r01*x8815))+(((0.000225598656)*r01*x8814))+(((0.28199832)*x8817))+(((9.8699412e-8)*x8822)));
IkReal x8834=(x8813+x8820+x8827+x8828+x8829+x8830);
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+x8834+(((-1.0)*x8831)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+x8832+(((-1.0)*x8833)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+x8832+(((-1.0)*x8833)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-0.000514720192)*r00*x8815))+(((-0.000514720192)*r01*x8814))+(((-2.25190084e-7)*r01*x8815))+(((0.64340024)*x8818))+(((0.000514720192)*x8821))+(((0.000514720192)*r10*x8816))+(((2.25190084e-7)*r00*x8814))+(((0.09399944)*pz))+(((2.25190084e-7)*r11*x8816))+(((-0.64340024)*x8817))+(((-2.25190084e-7)*x8822)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((3.2899804e-8)*r11*x8816))+(((-7.5199552e-5)*r00*x8815))+(((7.5199552e-5)*x8821))+(((-7.5199552e-5)*r01*x8814))+(((3.2899804e-8)*r00*x8814))+(((-0.09399944)*x8817))+(((-3.2899804e-8)*x8822))+(((0.09399944)*x8818))+(((-0.64340024)*pz))+(((-3.2899804e-8)*r01*x8815))+(((7.5199552e-5)*r10*x8816)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+x8834+(((-1.0)*x8831))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x8835=(r01*sj0);
IkReal x8836=((3.2899804e-8)*sj5);
IkReal x8837=((7.5199552e-5)*sj5);
IkReal x8838=(cj0*r10);
IkReal x8839=((7.5199552e-5)*cj5);
IkReal x8840=((0.000225598656)*cj5);
IkReal x8841=(cj0*r11);
IkReal x8842=(cj0*py);
IkReal x8843=(r00*sj0);
IkReal x8844=((9.8699412e-8)*sj5);
IkReal x8845=(px*sj0);
IkReal x8846=((0.000225598656)*sj5);
IkReal x8847=((9.8699412e-8)*cj5);
IkReal x8848=((3.2899804e-8)*cj5);
IkReal x8849=((0.28199832)*x8842);
IkReal x8850=((0.09399944)*x8842);
IkReal x8851=(x8843*x8847);
IkReal x8852=(x8841*x8844);
IkReal x8853=(x8838*x8846);
IkReal x8854=(x8840*x8841);
IkReal x8855=(x8836*x8841);
IkReal x8856=(x8839*x8841);
IkReal x8857=(x8843*x8848);
IkReal x8858=(x8837*x8838);
IkReal x8859=(x8858+x8850+x8857+x8856+x8855);
IkReal x8860=(x8853+x8852+x8851+x8854+x8849);
IkReal x8861=((((1.93020072)*pz))+(((0.28199832)*x8845))+((x8838*x8847))+((x8843*x8846))+((x8835*x8840))+((x8835*x8844)));
IkReal x8862=(((x8837*x8843))+((x8838*x8848))+(((0.64340024)*pz))+(((0.09399944)*x8845))+((x8835*x8836))+((x8835*x8839)));
op[0]=((-0.102943966020431)+x8859+(((-1.0)*x8862)));
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+x8860+(((-1.0)*x8861)));
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+x8860+(((-1.0)*x8861)));
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+x8859+(((-1.0)*x8862)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x8863=((0.28199832)*pz);
IkReal x8864=((0.09399944)*pz);
IkReal x8865=(px*sj0);
IkReal x8866=((0.000514720192)*sj0);
IkReal x8867=(r00*sj5);
IkReal x8868=(cj5*r01);
IkReal x8869=((0.001544160576)*sj0);
IkReal x8870=(cj0*py);
IkReal x8871=((1.93020072)*x8870);
IkReal x8872=((0.64340024)*x8870);
IkReal x8873=(cj5*r00*sj0);
IkReal x8874=(cj0*r11*sj5);
IkReal x8875=(cj0*r10*sj5);
IkReal x8876=(cj0*cj5*r10);
IkReal x8877=(cj0*cj5*r11);
IkReal x8878=(r01*sj0*sj5);
IkReal x8879=((0.001544160576)*x8877);
IkReal x8880=((6.75570252e-7)*x8874);
IkReal x8881=((6.75570252e-7)*x8873);
IkReal x8882=((0.001544160576)*x8875);
IkReal x8883=((0.000514720192)*x8877);
IkReal x8884=((2.25190084e-7)*x8873);
IkReal x8885=((2.25190084e-7)*x8874);
IkReal x8886=((0.000514720192)*x8875);
IkReal x8887=(((x8867*x8869))+((x8868*x8869))+(((6.75570252e-7)*x8878))+(((6.75570252e-7)*x8876))+(((1.93020072)*x8865)));
IkReal x8888=((((0.64340024)*x8865))+((x8866*x8868))+((x8866*x8867))+(((2.25190084e-7)*x8876))+(((2.25190084e-7)*x8878)));
IkReal x8889=(x8864+x8872+x8884+x8885+x8886+x8883);
IkReal x8890=(x8863+x8871+x8879+x8880+x8881+x8882);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+x8889+(((htj1*htj1)*(((-0.0150404058181848)+x8890+(((-1.0)*x8887))))))+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x8888))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x8889+(((-1.0)*x8888))))))+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x8890+(((-1.0)*x8887))))))+(((0.205887932040862)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x8891=cj1*cj1;
IkReal x8892=((6.21697001542928)*pz);
IkReal x8893=(cj1*sj1);
if( IKabs((((cj1*x8892))+(((-4.78706691188054e-6)*x8893))+(((-0.994715202468684)*x8891)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+((sj1*x8892))+(((4.78706691188054e-6)*x8891))+(((-0.994715202468684)*x8893)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x8892))+(((-4.78706691188054e-6)*x8893))+(((-0.994715202468684)*x8891))))+IKsqr(((-4.78706691188054e-6)+((sj1*x8892))+(((4.78706691188054e-6)*x8891))+(((-0.994715202468684)*x8893))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x8892))+(((-4.78706691188054e-6)*x8893))+(((-0.994715202468684)*x8891))), ((-4.78706691188054e-6)+((sj1*x8892))+(((4.78706691188054e-6)*x8891))+(((-0.994715202468684)*x8893))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x8894=IKcos(j2);
IkReal x8895=IKsin(j2);
IkReal x8896=(cj0*cj5);
IkReal x8897=(sj0*sj5);
IkReal x8898=(cj5*sj0);
IkReal x8899=(cj0*sj5);
IkReal x8900=(cj1*x8894);
IkReal x8901=(cj1*x8895);
IkReal x8902=(sj1*x8894);
IkReal x8903=(sj1*x8895);
evalcond[0]=(x8900+(((-1.0)*x8903)));
evalcond[1]=((((-1.0)*x8902))+(((-1.0)*x8901)));
evalcond[2]=(((r01*x8898))+((r00*x8897))+x8901+x8902+(((-1.0)*r11*x8896))+(((-1.0)*r10*x8899)));
evalcond[3]=((((0.16)*cj1))+(((0.02349986)*x8900))+(((0.16085006)*x8901))+(((0.16085006)*x8902))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-0.02349986)*x8903)));
evalcond[4]=((((0.0008)*r11*x8896))+(((-3.5e-7)*r01*x8897))+(((0.02349986)*x8901))+(((0.02349986)*x8902))+(((0.16085006)*x8903))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.16085006)*x8900))+(((-3.5e-7)*r10*x8896))+(((3.5e-7)*r00*x8898))+(((-0.0008)*r00*x8897))+(((-1.0)*px*sj0))+((cj0*py))+(((3.5e-7)*r11*x8899))+(((-0.0008)*r01*x8898))+(((0.0008)*r10*x8899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj4)))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x8904=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8904);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8904);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
j0eval[0]=((cj5*cj5)+(sj5*sj5));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x8905=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8905);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8905);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x8906=((3.5e-7)*cj5);
IkReal x8907=((0.0008)*cj5);
IkReal x8908=((0.0008)*sj5);
IkReal x8909=((3.5e-7)*sj5);
j0eval[0]=((IKabs((((r00*x8906))+(((-1.0)*px))+(((-1.0)*r00*x8908))+(((-1.0)*r01*x8909))+(((-1.0)*r01*x8907)))))+(IKabs(((((-1.0)*r10*x8908))+((r10*x8906))+(((-1.0)*py))+(((-1.0)*r11*x8909))+(((-1.0)*r11*x8907))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x8910=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8910);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8910);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
j1eval[0]=60.0;
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[8+1], zeror[8];
int numroots;
op[0]=4.0;
op[1]=0;
op[2]=16.0;
op[3]=0;
op[4]=24.0;
op[5]=0;
op[6]=16.0;
op[7]=0;
op[8]=4.0;
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x8911=cj1*cj1;
IkReal x8912=((6.21697001542928)*pz);
IkReal x8913=(cj1*sj1);
if( IKabs((((cj1*x8912))+(((-4.78706691188054e-6)*x8913))+(((-0.994715202468684)*x8911)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+((sj1*x8912))+(((-0.994715202468684)*x8913))+(((4.78706691188054e-6)*x8911)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x8912))+(((-4.78706691188054e-6)*x8913))+(((-0.994715202468684)*x8911))))+IKsqr(((-4.78706691188054e-6)+((sj1*x8912))+(((-0.994715202468684)*x8913))+(((4.78706691188054e-6)*x8911))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x8912))+(((-4.78706691188054e-6)*x8913))+(((-0.994715202468684)*x8911))), ((-4.78706691188054e-6)+((sj1*x8912))+(((-0.994715202468684)*x8913))+(((4.78706691188054e-6)*x8911))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x8914=IKcos(j2);
IkReal x8915=IKsin(j2);
IkReal x8916=(cj1*x8914);
IkReal x8917=(sj1*x8915);
IkReal x8918=(sj1*x8914);
IkReal x8919=(cj1*x8915);
evalcond[0]=((((-1.0)*x8917))+x8916);
evalcond[1]=((((-1.0)*x8919))+(((-1.0)*x8918)));
evalcond[2]=((((0.16085006)*x8919))+(((0.16085006)*x8918))+(((0.16)*cj1))+(((-0.02349986)*x8917))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.02349986)*x8916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8920=(cj2*sj1);
IkReal x8921=(cj5*r11);
IkReal x8922=(cj1*sj2);
IkReal x8923=(r10*sj5);
IkReal x8924=((1.0)*r00*sj5);
IkReal x8925=((1.0)*cj5*r01);
if( IKabs(((((-1.0)*x8922*x8924))+(((-1.0)*x8922*x8925))+(((-1.0)*x8920*x8925))+(((-1.0)*x8920*x8924)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x8921*x8922))+((x8922*x8923))+((x8920*x8921))+((x8920*x8923)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x8922*x8924))+(((-1.0)*x8922*x8925))+(((-1.0)*x8920*x8925))+(((-1.0)*x8920*x8924))))+IKsqr((((x8921*x8922))+((x8922*x8923))+((x8920*x8921))+((x8920*x8923))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x8922*x8924))+(((-1.0)*x8922*x8925))+(((-1.0)*x8920*x8925))+(((-1.0)*x8920*x8924))), (((x8921*x8922))+((x8922*x8923))+((x8920*x8921))+((x8920*x8923))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8926=IKcos(j0);
IkReal x8927=IKsin(j0);
IkReal x8928=((1.0)*px);
IkReal x8929=((0.0008)*r11);
IkReal x8930=(r00*sj5);
IkReal x8931=((3.5e-7)*r01);
IkReal x8932=(cj1*sj2);
IkReal x8933=(cj2*sj1);
IkReal x8934=((3.5e-7)*r11);
IkReal x8935=((0.0008)*r01);
IkReal x8936=((3.5e-7)*r10);
IkReal x8937=((3.5e-7)*r00);
IkReal x8938=((0.0008)*r10);
IkReal x8939=(cj5*x8927);
IkReal x8940=(sj5*x8927);
IkReal x8941=(sj5*x8926);
IkReal x8942=(cj5*x8926);
evalcond[0]=(((x8926*x8930))+((r10*x8940))+((r01*x8942))+((r11*x8939)));
evalcond[1]=((((-1.0)*r10*x8941))+((x8927*x8930))+x8932+x8933+((r01*x8939))+(((-1.0)*r11*x8942)));
evalcond[2]=(((x8936*x8939))+(((-1.0)*x8934*x8940))+(((-1.0)*py*x8927))+(((-0.0008)*x8926*x8930))+(((-1.0)*x8926*x8928))+(((-1.0)*x8935*x8942))+(((-1.0)*x8938*x8940))+((x8937*x8942))+(((-1.0)*x8929*x8939))+(((-1.0)*x8931*x8941)));
evalcond[3]=(((py*x8926))+((x8938*x8941))+((x8934*x8941))+(((0.02349986)*x8932))+(((0.02349986)*x8933))+(((-1.0)*x8936*x8942))+((x8929*x8942))+(((-1.0)*x8927*x8928))+(((-1.0)*x8935*x8939))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((x8937*x8939))+(((-0.0008)*x8927*x8930))+(((-0.16085006)*cj1*cj2))+(((0.16085006)*sj1*sj2))+(((-1.0)*x8931*x8940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x8943=((3.5e-7)*cj5);
IkReal x8944=((0.0008)*cj5);
IkReal x8945=((0.0008)*sj5);
IkReal x8946=((3.5e-7)*sj5);
CheckValue<IkReal> x8948 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x8944))+(((-1.0)*r01*x8946))+(((-1.0)*r00*x8945))+(((-1.0)*px))+((r00*x8943)))),IkReal(((((-1.0)*r11*x8946))+(((-1.0)*r11*x8944))+(((-1.0)*py))+((r10*x8943))+(((-1.0)*r10*x8945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8948.valid){
continue;
}
IkReal x8947=x8948.value;
j0array[0]=((-1.0)*x8947);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x8947)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x8949=IKcos(j0);
IkReal x8950=IKsin(j0);
evalcond[0]=(((r10*sj5*x8950))+((cj5*r01*x8949))+((r00*sj5*x8949))+((cj5*r11*x8950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x8951=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x8951);
rxp1_0=(pz*r11);
rxp1_1=(r01*x8951);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x8952=((0.28199832)*pz);
IkReal x8953=(cj5*sj0);
IkReal x8954=(sj0*sj5);
IkReal x8955=(cj0*sj5);
IkReal x8956=(px*sj0);
IkReal x8957=(cj0*py);
IkReal x8958=((0.28199832)*x8957);
IkReal x8959=((1.93020072)*x8957);
IkReal x8960=(cj0*cj5*r11);
IkReal x8961=(cj0*cj5*r10);
IkReal x8962=((9.8699412e-8)*r00*x8953);
IkReal x8963=((9.8699412e-8)*r11*x8955);
IkReal x8964=((0.000225598656)*r10*x8955);
IkReal x8965=((0.000225598656)*x8960);
IkReal x8966=((0.001544160576)*x8960);
IkReal x8967=((6.75570252e-7)*r11*x8955);
IkReal x8968=((6.75570252e-7)*r00*x8953);
IkReal x8969=((0.001544160576)*r10*x8955);
IkReal x8970=((((1.93020072)*x8956))+(((0.001544160576)*r01*x8953))+(((0.001544160576)*r00*x8954))+(((6.75570252e-7)*r01*x8954))+(((6.75570252e-7)*x8961)));
IkReal x8971=(x8963+x8962+x8965+x8964+x8958);
IkReal x8972=((((1.93020072)*pz))+(((0.28199832)*x8956))+(((9.8699412e-8)*r01*x8954))+(((9.8699412e-8)*x8961))+(((0.000225598656)*r00*x8954))+(((0.000225598656)*r01*x8953)));
IkReal x8973=(x8969+x8968+x8967+x8966+x8952+x8959);
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((0.102943966020431)+(((-1.0)*x8972))+x8971)))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x8970))+x8973)))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((0.64340024)*x8957))+(((0.000514720192)*r10*x8955))+(((0.09399944)*pz))+(((-2.25190084e-7)*x8961))+(((-0.000514720192)*r01*x8953))+(((2.25190084e-7)*r00*x8953))+(((-0.000514720192)*r00*x8954))+(((0.000514720192)*x8960))+(((-2.25190084e-7)*r01*x8954))+(((-0.64340024)*x8956))+(((2.25190084e-7)*r11*x8955)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x8972))+x8971)))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-1.0)*x8970))+x8973)))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-3.2899804e-8)*x8961))+(((3.2899804e-8)*r00*x8953))+(((7.5199552e-5)*r10*x8955))+(((-7.5199552e-5)*r01*x8953))+(((3.2899804e-8)*r11*x8955))+(((-7.5199552e-5)*r00*x8954))+(((-0.09399944)*x8956))+(((7.5199552e-5)*x8960))+(((0.09399944)*x8957))+(((-0.64340024)*pz))+(((-3.2899804e-8)*r01*x8954))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x8974=(r01*sj0);
IkReal x8975=((3.2899804e-8)*sj5);
IkReal x8976=((7.5199552e-5)*sj5);
IkReal x8977=(cj0*r10);
IkReal x8978=((7.5199552e-5)*cj5);
IkReal x8979=((0.000225598656)*cj5);
IkReal x8980=(cj0*r11);
IkReal x8981=(cj0*py);
IkReal x8982=(r00*sj0);
IkReal x8983=((9.8699412e-8)*sj5);
IkReal x8984=(px*sj0);
IkReal x8985=((0.000225598656)*sj5);
IkReal x8986=((9.8699412e-8)*cj5);
IkReal x8987=((3.2899804e-8)*cj5);
IkReal x8988=((0.28199832)*x8981);
IkReal x8989=((0.09399944)*x8981);
IkReal x8990=(x8982*x8986);
IkReal x8991=(x8980*x8983);
IkReal x8992=(x8977*x8985);
IkReal x8993=(x8979*x8980);
IkReal x8994=(x8975*x8980);
IkReal x8995=(x8978*x8980);
IkReal x8996=(x8982*x8987);
IkReal x8997=(x8976*x8977);
IkReal x8998=(x8989+x8996+x8997+x8994+x8995);
IkReal x8999=(x8988+x8992+x8993+x8990+x8991);
IkReal x9000=(((x8977*x8986))+(((1.93020072)*pz))+(((0.28199832)*x8984))+((x8974*x8983))+((x8982*x8985))+((x8974*x8979)));
IkReal x9001=((((0.09399944)*x8984))+((x8977*x8987))+((x8976*x8982))+(((0.64340024)*pz))+((x8974*x8975))+((x8974*x8978)));
op[0]=((-0.102943966020431)+(((-1.0)*x9001))+x8998);
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+(((-1.0)*x9000))+x8999);
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+(((-1.0)*x9000))+x8999);
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+(((-1.0)*x9001))+x8998);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x9002=((0.28199832)*pz);
IkReal x9003=((0.09399944)*pz);
IkReal x9004=(px*sj0);
IkReal x9005=((0.000514720192)*sj0);
IkReal x9006=(r00*sj5);
IkReal x9007=(cj5*r01);
IkReal x9008=((0.001544160576)*sj0);
IkReal x9009=(cj0*py);
IkReal x9010=((1.93020072)*x9009);
IkReal x9011=((0.64340024)*x9009);
IkReal x9012=(cj5*r00*sj0);
IkReal x9013=(cj0*r11*sj5);
IkReal x9014=(cj0*r10*sj5);
IkReal x9015=(cj0*cj5*r10);
IkReal x9016=(cj0*cj5*r11);
IkReal x9017=(r01*sj0*sj5);
IkReal x9018=((0.001544160576)*x9016);
IkReal x9019=((6.75570252e-7)*x9013);
IkReal x9020=((6.75570252e-7)*x9012);
IkReal x9021=((0.001544160576)*x9014);
IkReal x9022=((0.000514720192)*x9016);
IkReal x9023=((2.25190084e-7)*x9012);
IkReal x9024=((2.25190084e-7)*x9013);
IkReal x9025=((0.000514720192)*x9014);
IkReal x9026=((((6.75570252e-7)*x9017))+(((6.75570252e-7)*x9015))+(((1.93020072)*x9004))+((x9007*x9008))+((x9006*x9008)));
IkReal x9027=(((x9005*x9007))+((x9005*x9006))+(((2.25190084e-7)*x9015))+(((2.25190084e-7)*x9017))+(((0.64340024)*x9004)));
IkReal x9028=(x9025+x9024+x9023+x9022+x9011+x9003);
IkReal x9029=(x9021+x9020+x9010+x9018+x9019+x9002);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x9026))+x9029))))+(((-1.0)*x9027))+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+x9028+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x9026))+x9029))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x9027))+x9028))))+(((0.205887932040862)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x9030=cj1*cj1;
IkReal x9031=((6.21697001542928)*pz);
IkReal x9032=(cj1*sj1);
if( IKabs(((((-0.994715202468684)*x9030))+(((-4.78706691188054e-6)*x9032))+((cj1*x9031)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((-0.994715202468684)*x9032))+(((4.78706691188054e-6)*x9030))+((sj1*x9031)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.994715202468684)*x9030))+(((-4.78706691188054e-6)*x9032))+((cj1*x9031))))+IKsqr(((-4.78706691188054e-6)+(((-0.994715202468684)*x9032))+(((4.78706691188054e-6)*x9030))+((sj1*x9031))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.994715202468684)*x9030))+(((-4.78706691188054e-6)*x9032))+((cj1*x9031))), ((-4.78706691188054e-6)+(((-0.994715202468684)*x9032))+(((4.78706691188054e-6)*x9030))+((sj1*x9031))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x9033=IKcos(j2);
IkReal x9034=IKsin(j2);
IkReal x9035=(cj0*cj5);
IkReal x9036=(sj0*sj5);
IkReal x9037=(cj5*sj0);
IkReal x9038=(cj0*sj5);
IkReal x9039=(cj1*x9033);
IkReal x9040=(cj1*x9034);
IkReal x9041=(sj1*x9033);
IkReal x9042=(sj1*x9034);
evalcond[0]=((((-1.0)*x9042))+x9039);
evalcond[1]=((((-1.0)*x9040))+(((-1.0)*x9041)));
evalcond[2]=((((-1.0)*r10*x9038))+((r00*x9036))+((r01*x9037))+x9041+x9040+(((-1.0)*r11*x9035)));
evalcond[3]=((((0.02349986)*x9039))+(((0.16)*cj1))+(((-0.02349986)*x9042))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x9041))+(((0.16085006)*x9040)));
evalcond[4]=((((0.0008)*r11*x9035))+(((-0.0008)*r00*x9036))+(((3.5e-7)*r00*x9037))+(((0.0008)*r10*x9038))+(((3.5e-7)*r11*x9038))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.16085006)*x9039))+(((-3.5e-7)*r10*x9035))+(((0.02349986)*x9041))+(((0.02349986)*x9040))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0008)*r01*x9037))+(((-3.5e-7)*r01*x9036))+(((0.16085006)*x9042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x9044 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9044.valid){
continue;
}
IkReal x9043=x9044.value;
j0array[0]=((-1.0)*x9043);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x9043)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x9045=IKcos(j0);
IkReal x9046=IKsin(j0);
IkReal x9047=((3.5e-7)*sj5);
IkReal x9048=((0.0008)*cj5);
IkReal x9049=((0.0008)*sj5);
IkReal x9050=((3.5e-7)*cj5);
IkReal x9051=(r01*x9045);
IkReal x9052=(r11*x9046);
IkReal x9053=(r10*x9046);
IkReal x9054=(r00*x9045);
evalcond[0]=((((-1.0)*x9049*x9053))+(((-1.0)*x9049*x9054))+((x9050*x9054))+((x9050*x9053))+(((-1.0)*px*x9045))+(((-1.0)*py*x9046))+(((-1.0)*x9048*x9051))+(((-1.0)*x9048*x9052))+(((-1.0)*x9047*x9052))+(((-1.0)*x9047*x9051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x9055=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9055);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9055);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x9056=((0.28199832)*pz);
IkReal x9057=(cj5*sj0);
IkReal x9058=(sj0*sj5);
IkReal x9059=(cj0*sj5);
IkReal x9060=(px*sj0);
IkReal x9061=(cj0*py);
IkReal x9062=((0.28199832)*x9061);
IkReal x9063=((1.93020072)*x9061);
IkReal x9064=(cj0*cj5*r11);
IkReal x9065=(cj0*cj5*r10);
IkReal x9066=((9.8699412e-8)*r00*x9057);
IkReal x9067=((9.8699412e-8)*r11*x9059);
IkReal x9068=((0.000225598656)*r10*x9059);
IkReal x9069=((0.000225598656)*x9064);
IkReal x9070=((0.001544160576)*x9064);
IkReal x9071=((6.75570252e-7)*r11*x9059);
IkReal x9072=((6.75570252e-7)*r00*x9057);
IkReal x9073=((0.001544160576)*r10*x9059);
IkReal x9074=((((6.75570252e-7)*x9065))+(((0.001544160576)*r01*x9057))+(((0.001544160576)*r00*x9058))+(((6.75570252e-7)*r01*x9058))+(((1.93020072)*x9060)));
IkReal x9075=(x9062+x9067+x9066+x9069+x9068);
IkReal x9076=((((1.93020072)*pz))+(((9.8699412e-8)*r01*x9058))+(((0.000225598656)*r00*x9058))+(((0.28199832)*x9060))+(((0.000225598656)*r01*x9057))+(((9.8699412e-8)*x9065)));
IkReal x9077=(x9063+x9056+x9072+x9073+x9070+x9071);
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+x9077+(((-1.0)*x9074)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((0.000514720192)*r10*x9059))+(((2.25190084e-7)*r11*x9059))+(((0.09399944)*pz))+(((0.000514720192)*x9064))+(((-0.000514720192)*r01*x9057))+(((-0.000514720192)*r00*x9058))+(((-2.25190084e-7)*r01*x9058))+(((-0.64340024)*x9060))+(((0.64340024)*x9061))+(((2.25190084e-7)*r00*x9057))+(((-2.25190084e-7)*x9065)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+x9075+(((-1.0)*x9076)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+x9075+(((-1.0)*x9076)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((7.5199552e-5)*x9064))+(((3.2899804e-8)*r11*x9059))+(((3.2899804e-8)*r00*x9057))+(((7.5199552e-5)*r10*x9059))+(((-7.5199552e-5)*r01*x9057))+(((-0.09399944)*x9060))+(((-7.5199552e-5)*r00*x9058))+(((0.09399944)*x9061))+(((-3.2899804e-8)*r01*x9058))+(((-0.64340024)*pz))+(((-3.2899804e-8)*x9065)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+x9077+(((-1.0)*x9074))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x9078=(r01*sj0);
IkReal x9079=((3.2899804e-8)*sj5);
IkReal x9080=((7.5199552e-5)*sj5);
IkReal x9081=(cj0*r10);
IkReal x9082=((7.5199552e-5)*cj5);
IkReal x9083=((0.000225598656)*cj5);
IkReal x9084=(cj0*r11);
IkReal x9085=(cj0*py);
IkReal x9086=(r00*sj0);
IkReal x9087=((9.8699412e-8)*sj5);
IkReal x9088=(px*sj0);
IkReal x9089=((0.000225598656)*sj5);
IkReal x9090=((9.8699412e-8)*cj5);
IkReal x9091=((3.2899804e-8)*cj5);
IkReal x9092=((0.28199832)*x9085);
IkReal x9093=((0.09399944)*x9085);
IkReal x9094=(x9086*x9090);
IkReal x9095=(x9084*x9087);
IkReal x9096=(x9081*x9089);
IkReal x9097=(x9083*x9084);
IkReal x9098=(x9079*x9084);
IkReal x9099=(x9082*x9084);
IkReal x9100=(x9086*x9091);
IkReal x9101=(x9080*x9081);
IkReal x9102=(x9100+x9101+x9098+x9099+x9093);
IkReal x9103=(x9094+x9095+x9096+x9097+x9092);
IkReal x9104=((((0.28199832)*x9088))+((x9081*x9090))+((x9078*x9087))+((x9078*x9083))+(((1.93020072)*pz))+((x9086*x9089)));
IkReal x9105=(((x9081*x9091))+((x9078*x9082))+((x9078*x9079))+((x9080*x9086))+(((0.09399944)*x9088))+(((0.64340024)*pz)));
op[0]=((-0.102943966020431)+x9102+(((-1.0)*x9105)));
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+x9103+(((-1.0)*x9104)));
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+x9103+(((-1.0)*x9104)));
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+x9102+(((-1.0)*x9105)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x9106=((0.28199832)*pz);
IkReal x9107=((0.09399944)*pz);
IkReal x9108=(px*sj0);
IkReal x9109=((0.000514720192)*sj0);
IkReal x9110=(r00*sj5);
IkReal x9111=(cj5*r01);
IkReal x9112=((0.001544160576)*sj0);
IkReal x9113=(cj0*py);
IkReal x9114=((1.93020072)*x9113);
IkReal x9115=((0.64340024)*x9113);
IkReal x9116=(cj5*r00*sj0);
IkReal x9117=(cj0*r11*sj5);
IkReal x9118=(cj0*r10*sj5);
IkReal x9119=(cj0*cj5*r10);
IkReal x9120=(cj0*cj5*r11);
IkReal x9121=(r01*sj0*sj5);
IkReal x9122=((0.001544160576)*x9120);
IkReal x9123=((6.75570252e-7)*x9117);
IkReal x9124=((6.75570252e-7)*x9116);
IkReal x9125=((0.001544160576)*x9118);
IkReal x9126=((0.000514720192)*x9120);
IkReal x9127=((2.25190084e-7)*x9116);
IkReal x9128=((2.25190084e-7)*x9117);
IkReal x9129=((0.000514720192)*x9118);
IkReal x9130=(((x9111*x9112))+(((6.75570252e-7)*x9119))+((x9110*x9112))+(((1.93020072)*x9108))+(((6.75570252e-7)*x9121)));
IkReal x9131=((((2.25190084e-7)*x9119))+(((0.64340024)*x9108))+(((2.25190084e-7)*x9121))+((x9109*x9111))+((x9109*x9110)));
IkReal x9132=(x9115+x9126+x9127+x9128+x9129+x9107);
IkReal x9133=(x9114+x9122+x9123+x9124+x9125+x9106);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+x9132+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x9133+(((-1.0)*x9130))))))+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.0150404058181848)+x9133+(((-1.0)*x9130))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x9132+(((-1.0)*x9131))))))+(((0.205887932040862)*htj1))+(((-1.0)*x9131)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x9134=cj1*cj1;
IkReal x9135=((6.21697001542928)*pz);
IkReal x9136=(cj1*sj1);
if( IKabs(((((-0.994715202468684)*x9134))+(((-4.78706691188054e-6)*x9136))+((cj1*x9135)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x9134))+(((-0.994715202468684)*x9136))+((sj1*x9135)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.994715202468684)*x9134))+(((-4.78706691188054e-6)*x9136))+((cj1*x9135))))+IKsqr(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x9134))+(((-0.994715202468684)*x9136))+((sj1*x9135))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.994715202468684)*x9134))+(((-4.78706691188054e-6)*x9136))+((cj1*x9135))), ((-4.78706691188054e-6)+(((4.78706691188054e-6)*x9134))+(((-0.994715202468684)*x9136))+((sj1*x9135))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x9137=IKcos(j2);
IkReal x9138=IKsin(j2);
IkReal x9139=(cj0*cj5);
IkReal x9140=(sj0*sj5);
IkReal x9141=(cj5*sj0);
IkReal x9142=(cj0*sj5);
IkReal x9143=(cj1*x9137);
IkReal x9144=(cj1*x9138);
IkReal x9145=(sj1*x9137);
IkReal x9146=(sj1*x9138);
evalcond[0]=((((-1.0)*x9146))+x9143);
evalcond[1]=((((-1.0)*x9144))+(((-1.0)*x9145)));
evalcond[2]=(x9144+x9145+((r01*x9141))+((r00*x9140))+(((-1.0)*r10*x9142))+(((-1.0)*r11*x9139)));
evalcond[3]=((((0.16)*cj1))+(((0.02349986)*x9143))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-0.02349986)*x9146))+(((0.16085006)*x9145))+(((0.16085006)*x9144)));
evalcond[4]=((((-3.5e-7)*r10*x9139))+(((0.02349986)*x9145))+(((0.02349986)*x9144))+(((-0.0008)*r00*x9140))+(((-3.5e-7)*r01*x9140))+(((0.0008)*r11*x9139))+(((0.0008)*r10*x9142))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((3.5e-7)*r11*x9142))+(((-0.0008)*r01*x9141))+(((-0.16085006)*x9143))+(((0.16085006)*x9146))+(((-1.0)*px*sj0))+((cj0*py))+(((3.5e-7)*r00*x9141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x9147=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9147);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9147);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265;
j0eval[0]=((cj5*cj5)+(sj5*sj5));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x9148=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9148);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9148);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265;
IkReal x9149=((3.5e-7)*cj5);
IkReal x9150=((0.0008)*cj5);
IkReal x9151=((0.0008)*sj5);
IkReal x9152=((3.5e-7)*sj5);
j0eval[0]=((IKabs((((r00*x9149))+(((-1.0)*px))+(((-1.0)*r01*x9152))+(((-1.0)*r01*x9150))+(((-1.0)*r00*x9151)))))+(IKabs(((((-1.0)*r11*x9150))+(((-1.0)*r11*x9152))+((r10*x9149))+(((-1.0)*py))+(((-1.0)*r10*x9151))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x9153=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9153);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9153);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265;
j1eval[0]=60.0;
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[8+1], zeror[8];
int numroots;
op[0]=4.0;
op[1]=0;
op[2]=16.0;
op[3]=0;
op[4]=24.0;
op[5]=0;
op[6]=16.0;
op[7]=0;
op[8]=4.0;
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x9154=cj1*cj1;
IkReal x9155=((6.21697001542928)*pz);
IkReal x9156=(cj1*sj1);
if( IKabs((((cj1*x9155))+(((-0.994715202468684)*x9154))+(((-4.78706691188054e-6)*x9156)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x9154))+((sj1*x9155))+(((-0.994715202468684)*x9156)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x9155))+(((-0.994715202468684)*x9154))+(((-4.78706691188054e-6)*x9156))))+IKsqr(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x9154))+((sj1*x9155))+(((-0.994715202468684)*x9156))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x9155))+(((-0.994715202468684)*x9154))+(((-4.78706691188054e-6)*x9156))), ((-4.78706691188054e-6)+(((4.78706691188054e-6)*x9154))+((sj1*x9155))+(((-0.994715202468684)*x9156))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x9157=IKcos(j2);
IkReal x9158=IKsin(j2);
IkReal x9159=(cj1*x9157);
IkReal x9160=(sj1*x9158);
IkReal x9161=(sj1*x9157);
IkReal x9162=(cj1*x9158);
evalcond[0]=((((-1.0)*x9160))+x9159);
evalcond[1]=((((-1.0)*x9161))+(((-1.0)*x9162)));
evalcond[2]=((((-0.02349986)*x9160))+(((0.16)*cj1))+(((-1.0)*pz))+(((0.16085006)*x9162))+(((0.16085006)*x9161))+(((0.02349986)*x9159))+(((7.7e-7)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9163=(cj2*sj1);
IkReal x9164=(cj5*r11);
IkReal x9165=(cj1*sj2);
IkReal x9166=(r10*sj5);
IkReal x9167=((1.0)*r00*sj5);
IkReal x9168=((1.0)*cj5*r01);
if( IKabs(((((-1.0)*x9163*x9167))+(((-1.0)*x9163*x9168))+(((-1.0)*x9165*x9167))+(((-1.0)*x9165*x9168)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x9165*x9166))+((x9164*x9165))+((x9163*x9166))+((x9163*x9164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x9163*x9167))+(((-1.0)*x9163*x9168))+(((-1.0)*x9165*x9167))+(((-1.0)*x9165*x9168))))+IKsqr((((x9165*x9166))+((x9164*x9165))+((x9163*x9166))+((x9163*x9164))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x9163*x9167))+(((-1.0)*x9163*x9168))+(((-1.0)*x9165*x9167))+(((-1.0)*x9165*x9168))), (((x9165*x9166))+((x9164*x9165))+((x9163*x9166))+((x9163*x9164))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x9169=IKcos(j0);
IkReal x9170=IKsin(j0);
IkReal x9171=((1.0)*px);
IkReal x9172=((0.0008)*r11);
IkReal x9173=(r00*sj5);
IkReal x9174=((3.5e-7)*r01);
IkReal x9175=(cj1*sj2);
IkReal x9176=(cj2*sj1);
IkReal x9177=((3.5e-7)*r11);
IkReal x9178=((0.0008)*r01);
IkReal x9179=((3.5e-7)*r10);
IkReal x9180=((3.5e-7)*r00);
IkReal x9181=((0.0008)*r10);
IkReal x9182=(cj5*x9170);
IkReal x9183=(sj5*x9170);
IkReal x9184=(sj5*x9169);
IkReal x9185=(cj5*x9169);
evalcond[0]=(((x9169*x9173))+((r11*x9182))+((r10*x9183))+((r01*x9185)));
evalcond[1]=(((x9170*x9173))+(((-1.0)*r11*x9185))+x9176+x9175+(((-1.0)*r10*x9184))+((r01*x9182)));
evalcond[2]=((((-1.0)*x9174*x9184))+(((-1.0)*x9169*x9171))+(((-0.0008)*x9169*x9173))+((x9179*x9182))+((x9180*x9185))+(((-1.0)*x9181*x9183))+(((-1.0)*py*x9170))+(((-1.0)*x9177*x9183))+(((-1.0)*x9178*x9185))+(((-1.0)*x9172*x9182)));
evalcond[3]=((((-1.0)*x9174*x9183))+((x9181*x9184))+(((0.02349986)*x9175))+(((0.02349986)*x9176))+(((-1.0)*x9179*x9185))+((x9180*x9182))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((py*x9169))+(((-1.0)*x9170*x9171))+(((-0.0008)*x9170*x9173))+((x9177*x9184))+((x9172*x9185))+(((-0.16085006)*cj1*cj2))+(((-1.0)*x9178*x9182))+(((0.16085006)*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x9186=((3.5e-7)*cj5);
IkReal x9187=((0.0008)*cj5);
IkReal x9188=((0.0008)*sj5);
IkReal x9189=((3.5e-7)*sj5);
CheckValue<IkReal> x9191 = IKatan2WithCheck(IkReal((((r00*x9186))+(((-1.0)*px))+(((-1.0)*r01*x9187))+(((-1.0)*r01*x9189))+(((-1.0)*r00*x9188)))),IkReal((((r10*x9186))+(((-1.0)*py))+(((-1.0)*r11*x9187))+(((-1.0)*r11*x9189))+(((-1.0)*r10*x9188)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9191.valid){
continue;
}
IkReal x9190=x9191.value;
j0array[0]=((-1.0)*x9190);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x9190)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x9192=IKcos(j0);
IkReal x9193=IKsin(j0);
evalcond[0]=(((cj5*r11*x9193))+((cj5*r01*x9192))+((r10*sj5*x9193))+((r00*sj5*x9192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x9194=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9194);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9194);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265;
IkReal x9195=((0.28199832)*pz);
IkReal x9196=(cj5*sj0);
IkReal x9197=(sj0*sj5);
IkReal x9198=(cj0*sj5);
IkReal x9199=(px*sj0);
IkReal x9200=(cj0*py);
IkReal x9201=((0.28199832)*x9200);
IkReal x9202=((1.93020072)*x9200);
IkReal x9203=(cj0*cj5*r11);
IkReal x9204=(cj0*cj5*r10);
IkReal x9205=((9.8699412e-8)*r00*x9196);
IkReal x9206=((9.8699412e-8)*r11*x9198);
IkReal x9207=((0.000225598656)*r10*x9198);
IkReal x9208=((0.000225598656)*x9203);
IkReal x9209=((0.001544160576)*x9203);
IkReal x9210=((6.75570252e-7)*r11*x9198);
IkReal x9211=((6.75570252e-7)*r00*x9196);
IkReal x9212=((0.001544160576)*r10*x9198);
IkReal x9213=((((0.001544160576)*r00*x9197))+(((6.75570252e-7)*r01*x9197))+(((6.75570252e-7)*x9204))+(((0.001544160576)*r01*x9196))+(((1.93020072)*x9199)));
IkReal x9214=(x9205+x9207+x9206+x9201+x9208);
IkReal x9215=((((0.000225598656)*r00*x9197))+(((9.8699412e-8)*x9204))+(((1.93020072)*pz))+(((9.8699412e-8)*r01*x9197))+(((0.000225598656)*r01*x9196))+(((0.28199832)*x9199)));
IkReal x9216=(x9212+x9210+x9211+x9202+x9209+x9195);
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((0.0150404058181848)+x9216+(((-1.0)*x9213)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((7.5199552e-5)*x9203))+(((3.2899804e-8)*r11*x9198))+(((7.5199552e-5)*r10*x9198))+(((3.2899804e-8)*r00*x9196))+(((-3.2899804e-8)*x9204))+(((-0.64340024)*pz))+(((-0.09399944)*x9199))+(((-7.5199552e-5)*r00*x9197))+(((-7.5199552e-5)*r01*x9196))+(((-3.2899804e-8)*r01*x9197))+(((0.09399944)*x9200)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+x9214+(((-1.0)*x9215)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-0.000514720192)*r00*x9197))+(((-0.64340024)*x9199))+(((0.09399944)*pz))+(((2.25190084e-7)*r00*x9196))+(((-0.000514720192)*r01*x9196))+(((-2.25190084e-7)*r01*x9197))+(((2.25190084e-7)*r11*x9198))+(((0.64340024)*x9200))+(((-2.25190084e-7)*x9204))+(((0.000514720192)*r10*x9198))+(((0.000514720192)*x9203)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+x9214+(((-1.0)*x9215)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+x9216+(((-1.0)*x9213))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x9217=(r01*sj0);
IkReal x9218=((3.2899804e-8)*sj5);
IkReal x9219=((7.5199552e-5)*sj5);
IkReal x9220=(cj0*r10);
IkReal x9221=((7.5199552e-5)*cj5);
IkReal x9222=((0.000225598656)*cj5);
IkReal x9223=(cj0*r11);
IkReal x9224=(cj0*py);
IkReal x9225=(r00*sj0);
IkReal x9226=((9.8699412e-8)*sj5);
IkReal x9227=(px*sj0);
IkReal x9228=((0.000225598656)*sj5);
IkReal x9229=((9.8699412e-8)*cj5);
IkReal x9230=((3.2899804e-8)*cj5);
IkReal x9231=((0.28199832)*x9224);
IkReal x9232=((0.09399944)*x9224);
IkReal x9233=(x9225*x9229);
IkReal x9234=(x9223*x9226);
IkReal x9235=(x9220*x9228);
IkReal x9236=(x9222*x9223);
IkReal x9237=(x9218*x9223);
IkReal x9238=(x9221*x9223);
IkReal x9239=(x9225*x9230);
IkReal x9240=(x9219*x9220);
IkReal x9241=(x9240+x9238+x9239+x9237+x9232);
IkReal x9242=(x9234+x9235+x9236+x9231+x9233);
IkReal x9243=((((1.93020072)*pz))+((x9220*x9229))+((x9225*x9228))+((x9217*x9222))+((x9217*x9226))+(((0.28199832)*x9227)));
IkReal x9244=(((x9220*x9230))+((x9217*x9218))+(((0.64340024)*pz))+((x9217*x9221))+(((0.09399944)*x9227))+((x9219*x9225)));
op[0]=((-0.102943966020431)+x9241+(((-1.0)*x9244)));
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+x9242+(((-1.0)*x9243)));
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+x9242+(((-1.0)*x9243)));
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+x9241+(((-1.0)*x9244)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x9245=((0.28199832)*pz);
IkReal x9246=((0.09399944)*pz);
IkReal x9247=(px*sj0);
IkReal x9248=((0.000514720192)*sj0);
IkReal x9249=(r00*sj5);
IkReal x9250=(cj5*r01);
IkReal x9251=((0.001544160576)*sj0);
IkReal x9252=(cj0*py);
IkReal x9253=((1.93020072)*x9252);
IkReal x9254=((0.64340024)*x9252);
IkReal x9255=(cj5*r00*sj0);
IkReal x9256=(cj0*r11*sj5);
IkReal x9257=(cj0*r10*sj5);
IkReal x9258=(cj0*cj5*r10);
IkReal x9259=(cj0*cj5*r11);
IkReal x9260=(r01*sj0*sj5);
IkReal x9261=((0.001544160576)*x9259);
IkReal x9262=((6.75570252e-7)*x9256);
IkReal x9263=((6.75570252e-7)*x9255);
IkReal x9264=((0.001544160576)*x9257);
IkReal x9265=((0.000514720192)*x9259);
IkReal x9266=((2.25190084e-7)*x9255);
IkReal x9267=((2.25190084e-7)*x9256);
IkReal x9268=((0.000514720192)*x9257);
IkReal x9269=((((1.93020072)*x9247))+((x9250*x9251))+(((6.75570252e-7)*x9260))+((x9249*x9251))+(((6.75570252e-7)*x9258)));
IkReal x9270=((((0.64340024)*x9247))+((x9248*x9249))+(((2.25190084e-7)*x9260))+((x9248*x9250))+(((2.25190084e-7)*x9258)));
IkReal x9271=(x9267+x9266+x9265+x9268+x9254+x9246);
IkReal x9272=(x9263+x9262+x9261+x9264+x9253+x9245);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x9269))+x9272))))+(((-1.0)*x9270))+x9271+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x9269))+x9272))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x9270))+x9271))))+(((0.205887932040862)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x9273=cj1*cj1;
IkReal x9274=((6.21697001542928)*pz);
IkReal x9275=(cj1*sj1);
if( IKabs(((((-4.78706691188054e-6)*x9275))+(((-0.994715202468684)*x9273))+((cj1*x9274)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+((sj1*x9274))+(((-0.994715202468684)*x9275))+(((4.78706691188054e-6)*x9273)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-4.78706691188054e-6)*x9275))+(((-0.994715202468684)*x9273))+((cj1*x9274))))+IKsqr(((-4.78706691188054e-6)+((sj1*x9274))+(((-0.994715202468684)*x9275))+(((4.78706691188054e-6)*x9273))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-4.78706691188054e-6)*x9275))+(((-0.994715202468684)*x9273))+((cj1*x9274))), ((-4.78706691188054e-6)+((sj1*x9274))+(((-0.994715202468684)*x9275))+(((4.78706691188054e-6)*x9273))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x9276=IKcos(j2);
IkReal x9277=IKsin(j2);
IkReal x9278=(cj0*cj5);
IkReal x9279=(sj0*sj5);
IkReal x9280=(cj5*sj0);
IkReal x9281=(cj0*sj5);
IkReal x9282=(cj1*x9276);
IkReal x9283=(cj1*x9277);
IkReal x9284=(sj1*x9276);
IkReal x9285=(sj1*x9277);
evalcond[0]=(x9282+(((-1.0)*x9285)));
evalcond[1]=((((-1.0)*x9283))+(((-1.0)*x9284)));
evalcond[2]=(x9284+x9283+((r01*x9280))+((r00*x9279))+(((-1.0)*r10*x9281))+(((-1.0)*r11*x9278)));
evalcond[3]=((((0.02349986)*x9282))+(((0.16085006)*x9284))+(((0.16085006)*x9283))+(((0.16)*cj1))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-0.02349986)*x9285)));
evalcond[4]=((((0.02349986)*x9283))+(((0.02349986)*x9284))+(((0.16085006)*x9285))+(((3.5e-7)*r11*x9281))+(((-3.5e-7)*r10*x9278))+(((0.0008)*r10*x9281))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.0008)*r11*x9278))+(((3.5e-7)*r00*x9280))+(((-0.0008)*r01*x9280))+(((-0.0008)*r00*x9279))+(((-1.0)*px*sj0))+((cj0*py))+(((-3.5e-7)*r01*x9279))+(((-0.16085006)*x9282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x9287 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9287.valid){
continue;
}
IkReal x9286=x9287.value;
j0array[0]=((-1.0)*x9286);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x9286)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x9288=IKcos(j0);
IkReal x9289=IKsin(j0);
IkReal x9290=((3.5e-7)*sj5);
IkReal x9291=((0.0008)*cj5);
IkReal x9292=((0.0008)*sj5);
IkReal x9293=((3.5e-7)*cj5);
IkReal x9294=(r01*x9288);
IkReal x9295=(r11*x9289);
IkReal x9296=(r10*x9289);
IkReal x9297=(r00*x9288);
evalcond[0]=((((-1.0)*x9291*x9295))+(((-1.0)*x9291*x9294))+(((-1.0)*py*x9289))+(((-1.0)*x9292*x9296))+(((-1.0)*x9292*x9297))+(((-1.0)*x9290*x9295))+(((-1.0)*x9290*x9294))+((x9293*x9297))+((x9293*x9296))+(((-1.0)*px*x9288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x9298=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9298);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9298);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265;
IkReal x9299=((0.28199832)*pz);
IkReal x9300=(cj5*sj0);
IkReal x9301=(sj0*sj5);
IkReal x9302=(cj0*sj5);
IkReal x9303=(px*sj0);
IkReal x9304=(cj0*py);
IkReal x9305=((0.28199832)*x9304);
IkReal x9306=((1.93020072)*x9304);
IkReal x9307=(cj0*cj5*r11);
IkReal x9308=(cj0*cj5*r10);
IkReal x9309=((9.8699412e-8)*r00*x9300);
IkReal x9310=((9.8699412e-8)*r11*x9302);
IkReal x9311=((0.000225598656)*r10*x9302);
IkReal x9312=((0.000225598656)*x9307);
IkReal x9313=((0.001544160576)*x9307);
IkReal x9314=((6.75570252e-7)*r11*x9302);
IkReal x9315=((6.75570252e-7)*r00*x9300);
IkReal x9316=((0.001544160576)*r10*x9302);
IkReal x9317=((((1.93020072)*x9303))+(((0.001544160576)*r01*x9300))+(((6.75570252e-7)*x9308))+(((6.75570252e-7)*r01*x9301))+(((0.001544160576)*r00*x9301)));
IkReal x9318=(x9309+x9305+x9312+x9311+x9310);
IkReal x9319=((((0.000225598656)*r01*x9300))+(((1.93020072)*pz))+(((0.28199832)*x9303))+(((9.8699412e-8)*x9308))+(((0.000225598656)*r00*x9301))+(((9.8699412e-8)*r01*x9301)));
IkReal x9320=(x9306+x9316+x9315+x9314+x9313+x9299);
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((0.0150404058181848)+x9320+(((-1.0)*x9317)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+x9320+(((-1.0)*x9317)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+x9318+(((-1.0)*x9319)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+x9318+(((-1.0)*x9319)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-0.000514720192)*r00*x9301))+(((0.64340024)*x9304))+(((0.09399944)*pz))+(((-0.64340024)*x9303))+(((-0.000514720192)*r01*x9300))+(((-2.25190084e-7)*r01*x9301))+(((0.000514720192)*r10*x9302))+(((2.25190084e-7)*r11*x9302))+(((0.000514720192)*x9307))+(((-2.25190084e-7)*x9308))+(((2.25190084e-7)*r00*x9300)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-3.2899804e-8)*r01*x9301))+(((-3.2899804e-8)*x9308))+(((-7.5199552e-5)*r00*x9301))+(((0.09399944)*x9304))+(((-7.5199552e-5)*r01*x9300))+(((-0.64340024)*pz))+(((-0.09399944)*x9303))+(((3.2899804e-8)*r11*x9302))+(((7.5199552e-5)*r10*x9302))+(((3.2899804e-8)*r00*x9300))+(((7.5199552e-5)*x9307))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x9321=(r01*sj0);
IkReal x9322=((3.2899804e-8)*sj5);
IkReal x9323=((7.5199552e-5)*sj5);
IkReal x9324=(cj0*r10);
IkReal x9325=((7.5199552e-5)*cj5);
IkReal x9326=((0.000225598656)*cj5);
IkReal x9327=(cj0*r11);
IkReal x9328=(cj0*py);
IkReal x9329=(r00*sj0);
IkReal x9330=((9.8699412e-8)*sj5);
IkReal x9331=(px*sj0);
IkReal x9332=((0.000225598656)*sj5);
IkReal x9333=((9.8699412e-8)*cj5);
IkReal x9334=((3.2899804e-8)*cj5);
IkReal x9335=((0.28199832)*x9328);
IkReal x9336=((0.09399944)*x9328);
IkReal x9337=(x9329*x9333);
IkReal x9338=(x9327*x9330);
IkReal x9339=(x9324*x9332);
IkReal x9340=(x9326*x9327);
IkReal x9341=(x9322*x9327);
IkReal x9342=(x9325*x9327);
IkReal x9343=(x9329*x9334);
IkReal x9344=(x9323*x9324);
IkReal x9345=(x9336+x9341+x9342+x9343+x9344);
IkReal x9346=(x9335+x9337+x9339+x9338+x9340);
IkReal x9347=(((x9329*x9332))+(((1.93020072)*pz))+(((0.28199832)*x9331))+((x9321*x9330))+((x9321*x9326))+((x9324*x9333)));
IkReal x9348=((((0.09399944)*x9331))+(((0.64340024)*pz))+((x9321*x9322))+((x9321*x9325))+((x9323*x9329))+((x9324*x9334)));
op[0]=((-0.102943966020431)+x9345+(((-1.0)*x9348)));
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+x9346+(((-1.0)*x9347)));
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+x9346+(((-1.0)*x9347)));
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+x9345+(((-1.0)*x9348)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x9349=((0.28199832)*pz);
IkReal x9350=((0.09399944)*pz);
IkReal x9351=(px*sj0);
IkReal x9352=((0.000514720192)*sj0);
IkReal x9353=(r00*sj5);
IkReal x9354=(cj5*r01);
IkReal x9355=((0.001544160576)*sj0);
IkReal x9356=(cj0*py);
IkReal x9357=((1.93020072)*x9356);
IkReal x9358=((0.64340024)*x9356);
IkReal x9359=(cj5*r00*sj0);
IkReal x9360=(cj0*r11*sj5);
IkReal x9361=(cj0*r10*sj5);
IkReal x9362=(cj0*cj5*r10);
IkReal x9363=(cj0*cj5*r11);
IkReal x9364=(r01*sj0*sj5);
IkReal x9365=((0.001544160576)*x9363);
IkReal x9366=((6.75570252e-7)*x9360);
IkReal x9367=((6.75570252e-7)*x9359);
IkReal x9368=((0.001544160576)*x9361);
IkReal x9369=((0.000514720192)*x9363);
IkReal x9370=((2.25190084e-7)*x9359);
IkReal x9371=((2.25190084e-7)*x9360);
IkReal x9372=((0.000514720192)*x9361);
IkReal x9373=(((x9353*x9355))+((x9354*x9355))+(((1.93020072)*x9351))+(((6.75570252e-7)*x9364))+(((6.75570252e-7)*x9362)));
IkReal x9374=((((0.64340024)*x9351))+((x9352*x9354))+((x9352*x9353))+(((2.25190084e-7)*x9362))+(((2.25190084e-7)*x9364)));
IkReal x9375=(x9350+x9358+x9369+x9371+x9370+x9372);
IkReal x9376=(x9349+x9357+x9368+x9366+x9367+x9365);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+x9375+(((-1.0)*x9374))+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x9376+(((-1.0)*x9373))))))+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.0150404058181848)+x9376+(((-1.0)*x9373))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x9375+(((-1.0)*x9374))))))+(((0.205887932040862)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x9377=cj1*cj1;
IkReal x9378=((6.21697001542928)*pz);
IkReal x9379=(cj1*sj1);
if( IKabs(((((-4.78706691188054e-6)*x9379))+((cj1*x9378))+(((-0.994715202468684)*x9377)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x9377))+((sj1*x9378))+(((-0.994715202468684)*x9379)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-4.78706691188054e-6)*x9379))+((cj1*x9378))+(((-0.994715202468684)*x9377))))+IKsqr(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x9377))+((sj1*x9378))+(((-0.994715202468684)*x9379))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-4.78706691188054e-6)*x9379))+((cj1*x9378))+(((-0.994715202468684)*x9377))), ((-4.78706691188054e-6)+(((4.78706691188054e-6)*x9377))+((sj1*x9378))+(((-0.994715202468684)*x9379))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x9380=IKcos(j2);
IkReal x9381=IKsin(j2);
IkReal x9382=(cj0*cj5);
IkReal x9383=(sj0*sj5);
IkReal x9384=(cj5*sj0);
IkReal x9385=(cj0*sj5);
IkReal x9386=(cj1*x9380);
IkReal x9387=(cj1*x9381);
IkReal x9388=(sj1*x9380);
IkReal x9389=(sj1*x9381);
evalcond[0]=(x9386+(((-1.0)*x9389)));
evalcond[1]=((((-1.0)*x9387))+(((-1.0)*x9388)));
evalcond[2]=(x9387+x9388+(((-1.0)*r10*x9385))+(((-1.0)*r11*x9382))+((r01*x9384))+((r00*x9383)));
evalcond[3]=((((0.16)*cj1))+(((-1.0)*pz))+(((0.16085006)*x9388))+(((0.16085006)*x9387))+(((7.7e-7)*sj1))+(((-0.02349986)*x9389))+(((0.02349986)*x9386)));
evalcond[4]=((((-3.5e-7)*r01*x9383))+(((-3.5e-7)*r10*x9382))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.16085006)*x9389))+(((0.0008)*r11*x9382))+(((-0.0008)*r01*x9384))+(((3.5e-7)*r00*x9384))+(((-0.16085006)*x9386))+(((-1.0)*px*sj0))+(((-0.0008)*r00*x9383))+((cj0*py))+(((0.0008)*r10*x9385))+(((0.02349986)*x9388))+(((0.02349986)*x9387))+(((3.5e-7)*r11*x9385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj4)))))+(IKabs(((1.0)+cj4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x9390=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9390);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9390);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=-3.14159265;
j0eval[0]=((cj5*cj5)+(sj5*sj5));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x9391=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9391);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9391);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=-3.14159265;
IkReal x9392=((3.5e-7)*cj5);
IkReal x9393=((0.0008)*cj5);
IkReal x9394=((0.0008)*sj5);
IkReal x9395=((3.5e-7)*sj5);
j0eval[0]=((IKabs(((((-1.0)*r00*x9394))+(((-1.0)*r01*x9395))+(((-1.0)*r01*x9393))+(((-1.0)*px))+((r00*x9392)))))+(IKabs((((r10*x9392))+(((-1.0)*r10*x9394))+(((-1.0)*r11*x9395))+(((-1.0)*r11*x9393))+(((-1.0)*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x9396=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9396);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9396);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=-3.14159265;
j1eval[0]=60.0;
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[8+1], zeror[8];
int numroots;
op[0]=4.0;
op[1]=0;
op[2]=16.0;
op[3]=0;
op[4]=24.0;
op[5]=0;
op[6]=16.0;
op[7]=0;
op[8]=4.0;
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x9397=cj1*cj1;
IkReal x9398=((6.21697001542928)*pz);
IkReal x9399=(cj1*sj1);
if( IKabs(((((-0.994715202468684)*x9397))+(((-4.78706691188054e-6)*x9399))+((cj1*x9398)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+((sj1*x9398))+(((-0.994715202468684)*x9399))+(((4.78706691188054e-6)*x9397)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.994715202468684)*x9397))+(((-4.78706691188054e-6)*x9399))+((cj1*x9398))))+IKsqr(((-4.78706691188054e-6)+((sj1*x9398))+(((-0.994715202468684)*x9399))+(((4.78706691188054e-6)*x9397))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.994715202468684)*x9397))+(((-4.78706691188054e-6)*x9399))+((cj1*x9398))), ((-4.78706691188054e-6)+((sj1*x9398))+(((-0.994715202468684)*x9399))+(((4.78706691188054e-6)*x9397))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x9400=IKcos(j2);
IkReal x9401=IKsin(j2);
IkReal x9402=(cj1*x9400);
IkReal x9403=(sj1*x9401);
IkReal x9404=(sj1*x9400);
IkReal x9405=(cj1*x9401);
evalcond[0]=((((-1.0)*x9403))+x9402);
evalcond[1]=((((-1.0)*x9405))+(((-1.0)*x9404)));
evalcond[2]=((((0.16)*cj1))+(((0.02349986)*x9402))+(((-0.02349986)*x9403))+(((0.16085006)*x9404))+(((0.16085006)*x9405))+(((-1.0)*pz))+(((7.7e-7)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9406=(cj2*sj1);
IkReal x9407=(cj5*r11);
IkReal x9408=(cj1*sj2);
IkReal x9409=(r10*sj5);
IkReal x9410=((1.0)*r00*sj5);
IkReal x9411=((1.0)*cj5*r01);
if( IKabs(((((-1.0)*x9408*x9411))+(((-1.0)*x9408*x9410))+(((-1.0)*x9406*x9411))+(((-1.0)*x9406*x9410)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x9407*x9408))+((x9406*x9407))+((x9406*x9409))+((x9408*x9409)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x9408*x9411))+(((-1.0)*x9408*x9410))+(((-1.0)*x9406*x9411))+(((-1.0)*x9406*x9410))))+IKsqr((((x9407*x9408))+((x9406*x9407))+((x9406*x9409))+((x9408*x9409))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x9408*x9411))+(((-1.0)*x9408*x9410))+(((-1.0)*x9406*x9411))+(((-1.0)*x9406*x9410))), (((x9407*x9408))+((x9406*x9407))+((x9406*x9409))+((x9408*x9409))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x9412=IKcos(j0);
IkReal x9413=IKsin(j0);
IkReal x9414=((1.0)*px);
IkReal x9415=((0.0008)*r11);
IkReal x9416=(r00*sj5);
IkReal x9417=((3.5e-7)*r01);
IkReal x9418=(cj1*sj2);
IkReal x9419=(cj2*sj1);
IkReal x9420=((3.5e-7)*r11);
IkReal x9421=((0.0008)*r01);
IkReal x9422=((3.5e-7)*r10);
IkReal x9423=((3.5e-7)*r00);
IkReal x9424=((0.0008)*r10);
IkReal x9425=(cj5*x9413);
IkReal x9426=(sj5*x9413);
IkReal x9427=(sj5*x9412);
IkReal x9428=(cj5*x9412);
evalcond[0]=(((r01*x9428))+((x9412*x9416))+((r10*x9426))+((r11*x9425)));
evalcond[1]=(((r01*x9425))+((x9413*x9416))+(((-1.0)*r11*x9428))+x9418+x9419+(((-1.0)*r10*x9427)));
evalcond[2]=((((-1.0)*x9424*x9426))+(((-1.0)*x9417*x9427))+(((-1.0)*x9420*x9426))+((x9422*x9425))+(((-1.0)*x9421*x9428))+((x9423*x9428))+(((-1.0)*py*x9413))+(((-1.0)*x9415*x9425))+(((-1.0)*x9412*x9414))+(((-0.0008)*x9412*x9416)));
evalcond[3]=((((-0.0008)*x9413*x9416))+(((-1.0)*x9417*x9426))+((x9424*x9427))+(((-1.0)*x9421*x9425))+((x9423*x9425))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((x9420*x9427))+((x9415*x9428))+(((-1.0)*x9422*x9428))+(((0.02349986)*x9419))+(((0.02349986)*x9418))+(((-0.16085006)*cj1*cj2))+((py*x9412))+(((0.16085006)*sj1*sj2))+(((-1.0)*x9413*x9414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x9429=((3.5e-7)*cj5);
IkReal x9430=((0.0008)*cj5);
IkReal x9431=((0.0008)*sj5);
IkReal x9432=((3.5e-7)*sj5);
CheckValue<IkReal> x9434 = IKatan2WithCheck(IkReal((((r00*x9429))+(((-1.0)*px))+(((-1.0)*r01*x9430))+(((-1.0)*r01*x9432))+(((-1.0)*r00*x9431)))),IkReal(((((-1.0)*r10*x9431))+(((-1.0)*py))+(((-1.0)*r11*x9432))+(((-1.0)*r11*x9430))+((r10*x9429)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9434.valid){
continue;
}
IkReal x9433=x9434.value;
j0array[0]=((-1.0)*x9433);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x9433)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x9435=IKcos(j0);
IkReal x9436=IKsin(j0);
evalcond[0]=(((cj5*r01*x9435))+((cj5*r11*x9436))+((r10*sj5*x9436))+((r00*sj5*x9435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x9437=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9437);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9437);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=-3.14159265;
IkReal x9438=((0.28199832)*pz);
IkReal x9439=(cj5*sj0);
IkReal x9440=(sj0*sj5);
IkReal x9441=(cj0*sj5);
IkReal x9442=(px*sj0);
IkReal x9443=(cj0*py);
IkReal x9444=((0.28199832)*x9443);
IkReal x9445=((1.93020072)*x9443);
IkReal x9446=(cj0*cj5*r11);
IkReal x9447=(cj0*cj5*r10);
IkReal x9448=((9.8699412e-8)*r00*x9439);
IkReal x9449=((9.8699412e-8)*r11*x9441);
IkReal x9450=((0.000225598656)*r10*x9441);
IkReal x9451=((0.000225598656)*x9446);
IkReal x9452=((0.001544160576)*x9446);
IkReal x9453=((6.75570252e-7)*r11*x9441);
IkReal x9454=((6.75570252e-7)*r00*x9439);
IkReal x9455=((0.001544160576)*r10*x9441);
IkReal x9456=((((0.001544160576)*r00*x9440))+(((6.75570252e-7)*r01*x9440))+(((0.001544160576)*r01*x9439))+(((6.75570252e-7)*x9447))+(((1.93020072)*x9442)));
IkReal x9457=(x9450+x9451+x9449+x9448+x9444);
IkReal x9458=((((9.8699412e-8)*r01*x9440))+(((0.28199832)*x9442))+(((1.93020072)*pz))+(((0.000225598656)*r01*x9439))+(((0.000225598656)*r00*x9440))+(((9.8699412e-8)*x9447)));
IkReal x9459=(x9438+x9454+x9455+x9452+x9453+x9445);
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x9458))+x9457)))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+(((-1.0)*x9458))+x9457)))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x9456))+x9459)))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-1.0)*x9456))+x9459)))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((2.25190084e-7)*r11*x9441))+(((0.64340024)*x9443))+(((-2.25190084e-7)*x9447))+(((2.25190084e-7)*r00*x9439))+(((-0.000514720192)*r00*x9440))+(((0.09399944)*pz))+(((0.000514720192)*x9446))+(((-0.000514720192)*r01*x9439))+(((-2.25190084e-7)*r01*x9440))+(((0.000514720192)*r10*x9441))+(((-0.64340024)*x9442)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-0.09399944)*x9442))+(((-7.5199552e-5)*r00*x9440))+(((3.2899804e-8)*r00*x9439))+(((3.2899804e-8)*r11*x9441))+(((-3.2899804e-8)*r01*x9440))+(((-3.2899804e-8)*x9447))+(((7.5199552e-5)*r10*x9441))+(((0.09399944)*x9443))+(((-0.64340024)*pz))+(((7.5199552e-5)*x9446))+(((-7.5199552e-5)*r01*x9439))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x9460=(r01*sj0);
IkReal x9461=((3.2899804e-8)*sj5);
IkReal x9462=((7.5199552e-5)*sj5);
IkReal x9463=(cj0*r10);
IkReal x9464=((7.5199552e-5)*cj5);
IkReal x9465=((0.000225598656)*cj5);
IkReal x9466=(cj0*r11);
IkReal x9467=(cj0*py);
IkReal x9468=(r00*sj0);
IkReal x9469=((9.8699412e-8)*sj5);
IkReal x9470=(px*sj0);
IkReal x9471=((0.000225598656)*sj5);
IkReal x9472=((9.8699412e-8)*cj5);
IkReal x9473=((3.2899804e-8)*cj5);
IkReal x9474=((0.28199832)*x9467);
IkReal x9475=((0.09399944)*x9467);
IkReal x9476=(x9468*x9472);
IkReal x9477=(x9466*x9469);
IkReal x9478=(x9463*x9471);
IkReal x9479=(x9465*x9466);
IkReal x9480=(x9461*x9466);
IkReal x9481=(x9464*x9466);
IkReal x9482=(x9468*x9473);
IkReal x9483=(x9462*x9463);
IkReal x9484=(x9483+x9482+x9481+x9480+x9475);
IkReal x9485=(x9478+x9479+x9476+x9477+x9474);
IkReal x9486=(((x9468*x9471))+(((1.93020072)*pz))+((x9460*x9465))+((x9460*x9469))+((x9463*x9472))+(((0.28199832)*x9470)));
IkReal x9487=(((x9460*x9464))+((x9460*x9461))+((x9463*x9473))+(((0.64340024)*pz))+(((0.09399944)*x9470))+((x9462*x9468)));
op[0]=((-0.102943966020431)+(((-1.0)*x9487))+x9484);
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+(((-1.0)*x9486))+x9485);
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+(((-1.0)*x9486))+x9485);
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+(((-1.0)*x9487))+x9484);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x9488=((0.28199832)*pz);
IkReal x9489=((0.09399944)*pz);
IkReal x9490=(px*sj0);
IkReal x9491=((0.000514720192)*sj0);
IkReal x9492=(r00*sj5);
IkReal x9493=(cj5*r01);
IkReal x9494=((0.001544160576)*sj0);
IkReal x9495=(cj0*py);
IkReal x9496=((1.93020072)*x9495);
IkReal x9497=((0.64340024)*x9495);
IkReal x9498=(cj5*r00*sj0);
IkReal x9499=(cj0*r11*sj5);
IkReal x9500=(cj0*r10*sj5);
IkReal x9501=(cj0*cj5*r10);
IkReal x9502=(cj0*cj5*r11);
IkReal x9503=(r01*sj0*sj5);
IkReal x9504=((0.001544160576)*x9502);
IkReal x9505=((6.75570252e-7)*x9499);
IkReal x9506=((6.75570252e-7)*x9498);
IkReal x9507=((0.001544160576)*x9500);
IkReal x9508=((0.000514720192)*x9502);
IkReal x9509=((2.25190084e-7)*x9498);
IkReal x9510=((2.25190084e-7)*x9499);
IkReal x9511=((0.000514720192)*x9500);
IkReal x9512=((((1.93020072)*x9490))+((x9493*x9494))+((x9492*x9494))+(((6.75570252e-7)*x9501))+(((6.75570252e-7)*x9503)));
IkReal x9513=((((2.25190084e-7)*x9503))+(((2.25190084e-7)*x9501))+((x9491*x9493))+((x9491*x9492))+(((0.64340024)*x9490)));
IkReal x9514=(x9508+x9509+x9511+x9510+x9489+x9497);
IkReal x9515=(x9506+x9507+x9504+x9505+x9488+x9496);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x9512))+x9515))))+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x9513))+x9514+(((htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x9512))+x9515))))+(((0.205887932040862)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x9513))+x9514)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x9516=cj1*cj1;
IkReal x9517=((6.21697001542928)*pz);
IkReal x9518=(cj1*sj1);
if( IKabs(((((-0.994715202468684)*x9516))+(((-4.78706691188054e-6)*x9518))+((cj1*x9517)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((-0.994715202468684)*x9518))+((sj1*x9517))+(((4.78706691188054e-6)*x9516)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.994715202468684)*x9516))+(((-4.78706691188054e-6)*x9518))+((cj1*x9517))))+IKsqr(((-4.78706691188054e-6)+(((-0.994715202468684)*x9518))+((sj1*x9517))+(((4.78706691188054e-6)*x9516))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.994715202468684)*x9516))+(((-4.78706691188054e-6)*x9518))+((cj1*x9517))), ((-4.78706691188054e-6)+(((-0.994715202468684)*x9518))+((sj1*x9517))+(((4.78706691188054e-6)*x9516))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x9519=IKcos(j2);
IkReal x9520=IKsin(j2);
IkReal x9521=(cj0*cj5);
IkReal x9522=(sj0*sj5);
IkReal x9523=(cj5*sj0);
IkReal x9524=(cj0*sj5);
IkReal x9525=(cj1*x9519);
IkReal x9526=(cj1*x9520);
IkReal x9527=(sj1*x9519);
IkReal x9528=(sj1*x9520);
evalcond[0]=((((-1.0)*x9528))+x9525);
evalcond[1]=((((-1.0)*x9526))+(((-1.0)*x9527)));
evalcond[2]=((((-1.0)*r10*x9524))+((r01*x9523))+((r00*x9522))+x9526+x9527+(((-1.0)*r11*x9521)));
evalcond[3]=((((0.16)*cj1))+(((-0.02349986)*x9528))+(((0.16085006)*x9527))+(((0.16085006)*x9526))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.02349986)*x9525)));
evalcond[4]=((((-0.16085006)*x9525))+(((-0.0008)*r00*x9522))+(((0.16085006)*x9528))+(((-0.0008)*r01*x9523))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((3.5e-7)*r11*x9524))+(((0.0008)*r11*x9521))+(((-3.5e-7)*r01*x9522))+(((3.5e-7)*r00*x9523))+(((0.02349986)*x9527))+(((0.02349986)*x9526))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0008)*r10*x9524))+(((-3.5e-7)*r10*x9521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x9530 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9530.valid){
continue;
}
IkReal x9529=x9530.value;
j0array[0]=((-1.0)*x9529);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x9529)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x9531=IKcos(j0);
IkReal x9532=IKsin(j0);
IkReal x9533=((3.5e-7)*sj5);
IkReal x9534=((0.0008)*cj5);
IkReal x9535=((0.0008)*sj5);
IkReal x9536=((3.5e-7)*cj5);
IkReal x9537=(r01*x9531);
IkReal x9538=(r11*x9532);
IkReal x9539=(r10*x9532);
IkReal x9540=(r00*x9531);
evalcond[0]=((((-1.0)*px*x9531))+(((-1.0)*x9535*x9540))+((x9536*x9540))+(((-1.0)*x9533*x9538))+(((-1.0)*x9533*x9537))+(((-1.0)*py*x9532))+(((-1.0)*x9535*x9539))+(((-1.0)*x9534*x9537))+(((-1.0)*x9534*x9538))+((x9536*x9539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x9541=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9541);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9541);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=-3.14159265;
IkReal x9542=((0.28199832)*pz);
IkReal x9543=(cj5*sj0);
IkReal x9544=(sj0*sj5);
IkReal x9545=(cj0*sj5);
IkReal x9546=(px*sj0);
IkReal x9547=(cj0*py);
IkReal x9548=((0.28199832)*x9547);
IkReal x9549=((1.93020072)*x9547);
IkReal x9550=(cj0*cj5*r11);
IkReal x9551=(cj0*cj5*r10);
IkReal x9552=((9.8699412e-8)*r00*x9543);
IkReal x9553=((9.8699412e-8)*r11*x9545);
IkReal x9554=((0.000225598656)*r10*x9545);
IkReal x9555=((0.000225598656)*x9550);
IkReal x9556=((0.001544160576)*x9550);
IkReal x9557=((6.75570252e-7)*r11*x9545);
IkReal x9558=((6.75570252e-7)*r00*x9543);
IkReal x9559=((0.001544160576)*r10*x9545);
IkReal x9560=((((0.001544160576)*r01*x9543))+(((6.75570252e-7)*x9551))+(((1.93020072)*x9546))+(((0.001544160576)*r00*x9544))+(((6.75570252e-7)*r01*x9544)));
IkReal x9561=(x9548+x9553+x9552+x9555+x9554);
IkReal x9562=((((0.000225598656)*r00*x9544))+(((1.93020072)*pz))+(((0.28199832)*x9546))+(((0.000225598656)*r01*x9543))+(((9.8699412e-8)*r01*x9544))+(((9.8699412e-8)*x9551)));
IkReal x9563=(x9549+x9542+x9559+x9558+x9557+x9556);
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-0.09399944)*x9546))+(((7.5199552e-5)*x9550))+(((7.5199552e-5)*r10*x9545))+(((-7.5199552e-5)*r00*x9544))+(((-7.5199552e-5)*r01*x9543))+(((-0.64340024)*pz))+(((-3.2899804e-8)*r01*x9544))+(((3.2899804e-8)*r11*x9545))+(((3.2899804e-8)*r00*x9543))+(((0.09399944)*x9547))+(((-3.2899804e-8)*x9551)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x9560))+x9563)))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+(((-1.0)*x9562))+x9561)))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-1.0)*x9560))+x9563)))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x9562))+x9561)))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-0.64340024)*x9546))+(((0.000514720192)*x9550))+(((0.000514720192)*r10*x9545))+(((0.09399944)*pz))+(((-2.25190084e-7)*r01*x9544))+(((-2.25190084e-7)*x9551))+(((0.64340024)*x9547))+(((2.25190084e-7)*r00*x9543))+(((-0.000514720192)*r00*x9544))+(((2.25190084e-7)*r11*x9545))+(((-0.000514720192)*r01*x9543))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x9564=(r01*sj0);
IkReal x9565=((3.2899804e-8)*sj5);
IkReal x9566=((7.5199552e-5)*sj5);
IkReal x9567=(cj0*r10);
IkReal x9568=((7.5199552e-5)*cj5);
IkReal x9569=((0.000225598656)*cj5);
IkReal x9570=(cj0*r11);
IkReal x9571=(cj0*py);
IkReal x9572=(r00*sj0);
IkReal x9573=((9.8699412e-8)*sj5);
IkReal x9574=(px*sj0);
IkReal x9575=((0.000225598656)*sj5);
IkReal x9576=((9.8699412e-8)*cj5);
IkReal x9577=((3.2899804e-8)*cj5);
IkReal x9578=((0.28199832)*x9571);
IkReal x9579=((0.09399944)*x9571);
IkReal x9580=(x9572*x9576);
IkReal x9581=(x9570*x9573);
IkReal x9582=(x9567*x9575);
IkReal x9583=(x9569*x9570);
IkReal x9584=(x9565*x9570);
IkReal x9585=(x9568*x9570);
IkReal x9586=(x9572*x9577);
IkReal x9587=(x9566*x9567);
IkReal x9588=(x9579+x9586+x9587+x9584+x9585);
IkReal x9589=(x9578+x9582+x9583+x9580+x9581);
IkReal x9590=(((x9567*x9576))+((x9572*x9575))+((x9564*x9569))+(((1.93020072)*pz))+((x9564*x9573))+(((0.28199832)*x9574)));
IkReal x9591=(((x9567*x9577))+((x9564*x9568))+((x9564*x9565))+(((0.64340024)*pz))+(((0.09399944)*x9574))+((x9566*x9572)));
op[0]=((-0.102943966020431)+(((-1.0)*x9591))+x9588);
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+(((-1.0)*x9590))+x9589);
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+(((-1.0)*x9590))+x9589);
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+(((-1.0)*x9591))+x9588);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x9592=((0.28199832)*pz);
IkReal x9593=((0.09399944)*pz);
IkReal x9594=(px*sj0);
IkReal x9595=((0.000514720192)*sj0);
IkReal x9596=(r00*sj5);
IkReal x9597=(cj5*r01);
IkReal x9598=((0.001544160576)*sj0);
IkReal x9599=(cj0*py);
IkReal x9600=((1.93020072)*x9599);
IkReal x9601=((0.64340024)*x9599);
IkReal x9602=(cj5*r00*sj0);
IkReal x9603=(cj0*r11*sj5);
IkReal x9604=(cj0*r10*sj5);
IkReal x9605=(cj0*cj5*r10);
IkReal x9606=(cj0*cj5*r11);
IkReal x9607=(r01*sj0*sj5);
IkReal x9608=((0.001544160576)*x9606);
IkReal x9609=((6.75570252e-7)*x9603);
IkReal x9610=((6.75570252e-7)*x9602);
IkReal x9611=((0.001544160576)*x9604);
IkReal x9612=((0.000514720192)*x9606);
IkReal x9613=((2.25190084e-7)*x9602);
IkReal x9614=((2.25190084e-7)*x9603);
IkReal x9615=((0.000514720192)*x9604);
IkReal x9616=(((x9596*x9598))+((x9597*x9598))+(((1.93020072)*x9594))+(((6.75570252e-7)*x9607))+(((6.75570252e-7)*x9605)));
IkReal x9617=((((0.64340024)*x9594))+((x9595*x9597))+((x9595*x9596))+(((2.25190084e-7)*x9605))+(((2.25190084e-7)*x9607)));
IkReal x9618=(x9614+x9615+x9612+x9613+x9601+x9593);
IkReal x9619=(x9610+x9611+x9600+x9609+x9608+x9592);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x9618+(((-1.0)*x9617))))))+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+x9618+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x9619+(((-1.0)*x9616))))))+(((htj1*htj1)*(((-0.0150404058181848)+x9619+(((-1.0)*x9616))))))+(((-1.0)*x9617))+(((0.205887932040862)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x9620=cj1*cj1;
IkReal x9621=((6.21697001542928)*pz);
IkReal x9622=(cj1*sj1);
if( IKabs(((((-0.994715202468684)*x9620))+((cj1*x9621))+(((-4.78706691188054e-6)*x9622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x9620))+((sj1*x9621))+(((-0.994715202468684)*x9622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.994715202468684)*x9620))+((cj1*x9621))+(((-4.78706691188054e-6)*x9622))))+IKsqr(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x9620))+((sj1*x9621))+(((-0.994715202468684)*x9622))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.994715202468684)*x9620))+((cj1*x9621))+(((-4.78706691188054e-6)*x9622))), ((-4.78706691188054e-6)+(((4.78706691188054e-6)*x9620))+((sj1*x9621))+(((-0.994715202468684)*x9622))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x9623=IKcos(j2);
IkReal x9624=IKsin(j2);
IkReal x9625=(cj0*cj5);
IkReal x9626=(sj0*sj5);
IkReal x9627=(cj5*sj0);
IkReal x9628=(cj0*sj5);
IkReal x9629=(cj1*x9623);
IkReal x9630=(cj1*x9624);
IkReal x9631=(sj1*x9623);
IkReal x9632=(sj1*x9624);
evalcond[0]=((((-1.0)*x9632))+x9629);
evalcond[1]=((((-1.0)*x9630))+(((-1.0)*x9631)));
evalcond[2]=(((r01*x9627))+(((-1.0)*r11*x9625))+((r00*x9626))+(((-1.0)*r10*x9628))+x9630+x9631);
evalcond[3]=((((0.02349986)*x9629))+(((0.16)*cj1))+(((0.16085006)*x9631))+(((0.16085006)*x9630))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-0.02349986)*x9632)));
evalcond[4]=((((3.5e-7)*r11*x9628))+(((-0.0008)*r00*x9626))+(((0.02349986)*x9631))+(((0.02349986)*x9630))+(((0.0008)*r10*x9628))+(((-0.0008)*r01*x9627))+(((-3.5e-7)*r10*x9625))+(((0.16085006)*x9632))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-3.5e-7)*r01*x9626))+(((3.5e-7)*r00*x9627))+(((0.0008)*r11*x9625))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.16085006)*x9629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9633=((3.5e-7)*cj5);
IkReal x9634=((0.0008)*cj5);
IkReal x9635=((0.0008)*sj5);
IkReal x9636=((3.5e-7)*sj5);
CheckValue<IkReal> x9637 = IKatan2WithCheck(IkReal((((r00*x9633))+(((-1.0)*r00*x9635))+(((-1.0)*r01*x9634))+(((-1.0)*r01*x9636))+(((-1.0)*px)))),IkReal((((r10*x9635))+(((-1.0)*r10*x9633))+py+((r11*x9634))+((r11*x9636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9637.valid){
continue;
}
CheckValue<IkReal> x9638=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*rxp0_2*sj4))+((rxp1_2*sj4*sj5))+(((-0.0008)*r22*sj4)))),-1);
if(!x9638.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x9637.value)+(((1.5707963267949)*(x9638.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x9639=IKcos(j0);
IkReal x9640=IKsin(j0);
IkReal x9641=(r11*sj4);
IkReal x9642=(r10*sj4);
IkReal x9643=(r01*sj4);
IkReal x9644=(r00*sj4);
IkReal x9645=((1.0)*x9639);
IkReal x9646=(sj5*x9639);
IkReal x9647=(cj5*x9640);
IkReal x9648=(cj5*x9639);
IkReal x9649=(sj5*x9640);
IkReal x9650=((1.0)*x9649);
evalcond[0]=(((r11*x9647))+((r00*x9646))+((r01*x9648))+((r10*x9649)));
evalcond[1]=(((x9641*x9646))+((x9644*x9647))+(((-1.0)*x9643*x9650))+(((-1.0)*cj5*x9642*x9645)));
evalcond[2]=((1.0)+((x9642*x9647))+((x9644*x9648))+(((-1.0)*sj5*x9643*x9645))+(((-1.0)*x9641*x9650)));
evalcond[3]=((((3.5e-7)*r00*x9648))+(((-1.0)*px*x9645))+(((-1.0)*py*x9640))+(((-0.0008)*r00*x9646))+(((-0.0008)*r10*x9649))+(((-0.0008)*r01*x9648))+(((-3.5e-7)*r11*x9649))+(((3.5e-7)*r10*x9647))+(((-3.5e-7)*r01*x9646))+(((-0.0008)*r11*x9647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x9651=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9651);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9651);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9652=((0.28199832)*pz);
IkReal x9653=(cj5*sj0);
IkReal x9654=(sj0*sj5);
IkReal x9655=(cj0*sj5);
IkReal x9656=(px*sj0);
IkReal x9657=(cj0*py);
IkReal x9658=((0.28199832)*x9657);
IkReal x9659=((1.93020072)*x9657);
IkReal x9660=(cj0*cj5*r11);
IkReal x9661=(cj0*cj5*r10);
IkReal x9662=((9.8699412e-8)*r00*x9653);
IkReal x9663=((9.8699412e-8)*r11*x9655);
IkReal x9664=((0.000225598656)*r10*x9655);
IkReal x9665=((0.000225598656)*x9660);
IkReal x9666=((0.001544160576)*x9660);
IkReal x9667=((6.75570252e-7)*r11*x9655);
IkReal x9668=((6.75570252e-7)*r00*x9653);
IkReal x9669=((0.001544160576)*r10*x9655);
IkReal x9670=((((0.001544160576)*r00*x9654))+(((0.001544160576)*r01*x9653))+(((6.75570252e-7)*x9661))+(((1.93020072)*x9656))+(((6.75570252e-7)*r01*x9654)));
IkReal x9671=(x9665+x9664+x9663+x9662+x9658);
IkReal x9672=((((9.8699412e-8)*r01*x9654))+(((1.93020072)*pz))+(((9.8699412e-8)*x9661))+(((0.28199832)*x9656))+(((0.000225598656)*r01*x9653))+(((0.000225598656)*r00*x9654)));
IkReal x9673=(x9667+x9666+x9669+x9668+x9652+x9659);
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((0.102943966020431)+(((-1.0)*x9672))+x9671)))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x9670))+x9673)))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-2.25190084e-7)*x9661))+(((-2.25190084e-7)*r01*x9654))+(((2.25190084e-7)*r11*x9655))+(((0.000514720192)*x9660))+(((2.25190084e-7)*r00*x9653))+(((0.000514720192)*r10*x9655))+(((-0.64340024)*x9656))+(((0.09399944)*pz))+(((-0.000514720192)*r00*x9654))+(((-0.000514720192)*r01*x9653))+(((0.64340024)*x9657)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((7.5199552e-5)*x9660))+(((-0.09399944)*x9656))+(((3.2899804e-8)*r00*x9653))+(((-3.2899804e-8)*r01*x9654))+(((0.09399944)*x9657))+(((-0.64340024)*pz))+(((7.5199552e-5)*r10*x9655))+(((-3.2899804e-8)*x9661))+(((-7.5199552e-5)*r00*x9654))+(((3.2899804e-8)*r11*x9655))+(((-7.5199552e-5)*r01*x9653)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-1.0)*x9670))+x9673)))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x9672))+x9671))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x9674=(r01*sj0);
IkReal x9675=((3.2899804e-8)*sj5);
IkReal x9676=((7.5199552e-5)*sj5);
IkReal x9677=(cj0*r10);
IkReal x9678=((7.5199552e-5)*cj5);
IkReal x9679=((0.000225598656)*cj5);
IkReal x9680=(cj0*r11);
IkReal x9681=(cj0*py);
IkReal x9682=(r00*sj0);
IkReal x9683=((9.8699412e-8)*sj5);
IkReal x9684=(px*sj0);
IkReal x9685=((0.000225598656)*sj5);
IkReal x9686=((9.8699412e-8)*cj5);
IkReal x9687=((3.2899804e-8)*cj5);
IkReal x9688=((0.28199832)*x9681);
IkReal x9689=((0.09399944)*x9681);
IkReal x9690=(x9682*x9686);
IkReal x9691=(x9680*x9683);
IkReal x9692=(x9677*x9685);
IkReal x9693=(x9679*x9680);
IkReal x9694=(x9675*x9680);
IkReal x9695=(x9678*x9680);
IkReal x9696=(x9682*x9687);
IkReal x9697=(x9676*x9677);
IkReal x9698=(x9696+x9697+x9694+x9695+x9689);
IkReal x9699=(x9692+x9693+x9690+x9691+x9688);
IkReal x9700=(((x9682*x9685))+((x9677*x9686))+((x9674*x9683))+(((0.28199832)*x9684))+(((1.93020072)*pz))+((x9674*x9679)));
IkReal x9701=((((0.09399944)*x9684))+((x9677*x9687))+((x9676*x9682))+((x9674*x9675))+((x9674*x9678))+(((0.64340024)*pz)));
op[0]=((-0.102943966020431)+(((-1.0)*x9701))+x9698);
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+(((-1.0)*x9700))+x9699);
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+(((-1.0)*x9700))+x9699);
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+(((-1.0)*x9701))+x9698);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x9702=((0.28199832)*pz);
IkReal x9703=((0.09399944)*pz);
IkReal x9704=(px*sj0);
IkReal x9705=((0.000514720192)*sj0);
IkReal x9706=(r00*sj5);
IkReal x9707=(cj5*r01);
IkReal x9708=((0.001544160576)*sj0);
IkReal x9709=(cj0*py);
IkReal x9710=((1.93020072)*x9709);
IkReal x9711=((0.64340024)*x9709);
IkReal x9712=(cj5*r00*sj0);
IkReal x9713=(cj0*r11*sj5);
IkReal x9714=(cj0*r10*sj5);
IkReal x9715=(cj0*cj5*r10);
IkReal x9716=(cj0*cj5*r11);
IkReal x9717=(r01*sj0*sj5);
IkReal x9718=((0.001544160576)*x9716);
IkReal x9719=((6.75570252e-7)*x9713);
IkReal x9720=((6.75570252e-7)*x9712);
IkReal x9721=((0.001544160576)*x9714);
IkReal x9722=((0.000514720192)*x9716);
IkReal x9723=((2.25190084e-7)*x9712);
IkReal x9724=((2.25190084e-7)*x9713);
IkReal x9725=((0.000514720192)*x9714);
IkReal x9726=(((x9706*x9708))+(((6.75570252e-7)*x9715))+(((6.75570252e-7)*x9717))+((x9707*x9708))+(((1.93020072)*x9704)));
IkReal x9727=(((x9705*x9706))+((x9705*x9707))+(((2.25190084e-7)*x9717))+(((2.25190084e-7)*x9715))+(((0.64340024)*x9704)));
IkReal x9728=(x9711+x9724+x9725+x9722+x9723+x9703);
IkReal x9729=(x9719+x9718+x9710+x9720+x9721+x9702);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x9729+(((-1.0)*x9726))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+x9728+(((-1.0)*x9727))))))+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.0150404058181848)+x9729+(((-1.0)*x9726))))))+x9728+(((-1.0)*x9727))+(((0.205887932040862)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x9730=cj1*cj1;
IkReal x9731=((6.21697001542928)*pz);
IkReal x9732=(cj1*sj1);
if( IKabs((((cj1*x9731))+(((-0.994715202468684)*x9730))+(((-4.78706691188054e-6)*x9732)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x9730))+(((-0.994715202468684)*x9732))+((sj1*x9731)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x9731))+(((-0.994715202468684)*x9730))+(((-4.78706691188054e-6)*x9732))))+IKsqr(((-4.78706691188054e-6)+(((4.78706691188054e-6)*x9730))+(((-0.994715202468684)*x9732))+((sj1*x9731))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x9731))+(((-0.994715202468684)*x9730))+(((-4.78706691188054e-6)*x9732))), ((-4.78706691188054e-6)+(((4.78706691188054e-6)*x9730))+(((-0.994715202468684)*x9732))+((sj1*x9731))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x9733=IKcos(j2);
IkReal x9734=IKsin(j2);
IkReal x9735=(cj0*cj5);
IkReal x9736=(sj0*sj5);
IkReal x9737=(cj5*sj0);
IkReal x9738=(cj0*sj5);
IkReal x9739=(cj1*x9733);
IkReal x9740=(cj1*x9734);
IkReal x9741=(sj1*x9733);
IkReal x9742=(sj1*x9734);
evalcond[0]=((((-1.0)*x9742))+x9739);
evalcond[1]=((((-1.0)*x9740))+(((-1.0)*x9741)));
evalcond[2]=((((-1.0)*r11*x9735))+x9740+x9741+((r01*x9737))+((r00*x9736))+(((-1.0)*r10*x9738)));
evalcond[3]=((((0.16)*cj1))+(((-0.02349986)*x9742))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x9741))+(((0.16085006)*x9740))+(((0.02349986)*x9739)));
evalcond[4]=((((3.5e-7)*r00*x9737))+(((0.02349986)*x9741))+(((0.02349986)*x9740))+(((-3.5e-7)*r10*x9735))+(((0.0008)*r11*x9735))+(((-0.16085006)*x9739))+(((3.5e-7)*r11*x9738))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.0008)*r10*x9738))+(((-3.5e-7)*r01*x9736))+(((0.16085006)*x9742))+(((-0.0008)*r01*x9737))+(((-1.0)*px*sj0))+(((-0.0008)*r00*x9736))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9743=(sj4*sj5);
IkReal x9744=((1.0)*cj5*sj4);
CheckValue<IkReal> x9745 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x9744))+((r11*x9743)))),IkReal(((((-1.0)*r00*x9744))+((r01*x9743)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9745.valid){
continue;
}
CheckValue<IkReal> x9746=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj4*cj4))))),-1);
if(!x9746.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x9745.value)+(((1.5707963267949)*(x9746.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x9747=IKcos(j0);
IkReal x9748=IKsin(j0);
IkReal x9749=(r11*sj4);
IkReal x9750=(r10*sj4);
IkReal x9751=(r01*sj4);
IkReal x9752=(r00*sj4);
IkReal x9753=((1.0)*x9747);
IkReal x9754=(sj5*x9747);
IkReal x9755=(cj5*x9748);
IkReal x9756=(cj5*x9747);
IkReal x9757=(sj5*x9748);
IkReal x9758=((1.0)*x9757);
evalcond[0]=(((r01*x9756))+((r10*x9757))+((r11*x9755))+((r00*x9754)));
evalcond[1]=((((-1.0)*cj5*x9750*x9753))+((x9752*x9755))+(((-1.0)*x9751*x9758))+((x9749*x9754)));
evalcond[2]=((1.0)+(((-1.0)*x9749*x9758))+(((-1.0)*sj5*x9751*x9753))+((x9752*x9756))+((x9750*x9755)));
evalcond[3]=((((-0.0008)*r11*x9755))+(((-3.5e-7)*r01*x9754))+(((3.5e-7)*r10*x9755))+(((-1.0)*px*x9753))+(((-0.0008)*r00*x9754))+(((-0.0008)*r10*x9757))+(((-0.0008)*r01*x9756))+(((-1.0)*py*x9748))+(((-3.5e-7)*r11*x9757))+(((3.5e-7)*r00*x9756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x9759=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9759);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9759);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9760=((0.28199832)*pz);
IkReal x9761=(cj5*sj0);
IkReal x9762=(sj0*sj5);
IkReal x9763=(cj0*sj5);
IkReal x9764=(px*sj0);
IkReal x9765=(cj0*py);
IkReal x9766=((0.28199832)*x9765);
IkReal x9767=((1.93020072)*x9765);
IkReal x9768=(cj0*cj5*r11);
IkReal x9769=(cj0*cj5*r10);
IkReal x9770=((9.8699412e-8)*r00*x9761);
IkReal x9771=((9.8699412e-8)*r11*x9763);
IkReal x9772=((0.000225598656)*r10*x9763);
IkReal x9773=((0.000225598656)*x9768);
IkReal x9774=((0.001544160576)*x9768);
IkReal x9775=((6.75570252e-7)*r11*x9763);
IkReal x9776=((6.75570252e-7)*r00*x9761);
IkReal x9777=((0.001544160576)*r10*x9763);
IkReal x9778=((((0.001544160576)*r01*x9761))+(((6.75570252e-7)*r01*x9762))+(((1.93020072)*x9764))+(((6.75570252e-7)*x9769))+(((0.001544160576)*r00*x9762)));
IkReal x9779=(x9766+x9771+x9770+x9773+x9772);
IkReal x9780=((((1.93020072)*pz))+(((9.8699412e-8)*x9769))+(((0.28199832)*x9764))+(((0.000225598656)*r01*x9761))+(((0.000225598656)*r00*x9762))+(((9.8699412e-8)*r01*x9762)));
IkReal x9781=(x9760+x9767+x9775+x9774+x9777+x9776);
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((2.25190084e-7)*r00*x9761))+(((-0.000514720192)*r01*x9761))+(((0.000514720192)*x9768))+(((-0.000514720192)*r00*x9762))+(((-0.64340024)*x9764))+(((0.09399944)*pz))+(((0.64340024)*x9765))+(((-2.25190084e-7)*x9769))+(((2.25190084e-7)*r11*x9763))+(((-2.25190084e-7)*r01*x9762))+(((0.000514720192)*r10*x9763)))))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+x9781+(((-1.0)*x9778)))))))+(((1.05946235125937)*(IKabs(((0.102943966020431)+x9779+(((-1.0)*x9780)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-7.5199552e-5)*r01*x9761))+(((-7.5199552e-5)*r00*x9762))+(((3.2899804e-8)*r11*x9763))+(((-0.09399944)*x9764))+(((-3.2899804e-8)*r01*x9762))+(((-3.2899804e-8)*x9769))+(((7.5199552e-5)*x9768))+(((0.09399944)*x9765))+(((-0.64340024)*pz))+(((3.2899804e-8)*r00*x9761))+(((7.5199552e-5)*r10*x9763)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+x9779+(((-1.0)*x9780)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+x9781+(((-1.0)*x9778))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x9782=(r01*sj0);
IkReal x9783=((3.2899804e-8)*sj5);
IkReal x9784=((7.5199552e-5)*sj5);
IkReal x9785=(cj0*r10);
IkReal x9786=((7.5199552e-5)*cj5);
IkReal x9787=((0.000225598656)*cj5);
IkReal x9788=(cj0*r11);
IkReal x9789=(cj0*py);
IkReal x9790=(r00*sj0);
IkReal x9791=((9.8699412e-8)*sj5);
IkReal x9792=(px*sj0);
IkReal x9793=((0.000225598656)*sj5);
IkReal x9794=((9.8699412e-8)*cj5);
IkReal x9795=((3.2899804e-8)*cj5);
IkReal x9796=((0.28199832)*x9789);
IkReal x9797=((0.09399944)*x9789);
IkReal x9798=(x9790*x9794);
IkReal x9799=(x9788*x9791);
IkReal x9800=(x9785*x9793);
IkReal x9801=(x9787*x9788);
IkReal x9802=(x9783*x9788);
IkReal x9803=(x9786*x9788);
IkReal x9804=(x9790*x9795);
IkReal x9805=(x9784*x9785);
IkReal x9806=(x9797+x9805+x9804+x9803+x9802);
IkReal x9807=(x9796+x9799+x9798+x9801+x9800);
IkReal x9808=((((0.28199832)*x9792))+((x9782*x9787))+(((1.93020072)*pz))+((x9790*x9793))+((x9782*x9791))+((x9785*x9794)));
IkReal x9809=(((x9782*x9783))+((x9782*x9786))+((x9784*x9790))+(((0.09399944)*x9792))+(((0.64340024)*pz))+((x9785*x9795)));
op[0]=((-0.102943966020431)+(((-1.0)*x9809))+x9806);
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+(((-1.0)*x9808))+x9807);
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+(((-1.0)*x9808))+x9807);
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+(((-1.0)*x9809))+x9806);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x9810=((0.28199832)*pz);
IkReal x9811=((0.09399944)*pz);
IkReal x9812=(px*sj0);
IkReal x9813=((0.000514720192)*sj0);
IkReal x9814=(r00*sj5);
IkReal x9815=(cj5*r01);
IkReal x9816=((0.001544160576)*sj0);
IkReal x9817=(cj0*py);
IkReal x9818=((1.93020072)*x9817);
IkReal x9819=((0.64340024)*x9817);
IkReal x9820=(cj5*r00*sj0);
IkReal x9821=(cj0*r11*sj5);
IkReal x9822=(cj0*r10*sj5);
IkReal x9823=(cj0*cj5*r10);
IkReal x9824=(cj0*cj5*r11);
IkReal x9825=(r01*sj0*sj5);
IkReal x9826=((0.001544160576)*x9824);
IkReal x9827=((6.75570252e-7)*x9821);
IkReal x9828=((6.75570252e-7)*x9820);
IkReal x9829=((0.001544160576)*x9822);
IkReal x9830=((0.000514720192)*x9824);
IkReal x9831=((2.25190084e-7)*x9820);
IkReal x9832=((2.25190084e-7)*x9821);
IkReal x9833=((0.000514720192)*x9822);
IkReal x9834=((((6.75570252e-7)*x9823))+(((6.75570252e-7)*x9825))+((x9815*x9816))+(((1.93020072)*x9812))+((x9814*x9816)));
IkReal x9835=((((2.25190084e-7)*x9825))+(((2.25190084e-7)*x9823))+(((0.64340024)*x9812))+((x9813*x9815))+((x9813*x9814)));
IkReal x9836=(x9819+x9811+x9832+x9833+x9830+x9831);
IkReal x9837=(x9827+x9826+x9829+x9828+x9818+x9810);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+(((-1.0)*x9835))+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x9834))+x9837))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x9835))+x9836))))+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x9834))+x9837))))+(((0.205887932040862)*htj1))+x9836);
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x9838=cj1*cj1;
IkReal x9839=((6.21697001542928)*pz);
IkReal x9840=(cj1*sj1);
if( IKabs(((((-0.994715202468684)*x9838))+(((-4.78706691188054e-6)*x9840))+((cj1*x9839)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((-0.994715202468684)*x9840))+((sj1*x9839))+(((4.78706691188054e-6)*x9838)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.994715202468684)*x9838))+(((-4.78706691188054e-6)*x9840))+((cj1*x9839))))+IKsqr(((-4.78706691188054e-6)+(((-0.994715202468684)*x9840))+((sj1*x9839))+(((4.78706691188054e-6)*x9838))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.994715202468684)*x9838))+(((-4.78706691188054e-6)*x9840))+((cj1*x9839))), ((-4.78706691188054e-6)+(((-0.994715202468684)*x9840))+((sj1*x9839))+(((4.78706691188054e-6)*x9838))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x9841=IKcos(j2);
IkReal x9842=IKsin(j2);
IkReal x9843=(cj0*cj5);
IkReal x9844=(sj0*sj5);
IkReal x9845=(cj5*sj0);
IkReal x9846=(cj0*sj5);
IkReal x9847=(cj1*x9841);
IkReal x9848=(cj1*x9842);
IkReal x9849=(sj1*x9841);
IkReal x9850=(sj1*x9842);
evalcond[0]=((((-1.0)*x9850))+x9847);
evalcond[1]=((((-1.0)*x9849))+(((-1.0)*x9848)));
evalcond[2]=(((r01*x9845))+((r00*x9844))+(((-1.0)*r11*x9843))+x9849+x9848+(((-1.0)*r10*x9846)));
evalcond[3]=((((0.16)*cj1))+(((-0.02349986)*x9850))+(((-1.0)*pz))+(((0.02349986)*x9847))+(((7.7e-7)*sj1))+(((0.16085006)*x9848))+(((0.16085006)*x9849)));
evalcond[4]=((((0.16085006)*x9850))+(((-3.5e-7)*r01*x9844))+(((-0.16085006)*x9847))+(((-3.5e-7)*r10*x9843))+(((-0.0008)*r00*x9844))+(((0.0008)*r10*x9846))+(((3.5e-7)*r00*x9845))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.0008)*r11*x9843))+(((-0.0008)*r01*x9845))+(((0.02349986)*x9848))+(((0.02349986)*x9849))+(((-1.0)*px*sj0))+((cj0*py))+(((3.5e-7)*r11*x9846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x9851 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9851.valid){
continue;
}
CheckValue<IkReal> x9852=IKPowWithIntegerCheck(IKsign((r22*sj4)),-1);
if(!x9852.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x9851.value)+(((1.5707963267949)*(x9852.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x9853=IKcos(j0);
IkReal x9854=IKsin(j0);
IkReal x9855=(r11*sj4);
IkReal x9856=(r10*sj4);
IkReal x9857=(r01*sj4);
IkReal x9858=(r00*sj4);
IkReal x9859=((1.0)*x9853);
IkReal x9860=(sj5*x9853);
IkReal x9861=(cj5*x9854);
IkReal x9862=(cj5*x9853);
IkReal x9863=(sj5*x9854);
IkReal x9864=((1.0)*x9863);
evalcond[0]=(((r00*x9860))+((r01*x9862))+((r11*x9861))+((r10*x9863)));
evalcond[1]=((((-1.0)*x9857*x9864))+((x9855*x9860))+((x9858*x9861))+(((-1.0)*cj5*x9856*x9859)));
evalcond[2]=((1.0)+(((-1.0)*x9855*x9864))+(((-1.0)*sj5*x9857*x9859))+((x9858*x9862))+((x9856*x9861)));
evalcond[3]=((((-0.0008)*r11*x9861))+(((-0.0008)*r00*x9860))+(((-3.5e-7)*r11*x9863))+(((-0.0008)*r10*x9863))+(((-1.0)*py*x9854))+(((3.5e-7)*r10*x9861))+(((3.5e-7)*r00*x9862))+(((-1.0)*px*x9859))+(((-0.0008)*r01*x9862))+(((-3.5e-7)*r01*x9860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x9865=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9865);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9865);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9866=((0.28199832)*pz);
IkReal x9867=(cj5*sj0);
IkReal x9868=(sj0*sj5);
IkReal x9869=(cj0*sj5);
IkReal x9870=(px*sj0);
IkReal x9871=(cj0*py);
IkReal x9872=((0.28199832)*x9871);
IkReal x9873=((1.93020072)*x9871);
IkReal x9874=(cj0*cj5*r11);
IkReal x9875=(cj0*cj5*r10);
IkReal x9876=((9.8699412e-8)*r00*x9867);
IkReal x9877=((9.8699412e-8)*r11*x9869);
IkReal x9878=((0.000225598656)*r10*x9869);
IkReal x9879=((0.000225598656)*x9874);
IkReal x9880=((0.001544160576)*x9874);
IkReal x9881=((6.75570252e-7)*r11*x9869);
IkReal x9882=((6.75570252e-7)*r00*x9867);
IkReal x9883=((0.001544160576)*r10*x9869);
IkReal x9884=((((6.75570252e-7)*r01*x9868))+(((1.93020072)*x9870))+(((0.001544160576)*r00*x9868))+(((0.001544160576)*r01*x9867))+(((6.75570252e-7)*x9875)));
IkReal x9885=(x9878+x9879+x9876+x9877+x9872);
IkReal x9886=((((0.000225598656)*r01*x9867))+(((1.93020072)*pz))+(((0.28199832)*x9870))+(((0.000225598656)*r00*x9868))+(((9.8699412e-8)*r01*x9868))+(((9.8699412e-8)*x9875)));
IkReal x9887=(x9866+x9883+x9882+x9881+x9880+x9873);
j1eval[0]=((1.0)+(((1.05946235125937)*(IKabs(((0.102943966020431)+(((-1.0)*x9886))+x9885)))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-2.25190084e-7)*x9875))+(((2.25190084e-7)*r11*x9869))+(((0.000514720192)*r10*x9869))+(((-0.000514720192)*r01*x9867))+(((2.25190084e-7)*r00*x9867))+(((-0.000514720192)*r00*x9868))+(((0.09399944)*pz))+(((-2.25190084e-7)*r01*x9868))+(((-0.64340024)*x9870))+(((0.000514720192)*x9874))+(((0.64340024)*x9871)))))))+(((1.05946235125937)*(IKabs(((-0.0150404058181848)+(((-1.0)*x9884))+x9887)))))+(((1.05946235125937)*(IKabs(((0.0150404058181848)+(((-1.0)*x9884))+x9887)))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((0.09399944)*x9871))+(((-0.09399944)*x9870))+(((7.5199552e-5)*x9874))+(((7.5199552e-5)*r10*x9869))+(((3.2899804e-8)*r11*x9869))+(((-0.64340024)*pz))+(((-3.2899804e-8)*r01*x9868))+(((-7.5199552e-5)*r01*x9867))+(((-7.5199552e-5)*r00*x9868))+(((-3.2899804e-8)*x9875))+(((3.2899804e-8)*r00*x9867)))))))+(((1.05946235125937)*(IKabs(((-0.102943966020431)+(((-1.0)*x9886))+x9885))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x9888=(r01*sj0);
IkReal x9889=((3.2899804e-8)*sj5);
IkReal x9890=((7.5199552e-5)*sj5);
IkReal x9891=(cj0*r10);
IkReal x9892=((7.5199552e-5)*cj5);
IkReal x9893=((0.000225598656)*cj5);
IkReal x9894=(cj0*r11);
IkReal x9895=(cj0*py);
IkReal x9896=(r00*sj0);
IkReal x9897=((9.8699412e-8)*sj5);
IkReal x9898=(px*sj0);
IkReal x9899=((0.000225598656)*sj5);
IkReal x9900=((9.8699412e-8)*cj5);
IkReal x9901=((3.2899804e-8)*cj5);
IkReal x9902=((0.28199832)*x9895);
IkReal x9903=((0.09399944)*x9895);
IkReal x9904=(x9896*x9900);
IkReal x9905=(x9894*x9897);
IkReal x9906=(x9891*x9899);
IkReal x9907=(x9893*x9894);
IkReal x9908=(x9889*x9894);
IkReal x9909=(x9892*x9894);
IkReal x9910=(x9896*x9901);
IkReal x9911=(x9890*x9891);
IkReal x9912=(x9903+x9908+x9909+x9911+x9910);
IkReal x9913=(x9906+x9907+x9904+x9905+x9902);
IkReal x9914=((((1.93020072)*pz))+((x9896*x9899))+(((0.28199832)*x9898))+((x9891*x9900))+((x9888*x9897))+((x9888*x9893)));
IkReal x9915=(((x9890*x9896))+((x9888*x9889))+(((0.09399944)*x9898))+(((0.64340024)*pz))+((x9891*x9901))+((x9888*x9892)));
op[0]=((-0.102943966020431)+(((-1.0)*x9915))+x9912);
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+(((-1.0)*x9914))+x9913);
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+(((-1.0)*x9914))+x9913);
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+(((-1.0)*x9915))+x9912);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x9916=((0.28199832)*pz);
IkReal x9917=((0.09399944)*pz);
IkReal x9918=(px*sj0);
IkReal x9919=((0.000514720192)*sj0);
IkReal x9920=(r00*sj5);
IkReal x9921=(cj5*r01);
IkReal x9922=((0.001544160576)*sj0);
IkReal x9923=(cj0*py);
IkReal x9924=((1.93020072)*x9923);
IkReal x9925=((0.64340024)*x9923);
IkReal x9926=(cj5*r00*sj0);
IkReal x9927=(cj0*r11*sj5);
IkReal x9928=(cj0*r10*sj5);
IkReal x9929=(cj0*cj5*r10);
IkReal x9930=(cj0*cj5*r11);
IkReal x9931=(r01*sj0*sj5);
IkReal x9932=((0.001544160576)*x9930);
IkReal x9933=((6.75570252e-7)*x9927);
IkReal x9934=((6.75570252e-7)*x9926);
IkReal x9935=((0.001544160576)*x9928);
IkReal x9936=((0.000514720192)*x9930);
IkReal x9937=((2.25190084e-7)*x9926);
IkReal x9938=((2.25190084e-7)*x9927);
IkReal x9939=((0.000514720192)*x9928);
IkReal x9940=(((x9921*x9922))+((x9920*x9922))+(((1.93020072)*x9918))+(((6.75570252e-7)*x9931))+(((6.75570252e-7)*x9929)));
IkReal x9941=((((2.25190084e-7)*x9929))+(((2.25190084e-7)*x9931))+(((0.64340024)*x9918))+((x9919*x9920))+((x9919*x9921)));
IkReal x9942=(x9917+x9925+x9939+x9938+x9937+x9936);
IkReal x9943=(x9916+x9924+x9933+x9932+x9935+x9934);
j1evalpoly[0]=((-0.0150404058181848)+(((0.411775864081725)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x9940))+x9943))))+(((0.205887932040862)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.0150404058181848)+(((-1.0)*x9941))+x9942))))+(((htj1*htj1)*(((-0.0150404058181848)+(((-1.0)*x9940))+x9943))))+(((-1.0)*x9941))+x9942+(((0.205887932040862)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x9944=cj1*cj1;
IkReal x9945=((6.21697001542928)*pz);
IkReal x9946=(cj1*sj1);
if( IKabs(((((-0.994715202468684)*x9944))+(((-4.78706691188054e-6)*x9946))+((cj1*x9945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.78706691188054e-6)+(((-0.994715202468684)*x9946))+((sj1*x9945))+(((4.78706691188054e-6)*x9944)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.994715202468684)*x9944))+(((-4.78706691188054e-6)*x9946))+((cj1*x9945))))+IKsqr(((-4.78706691188054e-6)+(((-0.994715202468684)*x9946))+((sj1*x9945))+(((4.78706691188054e-6)*x9944))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.994715202468684)*x9944))+(((-4.78706691188054e-6)*x9946))+((cj1*x9945))), ((-4.78706691188054e-6)+(((-0.994715202468684)*x9946))+((sj1*x9945))+(((4.78706691188054e-6)*x9944))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x9947=IKcos(j2);
IkReal x9948=IKsin(j2);
IkReal x9949=(cj0*cj5);
IkReal x9950=(sj0*sj5);
IkReal x9951=(cj5*sj0);
IkReal x9952=(cj0*sj5);
IkReal x9953=(cj1*x9947);
IkReal x9954=(cj1*x9948);
IkReal x9955=(sj1*x9947);
IkReal x9956=(sj1*x9948);
evalcond[0]=((((-1.0)*x9956))+x9953);
evalcond[1]=((((-1.0)*x9954))+(((-1.0)*x9955)));
evalcond[2]=((((-1.0)*r11*x9949))+x9955+x9954+(((-1.0)*r10*x9952))+((r00*x9950))+((r01*x9951)));
evalcond[3]=((((0.16)*cj1))+(((0.16085006)*x9955))+(((0.16085006)*x9954))+(((-0.02349986)*x9956))+(((0.02349986)*x9953))+(((-1.0)*pz))+(((7.7e-7)*sj1)));
evalcond[4]=((((3.5e-7)*r00*x9951))+(((-3.5e-7)*r10*x9949))+(((-0.0008)*r00*x9950))+(((0.0008)*r10*x9952))+(((0.16085006)*x9956))+(((0.02349986)*x9955))+(((0.02349986)*x9954))+(((-3.5e-7)*r01*x9950))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.0008)*r11*x9949))+(((-1.0)*px*sj0))+((cj0*py))+(((3.5e-7)*r11*x9952))+(((-0.0008)*r01*x9951))+(((-0.16085006)*x9953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9957=((1.0)*cj3);
if( IKabs(((((-1.0)*cj5*r11*x9957))+(((-1.0)*r10*sj5*x9957)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj5*x9957))+(((-1.0)*cj5*r01*x9957)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r11*x9957))+(((-1.0)*r10*sj5*x9957))))+IKsqr(((((-1.0)*r00*sj5*x9957))+(((-1.0)*cj5*r01*x9957))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj5*r11*x9957))+(((-1.0)*r10*sj5*x9957))), ((((-1.0)*r00*sj5*x9957))+(((-1.0)*cj5*r01*x9957))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x9958=IKcos(j0);
IkReal x9959=IKsin(j0);
IkReal x9960=((1.0)*x9958);
IkReal x9961=(sj5*x9959);
IkReal x9962=(cj5*x9959);
IkReal x9963=(sj5*x9958);
IkReal x9964=(cj5*x9958);
evalcond[0]=(cj3+((r10*x9961))+((r00*x9963))+((r01*x9964))+((r11*x9962)));
evalcond[1]=(((r00*x9961))+((r01*x9962))+(((-1.0)*cj5*r11*x9960))+(((-1.0)*r10*sj5*x9960)));
evalcond[2]=(((r10*x9962))+((r00*x9964))+(((-1.0)*r11*x9961))+(((-1.0)*r01*sj5*x9960)));
evalcond[3]=((((-3.5e-7)*r11*x9961))+(((-1.0)*px*x9960))+(((-0.0008)*r00*x9963))+(((-0.0008)*r11*x9962))+(((3.5e-7)*r10*x9962))+(((-0.0008)*r01*x9964))+(((-3.5e-7)*r01*x9963))+(((-0.0008)*r10*x9961))+(((-1.0)*py*x9959))+(((3.5e-7)*r00*x9964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[1];
IkReal x9965=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9965);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9965);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal x9966=cj3*cj3;
IkReal x9967=((0.35800168)*r22);
IkReal x9968=(cj3*r22);
IkReal x9969=(cj3*pz);
IkReal x9970=((12.0)*x9969);
IkReal x9971=(pz*x9966);
IkReal x9972=((12.0)*x9971);
j2eval[0]=((((40584.4155844156)*(IKabs((x9972+((cj3*x9967)))))))+(((40584.4155844156)*(IKabs((x9970+x9967)))))+(IKabs(x9968))+(IKabs(r22))+(((40584.4155844156)*(IKabs(((((-0.92199832)*x9968))+x9972)))))+(((40584.4155844156)*(IKabs((x9970+(((-0.92199832)*r22)))))))+(((40584.4155844156)*(IKabs(((((0.54600056)*r22))+(((4.0)*x9969)))))))+(((40584.4155844156)*(IKabs(((((4.0)*x9971))+(((0.54600056)*x9968))))))));
if( IKabs(j2eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j2evalpoly[1];
IkReal x9973=((6.16e-6)*r22);
IkReal x9974=(cj3*pz);
IkReal x9975=((12.0)*x9974);
IkReal x9976=((4.0)*x9974);
op[0]=((((0.54600056)*r22))+x9976);
op[1]=x9973;
op[2]=((((0.35800168)*r22))+x9975);
op[3]=((1.232e-5)*r22);
op[4]=(x9975+(((-0.92199832)*r22)));
op[5]=x9973;
op[6]=(x9976+(((-0.73399944)*r22)));
polyroots6(op,zeror,numroots);
IkReal j2array[6], cj2array[6], sj2array[6], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[6]={true,true,true,true,true,true};
_nj2 = 6;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

IkReal x9977=cj3*cj3;
IkReal x9978=(cj3*r22);
IkReal x9979=(pz*x9977);
IkReal x9980=((4.0)*x9979);
IkReal x9981=((12.0)*x9979);
j2evalpoly[0]=((((1.232e-5)*x9978*(htj2*htj2*htj2)))+(((6.16e-6)*htj2*x9978))+(((-0.73399944)*x9978))+(((htj2*htj2*htj2*htj2)*((x9981+(((0.35800168)*x9978))))))+(((6.16e-6)*x9978*(htj2*htj2*htj2*htj2*htj2)))+x9980+(((htj2*htj2)*((x9981+(((-0.92199832)*x9978))))))+(((htj2*htj2*htj2*htj2*htj2*htj2)*(((((0.54600056)*x9978))+x9980)))));
if( IKabs(j2evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x9982=((1.0)*cj2);
IkReal x9983=(sj2*sj5);
IkReal x9984=(cj0*r11);
IkReal x9985=(r01*sj0);
IkReal x9986=(cj5*r00*sj0);
IkReal x9987=(cj0*cj5*r10);
if( IKabs(((((-1.0)*x9983*x9985))+(((-1.0)*sj2*x9987))+((x9983*x9984))+((sj2*x9986)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*x9987))+((cj2*sj5*x9985))+(((-1.0)*sj5*x9982*x9984))+(((-1.0)*x9982*x9986)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x9983*x9985))+(((-1.0)*sj2*x9987))+((x9983*x9984))+((sj2*x9986))))+IKsqr((((cj2*x9987))+((cj2*sj5*x9985))+(((-1.0)*sj5*x9982*x9984))+(((-1.0)*x9982*x9986))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x9983*x9985))+(((-1.0)*sj2*x9987))+((x9983*x9984))+((sj2*x9986))), (((cj2*x9987))+((cj2*sj5*x9985))+(((-1.0)*sj5*x9982*x9984))+(((-1.0)*x9982*x9986))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x9988=IKsin(j1);
IkReal x9989=IKcos(j1);
IkReal x9990=((0.16085006)*sj2);
IkReal x9991=((1.0)*cj3);
IkReal x9992=(cj0*cj5);
IkReal x9993=((1.0)*sj0);
IkReal x9994=(r01*sj5);
IkReal x9995=((3.5e-7)*sj0);
IkReal x9996=(r00*sj0);
IkReal x9997=((0.0008)*sj5);
IkReal x9998=(cj2*x9989);
IkReal x9999=(sj2*x9989);
IkReal x10000=(cj2*x9988);
IkReal x10001=(sj2*x9988);
IkReal x10002=(cj0*r11*sj5);
evalcond[0]=((((-1.0)*x10000))+(((-1.0)*x9999)));
evalcond[1]=((((-1.0)*x9991*x9998))+((cj3*x10001))+r22);
evalcond[2]=((((-1.0)*x9991*x9999))+(((-1.0)*x10000*x9991)));
evalcond[3]=((((-1.0)*x9993*x9994))+(((-1.0)*x10001))+x10002+(((-1.0)*r10*x9992))+((cj5*x9996))+x9998);
evalcond[4]=((((0.02349986)*x9998))+(((0.16)*x9989))+(((-0.02349986)*x10001))+((x9989*x9990))+(((-1.0)*pz))+(((0.16085006)*x10000))+(((7.7e-7)*x9988)));
evalcond[5]=((((0.02349986)*x9999))+(((3.5e-7)*x10002))+(((0.16)*x9988))+(((-1.0)*px*x9993))+(((0.0008)*r11*x9992))+(((-1.0)*x9994*x9995))+(((-0.16085006)*x9998))+((cj0*r10*x9997))+(((-7.7e-7)*x9989))+((x9988*x9990))+(((0.02349986)*x10000))+(((-0.0008)*cj5*r01*sj0))+(((-1.0)*x9996*x9997))+(((-3.5e-7)*r10*x9992))+((cj5*r00*x9995))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10003=((1.0)*cj3);
if( IKabs(((((-1.0)*r10*sj5*x10003))+(((-1.0)*cj5*r11*x10003)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj5*x10003))+(((-1.0)*cj5*r01*x10003)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*sj5*x10003))+(((-1.0)*cj5*r11*x10003))))+IKsqr(((((-1.0)*r00*sj5*x10003))+(((-1.0)*cj5*r01*x10003))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*sj5*x10003))+(((-1.0)*cj5*r11*x10003))), ((((-1.0)*r00*sj5*x10003))+(((-1.0)*cj5*r01*x10003))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x10004=IKcos(j0);
IkReal x10005=IKsin(j0);
IkReal x10006=((0.0008)*cj5);
IkReal x10007=(r00*sj5);
IkReal x10008=(cj5*r00);
IkReal x10009=(r10*sj5);
IkReal x10010=((3.5e-7)*sj5);
IkReal x10011=((1.0)*x10004);
IkReal x10012=(r11*x10005);
IkReal x10013=(cj5*x10005);
IkReal x10014=(r01*x10004);
evalcond[0]=(cj3+((x10004*x10007))+((x10005*x10009))+((cj5*x10012))+((cj5*x10014)));
evalcond[1]=((((-1.0)*x10009*x10011))+((x10005*x10007))+((r01*x10013))+(((-1.0)*cj5*r11*x10011)));
evalcond[2]=((((-1.0)*r10*x10013))+(((-1.0)*x10008*x10011))+((sj5*x10012))+((sj5*x10014)));
evalcond[3]=((((-0.0008)*x10005*x10009))+(((-0.0008)*x10004*x10007))+(((-1.0)*px*x10011))+(((-1.0)*x10010*x10012))+(((-1.0)*x10010*x10014))+(((-1.0)*py*x10005))+(((-1.0)*x10006*x10014))+(((-1.0)*x10006*x10012))+(((3.5e-7)*r10*x10013))+(((3.5e-7)*x10004*x10008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x10015=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10015);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10015);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x10016=((0.102943966020431)*cj3);
IkReal x10017=((3.2899804e-8)*sj0);
IkReal x10018=(r01*sj5);
IkReal x10019=((1.93020072)*pz);
IkReal x10020=(cj3*cj5);
IkReal x10021=(cj0*r10);
IkReal x10022=((7.5199552e-5)*sj5);
IkReal x10023=((0.28199832)*cj3);
IkReal x10024=(px*sj0);
IkReal x10025=(cj0*py);
IkReal x10026=((0.09399944)*cj3);
IkReal x10027=(cj3*sj5);
IkReal x10028=(r00*sj0);
IkReal x10029=(cj0*r11);
IkReal x10030=((9.8699412e-8)*sj0);
IkReal x10031=(r01*sj0);
IkReal x10032=((0.000225598656)*sj5);
IkReal x10033=((0.64340024)*pz);
IkReal x10034=((9.8699412e-8)*cj5);
IkReal x10035=((0.28199832)*x10025);
IkReal x10036=(cj3*x10019);
IkReal x10037=(cj5*x10031);
IkReal x10038=(x10028*x10034);
IkReal x10039=((9.8699412e-8)*sj5*x10029);
IkReal x10040=(x10021*x10032);
IkReal x10041=((0.000225598656)*cj5*x10029);
IkReal x10042=(x10023*x10025);
IkReal x10043=(x10023*x10024);
IkReal x10044=((9.8699412e-8)*x10027*x10029);
IkReal x10045=((0.000225598656)*x10020*x10029);
IkReal x10046=((9.8699412e-8)*x10020*x10028);
IkReal x10047=((0.000225598656)*x10021*x10027);
IkReal x10048=((9.8699412e-8)*x10020*x10021);
IkReal x10049=((0.000225598656)*x10027*x10028);
IkReal x10050=(cj3*x10018*x10030);
IkReal x10051=((0.000225598656)*x10020*x10031);
IkReal x10052=(x10040+x10041+x10039+x10038+x10035);
IkReal x10053=(((x10021*x10034))+((x10018*x10030))+((x10028*x10032))+x10019+(((0.000225598656)*x10037))+(((0.28199832)*x10024)));
IkReal x10054=(x10042+x10046+x10047+x10044+x10045);
IkReal x10055=(x10051+x10050+x10048+x10049+x10043+x10036);
j1eval[0]=((1.0)+(((8.31094596190131)*(IKabs(((((-1.0)*x10055))+x10054+(((-1.0)*x10016)))))))+(((8.31094596190131)*(IKabs(((-0.102943966020431)+(((-1.0)*x10053))+x10052)))))+(IKabs(cj3))+(((8.31094596190131)*(IKabs(((((-1.0)*x10055))+x10054+x10016)))))+(((8.31094596190131)*(IKabs(((0.102943966020431)+(((-1.0)*x10053))+x10052)))))+(((8.31094596190131)*(IKabs((((x10025*x10026))+(((-1.0)*cj3*x10022*x10028))+(((-1.0)*cj3*x10017*x10018))+((r00*x10017*x10020))+(((-3.2899804e-8)*x10020*x10021))+(((-7.5199552e-5)*x10020*x10031))+(((-1.0)*x10024*x10026))+((cj3*x10021*x10022))+(((3.2899804e-8)*x10027*x10029))+(((7.5199552e-5)*x10020*x10029))+(((-1.0)*cj3*x10033))+(((-1.0)*x10016)))))))+(((8.31094596190131)*(IKabs(((-0.102943966020431)+(((-0.09399944)*x10024))+((x10021*x10022))+(((-7.5199552e-5)*x10037))+(((3.2899804e-8)*sj5*x10029))+(((0.09399944)*x10025))+((cj5*r00*x10017))+(((-1.0)*x10022*x10028))+(((-1.0)*x10033))+(((-1.0)*x10017*x10018))+(((7.5199552e-5)*cj5*x10029))+(((-3.2899804e-8)*cj5*x10021))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x10056=(r01*sj0);
IkReal x10057=((3.2899804e-8)*sj5);
IkReal x10058=((7.5199552e-5)*sj5);
IkReal x10059=(cj0*r10);
IkReal x10060=((7.5199552e-5)*cj5);
IkReal x10061=((0.000225598656)*cj5);
IkReal x10062=(cj0*r11);
IkReal x10063=(cj0*py);
IkReal x10064=(r00*sj0);
IkReal x10065=((9.8699412e-8)*sj5);
IkReal x10066=(px*sj0);
IkReal x10067=((0.000225598656)*sj5);
IkReal x10068=((9.8699412e-8)*cj5);
IkReal x10069=((3.2899804e-8)*cj5);
IkReal x10070=((0.28199832)*x10063);
IkReal x10071=((0.09399944)*x10063);
IkReal x10072=(x10064*x10068);
IkReal x10073=(x10062*x10065);
IkReal x10074=(x10059*x10067);
IkReal x10075=(x10061*x10062);
IkReal x10076=(x10057*x10062);
IkReal x10077=(x10060*x10062);
IkReal x10078=(x10064*x10069);
IkReal x10079=(x10058*x10059);
IkReal x10080=(x10071+x10077+x10076+x10079+x10078);
IkReal x10081=(x10073+x10072+x10070+x10075+x10074);
IkReal x10082=(((x10064*x10067))+(((1.93020072)*pz))+(((0.28199832)*x10066))+((x10059*x10068))+((x10056*x10061))+((x10056*x10065)));
IkReal x10083=((((0.09399944)*x10066))+(((0.64340024)*pz))+((x10059*x10069))+((x10058*x10064))+((x10056*x10060))+((x10056*x10057)));
op[0]=((-0.102943966020431)+(((-1.0)*x10083))+x10080);
op[1]=0.0300808116363696;
op[2]=((-0.102943966020431)+(((-1.0)*x10082))+x10081);
op[3]=0.0601616232727392;
op[4]=((0.102943966020431)+(((-1.0)*x10082))+x10081);
op[5]=0.0300808116363696;
op[6]=((0.102943966020431)+(((-1.0)*x10083))+x10080);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x10084=((0.102943966020431)*cj3);
IkReal x10085=(cj3*pz);
IkReal x10086=(cj3*sj0);
IkReal x10087=(cj5*r00);
IkReal x10088=(cj0*cj3);
IkReal x10089=((0.000225598656)*sj5);
IkReal x10090=(cj5*r10);
IkReal x10091=(r01*sj5);
IkReal x10092=((0.0300808116363696)*cj3);
IkReal x10093=((7.5199552e-5)*cj5);
IkReal x10094=((7.5199552e-5)*sj5);
IkReal x10095=((0.000225598656)*cj5);
IkReal x10096=(r11*sj5);
IkReal x10097=((1.93020072)*x10085);
IkReal x10098=((0.64340024)*x10085);
IkReal x10099=((0.28199832)*py*x10088);
IkReal x10100=((0.28199832)*px*x10086);
IkReal x10101=((0.09399944)*py*x10088);
IkReal x10102=((0.09399944)*px*x10086);
IkReal x10103=(r11*x10088*x10093);
IkReal x10104=((9.8699412e-8)*x10088*x10096);
IkReal x10105=(r11*x10088*x10095);
IkReal x10106=((9.8699412e-8)*x10086*x10087);
IkReal x10107=(r10*x10088*x10089);
IkReal x10108=((9.8699412e-8)*x10088*x10090);
IkReal x10109=(r00*x10086*x10089);
IkReal x10110=((9.8699412e-8)*x10086*x10091);
IkReal x10111=(r01*x10086*x10095);
IkReal x10112=((3.2899804e-8)*x10086*x10087);
IkReal x10113=((3.2899804e-8)*x10088*x10096);
IkReal x10114=(r10*x10088*x10094);
IkReal x10115=((3.2899804e-8)*x10086*x10091);
IkReal x10116=(r01*x10086*x10093);
IkReal x10117=(r00*x10086*x10094);
IkReal x10118=((3.2899804e-8)*x10088*x10090);
IkReal x10119=(x10103+x10101+x10114+x10112+x10113);
IkReal x10120=(x10107+x10106+x10105+x10104+x10099);
IkReal x10121=(x10102+x10118+x10115+x10116+x10117+x10098);
IkReal x10122=(x10109+x10108+x10100+x10110+x10111+x10097);
j1evalpoly[0]=((((0.0601616232727392)*cj3*(htj1*htj1*htj1)))+((x10092*(htj1*htj1*htj1*htj1*htj1)))+x10119+((htj1*x10092))+x10084+(((-1.0)*x10121))+(((htj1*htj1*htj1*htj1)*((x10120+(((-1.0)*x10084))+(((-1.0)*x10122))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x10119+(((-1.0)*x10084))+(((-1.0)*x10121))))))+(((htj1*htj1)*((x10120+x10084+(((-1.0)*x10122)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x10123=(cj5*sj1);
IkReal x10124=(cj0*r10);
IkReal x10125=(r00*sj0);
IkReal x10126=(cj1*cj5);
IkReal x10127=(cj1*sj5);
IkReal x10128=(cj0*r11);
IkReal x10129=(r01*sj0);
IkReal x10130=(sj1*sj5);
if( IKabs((((x10129*x10130))+(((-1.0)*x10123*x10125))+(((-1.0)*x10128*x10130))+((x10123*x10124)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x10125*x10126))+((x10127*x10128))+(((-1.0)*x10124*x10126))+(((-1.0)*x10127*x10129)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x10129*x10130))+(((-1.0)*x10123*x10125))+(((-1.0)*x10128*x10130))+((x10123*x10124))))+IKsqr((((x10125*x10126))+((x10127*x10128))+(((-1.0)*x10124*x10126))+(((-1.0)*x10127*x10129))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x10129*x10130))+(((-1.0)*x10123*x10125))+(((-1.0)*x10128*x10130))+((x10123*x10124))), (((x10125*x10126))+((x10127*x10128))+(((-1.0)*x10124*x10126))+(((-1.0)*x10127*x10129))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x10131=IKcos(j2);
IkReal x10132=IKsin(j2);
IkReal x10133=(cj0*cj5);
IkReal x10134=((1.0)*sj0);
IkReal x10135=(sj0*sj5);
IkReal x10136=(cj5*r00);
IkReal x10137=((1.0)*cj3);
IkReal x10138=(cj0*sj5);
IkReal x10139=(cj1*x10131);
IkReal x10140=(sj1*x10131);
IkReal x10141=(sj1*x10132);
IkReal x10142=(cj1*x10132);
evalcond[0]=((((-1.0)*x10142))+(((-1.0)*x10140)));
evalcond[1]=((((-1.0)*x10137*x10140))+(((-1.0)*x10137*x10142)));
evalcond[2]=((((-1.0)*r22))+(((-1.0)*x10137*x10139))+((cj3*x10141)));
evalcond[3]=(((r10*x10133))+(((-1.0)*r11*x10138))+x10139+((r01*x10135))+(((-1.0)*x10141))+(((-1.0)*x10134*x10136)));
evalcond[4]=((((0.16)*cj1))+(((0.02349986)*x10139))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-0.02349986)*x10141))+(((0.16085006)*x10140))+(((0.16085006)*x10142)));
evalcond[5]=((((-3.5e-7)*r01*x10135))+(((3.5e-7)*sj0*x10136))+(((0.0008)*r11*x10133))+(((3.5e-7)*r11*x10138))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.02349986)*x10140))+(((0.02349986)*x10142))+(((-0.0008)*cj5*r01*sj0))+(((-0.16085006)*x10139))+(((0.16085006)*x10141))+(((-1.0)*px*x10134))+(((-0.0008)*r00*x10135))+((cj0*py))+(((0.0008)*r10*x10138))+(((-3.5e-7)*r10*x10133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x10143=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10143);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10143);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x10144=sj3*sj3;
IkReal x10145=sj5*sj5;
IkReal x10146=cj3*cj3;
IkReal x10147=cj5*cj5;
j0eval[0]=r22;
j0eval[1]=IKsign(r22);
j0eval[2]=(((x10145*x10146))+((x10144*x10145))+((x10144*x10147))+((x10146*x10147)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x10148=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10148);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10148);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x10149=(r11*sj3);
IkReal x10150=((7.0)*sj5);
IkReal x10151=((16000.0)*cj5);
IkReal x10152=((20000000.0)*sj3);
IkReal x10153=(r01*sj3);
IkReal x10154=((7.0)*cj5*sj3);
IkReal x10155=((16000.0)*sj3*sj5);
IkReal x10156=(((cj5*rxp0_2))+(((-1.0)*rxp1_2*sj5))+(((0.0008)*r22)));
j0eval[0]=x10156;
j0eval[1]=((IKabs((((x10149*x10150))+((x10149*x10151))+((r10*x10155))+(((-1.0)*r10*x10154))+((py*x10152)))))+(IKabs(((((-1.0)*x10151*x10153))+(((-1.0)*x10150*x10153))+(((-1.0)*px*x10152))+(((-1.0)*r00*x10155))+((r00*x10154))))));
j0eval[2]=IKsign(x10156);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x10157=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10157);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10157);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x10158=((7.0)*cj3);
IkReal x10159=((20000000.0)*cj3);
IkReal x10160=(cj5*rxp1_2);
IkReal x10161=(rxp0_2*sj5);
IkReal x10162=((16000.0)*cj3*sj5);
IkReal x10163=((16000.0)*cj3*cj5);
j0eval[0]=((((-1.0)*r22))+(((-2857142.85714286)*x10160))+(((-2857142.85714286)*x10161)));
j0eval[1]=((IKabs(((((-1.0)*r01*x10163))+(((-1.0)*r00*x10162))+((cj5*r00*x10158))+(((-1.0)*px*x10159))+(((-1.0)*r01*sj5*x10158)))))+(IKabs((((r10*x10162))+(((-1.0)*cj5*r10*x10158))+((r11*sj5*x10158))+((r11*x10163))+((py*x10159))))));
j0eval[2]=IKsign(((((-1.0)*x10161))+(((-1.0)*x10160))+(((-3.5e-7)*r22))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10164=(cj3*cj5);
IkReal x10165=(cj3*sj5);
CheckValue<IkReal> x10166 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*px))+(((-0.0008)*r01*x10164))+(((-0.0008)*r00*x10165))+(((3.5e-7)*r00*x10164))+(((-3.5e-7)*r01*x10165)))),IkReal(((((3.5e-7)*r11*x10165))+(((-3.5e-7)*r10*x10164))+(((0.0008)*r10*x10165))+(((0.0008)*r11*x10164))+((cj3*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10166.valid){
continue;
}
CheckValue<IkReal> x10167=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5))+(((-3.5e-7)*r22)))),-1);
if(!x10167.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x10166.value)+(((1.5707963267949)*(x10167.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x10168=IKcos(j0);
IkReal x10169=IKsin(j0);
IkReal x10170=((3.5e-7)*sj5);
IkReal x10171=((0.0008)*cj5);
IkReal x10172=((0.0008)*sj5);
IkReal x10173=((3.5e-7)*cj5);
IkReal x10174=(r01*x10168);
IkReal x10175=((1.0)*x10169);
IkReal x10176=(r10*x10169);
IkReal x10177=(r00*x10168);
IkReal x10178=(r11*x10169);
evalcond[0]=(cj3+((sj5*x10176))+((sj5*x10177))+((cj5*x10174))+((cj5*x10178)));
evalcond[1]=((((-1.0)*sj3))+(((-1.0)*r11*sj5*x10175))+((cj5*x10176))+((cj5*x10177))+(((-1.0)*sj5*x10174)));
evalcond[2]=((((-1.0)*x10172*x10177))+(((-1.0)*x10172*x10176))+((x10173*x10177))+((x10173*x10176))+(((-1.0)*py*x10175))+(((-1.0)*px*x10168))+(((-1.0)*x10170*x10178))+(((-1.0)*x10170*x10174))+(((-1.0)*x10171*x10178))+(((-1.0)*x10171*x10174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x10179=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10179);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10179);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x10180=((0.64)*sj3);
IkReal x10181=((1.93020072)*cj5);
IkReal x10182=(r01*sj0);
IkReal x10183=(cj3*sj3);
IkReal x10184=((4.0)*pz);
IkReal x10185=(cj0*r11);
IkReal x10186=((0.64340024)*cj5);
IkReal x10187=((1.93020072)*cj3);
IkReal x10188=((0.64340024)*cj3);
IkReal x10189=((12.0)*pz);
IkReal x10190=(sj3*x10189);
IkReal x10191=(cj3*x10180);
IkReal x10192=(r00*sj0*sj5);
IkReal x10193=(cj0*r10*sj5);
IkReal x10194=((1.93020072)*x10192);
IkReal x10195=(x10181*x10182);
IkReal x10196=(x10181*x10185);
IkReal x10197=((1.93020072)*x10193);
IkReal x10198=(x10183*x10189);
IkReal x10199=(cj3*x10196);
IkReal x10200=(x10187*x10193);
IkReal x10201=(x10187*x10192);
IkReal x10202=(cj3*x10195);
IkReal x10203=(x10194+x10195);
IkReal x10204=(x10201+x10202);
IkReal x10205=(x10196+x10197+x10190);
IkReal x10206=(x10198+x10199+x10200);
j1eval[0]=((((40584.4155844156)*(IKabs(((((-1.0)*x10191))+(((-1.0)*x10204))+x10206)))))+(((40584.4155844156)*(IKabs((x10191+(((-1.0)*x10204))+x10206)))))+(((40584.4155844156)*(IKabs((((cj3*x10185*x10186))+x10191+((x10188*x10193))+((x10183*x10184))+(((-1.0)*cj3*x10182*x10186))+(((-1.0)*x10188*x10192)))))))+(IKabs(x10183))+(((40584.4155844156)*(IKabs((x10180+(((-1.0)*x10205))+x10203)))))+(((40584.4155844156)*(IKabs(((((-0.64340024)*x10193))+(((-1.0)*sj3*x10184))+(((-1.0)*x10180))+(((-1.0)*x10185*x10186))+((x10182*x10186))+(((0.64340024)*x10192)))))))+(IKabs(sj3))+(((40584.4155844156)*(IKabs(((((-1.0)*x10180))+(((-1.0)*x10205))+x10203))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x10207=((0.64)*sj3);
IkReal x10208=((6.16e-6)*sj3);
IkReal x10209=(pz*sj3);
IkReal x10210=((12.0)*x10209);
IkReal x10211=((4.0)*x10209);
IkReal x10212=(cj5*r01*sj0);
IkReal x10213=(r00*sj0*sj5);
IkReal x10214=(cj0*cj5*r11);
IkReal x10215=(cj0*r10*sj5);
IkReal x10216=((1.93020072)*x10213);
IkReal x10217=((1.93020072)*x10212);
IkReal x10218=((1.93020072)*x10214);
IkReal x10219=((1.93020072)*x10215);
IkReal x10220=((0.64340024)*x10212);
IkReal x10221=((0.64340024)*x10213);
IkReal x10222=((0.64340024)*x10215);
IkReal x10223=((0.64340024)*x10214);
IkReal x10224=(x10220+x10221);
IkReal x10225=(x10217+x10216);
IkReal x10226=(x10210+x10219+x10218);
IkReal x10227=(x10222+x10223+x10211);
op[0]=((((-1.0)*x10207))+(((-1.0)*x10227))+x10224);
op[1]=x10208;
op[2]=((((-1.0)*x10207))+(((-1.0)*x10226))+x10225);
op[3]=((1.232e-5)*sj3);
op[4]=((((-1.0)*x10226))+x10225+x10207);
op[5]=x10208;
op[6]=((((-1.0)*x10227))+x10224+x10207);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x10228=(cj3*sj3);
IkReal x10229=(r01*sj0);
IkReal x10230=(cj0*r11);
IkReal x10231=(cj3*sj5);
IkReal x10232=(r00*sj0);
IkReal x10233=(cj0*r10);
IkReal x10234=((0.64)*x10228);
IkReal x10235=((1.93020072)*cj3*cj5);
IkReal x10236=((0.64340024)*cj3*cj5);
IkReal x10237=((12.0)*pz*x10228);
IkReal x10238=((4.0)*pz*x10228);
IkReal x10239=((0.64340024)*x10231*x10233);
IkReal x10240=(x10230*x10236);
IkReal x10241=(x10230*x10235);
IkReal x10242=((1.93020072)*x10231*x10233);
IkReal x10243=((1.93020072)*x10231*x10232);
IkReal x10244=(x10229*x10235);
IkReal x10245=((0.64340024)*x10231*x10232);
IkReal x10246=(x10229*x10236);
IkReal x10247=(x10245+x10246);
IkReal x10248=(x10243+x10244);
IkReal x10249=(x10237+x10241+x10242);
IkReal x10250=(x10239+x10238+x10240);
j1evalpoly[0]=((((htj1*htj1)*(((((-1.0)*x10248))+x10249+(((-1.0)*x10234))))))+(((-1.232e-5)*x10228*(htj1*htj1*htj1)))+(((-6.16e-6)*x10228*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x10247))+x10234+x10250))))+(((-1.0)*x10247))+x10250+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x10248))+x10234+x10249))))+(((-1.0)*x10234))+(((-6.16e-6)*htj1*x10228)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x10251=((-1.0)*r22);
if( IKabs((cj1*x10251)) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj1*x10251)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*x10251))+IKsqr((sj1*x10251))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*x10251), (sj1*x10251));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x10252=IKsin(j2);
IkReal x10253=IKcos(j2);
IkReal x10254=(cj0*r11);
IkReal x10255=((0.0008)*cj5);
IkReal x10256=((1.0)*cj5);
IkReal x10257=(cj0*r10);
IkReal x10258=((1.0)*sj0);
IkReal x10259=((3.5e-7)*cj5);
IkReal x10260=(r01*sj5);
IkReal x10261=((1.0)*cj1);
IkReal x10262=((0.02349986)*sj1);
IkReal x10263=(cj5*sj0);
IkReal x10264=((1.0)*sj1);
IkReal x10265=(cj1*x10253);
IkReal x10266=(sj3*x10252);
IkReal x10267=((0.16085006)*x10252);
IkReal x10268=(r00*sj0*sj5);
IkReal x10269=(cj3*x10252);
evalcond[0]=((((-1.0)*x10252*x10264))+x10265);
evalcond[1]=((((-1.0)*sj3*x10253*x10261))+((sj1*x10266)));
evalcond[2]=(((sj1*x10269))+(((-1.0)*cj3*x10253*x10261)));
evalcond[3]=((((-1.0)*x10253*x10264))+(((-1.0)*x10252*x10261))+(((-1.0)*r22)));
evalcond[4]=((((-1.0)*sj3*x10253*x10264))+(((-1.0)*x10261*x10266))+(((-1.0)*sj5*x10257))+(((-1.0)*x10254*x10256))+((r01*x10263))+x10268);
evalcond[5]=((((-1.0)*x10261*x10269))+(((-1.0)*x10256*x10257))+((r00*x10263))+((sj5*x10254))+(((-1.0)*cj3*x10253*x10264))+(((-1.0)*x10258*x10260)));
evalcond[6]=(((cj1*x10267))+(((0.16)*cj1))+(((-1.0)*x10252*x10262))+(((0.02349986)*x10265))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*sj1*x10253)));
evalcond[7]=((((-3.5e-7)*sj0*x10260))+((r00*sj0*x10259))+(((3.5e-7)*sj5*x10254))+((x10254*x10255))+(((0.0008)*sj5*x10257))+(((-1.0)*px*x10258))+((sj1*x10267))+(((-0.16085006)*x10265))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((x10253*x10262))+(((0.02349986)*cj1*x10252))+(((-1.0)*r01*sj0*x10255))+(((-1.0)*x10257*x10259))+((cj0*py))+(((-0.0008)*x10268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10270=(sj3*sj5);
IkReal x10271=((3.5e-7)*cj5*sj3);
IkReal x10272=((0.0008)*cj5*sj3);
CheckValue<IkReal> x10273=IKPowWithIntegerCheck(IKsign((((cj5*rxp0_2))+(((-1.0)*rxp1_2*sj5))+(((0.0008)*r22)))),-1);
if(!x10273.valid){
continue;
}
CheckValue<IkReal> x10274 = IKatan2WithCheck(IkReal((((r00*x10271))+(((-0.0008)*r00*x10270))+(((-1.0)*r01*x10272))+(((-1.0)*px*sj3))+(((-3.5e-7)*r01*x10270)))),IkReal(((((3.5e-7)*r11*x10270))+(((0.0008)*r10*x10270))+((r11*x10272))+(((-1.0)*r10*x10271))+((py*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10274.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10273.value)))+(x10274.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x10275=IKcos(j0);
IkReal x10276=IKsin(j0);
IkReal x10277=((3.5e-7)*sj5);
IkReal x10278=((0.0008)*cj5);
IkReal x10279=((0.0008)*sj5);
IkReal x10280=((3.5e-7)*cj5);
IkReal x10281=(r01*x10275);
IkReal x10282=((1.0)*x10276);
IkReal x10283=(r10*x10276);
IkReal x10284=(r00*x10275);
IkReal x10285=(r11*x10276);
evalcond[0]=(cj3+((sj5*x10284))+((sj5*x10283))+((cj5*x10285))+((cj5*x10281)));
evalcond[1]=((((-1.0)*sj3))+(((-1.0)*sj5*x10281))+(((-1.0)*r11*sj5*x10282))+((cj5*x10283))+((cj5*x10284)));
evalcond[2]=((((-1.0)*x10278*x10281))+(((-1.0)*x10278*x10285))+(((-1.0)*py*x10282))+(((-1.0)*px*x10275))+(((-1.0)*x10277*x10281))+(((-1.0)*x10277*x10285))+(((-1.0)*x10279*x10283))+(((-1.0)*x10279*x10284))+((x10280*x10284))+((x10280*x10283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x10286=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10286);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10286);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x10287=((0.64)*sj3);
IkReal x10288=((1.93020072)*cj5);
IkReal x10289=(r01*sj0);
IkReal x10290=(cj3*sj3);
IkReal x10291=((4.0)*pz);
IkReal x10292=(cj0*r11);
IkReal x10293=((0.64340024)*cj5);
IkReal x10294=((1.93020072)*cj3);
IkReal x10295=((0.64340024)*cj3);
IkReal x10296=((12.0)*pz);
IkReal x10297=(sj3*x10296);
IkReal x10298=(cj3*x10287);
IkReal x10299=(r00*sj0*sj5);
IkReal x10300=(cj0*r10*sj5);
IkReal x10301=((1.93020072)*x10299);
IkReal x10302=(x10288*x10289);
IkReal x10303=(x10288*x10292);
IkReal x10304=((1.93020072)*x10300);
IkReal x10305=(x10290*x10296);
IkReal x10306=(cj3*x10303);
IkReal x10307=(x10294*x10300);
IkReal x10308=(x10294*x10299);
IkReal x10309=(cj3*x10302);
IkReal x10310=(x10301+x10302);
IkReal x10311=(x10309+x10308);
IkReal x10312=(x10304+x10303+x10297);
IkReal x10313=(x10305+x10307+x10306);
j1eval[0]=((((40584.4155844156)*(IKabs(((((-1.0)*x10312))+x10310+(((-1.0)*x10287)))))))+(IKabs(x10290))+(((40584.4155844156)*(IKabs(((((-1.0)*x10311))+x10313+(((-1.0)*x10298)))))))+(((40584.4155844156)*(IKabs((((x10289*x10293))+(((-1.0)*x10292*x10293))+(((-1.0)*sj3*x10291))+(((-0.64340024)*x10300))+(((0.64340024)*x10299))+(((-1.0)*x10287)))))))+(((40584.4155844156)*(IKabs(((((-1.0)*x10312))+x10310+x10287)))))+(IKabs(sj3))+(((40584.4155844156)*(IKabs(((((-1.0)*x10311))+x10313+x10298)))))+(((40584.4155844156)*(IKabs(((((-1.0)*cj3*x10289*x10293))+(((-1.0)*x10295*x10299))+x10298+((x10290*x10291))+((x10295*x10300))+((cj3*x10292*x10293))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x10314=((0.64)*sj3);
IkReal x10315=((6.16e-6)*sj3);
IkReal x10316=(pz*sj3);
IkReal x10317=((12.0)*x10316);
IkReal x10318=((4.0)*x10316);
IkReal x10319=(cj5*r01*sj0);
IkReal x10320=(r00*sj0*sj5);
IkReal x10321=(cj0*cj5*r11);
IkReal x10322=(cj0*r10*sj5);
IkReal x10323=((1.93020072)*x10320);
IkReal x10324=((1.93020072)*x10319);
IkReal x10325=((1.93020072)*x10321);
IkReal x10326=((1.93020072)*x10322);
IkReal x10327=((0.64340024)*x10319);
IkReal x10328=((0.64340024)*x10320);
IkReal x10329=((0.64340024)*x10322);
IkReal x10330=((0.64340024)*x10321);
IkReal x10331=(x10327+x10328);
IkReal x10332=(x10323+x10324);
IkReal x10333=(x10317+x10326+x10325);
IkReal x10334=(x10318+x10329+x10330);
op[0]=((((-1.0)*x10314))+x10331+(((-1.0)*x10334)));
op[1]=x10315;
op[2]=((((-1.0)*x10314))+x10332+(((-1.0)*x10333)));
op[3]=((1.232e-5)*sj3);
op[4]=(x10314+x10332+(((-1.0)*x10333)));
op[5]=x10315;
op[6]=(x10314+x10331+(((-1.0)*x10334)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x10335=(cj3*sj3);
IkReal x10336=(r01*sj0);
IkReal x10337=(cj0*r11);
IkReal x10338=(cj3*sj5);
IkReal x10339=(r00*sj0);
IkReal x10340=(cj0*r10);
IkReal x10341=((0.64)*x10335);
IkReal x10342=((1.93020072)*cj3*cj5);
IkReal x10343=((0.64340024)*cj3*cj5);
IkReal x10344=((12.0)*pz*x10335);
IkReal x10345=((4.0)*pz*x10335);
IkReal x10346=((0.64340024)*x10338*x10340);
IkReal x10347=(x10337*x10343);
IkReal x10348=(x10337*x10342);
IkReal x10349=((1.93020072)*x10338*x10340);
IkReal x10350=((1.93020072)*x10338*x10339);
IkReal x10351=(x10336*x10342);
IkReal x10352=((0.64340024)*x10338*x10339);
IkReal x10353=(x10336*x10343);
IkReal x10354=(x10352+x10353);
IkReal x10355=(x10350+x10351);
IkReal x10356=(x10349+x10348+x10344);
IkReal x10357=(x10345+x10347+x10346);
j1evalpoly[0]=((((-6.16e-6)*htj1*x10335))+(((htj1*htj1)*(((((-1.0)*x10341))+(((-1.0)*x10355))+x10356))))+(((-6.16e-6)*x10335*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x10341))+(((-1.232e-5)*x10335*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x10354))+x10341+x10357))))+(((-1.0)*x10354))+x10357+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x10355))+x10341+x10356)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x10358=((-1.0)*r22);
if( IKabs((cj1*x10358)) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj1*x10358)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*x10358))+IKsqr((sj1*x10358))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*x10358), (sj1*x10358));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x10359=IKsin(j2);
IkReal x10360=IKcos(j2);
IkReal x10361=(cj0*r11);
IkReal x10362=((0.0008)*cj5);
IkReal x10363=((1.0)*cj5);
IkReal x10364=(cj0*r10);
IkReal x10365=((1.0)*sj0);
IkReal x10366=((3.5e-7)*cj5);
IkReal x10367=(r01*sj5);
IkReal x10368=((1.0)*cj1);
IkReal x10369=((0.02349986)*sj1);
IkReal x10370=(cj5*sj0);
IkReal x10371=((1.0)*sj1);
IkReal x10372=(cj1*x10360);
IkReal x10373=(sj3*x10359);
IkReal x10374=((0.16085006)*x10359);
IkReal x10375=(r00*sj0*sj5);
IkReal x10376=(cj3*x10359);
evalcond[0]=((((-1.0)*x10359*x10371))+x10372);
evalcond[1]=(((sj1*x10373))+(((-1.0)*sj3*x10360*x10368)));
evalcond[2]=((((-1.0)*cj3*x10360*x10368))+((sj1*x10376)));
evalcond[3]=((((-1.0)*x10359*x10368))+(((-1.0)*x10360*x10371))+(((-1.0)*r22)));
evalcond[4]=(((r01*x10370))+(((-1.0)*x10361*x10363))+(((-1.0)*sj5*x10364))+(((-1.0)*x10368*x10373))+x10375+(((-1.0)*sj3*x10360*x10371)));
evalcond[5]=(((r00*x10370))+(((-1.0)*cj3*x10360*x10371))+((sj5*x10361))+(((-1.0)*x10363*x10364))+(((-1.0)*x10368*x10376))+(((-1.0)*x10365*x10367)));
evalcond[6]=((((-1.0)*x10359*x10369))+(((0.16085006)*sj1*x10360))+(((0.16)*cj1))+((cj1*x10374))+(((0.02349986)*x10372))+(((-1.0)*pz))+(((7.7e-7)*sj1)));
evalcond[7]=(((x10361*x10362))+(((-1.0)*px*x10365))+(((0.02349986)*cj1*x10359))+(((-0.0008)*x10375))+(((0.0008)*sj5*x10364))+(((3.5e-7)*sj5*x10361))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.16085006)*x10372))+((sj1*x10374))+((r00*sj0*x10366))+(((-3.5e-7)*sj0*x10367))+(((-1.0)*x10364*x10366))+(((-1.0)*r01*sj0*x10362))+((cj0*py))+((x10360*x10369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10377=(cj3*cj5);
IkReal x10378=((1.0)*r10);
IkReal x10379=(cj3*sj5);
IkReal x10380=(sj3*sj5);
IkReal x10381=(cj5*sj3);
CheckValue<IkReal> x10382 = IKatan2WithCheck(IkReal((((r00*x10377))+(((-1.0)*r01*x10379))+((r00*x10380))+((r01*x10381)))),IkReal(((((-1.0)*r11*x10381))+(((-1.0)*x10377*x10378))+(((-1.0)*x10378*x10380))+((r11*x10379)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10382.valid){
continue;
}
CheckValue<IkReal> x10383=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x10383.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x10382.value)+(((-1.5707963267949)*(x10383.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x10384=IKcos(j0);
IkReal x10385=IKsin(j0);
IkReal x10386=((3.5e-7)*sj5);
IkReal x10387=((0.0008)*cj5);
IkReal x10388=((0.0008)*sj5);
IkReal x10389=((3.5e-7)*cj5);
IkReal x10390=(r01*x10384);
IkReal x10391=((1.0)*x10385);
IkReal x10392=(r10*x10385);
IkReal x10393=(r00*x10384);
IkReal x10394=(r11*x10385);
evalcond[0]=(cj3+((cj5*x10390))+((cj5*x10394))+((sj5*x10393))+((sj5*x10392)));
evalcond[1]=((((-1.0)*r11*sj5*x10391))+(((-1.0)*sj3))+(((-1.0)*sj5*x10390))+((cj5*x10393))+((cj5*x10392)));
evalcond[2]=((((-1.0)*py*x10391))+(((-1.0)*x10387*x10394))+(((-1.0)*x10387*x10390))+(((-1.0)*x10386*x10394))+(((-1.0)*x10386*x10390))+((x10389*x10392))+((x10389*x10393))+(((-1.0)*px*x10384))+(((-1.0)*x10388*x10393))+(((-1.0)*x10388*x10392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x10395=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10395);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10395);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x10396=((0.64)*sj3);
IkReal x10397=((1.93020072)*cj5);
IkReal x10398=(r01*sj0);
IkReal x10399=(cj3*sj3);
IkReal x10400=((4.0)*pz);
IkReal x10401=(cj0*r11);
IkReal x10402=((0.64340024)*cj5);
IkReal x10403=((1.93020072)*cj3);
IkReal x10404=((0.64340024)*cj3);
IkReal x10405=((12.0)*pz);
IkReal x10406=(sj3*x10405);
IkReal x10407=(cj3*x10396);
IkReal x10408=(r00*sj0*sj5);
IkReal x10409=(cj0*r10*sj5);
IkReal x10410=((1.93020072)*x10408);
IkReal x10411=(x10397*x10398);
IkReal x10412=(x10397*x10401);
IkReal x10413=((1.93020072)*x10409);
IkReal x10414=(x10399*x10405);
IkReal x10415=(cj3*x10412);
IkReal x10416=(x10403*x10409);
IkReal x10417=(x10403*x10408);
IkReal x10418=(cj3*x10411);
IkReal x10419=(x10411+x10410);
IkReal x10420=(x10417+x10418);
IkReal x10421=(x10413+x10412+x10406);
IkReal x10422=(x10415+x10414+x10416);
j1eval[0]=((((40584.4155844156)*(IKabs((((cj3*x10401*x10402))+((x10399*x10400))+(((-1.0)*cj3*x10398*x10402))+((x10404*x10409))+x10407+(((-1.0)*x10404*x10408)))))))+(IKabs(x10399))+(((40584.4155844156)*(IKabs(((((-1.0)*x10396))+(((0.64340024)*x10408))+((x10398*x10402))+(((-1.0)*sj3*x10400))+(((-1.0)*x10401*x10402))+(((-0.64340024)*x10409)))))))+(((40584.4155844156)*(IKabs(((((-1.0)*x10396))+(((-1.0)*x10421))+x10419)))))+(((40584.4155844156)*(IKabs(((((-1.0)*x10407))+(((-1.0)*x10420))+x10422)))))+(((40584.4155844156)*(IKabs(((((-1.0)*x10420))+x10422+x10407)))))+(IKabs(sj3))+(((40584.4155844156)*(IKabs((x10396+(((-1.0)*x10421))+x10419))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x10423=((0.64)*sj3);
IkReal x10424=((6.16e-6)*sj3);
IkReal x10425=(pz*sj3);
IkReal x10426=((12.0)*x10425);
IkReal x10427=((4.0)*x10425);
IkReal x10428=(cj5*r01*sj0);
IkReal x10429=(r00*sj0*sj5);
IkReal x10430=(cj0*cj5*r11);
IkReal x10431=(cj0*r10*sj5);
IkReal x10432=((1.93020072)*x10429);
IkReal x10433=((1.93020072)*x10428);
IkReal x10434=((1.93020072)*x10430);
IkReal x10435=((1.93020072)*x10431);
IkReal x10436=((0.64340024)*x10428);
IkReal x10437=((0.64340024)*x10429);
IkReal x10438=((0.64340024)*x10431);
IkReal x10439=((0.64340024)*x10430);
IkReal x10440=(x10437+x10436);
IkReal x10441=(x10433+x10432);
IkReal x10442=(x10435+x10434+x10426);
IkReal x10443=(x10439+x10438+x10427);
op[0]=((((-1.0)*x10443))+(((-1.0)*x10423))+x10440);
op[1]=x10424;
op[2]=((((-1.0)*x10442))+(((-1.0)*x10423))+x10441);
op[3]=((1.232e-5)*sj3);
op[4]=((((-1.0)*x10442))+x10423+x10441);
op[5]=x10424;
op[6]=((((-1.0)*x10443))+x10423+x10440);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x10444=(cj3*sj3);
IkReal x10445=(r01*sj0);
IkReal x10446=(cj0*r11);
IkReal x10447=(cj3*sj5);
IkReal x10448=(r00*sj0);
IkReal x10449=(cj0*r10);
IkReal x10450=((0.64)*x10444);
IkReal x10451=((1.93020072)*cj3*cj5);
IkReal x10452=((0.64340024)*cj3*cj5);
IkReal x10453=((12.0)*pz*x10444);
IkReal x10454=((4.0)*pz*x10444);
IkReal x10455=((0.64340024)*x10447*x10449);
IkReal x10456=(x10446*x10452);
IkReal x10457=(x10446*x10451);
IkReal x10458=((1.93020072)*x10447*x10449);
IkReal x10459=((1.93020072)*x10447*x10448);
IkReal x10460=(x10445*x10451);
IkReal x10461=((0.64340024)*x10447*x10448);
IkReal x10462=(x10445*x10452);
IkReal x10463=(x10461+x10462);
IkReal x10464=(x10460+x10459);
IkReal x10465=(x10453+x10457+x10458);
IkReal x10466=(x10455+x10454+x10456);
j1evalpoly[0]=((((-1.232e-5)*x10444*(htj1*htj1*htj1)))+(((-6.16e-6)*htj1*x10444))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x10466+x10450+(((-1.0)*x10463))))))+(((htj1*htj1)*((x10465+(((-1.0)*x10450))+(((-1.0)*x10464))))))+(((htj1*htj1*htj1*htj1)*((x10465+x10450+(((-1.0)*x10464))))))+(((-6.16e-6)*x10444*(htj1*htj1*htj1*htj1*htj1)))+x10466+(((-1.0)*x10450))+(((-1.0)*x10463)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x10467=((-1.0)*r22);
if( IKabs((cj1*x10467)) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj1*x10467)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*x10467))+IKsqr((sj1*x10467))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*x10467), (sj1*x10467));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x10468=IKsin(j2);
IkReal x10469=IKcos(j2);
IkReal x10470=(cj0*r11);
IkReal x10471=((0.0008)*cj5);
IkReal x10472=((1.0)*cj5);
IkReal x10473=(cj0*r10);
IkReal x10474=((1.0)*sj0);
IkReal x10475=((3.5e-7)*cj5);
IkReal x10476=(r01*sj5);
IkReal x10477=((1.0)*cj1);
IkReal x10478=((0.02349986)*sj1);
IkReal x10479=(cj5*sj0);
IkReal x10480=((1.0)*sj1);
IkReal x10481=(cj1*x10469);
IkReal x10482=(sj3*x10468);
IkReal x10483=((0.16085006)*x10468);
IkReal x10484=(r00*sj0*sj5);
IkReal x10485=(cj3*x10468);
evalcond[0]=(x10481+(((-1.0)*x10468*x10480)));
evalcond[1]=((((-1.0)*sj3*x10469*x10477))+((sj1*x10482)));
evalcond[2]=((((-1.0)*cj3*x10469*x10477))+((sj1*x10485)));
evalcond[3]=((((-1.0)*x10469*x10480))+(((-1.0)*r22))+(((-1.0)*x10468*x10477)));
evalcond[4]=((((-1.0)*x10470*x10472))+(((-1.0)*x10477*x10482))+((r01*x10479))+(((-1.0)*sj5*x10473))+x10484+(((-1.0)*sj3*x10469*x10480)));
evalcond[5]=((((-1.0)*x10477*x10485))+((r00*x10479))+(((-1.0)*x10472*x10473))+((sj5*x10470))+(((-1.0)*x10474*x10476))+(((-1.0)*cj3*x10469*x10480)));
evalcond[6]=((((0.02349986)*x10481))+((cj1*x10483))+(((0.16)*cj1))+(((-1.0)*pz))+(((0.16085006)*sj1*x10469))+(((7.7e-7)*sj1))+(((-1.0)*x10468*x10478)));
evalcond[7]=((((0.0008)*sj5*x10473))+(((3.5e-7)*sj5*x10470))+(((-0.16085006)*x10481))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((x10470*x10471))+(((-3.5e-7)*sj0*x10476))+((r00*sj0*x10475))+(((-1.0)*px*x10474))+(((0.02349986)*cj1*x10468))+(((-1.0)*x10473*x10475))+((cj0*py))+(((-1.0)*r01*sj0*x10471))+(((-0.0008)*x10484))+((sj1*x10483))+((x10469*x10478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x10486=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10486);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10486);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x10487=sj3*sj3;
IkReal x10488=sj5*sj5;
IkReal x10489=cj3*cj3;
IkReal x10490=cj5*cj5;
j0eval[0]=r22;
j0eval[1]=IKsign(r22);
j0eval[2]=(((x10489*x10490))+((x10488*x10489))+((x10487*x10490))+((x10487*x10488)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x10491=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10491);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10491);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x10492=(cj5*rxp0_2);
IkReal x10493=(rxp1_2*sj5);
IkReal x10494=(cj5*sj3);
IkReal x10495=((20000000.0)*sj3);
IkReal x10496=(sj3*sj5);
j0eval[0]=((((1250.0)*x10493))+(((-1250.0)*x10492))+(((-1.0)*r22)));
j0eval[1]=((IKabs(((((16000.0)*r11*x10494))+((py*x10495))+(((7.0)*r11*x10496))+(((-7.0)*r10*x10494))+(((16000.0)*r10*x10496)))))+(IKabs(((((-7.0)*r01*x10496))+(((7.0)*r00*x10494))+(((-16000.0)*r00*x10496))+(((-1.0)*px*x10495))+(((-16000.0)*r01*x10494))))));
j0eval[2]=IKsign(((((-1.0)*x10492))+(((-0.0008)*r22))+x10493));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x10497=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10497);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10497);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x10498=((7.0)*cj3);
IkReal x10499=((20000000.0)*cj3);
IkReal x10500=(cj5*rxp1_2);
IkReal x10501=(rxp0_2*sj5);
IkReal x10502=((16000.0)*cj3*sj5);
IkReal x10503=((16000.0)*cj3*cj5);
j0eval[0]=((((-1.0)*r22))+(((-2857142.85714286)*x10500))+(((-2857142.85714286)*x10501)));
j0eval[1]=((IKabs(((((-1.0)*r01*x10503))+(((-1.0)*r00*x10502))+((cj5*r00*x10498))+(((-1.0)*px*x10499))+(((-1.0)*r01*sj5*x10498)))))+(IKabs(((((-1.0)*cj5*r10*x10498))+((r10*x10502))+((py*x10499))+((r11*x10503))+((r11*sj5*x10498))))));
j0eval[2]=IKsign(((((-3.5e-7)*r22))+(((-1.0)*x10500))+(((-1.0)*x10501))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10504=(cj3*cj5);
IkReal x10505=(cj3*sj5);
CheckValue<IkReal> x10506 = IKatan2WithCheck(IkReal(((((-3.5e-7)*r01*x10505))+(((3.5e-7)*r00*x10504))+(((-1.0)*cj3*px))+(((-0.0008)*r01*x10504))+(((-0.0008)*r00*x10505)))),IkReal(((((-3.5e-7)*r10*x10504))+(((3.5e-7)*r11*x10505))+(((0.0008)*r10*x10505))+((cj3*py))+(((0.0008)*r11*x10504)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10506.valid){
continue;
}
CheckValue<IkReal> x10507=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5))+(((-3.5e-7)*r22)))),-1);
if(!x10507.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x10506.value)+(((1.5707963267949)*(x10507.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x10508=IKcos(j0);
IkReal x10509=IKsin(j0);
IkReal x10510=((3.5e-7)*sj5);
IkReal x10511=((0.0008)*cj5);
IkReal x10512=(cj5*r10);
IkReal x10513=(cj5*r00);
IkReal x10514=(r01*x10508);
IkReal x10515=((1.0)*x10508);
IkReal x10516=(r11*x10509);
IkReal x10517=((1.0)*x10509);
IkReal x10518=(r00*sj5*x10508);
IkReal x10519=(r10*sj5*x10509);
evalcond[0]=(cj3+x10518+x10519+((cj5*x10514))+((cj5*x10516)));
evalcond[1]=((((-1.0)*sj3))+(((-1.0)*x10513*x10515))+((sj5*x10514))+((sj5*x10516))+(((-1.0)*x10512*x10517)));
evalcond[2]=((((-1.0)*x10511*x10514))+(((-1.0)*x10511*x10516))+(((3.5e-7)*x10509*x10512))+(((-1.0)*py*x10517))+(((-1.0)*x10510*x10516))+(((-1.0)*x10510*x10514))+(((3.5e-7)*x10508*x10513))+(((-0.0008)*x10519))+(((-0.0008)*x10518))+(((-1.0)*px*x10515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x10520=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10520);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10520);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x10521=((0.64)*sj3);
IkReal x10522=((1.93020072)*cj5);
IkReal x10523=(r01*sj0);
IkReal x10524=(cj3*sj3);
IkReal x10525=((4.0)*pz);
IkReal x10526=(cj0*r11);
IkReal x10527=((0.64340024)*cj5);
IkReal x10528=((1.93020072)*cj3);
IkReal x10529=((0.64340024)*cj3);
IkReal x10530=((12.0)*pz);
IkReal x10531=(sj3*x10530);
IkReal x10532=(cj3*x10521);
IkReal x10533=(r00*sj0*sj5);
IkReal x10534=(cj0*r10*sj5);
IkReal x10535=((1.93020072)*x10533);
IkReal x10536=(x10522*x10523);
IkReal x10537=(x10522*x10526);
IkReal x10538=((1.93020072)*x10534);
IkReal x10539=(x10524*x10530);
IkReal x10540=(cj3*x10537);
IkReal x10541=(x10528*x10534);
IkReal x10542=(x10528*x10533);
IkReal x10543=(cj3*x10536);
IkReal x10544=(x10536+x10535);
IkReal x10545=(x10543+x10542);
IkReal x10546=(x10531+x10537+x10538);
IkReal x10547=(x10541+x10540+x10539);
j1eval[0]=((((40584.4155844156)*(IKabs(((((-1.0)*x10526*x10527))+(((-1.0)*x10521))+(((-1.0)*sj3*x10525))+((x10523*x10527))+(((-0.64340024)*x10534))+(((0.64340024)*x10533)))))))+(IKabs(x10524))+(((40584.4155844156)*(IKabs(((((-1.0)*x10546))+x10544+x10521)))))+(((40584.4155844156)*(IKabs(((((-1.0)*x10545))+x10547+x10532)))))+(IKabs(sj3))+(((40584.4155844156)*(IKabs(((((-1.0)*cj3*x10523*x10527))+((x10529*x10534))+((cj3*x10526*x10527))+(((-1.0)*x10529*x10533))+((x10524*x10525))+x10532)))))+(((40584.4155844156)*(IKabs(((((-1.0)*x10532))+(((-1.0)*x10545))+x10547)))))+(((40584.4155844156)*(IKabs(((((-1.0)*x10521))+(((-1.0)*x10546))+x10544))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x10548=((0.64)*sj3);
IkReal x10549=((6.16e-6)*sj3);
IkReal x10550=(pz*sj3);
IkReal x10551=((12.0)*x10550);
IkReal x10552=((4.0)*x10550);
IkReal x10553=(cj5*r01*sj0);
IkReal x10554=(r00*sj0*sj5);
IkReal x10555=(cj0*cj5*r11);
IkReal x10556=(cj0*r10*sj5);
IkReal x10557=((1.93020072)*x10554);
IkReal x10558=((1.93020072)*x10553);
IkReal x10559=((1.93020072)*x10555);
IkReal x10560=((1.93020072)*x10556);
IkReal x10561=((0.64340024)*x10553);
IkReal x10562=((0.64340024)*x10554);
IkReal x10563=((0.64340024)*x10556);
IkReal x10564=((0.64340024)*x10555);
IkReal x10565=(x10561+x10562);
IkReal x10566=(x10557+x10558);
IkReal x10567=(x10551+x10559+x10560);
IkReal x10568=(x10552+x10563+x10564);
op[0]=((((-1.0)*x10548))+(((-1.0)*x10568))+x10565);
op[1]=x10549;
op[2]=((((-1.0)*x10548))+(((-1.0)*x10567))+x10566);
op[3]=((1.232e-5)*sj3);
op[4]=((((-1.0)*x10567))+x10548+x10566);
op[5]=x10549;
op[6]=((((-1.0)*x10568))+x10548+x10565);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x10569=(cj3*sj3);
IkReal x10570=(r01*sj0);
IkReal x10571=(cj0*r11);
IkReal x10572=(cj3*sj5);
IkReal x10573=(r00*sj0);
IkReal x10574=(cj0*r10);
IkReal x10575=((0.64)*x10569);
IkReal x10576=((1.93020072)*cj3*cj5);
IkReal x10577=((0.64340024)*cj3*cj5);
IkReal x10578=((12.0)*pz*x10569);
IkReal x10579=((4.0)*pz*x10569);
IkReal x10580=((0.64340024)*x10572*x10574);
IkReal x10581=(x10571*x10577);
IkReal x10582=(x10571*x10576);
IkReal x10583=((1.93020072)*x10572*x10574);
IkReal x10584=((1.93020072)*x10572*x10573);
IkReal x10585=(x10570*x10576);
IkReal x10586=((0.64340024)*x10572*x10573);
IkReal x10587=(x10570*x10577);
IkReal x10588=(x10587+x10586);
IkReal x10589=(x10585+x10584);
IkReal x10590=(x10583+x10582+x10578);
IkReal x10591=(x10581+x10580+x10579);
j1evalpoly[0]=((((htj1*htj1*htj1*htj1)*((x10590+x10575+(((-1.0)*x10589))))))+(((-1.0)*x10575))+(((-1.232e-5)*x10569*(htj1*htj1*htj1)))+(((-6.16e-6)*x10569*(htj1*htj1*htj1*htj1*htj1)))+x10591+(((-1.0)*x10588))+(((htj1*htj1)*(((((-1.0)*x10575))+x10590+(((-1.0)*x10589))))))+(((-6.16e-6)*htj1*x10569))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x10591+x10575+(((-1.0)*x10588)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs((cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs((r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*r22))+IKsqr((r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*r22), (r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x10592=IKsin(j2);
IkReal x10593=IKcos(j2);
IkReal x10594=((1.0)*sj0);
IkReal x10595=(sj0*sj5);
IkReal x10596=((1.0)*cj1);
IkReal x10597=(cj5*r00);
IkReal x10598=((1.0)*sj3);
IkReal x10599=(cj0*sj5);
IkReal x10600=((1.0)*cj3);
IkReal x10601=(cj1*x10593);
IkReal x10602=(cj0*cj5*r11);
IkReal x10603=(cj0*cj5*r10);
IkReal x10604=(sj3*x10592);
IkReal x10605=(sj1*x10593);
IkReal x10606=(sj1*x10592);
IkReal x10607=(cj5*r01*sj0);
IkReal x10608=(cj1*x10592);
evalcond[0]=((((-1.0)*x10606))+x10601);
evalcond[1]=(((sj1*x10604))+(((-1.0)*sj3*x10593*x10596)));
evalcond[2]=((((-1.0)*x10592*x10596))+(((-1.0)*x10605))+r22);
evalcond[3]=(((cj3*x10606))+(((-1.0)*cj3*x10593*x10596)));
evalcond[4]=((((-1.0)*x10598*x10605))+(((-1.0)*r10*x10599))+((r00*x10595))+(((-1.0)*x10602))+x10607+(((-1.0)*x10596*x10604)));
evalcond[5]=((((-1.0)*x10600*x10605))+((r01*x10595))+(((-1.0)*cj3*x10592*x10596))+(((-1.0)*x10594*x10597))+(((-1.0)*r11*x10599))+x10603);
evalcond[6]=((((0.16)*cj1))+(((-1.0)*pz))+(((-0.02349986)*x10606))+(((0.16085006)*x10608))+(((0.16085006)*x10605))+(((7.7e-7)*sj1))+(((0.02349986)*x10601)));
evalcond[7]=((((-0.0008)*x10607))+(((-1.0)*px*x10594))+(((-0.0008)*r00*x10595))+(((-3.5e-7)*x10603))+(((-3.5e-7)*r01*x10595))+(((0.0008)*x10602))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.0008)*r10*x10599))+(((0.16085006)*x10606))+(((3.5e-7)*sj0*x10597))+(((3.5e-7)*r11*x10599))+(((-0.16085006)*x10601))+(((0.02349986)*x10608))+(((0.02349986)*x10605))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10609=(sj3*sj5);
IkReal x10610=((3.5e-7)*cj5*sj3);
IkReal x10611=((0.0008)*cj5*sj3);
CheckValue<IkReal> x10612=IKPowWithIntegerCheck(IKsign(((((-0.0008)*r22))+((rxp1_2*sj5))+(((-1.0)*cj5*rxp0_2)))),-1);
if(!x10612.valid){
continue;
}
CheckValue<IkReal> x10613 = IKatan2WithCheck(IkReal(((((-3.5e-7)*r01*x10609))+(((-0.0008)*r00*x10609))+((r00*x10610))+(((-1.0)*r01*x10611))+(((-1.0)*px*sj3)))),IkReal(((((3.5e-7)*r11*x10609))+(((0.0008)*r10*x10609))+(((-1.0)*r10*x10610))+((py*sj3))+((r11*x10611)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10613.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10612.value)))+(x10613.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x10614=IKcos(j0);
IkReal x10615=IKsin(j0);
IkReal x10616=((3.5e-7)*sj5);
IkReal x10617=((0.0008)*cj5);
IkReal x10618=(cj5*r10);
IkReal x10619=(cj5*r00);
IkReal x10620=(r01*x10614);
IkReal x10621=((1.0)*x10614);
IkReal x10622=(r11*x10615);
IkReal x10623=((1.0)*x10615);
IkReal x10624=(r00*sj5*x10614);
IkReal x10625=(r10*sj5*x10615);
evalcond[0]=(((cj5*x10622))+((cj5*x10620))+cj3+x10624+x10625);
evalcond[1]=((((-1.0)*sj3))+(((-1.0)*x10618*x10623))+(((-1.0)*x10619*x10621))+((sj5*x10622))+((sj5*x10620)));
evalcond[2]=((((-1.0)*py*x10623))+(((-1.0)*x10617*x10620))+(((-1.0)*x10617*x10622))+(((3.5e-7)*x10615*x10618))+(((3.5e-7)*x10614*x10619))+(((-0.0008)*x10625))+(((-0.0008)*x10624))+(((-1.0)*px*x10621))+(((-1.0)*x10616*x10622))+(((-1.0)*x10616*x10620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x10626=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10626);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10626);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x10627=((0.64)*sj3);
IkReal x10628=((1.93020072)*cj5);
IkReal x10629=(r01*sj0);
IkReal x10630=(cj3*sj3);
IkReal x10631=((4.0)*pz);
IkReal x10632=(cj0*r11);
IkReal x10633=((0.64340024)*cj5);
IkReal x10634=((1.93020072)*cj3);
IkReal x10635=((0.64340024)*cj3);
IkReal x10636=((12.0)*pz);
IkReal x10637=(sj3*x10636);
IkReal x10638=(cj3*x10627);
IkReal x10639=(r00*sj0*sj5);
IkReal x10640=(cj0*r10*sj5);
IkReal x10641=((1.93020072)*x10639);
IkReal x10642=(x10628*x10629);
IkReal x10643=(x10628*x10632);
IkReal x10644=((1.93020072)*x10640);
IkReal x10645=(x10630*x10636);
IkReal x10646=(cj3*x10643);
IkReal x10647=(x10634*x10640);
IkReal x10648=(x10634*x10639);
IkReal x10649=(cj3*x10642);
IkReal x10650=(x10641+x10642);
IkReal x10651=(x10648+x10649);
IkReal x10652=(x10637+x10644+x10643);
IkReal x10653=(x10645+x10646+x10647);
j1eval[0]=((((40584.4155844156)*(IKabs(((((-1.0)*sj3*x10631))+(((-1.0)*x10627))+(((-1.0)*x10632*x10633))+(((-0.64340024)*x10640))+(((0.64340024)*x10639))+((x10629*x10633)))))))+(IKabs(x10630))+(((40584.4155844156)*(IKabs((x10638+x10653+(((-1.0)*x10651)))))))+(IKabs(sj3))+(((40584.4155844156)*(IKabs(((((-1.0)*x10627))+x10650+(((-1.0)*x10652)))))))+(((40584.4155844156)*(IKabs((x10627+x10650+(((-1.0)*x10652)))))))+(((40584.4155844156)*(IKabs(((((-1.0)*x10635*x10639))+((cj3*x10632*x10633))+((x10635*x10640))+((x10630*x10631))+x10638+(((-1.0)*cj3*x10629*x10633)))))))+(((40584.4155844156)*(IKabs(((((-1.0)*x10638))+x10653+(((-1.0)*x10651))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x10654=((0.64)*sj3);
IkReal x10655=((6.16e-6)*sj3);
IkReal x10656=(pz*sj3);
IkReal x10657=((12.0)*x10656);
IkReal x10658=((4.0)*x10656);
IkReal x10659=(cj5*r01*sj0);
IkReal x10660=(r00*sj0*sj5);
IkReal x10661=(cj0*cj5*r11);
IkReal x10662=(cj0*r10*sj5);
IkReal x10663=((1.93020072)*x10660);
IkReal x10664=((1.93020072)*x10659);
IkReal x10665=((1.93020072)*x10661);
IkReal x10666=((1.93020072)*x10662);
IkReal x10667=((0.64340024)*x10659);
IkReal x10668=((0.64340024)*x10660);
IkReal x10669=((0.64340024)*x10662);
IkReal x10670=((0.64340024)*x10661);
IkReal x10671=(x10667+x10668);
IkReal x10672=(x10664+x10663);
IkReal x10673=(x10666+x10665+x10657);
IkReal x10674=(x10670+x10669+x10658);
op[0]=((((-1.0)*x10674))+x10671+(((-1.0)*x10654)));
op[1]=x10655;
op[2]=((((-1.0)*x10673))+x10672+(((-1.0)*x10654)));
op[3]=((1.232e-5)*sj3);
op[4]=((((-1.0)*x10673))+x10672+x10654);
op[5]=x10655;
op[6]=((((-1.0)*x10674))+x10671+x10654);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x10675=(cj3*sj3);
IkReal x10676=(r01*sj0);
IkReal x10677=(cj0*r11);
IkReal x10678=(cj3*sj5);
IkReal x10679=(r00*sj0);
IkReal x10680=(cj0*r10);
IkReal x10681=((0.64)*x10675);
IkReal x10682=((1.93020072)*cj3*cj5);
IkReal x10683=((0.64340024)*cj3*cj5);
IkReal x10684=((12.0)*pz*x10675);
IkReal x10685=((4.0)*pz*x10675);
IkReal x10686=((0.64340024)*x10678*x10680);
IkReal x10687=(x10677*x10683);
IkReal x10688=(x10677*x10682);
IkReal x10689=((1.93020072)*x10678*x10680);
IkReal x10690=((1.93020072)*x10678*x10679);
IkReal x10691=(x10676*x10682);
IkReal x10692=((0.64340024)*x10678*x10679);
IkReal x10693=(x10676*x10683);
IkReal x10694=(x10693+x10692);
IkReal x10695=(x10691+x10690);
IkReal x10696=(x10688+x10689+x10684);
IkReal x10697=(x10685+x10686+x10687);
j1evalpoly[0]=((((htj1*htj1*htj1*htj1)*(((((-1.0)*x10695))+x10681+x10696))))+(((-1.0)*x10694))+(((-6.16e-6)*x10675*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x10681))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x10694))+x10681+x10697))))+(((-6.16e-6)*htj1*x10675))+x10697+(((htj1*htj1)*(((((-1.0)*x10695))+(((-1.0)*x10681))+x10696))))+(((-1.232e-5)*x10675*(htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs((cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs((r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*r22))+IKsqr((r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*r22), (r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x10698=IKsin(j2);
IkReal x10699=IKcos(j2);
IkReal x10700=((1.0)*sj0);
IkReal x10701=(sj0*sj5);
IkReal x10702=((1.0)*cj1);
IkReal x10703=(cj5*r00);
IkReal x10704=((1.0)*sj3);
IkReal x10705=(cj0*sj5);
IkReal x10706=((1.0)*cj3);
IkReal x10707=(cj1*x10699);
IkReal x10708=(cj0*cj5*r11);
IkReal x10709=(cj0*cj5*r10);
IkReal x10710=(sj3*x10698);
IkReal x10711=(sj1*x10699);
IkReal x10712=(sj1*x10698);
IkReal x10713=(cj5*r01*sj0);
IkReal x10714=(cj1*x10698);
evalcond[0]=((((-1.0)*x10712))+x10707);
evalcond[1]=((((-1.0)*sj3*x10699*x10702))+((sj1*x10710)));
evalcond[2]=((((-1.0)*x10711))+(((-1.0)*x10698*x10702))+r22);
evalcond[3]=(((cj3*x10712))+(((-1.0)*cj3*x10699*x10702)));
evalcond[4]=(((r00*x10701))+(((-1.0)*x10708))+(((-1.0)*x10702*x10710))+(((-1.0)*x10704*x10711))+(((-1.0)*r10*x10705))+x10713);
evalcond[5]=((((-1.0)*x10706*x10711))+((r01*x10701))+(((-1.0)*r11*x10705))+(((-1.0)*cj3*x10698*x10702))+x10709+(((-1.0)*x10700*x10703)));
evalcond[6]=((((0.16)*cj1))+(((0.02349986)*x10707))+(((-1.0)*pz))+(((-0.02349986)*x10712))+(((7.7e-7)*sj1))+(((0.16085006)*x10714))+(((0.16085006)*x10711)));
evalcond[7]=((((0.0008)*x10708))+(((0.0008)*r10*x10705))+(((-3.5e-7)*x10709))+(((0.02349986)*x10714))+(((0.02349986)*x10711))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.0008)*r00*x10701))+(((-0.0008)*x10713))+(((-3.5e-7)*r01*x10701))+(((0.16085006)*x10712))+(((3.5e-7)*sj0*x10703))+(((3.5e-7)*r11*x10705))+((cj0*py))+(((-0.16085006)*x10707))+(((-1.0)*px*x10700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10715=((1.0)*sj5);
IkReal x10716=(cj3*cj5);
IkReal x10717=(cj5*sj3);
CheckValue<IkReal> x10718 = IKatan2WithCheck(IkReal((((cj3*r01*sj5))+(((-1.0)*r00*x10716))+((r01*x10717))+((r00*sj3*sj5)))),IkReal(((((-1.0)*r10*sj3*x10715))+((r10*x10716))+(((-1.0)*cj3*r11*x10715))+(((-1.0)*r11*x10717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10718.valid){
continue;
}
CheckValue<IkReal> x10719=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x10719.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x10718.value)+(((1.5707963267949)*(x10719.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x10720=IKcos(j0);
IkReal x10721=IKsin(j0);
IkReal x10722=((3.5e-7)*sj5);
IkReal x10723=((0.0008)*cj5);
IkReal x10724=(cj5*r10);
IkReal x10725=(cj5*r00);
IkReal x10726=(r01*x10720);
IkReal x10727=((1.0)*x10720);
IkReal x10728=(r11*x10721);
IkReal x10729=((1.0)*x10721);
IkReal x10730=(r00*sj5*x10720);
IkReal x10731=(r10*sj5*x10721);
evalcond[0]=(cj3+((cj5*x10728))+((cj5*x10726))+x10730+x10731);
evalcond[1]=((((-1.0)*sj3))+(((-1.0)*x10724*x10729))+((sj5*x10728))+((sj5*x10726))+(((-1.0)*x10725*x10727)));
evalcond[2]=((((3.5e-7)*x10721*x10724))+(((3.5e-7)*x10720*x10725))+(((-1.0)*py*x10729))+(((-1.0)*x10722*x10726))+(((-1.0)*x10722*x10728))+(((-1.0)*x10723*x10728))+(((-1.0)*x10723*x10726))+(((-0.0008)*x10731))+(((-0.0008)*x10730))+(((-1.0)*px*x10727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x10732=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10732);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10732);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x10733=((0.64)*sj3);
IkReal x10734=((1.93020072)*cj5);
IkReal x10735=(r01*sj0);
IkReal x10736=(cj3*sj3);
IkReal x10737=((4.0)*pz);
IkReal x10738=(cj0*r11);
IkReal x10739=((0.64340024)*cj5);
IkReal x10740=((1.93020072)*cj3);
IkReal x10741=((0.64340024)*cj3);
IkReal x10742=((12.0)*pz);
IkReal x10743=(sj3*x10742);
IkReal x10744=(cj3*x10733);
IkReal x10745=(r00*sj0*sj5);
IkReal x10746=(cj0*r10*sj5);
IkReal x10747=((1.93020072)*x10745);
IkReal x10748=(x10734*x10735);
IkReal x10749=(x10734*x10738);
IkReal x10750=((1.93020072)*x10746);
IkReal x10751=(x10736*x10742);
IkReal x10752=(cj3*x10749);
IkReal x10753=(x10740*x10746);
IkReal x10754=(x10740*x10745);
IkReal x10755=(cj3*x10748);
IkReal x10756=(x10748+x10747);
IkReal x10757=(x10754+x10755);
IkReal x10758=(x10749+x10743+x10750);
IkReal x10759=(x10752+x10753+x10751);
j1eval[0]=((((40584.4155844156)*(IKabs(((((-1.0)*x10733))+(((-1.0)*x10758))+x10756)))))+(((40584.4155844156)*(IKabs(((((-1.0)*x10744))+(((-1.0)*x10757))+x10759)))))+(((40584.4155844156)*(IKabs(((((-1.0)*x10757))+x10744+x10759)))))+(((40584.4155844156)*(IKabs(((((-1.0)*x10758))+x10756+x10733)))))+(IKabs(sj3))+(((40584.4155844156)*(IKabs(((((-1.0)*x10741*x10745))+(((-1.0)*cj3*x10735*x10739))+((cj3*x10738*x10739))+((x10736*x10737))+x10744+((x10741*x10746)))))))+(((40584.4155844156)*(IKabs(((((-1.0)*x10738*x10739))+(((0.64340024)*x10745))+(((-1.0)*x10733))+(((-1.0)*sj3*x10737))+((x10735*x10739))+(((-0.64340024)*x10746)))))))+(IKabs(x10736)));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x10760=((0.64)*sj3);
IkReal x10761=((6.16e-6)*sj3);
IkReal x10762=(pz*sj3);
IkReal x10763=((12.0)*x10762);
IkReal x10764=((4.0)*x10762);
IkReal x10765=(cj5*r01*sj0);
IkReal x10766=(r00*sj0*sj5);
IkReal x10767=(cj0*cj5*r11);
IkReal x10768=(cj0*r10*sj5);
IkReal x10769=((1.93020072)*x10766);
IkReal x10770=((1.93020072)*x10765);
IkReal x10771=((1.93020072)*x10767);
IkReal x10772=((1.93020072)*x10768);
IkReal x10773=((0.64340024)*x10765);
IkReal x10774=((0.64340024)*x10766);
IkReal x10775=((0.64340024)*x10768);
IkReal x10776=((0.64340024)*x10767);
IkReal x10777=(x10773+x10774);
IkReal x10778=(x10769+x10770);
IkReal x10779=(x10763+x10771+x10772);
IkReal x10780=(x10764+x10775+x10776);
op[0]=((((-1.0)*x10760))+(((-1.0)*x10780))+x10777);
op[1]=x10761;
op[2]=((((-1.0)*x10779))+(((-1.0)*x10760))+x10778);
op[3]=((1.232e-5)*sj3);
op[4]=((((-1.0)*x10779))+x10760+x10778);
op[5]=x10761;
op[6]=((((-1.0)*x10780))+x10760+x10777);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x10781=(cj3*sj3);
IkReal x10782=(r01*sj0);
IkReal x10783=(cj0*r11);
IkReal x10784=(cj3*sj5);
IkReal x10785=(r00*sj0);
IkReal x10786=(cj0*r10);
IkReal x10787=((0.64)*x10781);
IkReal x10788=((1.93020072)*cj3*cj5);
IkReal x10789=((0.64340024)*cj3*cj5);
IkReal x10790=((12.0)*pz*x10781);
IkReal x10791=((4.0)*pz*x10781);
IkReal x10792=((0.64340024)*x10784*x10786);
IkReal x10793=(x10783*x10789);
IkReal x10794=(x10783*x10788);
IkReal x10795=((1.93020072)*x10784*x10786);
IkReal x10796=((1.93020072)*x10784*x10785);
IkReal x10797=(x10782*x10788);
IkReal x10798=((0.64340024)*x10784*x10785);
IkReal x10799=(x10782*x10789);
IkReal x10800=(x10798+x10799);
IkReal x10801=(x10796+x10797);
IkReal x10802=(x10794+x10795+x10790);
IkReal x10803=(x10792+x10793+x10791);
j1evalpoly[0]=((((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x10800))+x10787+x10803))))+(((-1.0)*x10800))+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x10801))+x10787+x10802))))+(((-1.0)*x10787))+(((-6.16e-6)*x10781*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((((-1.0)*x10801))+(((-1.0)*x10787))+x10802))))+(((-1.232e-5)*x10781*(htj1*htj1*htj1)))+(((-6.16e-6)*htj1*x10781))+x10803);
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs((cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs((r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*r22))+IKsqr((r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*r22), (r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x10804=IKsin(j2);
IkReal x10805=IKcos(j2);
IkReal x10806=((1.0)*sj0);
IkReal x10807=(sj0*sj5);
IkReal x10808=((1.0)*cj1);
IkReal x10809=(cj5*r00);
IkReal x10810=((1.0)*sj3);
IkReal x10811=(cj0*sj5);
IkReal x10812=((1.0)*cj3);
IkReal x10813=(cj1*x10805);
IkReal x10814=(cj0*cj5*r11);
IkReal x10815=(cj0*cj5*r10);
IkReal x10816=(sj3*x10804);
IkReal x10817=(sj1*x10805);
IkReal x10818=(sj1*x10804);
IkReal x10819=(cj5*r01*sj0);
IkReal x10820=(cj1*x10804);
evalcond[0]=((((-1.0)*x10818))+x10813);
evalcond[1]=(((sj1*x10816))+(((-1.0)*sj3*x10805*x10808)));
evalcond[2]=((((-1.0)*x10804*x10808))+(((-1.0)*x10817))+r22);
evalcond[3]=((((-1.0)*cj3*x10805*x10808))+((cj3*x10818)));
evalcond[4]=((((-1.0)*x10810*x10817))+(((-1.0)*x10814))+(((-1.0)*x10808*x10816))+(((-1.0)*r10*x10811))+((r00*x10807))+x10819);
evalcond[5]=((((-1.0)*x10812*x10817))+((r01*x10807))+(((-1.0)*cj3*x10804*x10808))+(((-1.0)*x10806*x10809))+(((-1.0)*r11*x10811))+x10815);
evalcond[6]=((((0.16085006)*x10817))+(((0.16085006)*x10820))+(((0.02349986)*x10813))+(((0.16)*cj1))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-0.02349986)*x10818)));
evalcond[7]=((((0.16085006)*x10818))+(((-3.5e-7)*r01*x10807))+(((0.0008)*r10*x10811))+(((3.5e-7)*r11*x10811))+(((0.02349986)*x10817))+(((-0.0008)*r00*x10807))+(((0.02349986)*x10820))+(((-1.0)*px*x10806))+(((3.5e-7)*sj0*x10809))+(((-0.16085006)*x10813))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.0008)*x10819))+(((0.0008)*x10814))+((cj0*py))+(((-3.5e-7)*x10815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10821=(cj3*cj5);
IkReal x10822=(cj3*sj5);
CheckValue<IkReal> x10823=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5))+(((-3.5e-7)*r22)))),-1);
if(!x10823.valid){
continue;
}
CheckValue<IkReal> x10824 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*px))+(((3.5e-7)*r00*x10821))+(((-0.0008)*r01*x10821))+(((-3.5e-7)*r01*x10822))+(((-0.0008)*r00*x10822)))),IkReal(((((0.0008)*r10*x10822))+(((3.5e-7)*r11*x10822))+(((0.0008)*r11*x10821))+((cj3*py))+(((-3.5e-7)*r10*x10821)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10824.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10823.value)))+(x10824.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x10825=IKcos(j0);
IkReal x10826=IKsin(j0);
IkReal x10827=(sj4*sj5);
IkReal x10828=(r01*sj5);
IkReal x10829=((1.0)*x10825);
IkReal x10830=(cj5*x10826);
IkReal x10831=(r00*x10825);
IkReal x10832=(r11*x10826);
IkReal x10833=(r10*sj5*x10826);
IkReal x10834=(cj5*r01*x10825);
evalcond[0]=(cj3+((sj5*x10831))+x10834+x10833+((r11*x10830)));
evalcond[1]=((((-1.0)*cj4*sj5*x10832))+(((-1.0)*cj4*x10828*x10829))+((cj4*r10*x10830))+((cj4*cj5*x10831)));
evalcond[2]=((((-1.0)*sj3))+(((-1.0)*r01*x10827*x10829))+((cj5*sj4*x10831))+((r10*sj4*x10830))+(((-1.0)*x10827*x10832)));
evalcond[3]=((((-0.0008)*sj5*x10831))+(((-3.5e-7)*x10825*x10828))+(((-0.0008)*x10834))+(((-0.0008)*x10833))+(((3.5e-7)*r10*x10830))+(((-0.0008)*r11*x10830))+(((3.5e-7)*cj5*x10831))+(((-1.0)*px*x10829))+(((-1.0)*py*x10826))+(((-3.5e-7)*sj5*x10832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x10835=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10835);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10835);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x10836=((12.0)*pz);
IkReal x10837=((0.64)*cj3);
IkReal x10838=(cj0*cj4);
IkReal x10839=((0.28199832)*cj5);
IkReal x10840=(r11*sj5);
IkReal x10841=((4.0)*pz);
IkReal x10842=(r22*sj4);
IkReal x10843=(cj4*r22);
IkReal x10844=(cj4*sj0);
IkReal x10845=(r01*sj5);
IkReal x10846=((0.09399944)*cj5);
IkReal x10847=((1.93020072)*x10842);
IkReal x10848=((0.28199832)*x10843);
IkReal x10849=(cj3*x10836);
IkReal x10850=(cj3*x10847);
IkReal x10851=(r00*x10839*x10844);
IkReal x10852=((0.28199832)*x10838*x10840);
IkReal x10853=(x10849+x10850);
IkReal x10854=(((r10*x10838*x10839))+(((0.28199832)*x10844*x10845)));
IkReal x10855=(x10847+x10851+x10852+x10836);
j1eval[0]=((1.0)+(((40584.4155844156)*(IKabs(((((-1.0)*x10853))+(((-1.0)*x10837))+x10848)))))+(IKabs(cj3))+(((40584.4155844156)*(IKabs(((0.64)+(((-1.0)*r10*x10838*x10846))+((r00*x10844*x10846))+(((0.64340024)*x10842))+(((0.09399944)*x10838*x10840))+(((-0.09399944)*x10844*x10845))+x10841)))))+(((40584.4155844156)*(IKabs(((((-1.0)*x10853))+x10848+x10837)))))+(((40584.4155844156)*(IKabs(((((-1.0)*cj3*x10841))+(((0.09399944)*x10843))+(((-0.64340024)*cj3*x10842))+(((-1.0)*x10837)))))))+(((40584.4155844156)*(IKabs(((0.64)+(((-1.0)*x10854))+x10855)))))+(((40584.4155844156)*(IKabs(((-0.64)+(((-1.0)*x10854))+x10855))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x10856=((0.64)*cj3);
IkReal x10857=((6.16e-6)*cj3);
IkReal x10858=(cj4*r22);
IkReal x10859=(cj3*pz);
IkReal x10860=((0.28199832)*x10858);
IkReal x10861=((12.0)*x10859);
IkReal x10862=((0.09399944)*x10858);
IkReal x10863=((4.0)*x10859);
IkReal x10864=(cj3*r22*sj4);
IkReal x10865=((1.93020072)*x10864);
IkReal x10866=((0.64340024)*x10864);
IkReal x10867=(x10863+x10866);
IkReal x10868=(x10861+x10865);
op[0]=((((-1.0)*x10856))+(((-1.0)*x10867))+x10862);
op[1]=x10857;
op[2]=((((-1.0)*x10856))+(((-1.0)*x10868))+x10860);
op[3]=((1.232e-5)*cj3);
op[4]=((((-1.0)*x10868))+x10860+x10856);
op[5]=x10857;
op[6]=((((-1.0)*x10867))+x10862+x10856);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x10869=((12.0)*pz);
IkReal x10870=((4.0)*pz);
IkReal x10871=(cj0*cj4);
IkReal x10872=(cj5*r10);
IkReal x10873=((0.28199832)*sj5);
IkReal x10874=(r22*sj4);
IkReal x10875=(cj5*r00);
IkReal x10876=(cj4*sj0);
IkReal x10877=((1.93020072)*x10874);
IkReal x10878=((0.64340024)*x10874);
IkReal x10879=((0.09399944)*x10876);
IkReal x10880=((0.28199832)*x10875*x10876);
IkReal x10881=(r11*x10871*x10873);
IkReal x10882=(x10875*x10879);
IkReal x10883=((0.09399944)*r11*sj5*x10871);
IkReal x10884=(r01*sj5*x10879);
IkReal x10885=((0.09399944)*x10871*x10872);
IkReal x10886=(((r01*x10873*x10876))+(((0.28199832)*x10871*x10872)));
IkReal x10887=(x10884+x10885);
IkReal x10888=(x10878+x10870+x10882+x10883);
IkReal x10889=(x10877+x10869+x10880+x10881);
j1evalpoly[0]=((-0.64)+(((htj1*htj1*htj1*htj1)*(((0.64)+(((-1.0)*x10886))+x10889))))+(((-1.0)*x10887))+(((-6.16e-6)*htj1))+(((-6.16e-6)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.232e-5)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.64)+(((-1.0)*x10886))+x10889))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.64)+(((-1.0)*x10887))+x10888))))+x10888);
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x10890=((-1.0)*r22*sj4);
if( IKabs((cj1*x10890)) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj1*x10890)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*x10890))+IKsqr((sj1*x10890))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*x10890), (sj1*x10890));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x10891=IKcos(j2);
IkReal x10892=IKsin(j2);
IkReal x10893=(r00*sj0);
IkReal x10894=((0.0008)*sj5);
IkReal x10895=(cj0*cj5);
IkReal x10896=((1.0)*cj4);
IkReal x10897=((1.0)*sj0);
IkReal x10898=(r01*sj5);
IkReal x10899=((1.0)*cj1);
IkReal x10900=((1.0)*r10);
IkReal x10901=(cj0*sj5);
IkReal x10902=((1.0)*sj3);
IkReal x10903=((1.0)*cj3);
IkReal x10904=(cj1*x10891);
IkReal x10905=(sj3*x10892);
IkReal x10906=(sj1*x10891);
IkReal x10907=(sj1*x10892);
IkReal x10908=(cj5*r01*sj0);
IkReal x10909=(cj1*x10892);
evalcond[0]=((((-1.0)*sj3*x10891*x10899))+((sj1*x10905)));
evalcond[1]=((((-1.0)*x10892*x10899))+(((-1.0)*r22*sj4))+(((-1.0)*x10906)));
evalcond[2]=(((cj4*r22))+(((-1.0)*cj3*x10891*x10899))+((cj3*x10907)));
evalcond[3]=(((sj5*x10893))+(((-1.0)*x10900*x10901))+(((-1.0)*r11*x10895))+(((-1.0)*x10902*x10906))+(((-1.0)*x10899*x10905))+x10908);
evalcond[4]=((((-0.02349986)*x10907))+(((0.16085006)*x10909))+(((0.16085006)*x10906))+(((0.16)*cj1))+(((-1.0)*pz))+(((0.02349986)*x10904))+(((7.7e-7)*sj1)));
evalcond[5]=((((-1.0)*sj0*x10896*x10898))+(((-1.0)*r10*x10895*x10896))+((cj4*cj5*x10893))+(((-1.0)*x10907))+x10904+((cj4*r11*x10901)));
evalcond[6]=((((-1.0)*sj4*x10897*x10898))+(((-1.0)*x10903*x10906))+((cj5*sj4*x10893))+(((-1.0)*sj4*x10895*x10900))+(((-1.0)*cj3*x10892*x10899))+((r11*sj4*x10901)));
evalcond[7]=((((0.16085006)*x10907))+((cj0*r10*x10894))+(((-1.0)*x10893*x10894))+(((3.5e-7)*cj5*x10893))+(((-0.16085006)*x10904))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-3.5e-7)*sj0*x10898))+(((0.02349986)*x10909))+(((0.02349986)*x10906))+(((3.5e-7)*r11*x10901))+(((-0.0008)*x10908))+(((0.0008)*r11*x10895))+(((-1.0)*px*x10897))+(((-3.5e-7)*r10*x10895))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10910=(cj3*sj4);
IkReal x10911=(sj3*sj5);
IkReal x10912=((1.0)*r10);
IkReal x10913=(cj5*sj3);
CheckValue<IkReal> x10914=IKPowWithIntegerCheck(IKsign((r22*sj4)),-1);
if(!x10914.valid){
continue;
}
CheckValue<IkReal> x10915 = IKatan2WithCheck(IkReal((((r00*x10911))+(((-1.0)*r01*sj5*x10910))+((r01*x10913))+((cj5*r00*x10910)))),IkReal(((((-1.0)*cj5*x10910*x10912))+(((-1.0)*x10911*x10912))+(((-1.0)*r11*x10913))+((r11*sj5*x10910)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10915.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x10914.value)))+(x10915.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x10916=IKcos(j0);
IkReal x10917=IKsin(j0);
IkReal x10918=(sj4*sj5);
IkReal x10919=(r01*sj5);
IkReal x10920=((1.0)*x10916);
IkReal x10921=(cj5*x10917);
IkReal x10922=(r00*x10916);
IkReal x10923=(r11*x10917);
IkReal x10924=(r10*sj5*x10917);
IkReal x10925=(cj5*r01*x10916);
evalcond[0]=(cj3+((sj5*x10922))+((r11*x10921))+x10925+x10924);
evalcond[1]=((((-1.0)*cj4*x10919*x10920))+((cj4*cj5*x10922))+(((-1.0)*cj4*sj5*x10923))+((cj4*r10*x10921)));
evalcond[2]=((((-1.0)*x10918*x10923))+(((-1.0)*sj3))+(((-1.0)*r01*x10918*x10920))+((cj5*sj4*x10922))+((r10*sj4*x10921)));
evalcond[3]=((((-1.0)*py*x10917))+(((3.5e-7)*r10*x10921))+(((-3.5e-7)*x10916*x10919))+(((3.5e-7)*cj5*x10922))+(((-0.0008)*sj5*x10922))+(((-0.0008)*x10925))+(((-0.0008)*x10924))+(((-1.0)*px*x10920))+(((-3.5e-7)*sj5*x10923))+(((-0.0008)*r11*x10921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x10926=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10926);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10926);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x10927=((12.0)*pz);
IkReal x10928=((0.64)*cj3);
IkReal x10929=(cj0*cj4);
IkReal x10930=((0.28199832)*cj5);
IkReal x10931=(r11*sj5);
IkReal x10932=((4.0)*pz);
IkReal x10933=(r22*sj4);
IkReal x10934=(cj4*r22);
IkReal x10935=(cj4*sj0);
IkReal x10936=(r01*sj5);
IkReal x10937=((0.09399944)*cj5);
IkReal x10938=((1.93020072)*x10933);
IkReal x10939=((0.28199832)*x10934);
IkReal x10940=(cj3*x10927);
IkReal x10941=(cj3*x10938);
IkReal x10942=(r00*x10930*x10935);
IkReal x10943=((0.28199832)*x10929*x10931);
IkReal x10944=(x10941+x10940);
IkReal x10945=(((r10*x10929*x10930))+(((0.28199832)*x10935*x10936)));
IkReal x10946=(x10943+x10942+x10927+x10938);
j1eval[0]=((1.0)+(((40584.4155844156)*(IKabs(((0.64)+(((-1.0)*x10945))+x10946)))))+(((40584.4155844156)*(IKabs(((-0.64)+(((-1.0)*x10945))+x10946)))))+(IKabs(cj3))+(((40584.4155844156)*(IKabs(((((-1.0)*x10928))+(((0.09399944)*x10934))+(((-1.0)*cj3*x10932))+(((-0.64340024)*cj3*x10933)))))))+(((40584.4155844156)*(IKabs(((0.64)+(((0.64340024)*x10933))+((r00*x10935*x10937))+(((-1.0)*r10*x10929*x10937))+(((0.09399944)*x10929*x10931))+x10932+(((-0.09399944)*x10935*x10936)))))))+(((40584.4155844156)*(IKabs(((((-1.0)*x10944))+x10928+x10939)))))+(((40584.4155844156)*(IKabs(((((-1.0)*x10928))+(((-1.0)*x10944))+x10939))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x10947=((0.64)*cj3);
IkReal x10948=((6.16e-6)*cj3);
IkReal x10949=(cj4*r22);
IkReal x10950=(cj3*pz);
IkReal x10951=((0.28199832)*x10949);
IkReal x10952=((12.0)*x10950);
IkReal x10953=((0.09399944)*x10949);
IkReal x10954=((4.0)*x10950);
IkReal x10955=(cj3*r22*sj4);
IkReal x10956=((1.93020072)*x10955);
IkReal x10957=((0.64340024)*x10955);
IkReal x10958=(x10954+x10957);
IkReal x10959=(x10952+x10956);
op[0]=((((-1.0)*x10947))+(((-1.0)*x10958))+x10953);
op[1]=x10948;
op[2]=((((-1.0)*x10947))+(((-1.0)*x10959))+x10951);
op[3]=((1.232e-5)*cj3);
op[4]=((((-1.0)*x10959))+x10947+x10951);
op[5]=x10948;
op[6]=((((-1.0)*x10958))+x10947+x10953);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x10960=((12.0)*pz);
IkReal x10961=((4.0)*pz);
IkReal x10962=(cj0*cj4);
IkReal x10963=(cj5*r10);
IkReal x10964=((0.28199832)*sj5);
IkReal x10965=(r22*sj4);
IkReal x10966=(cj5*r00);
IkReal x10967=(cj4*sj0);
IkReal x10968=((1.93020072)*x10965);
IkReal x10969=((0.64340024)*x10965);
IkReal x10970=((0.09399944)*x10967);
IkReal x10971=((0.28199832)*x10966*x10967);
IkReal x10972=(r11*x10962*x10964);
IkReal x10973=(x10966*x10970);
IkReal x10974=((0.09399944)*r11*sj5*x10962);
IkReal x10975=(r01*sj5*x10970);
IkReal x10976=((0.09399944)*x10962*x10963);
IkReal x10977=(((r01*x10964*x10967))+(((0.28199832)*x10962*x10963)));
IkReal x10978=(x10976+x10975);
IkReal x10979=(x10961+x10969+x10973+x10974);
IkReal x10980=(x10960+x10968+x10972+x10971);
j1evalpoly[0]=((-0.64)+(((-6.16e-6)*htj1))+(((htj1*htj1*htj1*htj1)*(((0.64)+(((-1.0)*x10977))+x10980))))+(((-6.16e-6)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.64)+(((-1.0)*x10978))+x10979))))+(((-1.0)*x10978))+(((-1.232e-5)*(htj1*htj1*htj1)))+x10979+(((htj1*htj1)*(((-0.64)+(((-1.0)*x10977))+x10980)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x10981=((-1.0)*r22*sj4);
if( IKabs((cj1*x10981)) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj1*x10981)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*x10981))+IKsqr((sj1*x10981))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*x10981), (sj1*x10981));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x10982=IKcos(j2);
IkReal x10983=IKsin(j2);
IkReal x10984=(r00*sj0);
IkReal x10985=((0.0008)*sj5);
IkReal x10986=(cj0*cj5);
IkReal x10987=((1.0)*cj4);
IkReal x10988=((1.0)*sj0);
IkReal x10989=(r01*sj5);
IkReal x10990=((1.0)*cj1);
IkReal x10991=((1.0)*r10);
IkReal x10992=(cj0*sj5);
IkReal x10993=((1.0)*sj3);
IkReal x10994=((1.0)*cj3);
IkReal x10995=(cj1*x10982);
IkReal x10996=(sj3*x10983);
IkReal x10997=(sj1*x10982);
IkReal x10998=(sj1*x10983);
IkReal x10999=(cj5*r01*sj0);
IkReal x11000=(cj1*x10983);
evalcond[0]=((((-1.0)*sj3*x10982*x10990))+((sj1*x10996)));
evalcond[1]=((((-1.0)*x10997))+(((-1.0)*r22*sj4))+(((-1.0)*x10983*x10990)));
evalcond[2]=(((cj4*r22))+((cj3*x10998))+(((-1.0)*cj3*x10982*x10990)));
evalcond[3]=((((-1.0)*r11*x10986))+((sj5*x10984))+(((-1.0)*x10993*x10997))+(((-1.0)*x10991*x10992))+(((-1.0)*x10990*x10996))+x10999);
evalcond[4]=((((0.16)*cj1))+(((-1.0)*pz))+(((-0.02349986)*x10998))+(((7.7e-7)*sj1))+(((0.16085006)*x11000))+(((0.02349986)*x10995))+(((0.16085006)*x10997)));
evalcond[5]=((((-1.0)*r10*x10986*x10987))+(((-1.0)*x10998))+(((-1.0)*sj0*x10987*x10989))+((cj4*r11*x10992))+((cj4*cj5*x10984))+x10995);
evalcond[6]=(((cj5*sj4*x10984))+(((-1.0)*x10994*x10997))+(((-1.0)*sj4*x10986*x10991))+(((-1.0)*sj4*x10988*x10989))+(((-1.0)*cj3*x10983*x10990))+((r11*sj4*x10992)));
evalcond[7]=((((-0.0008)*x10999))+(((-0.16085006)*x10995))+(((3.5e-7)*r11*x10992))+(((-3.5e-7)*sj0*x10989))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*x10984*x10985))+(((-3.5e-7)*r10*x10986))+(((0.0008)*r11*x10986))+(((-1.0)*px*x10988))+(((0.02349986)*x11000))+(((0.02349986)*x10997))+(((3.5e-7)*cj5*x10984))+(((0.16085006)*x10998))+((cj0*py))+((cj0*r10*x10985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11001=(cj3*cj4);
CheckValue<IkReal> x11002=IKPowWithIntegerCheck(IKsign((cj4*r22)),-1);
if(!x11002.valid){
continue;
}
CheckValue<IkReal> x11003 = IKatan2WithCheck(IkReal((((cj5*r00*x11001))+(((-1.0)*r01*sj5*x11001)))),IkReal((((r11*sj5*x11001))+(((-1.0)*cj5*r10*x11001)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11003.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x11002.value)))+(x11003.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x11004=IKcos(j0);
IkReal x11005=IKsin(j0);
IkReal x11006=(sj4*sj5);
IkReal x11007=(r01*sj5);
IkReal x11008=((1.0)*x11004);
IkReal x11009=(cj5*x11005);
IkReal x11010=(r00*x11004);
IkReal x11011=(r11*x11005);
IkReal x11012=(r10*sj5*x11005);
IkReal x11013=(cj5*r01*x11004);
evalcond[0]=(cj3+x11012+x11013+((r11*x11009))+((sj5*x11010)));
evalcond[1]=(((cj4*r10*x11009))+(((-1.0)*cj4*x11007*x11008))+(((-1.0)*cj4*sj5*x11011))+((cj4*cj5*x11010)));
evalcond[2]=((((-1.0)*x11006*x11011))+(((-1.0)*sj3))+((r10*sj4*x11009))+(((-1.0)*r01*x11006*x11008))+((cj5*sj4*x11010)));
evalcond[3]=((((3.5e-7)*r10*x11009))+(((-1.0)*px*x11008))+(((-3.5e-7)*sj5*x11011))+(((-3.5e-7)*x11004*x11007))+(((-0.0008)*r11*x11009))+(((-0.0008)*x11013))+(((-0.0008)*x11012))+(((3.5e-7)*cj5*x11010))+(((-1.0)*py*x11005))+(((-0.0008)*sj5*x11010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x11014=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11014);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11014);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x11015=((12.0)*pz);
IkReal x11016=((0.64)*cj3);
IkReal x11017=(cj0*cj4);
IkReal x11018=((0.28199832)*cj5);
IkReal x11019=(r11*sj5);
IkReal x11020=((4.0)*pz);
IkReal x11021=(r22*sj4);
IkReal x11022=(cj4*r22);
IkReal x11023=(cj4*sj0);
IkReal x11024=(r01*sj5);
IkReal x11025=((0.09399944)*cj5);
IkReal x11026=((1.93020072)*x11021);
IkReal x11027=((0.28199832)*x11022);
IkReal x11028=(cj3*x11015);
IkReal x11029=(cj3*x11026);
IkReal x11030=(r00*x11018*x11023);
IkReal x11031=((0.28199832)*x11017*x11019);
IkReal x11032=(x11029+x11028);
IkReal x11033=((((0.28199832)*x11023*x11024))+((r10*x11017*x11018)));
IkReal x11034=(x11015+x11026+x11030+x11031);
j1eval[0]=((1.0)+(((40584.4155844156)*(IKabs(((((-1.0)*x11016))+x11027+(((-1.0)*x11032)))))))+(((40584.4155844156)*(IKabs((x11016+x11027+(((-1.0)*x11032)))))))+(((40584.4155844156)*(IKabs(((((-1.0)*x11016))+(((0.09399944)*x11022))+(((-1.0)*cj3*x11020))+(((-0.64340024)*cj3*x11021)))))))+(IKabs(cj3))+(((40584.4155844156)*(IKabs(((0.64)+(((-0.09399944)*x11023*x11024))+(((0.64340024)*x11021))+(((-1.0)*r10*x11017*x11025))+x11020+((r00*x11023*x11025))+(((0.09399944)*x11017*x11019)))))))+(((40584.4155844156)*(IKabs(((-0.64)+x11034+(((-1.0)*x11033)))))))+(((40584.4155844156)*(IKabs(((0.64)+x11034+(((-1.0)*x11033))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x11035=((0.64)*cj3);
IkReal x11036=((6.16e-6)*cj3);
IkReal x11037=(cj4*r22);
IkReal x11038=(cj3*pz);
IkReal x11039=((0.28199832)*x11037);
IkReal x11040=((12.0)*x11038);
IkReal x11041=((0.09399944)*x11037);
IkReal x11042=((4.0)*x11038);
IkReal x11043=(cj3*r22*sj4);
IkReal x11044=((1.93020072)*x11043);
IkReal x11045=((0.64340024)*x11043);
IkReal x11046=(x11045+x11042);
IkReal x11047=(x11044+x11040);
op[0]=((((-1.0)*x11046))+x11041+(((-1.0)*x11035)));
op[1]=x11036;
op[2]=((((-1.0)*x11047))+x11039+(((-1.0)*x11035)));
op[3]=((1.232e-5)*cj3);
op[4]=((((-1.0)*x11047))+x11035+x11039);
op[5]=x11036;
op[6]=((((-1.0)*x11046))+x11041+x11035);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x11048=((12.0)*pz);
IkReal x11049=((4.0)*pz);
IkReal x11050=(cj0*cj4);
IkReal x11051=(cj5*r10);
IkReal x11052=((0.28199832)*sj5);
IkReal x11053=(r22*sj4);
IkReal x11054=(cj5*r00);
IkReal x11055=(cj4*sj0);
IkReal x11056=((1.93020072)*x11053);
IkReal x11057=((0.64340024)*x11053);
IkReal x11058=((0.09399944)*x11055);
IkReal x11059=((0.28199832)*x11054*x11055);
IkReal x11060=(r11*x11050*x11052);
IkReal x11061=(x11054*x11058);
IkReal x11062=((0.09399944)*r11*sj5*x11050);
IkReal x11063=(r01*sj5*x11058);
IkReal x11064=((0.09399944)*x11050*x11051);
IkReal x11065=(((r01*x11052*x11055))+(((0.28199832)*x11050*x11051)));
IkReal x11066=(x11063+x11064);
IkReal x11067=(x11049+x11057+x11062+x11061);
IkReal x11068=(x11048+x11056+x11059+x11060);
j1evalpoly[0]=((-0.64)+(((-1.0)*x11066))+(((-6.16e-6)*htj1))+x11067+(((htj1*htj1)*(((-0.64)+(((-1.0)*x11065))+x11068))))+(((-6.16e-6)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.64)+(((-1.0)*x11065))+x11068))))+(((-1.232e-5)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.64)+(((-1.0)*x11066))+x11067)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x11069=((-1.0)*r22*sj4);
if( IKabs((cj1*x11069)) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj1*x11069)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*x11069))+IKsqr((sj1*x11069))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*x11069), (sj1*x11069));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x11070=IKcos(j2);
IkReal x11071=IKsin(j2);
IkReal x11072=(r00*sj0);
IkReal x11073=((0.0008)*sj5);
IkReal x11074=(cj0*cj5);
IkReal x11075=((1.0)*cj4);
IkReal x11076=((1.0)*sj0);
IkReal x11077=(r01*sj5);
IkReal x11078=((1.0)*cj1);
IkReal x11079=((1.0)*r10);
IkReal x11080=(cj0*sj5);
IkReal x11081=((1.0)*sj3);
IkReal x11082=((1.0)*cj3);
IkReal x11083=(cj1*x11070);
IkReal x11084=(sj3*x11071);
IkReal x11085=(sj1*x11070);
IkReal x11086=(sj1*x11071);
IkReal x11087=(cj5*r01*sj0);
IkReal x11088=(cj1*x11071);
evalcond[0]=((((-1.0)*sj3*x11070*x11078))+((sj1*x11084)));
evalcond[1]=((((-1.0)*x11085))+(((-1.0)*x11071*x11078))+(((-1.0)*r22*sj4)));
evalcond[2]=(((cj3*x11086))+((cj4*r22))+(((-1.0)*cj3*x11070*x11078)));
evalcond[3]=(((sj5*x11072))+(((-1.0)*x11081*x11085))+(((-1.0)*x11078*x11084))+x11087+(((-1.0)*r11*x11074))+(((-1.0)*x11079*x11080)));
evalcond[4]=((((0.16)*cj1))+(((0.16085006)*x11088))+(((0.16085006)*x11085))+(((-1.0)*pz))+(((0.02349986)*x11083))+(((7.7e-7)*sj1))+(((-0.02349986)*x11086)));
evalcond[5]=(((cj4*cj5*x11072))+((cj4*r11*x11080))+(((-1.0)*x11086))+x11083+(((-1.0)*r10*x11074*x11075))+(((-1.0)*sj0*x11075*x11077)));
evalcond[6]=((((-1.0)*cj3*x11071*x11078))+(((-1.0)*sj4*x11074*x11079))+((cj5*sj4*x11072))+(((-1.0)*x11082*x11085))+((r11*sj4*x11080))+(((-1.0)*sj4*x11076*x11077)));
evalcond[7]=((((-1.0)*x11072*x11073))+((cj0*r10*x11073))+(((3.5e-7)*cj5*x11072))+(((0.0008)*r11*x11074))+(((-0.16085006)*x11083))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.16085006)*x11086))+(((-3.5e-7)*r10*x11074))+(((0.02349986)*x11088))+(((0.02349986)*x11085))+(((-0.0008)*x11087))+(((3.5e-7)*r11*x11080))+(((-3.5e-7)*sj0*x11077))+((cj0*py))+(((-1.0)*px*x11076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11089=(cj3*cj5);
IkReal x11090=(cj3*sj5);
CheckValue<IkReal> x11091 = IKatan2WithCheck(IkReal(((((-0.0008)*r00*x11090))+(((-1.0)*cj3*px))+(((3.5e-7)*r00*x11089))+(((-0.0008)*r01*x11089))+(((-3.5e-7)*r01*x11090)))),IkReal(((((-3.5e-7)*r10*x11089))+(((0.0008)*r11*x11089))+(((0.0008)*r10*x11090))+((cj3*py))+(((3.5e-7)*r11*x11090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11091.valid){
continue;
}
CheckValue<IkReal> x11092=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5))+(((-3.5e-7)*r22)))),-1);
if(!x11092.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x11091.value)+(((1.5707963267949)*(x11092.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x11093=IKcos(j0);
IkReal x11094=IKsin(j0);
IkReal x11095=((1.0)*sj4);
IkReal x11096=(r01*sj5);
IkReal x11097=(r12*x11094);
IkReal x11098=((1.0)*x11093);
IkReal x11099=(cj5*x11094);
IkReal x11100=(r00*x11093);
IkReal x11101=(sj5*x11094);
IkReal x11102=(cj5*r01*x11093);
evalcond[0]=(cj3+((r11*x11099))+((r10*x11101))+x11102+((sj5*x11100)));
evalcond[1]=((((-1.0)*r02*x11093*x11095))+((cj4*r10*x11099))+((cj4*cj5*x11100))+(((-1.0)*x11095*x11097))+(((-1.0)*cj4*r11*x11101))+(((-1.0)*cj4*x11096*x11098)));
evalcond[2]=(((cj5*sj4*x11100))+(((-1.0)*r11*x11095*x11101))+(((-1.0)*sj3))+((cj4*r02*x11093))+((cj4*x11097))+(((-1.0)*x11093*x11095*x11096))+((r10*sj4*x11099)));
evalcond[3]=((((-3.5e-7)*x11093*x11096))+(((-0.0008)*sj5*x11100))+(((-0.0008)*x11102))+(((-3.5e-7)*r11*x11101))+(((-1.0)*py*x11094))+(((-0.0008)*r11*x11099))+(((3.5e-7)*r10*x11099))+(((-1.0)*px*x11098))+(((-0.0008)*r10*x11101))+(((3.5e-7)*cj5*x11100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x11103=((0.64)*cj3);
IkReal x11104=((0.64)*sj3);
IkReal x11105=(cj5*r21);
IkReal x11106=((0.64340024)*cj4);
IkReal x11107=(r21*sj5);
IkReal x11108=((4.2e-6)*sj3);
IkReal x11109=((0.0096)*cj3);
IkReal x11110=(cj5*r20);
IkReal x11111=((0.0096)*sj3);
IkReal x11112=((0.28199832)*sj4);
IkReal x11113=((0.09399944)*sj4);
IkReal x11114=(r20*sj5);
IkReal x11115=(cj4*r22);
IkReal x11116=((0.0032)*cj3);
IkReal x11117=((0.0032)*sj3);
IkReal x11118=((1.4e-6)*sj3);
IkReal x11119=((12.0)*pz);
IkReal x11120=((4.0)*pz);
IkReal x11121=((1.93020072)*cj4);
IkReal x11122=((0.28199832)*x11105);
IkReal x11123=((0.28199832)*x11114);
IkReal x11124=(sj3*x11119);
IkReal x11125=((0.28199832)*x11115);
IkReal x11126=(cj3*x11119);
IkReal x11127=(cj3*x11107);
IkReal x11128=(cj3*r22*sj4);
IkReal x11129=(sj3*x11121);
IkReal x11130=(r22*sj3*sj4);
IkReal x11131=(x11108*x11110);
IkReal x11132=(x11107*x11108);
IkReal x11133=((1.93020072)*x11130);
IkReal x11134=(x11105*x11111);
IkReal x11135=(x11111*x11114);
IkReal x11136=(x11110*x11112);
IkReal x11137=((4.2e-6)*cj3*x11110);
IkReal x11138=((4.2e-6)*x11127);
IkReal x11139=(x11109*x11114);
IkReal x11140=(x11107*x11112);
IkReal x11141=((1.93020072)*x11128);
IkReal x11142=(x11105*x11109);
IkReal x11143=(x11110*x11129);
IkReal x11144=(x11107*x11129);
IkReal x11145=(cj3*x11110*x11121);
IkReal x11146=(x11121*x11127);
IkReal x11147=(x11131+x11122+x11123+x11143);
IkReal x11148=(x11137+x11136+x11125+x11145);
IkReal x11149=(x11135+x11134+x11133+x11132+x11124+x11144);
IkReal x11150=(x11139+x11138+x11126+x11146+x11140+x11141+x11142);
j1eval[0]=((((40584.4155844156)*(IKabs((x11103+x11148+(((-1.0)*x11150)))))))+(((40584.4155844156)*(IKabs(((((-1.0)*sj3*x11106*x11107))+(((-1.0)*x11105*x11117))+((sj3*x11106*x11110))+(((0.09399944)*x11114))+(((0.09399944)*x11105))+(((-1.0)*x11114*x11117))+(((-1.0)*x11107*x11118))+((x11110*x11118))+(((-1.0)*x11104))+(((-1.0)*sj3*x11120))+(((-0.64340024)*x11130)))))))+(((40584.4155844156)*(IKabs((x11147+(((-1.0)*x11104))+(((-1.0)*x11149)))))))+(((40584.4155844156)*(IKabs((x11104+x11147+(((-1.0)*x11149)))))))+(IKabs(cj3))+(IKabs(sj3))+(((40584.4155844156)*(IKabs((x11148+(((-1.0)*x11103))+(((-1.0)*x11150)))))))+(((40584.4155844156)*(IKabs((((cj3*x11106*x11110))+(((-1.0)*x11105*x11116))+(((-1.0)*cj3*x11120))+(((-1.0)*x11106*x11127))+(((0.09399944)*x11115))+(((-1.0)*x11114*x11116))+(((-1.0)*x11107*x11113))+(((1.4e-6)*cj3*x11110))+((x11110*x11113))+(((-0.64340024)*x11128))+(((-1.0)*x11103))+(((-1.4e-6)*x11127))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x11151=((0.64)*sj3);
IkReal x11152=((6.16e-6)*sj3);
IkReal x11153=((0.64340024)*sj3);
IkReal x11154=(r22*sj4);
IkReal x11155=(r21*sj3);
IkReal x11156=(r20*sj5);
IkReal x11157=(cj5*r21);
IkReal x11158=(cj4*sj5);
IkReal x11159=((1.93020072)*sj3);
IkReal x11160=(pz*sj3);
IkReal x11161=((0.28199832)*x11157);
IkReal x11162=((0.28199832)*x11156);
IkReal x11163=((12.0)*x11160);
IkReal x11164=((0.09399944)*x11156);
IkReal x11165=((0.09399944)*x11157);
IkReal x11166=((4.0)*x11160);
IkReal x11167=(cj4*cj5*r20);
IkReal x11168=(cj5*r20*sj3);
IkReal x11169=((4.2e-6)*x11168);
IkReal x11170=((4.2e-6)*sj5*x11155);
IkReal x11171=(x11154*x11159);
IkReal x11172=((0.0096)*cj5*x11155);
IkReal x11173=((0.0096)*sj3*x11156);
IkReal x11174=((1.4e-6)*x11168);
IkReal x11175=((0.0032)*sj3*x11156);
IkReal x11176=((1.4e-6)*sj5*x11155);
IkReal x11177=((0.0032)*cj5*x11155);
IkReal x11178=(x11153*x11154);
IkReal x11179=(x11159*x11167);
IkReal x11180=((1.93020072)*x11155*x11158);
IkReal x11181=(x11153*x11167);
IkReal x11182=(r21*x11153*x11158);
IkReal x11183=(x11174+x11164+x11165+x11181);
IkReal x11184=(x11179+x11169+x11162+x11161);
IkReal x11185=(x11175+x11177+x11176+x11178+x11166+x11182);
IkReal x11186=(x11171+x11170+x11173+x11172+x11163+x11180);
op[0]=((((-1.0)*x11185))+x11183+(((-1.0)*x11151)));
op[1]=x11152;
op[2]=((((-1.0)*x11186))+x11184+(((-1.0)*x11151)));
op[3]=((1.232e-5)*sj3);
op[4]=((((-1.0)*x11186))+x11151+x11184);
op[5]=x11152;
op[6]=((((-1.0)*x11185))+x11151+x11183);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x11187=((0.64)*cj3);
IkReal x11188=((0.64340024)*cj4);
IkReal x11189=((0.28199832)*sj4);
IkReal x11190=(cj5*r20);
IkReal x11191=(r21*sj5);
IkReal x11192=((0.09399944)*sj4);
IkReal x11193=(cj4*r22);
IkReal x11194=((6.16e-6)*cj3);
IkReal x11195=(cj3*pz);
IkReal x11196=((1.93020072)*cj4);
IkReal x11197=((0.09399944)*x11193);
IkReal x11198=((0.28199832)*x11193);
IkReal x11199=((12.0)*x11195);
IkReal x11200=((4.0)*x11195);
IkReal x11201=(cj3*x11191);
IkReal x11202=(cj3*cj5*r21);
IkReal x11203=(cj3*r22*sj4);
IkReal x11204=(cj3*r20*sj5);
IkReal x11205=(x11190*x11192);
IkReal x11206=((1.4e-6)*cj3*x11190);
IkReal x11207=(x11189*x11190);
IkReal x11208=((4.2e-6)*cj3*x11190);
IkReal x11209=((4.2e-6)*x11201);
IkReal x11210=((0.0096)*x11204);
IkReal x11211=(x11189*x11191);
IkReal x11212=((1.93020072)*x11203);
IkReal x11213=((0.0096)*x11202);
IkReal x11214=((0.0032)*x11202);
IkReal x11215=((0.0032)*x11204);
IkReal x11216=((1.4e-6)*x11201);
IkReal x11217=((0.64340024)*x11203);
IkReal x11218=(x11191*x11192);
IkReal x11219=(cj3*x11188*x11190);
IkReal x11220=(cj3*x11190*x11196);
IkReal x11221=(x11196*x11201);
IkReal x11222=(x11188*x11201);
IkReal x11223=(x11207+x11208+x11220+x11198);
IkReal x11224=(x11206+x11205+x11219+x11197);
IkReal x11225=(x11200+x11214+x11215+x11216+x11217+x11218+x11222);
IkReal x11226=(x11209+x11210+x11211+x11212+x11213+x11221+x11199);
j1evalpoly[0]=((((htj1*htj1)*((x11223+(((-1.0)*x11226))+x11187))))+x11224+(((-1.0)*x11225))+x11187+((htj1*x11194))+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x11187))+x11223+(((-1.0)*x11226))))))+(((1.232e-5)*cj3*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x11187))+x11224+(((-1.0)*x11225))))))+((x11194*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x11227=(cj3*sj3);
j2eval[0]=x11227;
j2eval[1]=IKsign(x11227);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x11228=(r21*sj5);
IkReal x11229=((1.0)*cj4);
IkReal x11230=(sj1*sj4);
IkReal x11231=((1.0)*r22);
IkReal x11232=(cj1*sj4);
IkReal x11233=(cj1*cj4);
IkReal x11234=(cj5*r20);
IkReal x11235=(sj4*x11234);
if( IKabs(((((-1.0)*x11231*x11232))+(((-1.0)*x11230*x11234))+((x11228*x11230))+((x11233*x11234))+(((-1.0)*r22*sj1*x11229))+(((-1.0)*cj1*x11228*x11229)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x11228*x11232))+((r22*x11233))+(((-1.0)*x11230*x11231))+((cj4*sj1*x11234))+(((-1.0)*sj1*x11228*x11229))+((x11232*x11234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x11231*x11232))+(((-1.0)*x11230*x11234))+((x11228*x11230))+((x11233*x11234))+(((-1.0)*r22*sj1*x11229))+(((-1.0)*cj1*x11228*x11229))))+IKsqr(((((-1.0)*x11228*x11232))+((r22*x11233))+(((-1.0)*x11230*x11231))+((cj4*sj1*x11234))+(((-1.0)*sj1*x11228*x11229))+((x11232*x11234))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x11231*x11232))+(((-1.0)*x11230*x11234))+((x11228*x11230))+((x11233*x11234))+(((-1.0)*r22*sj1*x11229))+(((-1.0)*cj1*x11228*x11229))), ((((-1.0)*x11228*x11232))+((r22*x11233))+(((-1.0)*x11230*x11231))+((cj4*sj1*x11234))+(((-1.0)*sj1*x11228*x11229))+((x11232*x11234))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x11236=IKcos(j2);
IkReal x11237=IKsin(j2);
IkReal x11238=((3.5e-7)*cj5);
IkReal x11239=(sj0*sj5);
IkReal x11240=((1.0)*cj4);
IkReal x11241=(cj0*r10);
IkReal x11242=((1.0)*sj4);
IkReal x11243=(cj0*sj4);
IkReal x11244=(r11*sj5);
IkReal x11245=((0.02349986)*sj1);
IkReal x11246=(cj4*sj0);
IkReal x11247=(cj5*r00);
IkReal x11248=(r21*sj5);
IkReal x11249=((0.0008)*cj5);
IkReal x11250=(cj5*r20);
IkReal x11251=(cj1*x11236);
IkReal x11252=(sj1*x11236);
IkReal x11253=(sj1*x11237);
IkReal x11254=(cj1*x11237);
IkReal x11255=((1.0)*x11252);
IkReal x11256=((1.0)*x11254);
IkReal x11257=(x11255+x11256);
evalcond[0]=((((-1.0)*x11251))+((cj4*r22))+x11253+((sj4*x11250))+(((-1.0)*x11242*x11248)));
evalcond[1]=((((-1.0)*x11257))+((cj4*x11250))+(((-1.0)*r22*x11242))+(((-1.0)*x11240*x11248)));
evalcond[2]=((((-1.0)*x11253))+(((-1.0)*r01*x11239*x11240))+x11251+((cj0*cj4*x11244))+((r12*x11243))+(((-1.0)*r02*sj0*x11242))+(((-1.0)*cj5*x11240*x11241))+((x11246*x11247)));
evalcond[3]=((((-1.0)*r01*x11239*x11242))+((x11243*x11244))+(((-1.0)*x11257))+((r02*x11246))+((sj0*sj4*x11247))+(((-1.0)*cj5*x11241*x11242))+(((-1.0)*cj0*r12*x11240)));
CheckValue<IkReal> x11258=IKPowWithIntegerCheck(r20,-1);
if(!x11258.valid){
continue;
}
evalcond[4]=((((0.16)*cj1))+((x11238*(x11258.value)*(r21*r21)))+(((0.02349986)*x11251))+((r20*x11238))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x11252))+(((0.16085006)*x11254))+(((-1.0)*x11237*x11245)));
evalcond[5]=((((-3.5e-7)*r01*x11239))+(((-0.16085006)*x11251))+(((-1.0)*r01*sj0*x11249))+(((0.0008)*sj5*x11241))+(((0.02349986)*x11254))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((x11236*x11245))+((r00*sj0*x11238))+(((-1.0)*x11238*x11241))+(((-1.0)*px*sj0))+((cj0*py))+(((3.5e-7)*cj0*x11244))+((cj0*r11*x11249))+(((0.16085006)*x11253))+(((-0.0008)*r00*x11239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x11259=((1.0)*sj5);
IkReal x11260=(cj1*r21);
IkReal x11261=(r20*sj1);
IkReal x11262=((1.0)*sj1);
IkReal x11263=(r22*sj4);
IkReal x11264=(cj4*cj5);
IkReal x11265=(cj1*r20);
if( IKabs(((((-1.0)*cj4*x11259*x11260))+((x11264*x11265))+(((-1.0)*cj5*r21*x11262))+(((-1.0)*cj1*x11263))+(((-1.0)*x11259*x11261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x11265))+((x11261*x11264))+((cj5*x11260))+(((-1.0)*cj4*r21*sj1*x11259))+(((-1.0)*x11262*x11263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x11259*x11260))+((x11264*x11265))+(((-1.0)*cj5*r21*x11262))+(((-1.0)*cj1*x11263))+(((-1.0)*x11259*x11261))))+IKsqr((((sj5*x11265))+((x11261*x11264))+((cj5*x11260))+(((-1.0)*cj4*r21*sj1*x11259))+(((-1.0)*x11262*x11263))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*x11259*x11260))+((x11264*x11265))+(((-1.0)*cj5*r21*x11262))+(((-1.0)*cj1*x11263))+(((-1.0)*x11259*x11261))), (((sj5*x11265))+((x11261*x11264))+((cj5*x11260))+(((-1.0)*cj4*r21*sj1*x11259))+(((-1.0)*x11262*x11263))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x11266=IKcos(j2);
IkReal x11267=IKsin(j2);
IkReal x11268=(r20*sj5);
IkReal x11269=((1.0)*cj4);
IkReal x11270=(cj5*r21);
IkReal x11271=((3.5e-7)*sj5);
IkReal x11272=((1.0)*sj0);
IkReal x11273=(r01*sj0);
IkReal x11274=((1.0)*cj0);
IkReal x11275=(cj5*r11);
IkReal x11276=(r00*sj0);
IkReal x11277=((0.0008)*sj5);
IkReal x11278=(cj4*cj5);
IkReal x11279=((3.5e-7)*cj5);
IkReal x11280=(cj0*r11);
IkReal x11281=(cj1*x11266);
IkReal x11282=(cj0*cj5*r10);
IkReal x11283=(sj1*x11266);
IkReal x11284=(sj1*x11267);
IkReal x11285=(cj1*x11267);
IkReal x11286=((1.0)*x11283);
IkReal x11287=((1.0)*x11285);
IkReal x11288=(x11287+x11286);
evalcond[0]=(x11284+x11268+x11270+(((-1.0)*x11281)));
evalcond[1]=((((-1.0)*r21*sj5*x11269))+(((-1.0)*x11288))+((r20*x11278))+(((-1.0)*r22*sj4)));
evalcond[2]=(((cj5*x11273))+(((-1.0)*r10*sj5*x11274))+((sj5*x11276))+(((-1.0)*x11274*x11275))+(((-1.0)*x11288)));
evalcond[3]=((((-1.0)*sj5*x11269*x11273))+((x11276*x11278))+x11281+(((-1.0)*x11284))+((cj4*sj5*x11280))+((cj0*r12*sj4))+(((-1.0)*r02*sj4*x11272))+(((-1.0)*x11269*x11282)));
evalcond[4]=((((-1.0)*r21*x11271))+(((0.16085006)*x11283))+(((0.16085006)*x11285))+(((0.16)*cj1))+(((-0.0008)*x11270))+(((-1.0)*pz))+(((7.7e-7)*sj1))+((r20*x11279))+(((-0.02349986)*x11284))+(((0.02349986)*x11281))+(((-0.0008)*x11268)));
evalcond[5]=((((-0.16085006)*x11281))+(((0.16085006)*x11284))+((cj0*r10*x11277))+((x11276*x11279))+(((-1.0)*px*x11272))+((x11271*x11280))+(((-1.0)*cj0*r10*x11279))+(((-1.0)*x11276*x11277))+(((0.16)*sj1))+(((-0.0008)*cj5*x11273))+(((-7.7e-7)*cj1))+(((-1.0)*x11271*x11273))+(((0.0008)*cj0*x11275))+((cj0*py))+(((0.02349986)*x11283))+(((0.02349986)*x11285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x11289=((1.0)*cj4);
IkReal x11290=(r22*sj1);
IkReal x11291=((1.0)*sj4);
IkReal x11292=(cj1*r22);
IkReal x11293=(cj1*r21*sj5);
IkReal x11294=(cj5*r20*sj1);
IkReal x11295=(r21*sj1*sj5);
IkReal x11296=(cj1*cj5*r20);
if( IKabs(((((-1.0)*x11291*x11295))+(((-1.0)*x11291*x11292))+((cj4*x11296))+((cj4*x11290))+((sj4*x11294))+(((-1.0)*x11289*x11293)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x11291*x11296))+((cj4*x11294))+(((-1.0)*x11290*x11291))+((sj4*x11293))+(((-1.0)*x11289*x11292))+(((-1.0)*x11289*x11295)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x11291*x11295))+(((-1.0)*x11291*x11292))+((cj4*x11296))+((cj4*x11290))+((sj4*x11294))+(((-1.0)*x11289*x11293))))+IKsqr(((((-1.0)*x11291*x11296))+((cj4*x11294))+(((-1.0)*x11290*x11291))+((sj4*x11293))+(((-1.0)*x11289*x11292))+(((-1.0)*x11289*x11295))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x11291*x11295))+(((-1.0)*x11291*x11292))+((cj4*x11296))+((cj4*x11290))+((sj4*x11294))+(((-1.0)*x11289*x11293))), ((((-1.0)*x11291*x11296))+((cj4*x11294))+(((-1.0)*x11290*x11291))+((sj4*x11293))+(((-1.0)*x11289*x11292))+(((-1.0)*x11289*x11295))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x11297=IKcos(j2);
IkReal x11298=IKsin(j2);
IkReal x11299=((3.5e-7)*cj5);
IkReal x11300=(sj0*sj5);
IkReal x11301=(cj0*cj5);
IkReal x11302=((1.0)*cj4);
IkReal x11303=((1.0)*sj4);
IkReal x11304=(cj0*sj4);
IkReal x11305=(cj0*r10);
IkReal x11306=(r11*sj5);
IkReal x11307=((0.02349986)*sj1);
IkReal x11308=(cj4*sj0);
IkReal x11309=(cj5*r00);
IkReal x11310=(cj5*r20);
IkReal x11311=(r21*sj5);
IkReal x11312=(cj1*x11297);
IkReal x11313=(cj1*x11298);
IkReal x11314=(sj1*x11297);
IkReal x11315=(sj1*x11298);
IkReal x11316=((1.0)*x11315);
evalcond[0]=(((cj4*r22))+(((-1.0)*x11303*x11311))+((sj4*x11310))+x11312+(((-1.0)*x11316)));
evalcond[1]=((((-1.0)*x11302*x11311))+(((-1.0)*r22*x11303))+((cj4*x11310))+(((-1.0)*x11313))+(((-1.0)*x11314)));
evalcond[2]=(((r02*x11308))+(((-1.0)*cj0*r12*x11302))+x11314+x11313+(((-1.0)*r10*x11301*x11303))+(((-1.0)*r01*x11300*x11303))+((sj0*sj4*x11309))+((x11304*x11306)));
evalcond[3]=(((x11308*x11309))+x11312+((cj0*cj4*x11306))+((r12*x11304))+(((-1.0)*r02*sj0*x11303))+(((-1.0)*r10*x11301*x11302))+(((-1.0)*r01*x11300*x11302))+(((-1.0)*x11316)));
CheckValue<IkReal> x11317=IKPowWithIntegerCheck(r20,-1);
if(!x11317.valid){
continue;
}
evalcond[4]=((((-1.0)*x11298*x11307))+(((0.16)*cj1))+(((0.16085006)*x11313))+(((0.16085006)*x11314))+(((-1.0)*pz))+((x11299*(x11317.value)*(r21*r21)))+((r20*x11299))+(((7.7e-7)*sj1))+(((0.02349986)*x11312)));
evalcond[5]=((((-1.0)*x11299*x11305))+(((-0.0008)*r00*x11300))+(((-0.16085006)*x11312))+(((3.5e-7)*cj0*x11306))+(((0.16085006)*x11315))+(((0.0008)*sj5*x11305))+((x11297*x11307))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-3.5e-7)*r01*x11300))+(((-0.0008)*cj5*r01*sj0))+(((0.0008)*r11*x11301))+((r00*sj0*x11299))+(((-1.0)*px*sj0))+((cj0*py))+(((0.02349986)*x11313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x11318=(cj4*sj5);
IkReal x11319=(r20*sj5);
IkReal x11320=(r21*sj1);
IkReal x11321=((1.0)*cj1*r21);
IkReal x11322=((1.0)*r22*sj4);
IkReal x11323=(cj4*cj5*r20);
if( IKabs((((sj1*x11319))+(((-1.0)*x11318*x11321))+(((-1.0)*cj1*x11322))+((cj5*x11320))+((cj1*x11323)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x11323))+(((-1.0)*cj5*x11321))+(((-1.0)*cj1*x11319))+(((-1.0)*x11318*x11320))+(((-1.0)*sj1*x11322)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x11319))+(((-1.0)*x11318*x11321))+(((-1.0)*cj1*x11322))+((cj5*x11320))+((cj1*x11323))))+IKsqr((((sj1*x11323))+(((-1.0)*cj5*x11321))+(((-1.0)*cj1*x11319))+(((-1.0)*x11318*x11320))+(((-1.0)*sj1*x11322))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x11319))+(((-1.0)*x11318*x11321))+(((-1.0)*cj1*x11322))+((cj5*x11320))+((cj1*x11323))), (((sj1*x11323))+(((-1.0)*cj5*x11321))+(((-1.0)*cj1*x11319))+(((-1.0)*x11318*x11320))+(((-1.0)*sj1*x11322))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x11324=IKcos(j2);
IkReal x11325=IKsin(j2);
IkReal x11326=(cj0*cj5);
IkReal x11327=(r20*sj5);
IkReal x11328=((1.0)*cj4);
IkReal x11329=((3.5e-7)*sj5);
IkReal x11330=((1.0)*sj0);
IkReal x11331=(r01*sj0);
IkReal x11332=(r00*sj0);
IkReal x11333=((0.0008)*sj5);
IkReal x11334=(cj4*cj5);
IkReal x11335=(cj0*r10);
IkReal x11336=((3.5e-7)*cj5);
IkReal x11337=(cj5*r21);
IkReal x11338=(cj0*r11);
IkReal x11339=(cj1*x11324);
IkReal x11340=(cj1*x11325);
IkReal x11341=(sj1*x11324);
IkReal x11342=(sj1*x11325);
IkReal x11343=((1.0)*x11342);
evalcond[0]=(x11337+x11339+x11327+(((-1.0)*x11343)));
evalcond[1]=((((-1.0)*r21*sj5*x11328))+((r20*x11334))+(((-1.0)*x11341))+(((-1.0)*x11340))+(((-1.0)*r22*sj4)));
evalcond[2]=(((cj5*x11331))+((sj5*x11332))+x11340+x11341+(((-1.0)*r11*x11326))+(((-1.0)*sj5*x11335)));
evalcond[3]=(((x11332*x11334))+x11339+((cj0*r12*sj4))+(((-1.0)*x11343))+((cj4*sj5*x11338))+(((-1.0)*sj5*x11328*x11331))+(((-1.0)*r02*sj4*x11330))+(((-1.0)*r10*x11326*x11328)));
evalcond[4]=((((0.16)*cj1))+(((-0.0008)*x11337))+(((0.02349986)*x11339))+(((0.16085006)*x11340))+(((0.16085006)*x11341))+((r20*x11336))+(((-0.0008)*x11327))+(((-1.0)*r21*x11329))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-0.02349986)*x11342)));
evalcond[5]=((((-0.16085006)*x11339))+(((-1.0)*px*x11330))+((x11332*x11336))+(((0.0008)*r11*x11326))+(((0.16085006)*x11342))+(((-3.5e-7)*r10*x11326))+(((0.02349986)*x11340))+(((0.02349986)*x11341))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((x11329*x11338))+((x11333*x11335))+(((-1.0)*x11332*x11333))+(((-0.0008)*cj5*x11331))+((cj0*py))+(((-1.0)*x11329*x11331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x11344=(cj5*r11);
IkReal x11345=(r10*sj5);
IkReal x11346=(cj5*r20);
IkReal x11347=(cj1*sj5);
IkReal x11348=(cj1*sj3);
IkReal x11349=(cj4*r22);
IkReal x11350=(cj3*sj0);
IkReal x11351=(cj5*r01);
IkReal x11352=(sj1*sj5);
IkReal x11353=((1.0)*cj0*cj3);
IkReal x11354=((1.0)*sj3*sj4);
CheckValue<IkReal> x11355=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x11355.valid){
continue;
}
CheckValue<IkReal> x11356 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x11346*x11354))+(((-1.0)*sj1*sj3*x11349))+(((-1.0)*cj1*x11344*x11353))+(((-1.0)*cj1*x11345*x11353))+((r21*sj3*sj4*x11352))+((r00*x11347*x11350))+((cj1*x11350*x11351)))),IkReal((((sj4*x11346*x11348))+((x11348*x11349))+(((-1.0)*sj1*x11344*x11353))+((sj1*x11350*x11351))+((r00*x11350*x11352))+(((-1.0)*sj1*x11345*x11353))+(((-1.0)*r21*x11347*x11354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11356.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11355.value)))+(x11356.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x11357=IKcos(j2);
IkReal x11358=IKsin(j2);
IkReal x11359=((0.0008)*sj5);
IkReal x11360=(r00*sj0);
IkReal x11361=(cj0*cj5);
IkReal x11362=((1.0)*cj4);
IkReal x11363=(cj5*r21);
IkReal x11364=((1.0)*sj0);
IkReal x11365=(r01*sj5);
IkReal x11366=(cj0*sj4);
IkReal x11367=(r21*sj5);
IkReal x11368=(cj0*sj5);
IkReal x11369=((1.0)*sj3);
IkReal x11370=((1.0)*r10);
IkReal x11371=(cj4*cj5);
IkReal x11372=((3.5e-7)*cj5);
IkReal x11373=((1.0)*cj3);
IkReal x11374=(cj5*sj4);
IkReal x11375=((1.0)*sj4);
IkReal x11376=(cj1*x11357);
IkReal x11377=(sj1*x11358);
IkReal x11378=(sj1*x11357);
IkReal x11379=(cj1*x11358);
IkReal x11380=(cj5*r01*sj0);
evalcond[0]=((((-1.0)*x11369*x11376))+x11363+((sj3*x11377))+((r20*sj5)));
evalcond[1]=(((r20*x11371))+(((-1.0)*x11379))+(((-1.0)*x11378))+(((-1.0)*r22*x11375))+(((-1.0)*x11362*x11367)));
evalcond[2]=(((r20*x11374))+((cj4*r22))+((cj3*x11377))+(((-1.0)*x11373*x11376))+(((-1.0)*x11367*x11375)));
evalcond[3]=((((-1.0)*r11*x11361))+(((-1.0)*x11369*x11378))+(((-1.0)*x11369*x11379))+x11380+(((-1.0)*x11368*x11370))+((sj5*x11360)));
evalcond[4]=((((-1.0)*x11377))+((cj4*r11*x11368))+(((-1.0)*sj0*x11362*x11365))+(((-1.0)*r10*x11361*x11362))+x11376+(((-1.0)*r02*sj4*x11364))+((r12*x11366))+((x11360*x11371)));
evalcond[5]=((((-1.0)*cj0*r12*x11362))+(((-1.0)*sj4*x11364*x11365))+(((-1.0)*x11373*x11379))+(((-1.0)*x11373*x11378))+((r11*sj5*x11366))+((cj4*r02*sj0))+((x11360*x11374))+(((-1.0)*sj4*x11361*x11370)));
evalcond[6]=(((r20*x11372))+(((-3.5e-7)*x11367))+(((-1.0)*r20*x11359))+(((0.16)*cj1))+(((-0.02349986)*x11377))+(((0.16085006)*x11378))+(((0.16085006)*x11379))+(((-1.0)*pz))+(((-0.0008)*x11363))+(((7.7e-7)*sj1))+(((0.02349986)*x11376)));
evalcond[7]=((((0.0008)*r11*x11361))+(((-0.0008)*x11380))+(((-3.5e-7)*r10*x11361))+(((-3.5e-7)*sj0*x11365))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.16085006)*x11376))+(((0.16085006)*x11377))+(((-1.0)*x11359*x11360))+(((-1.0)*px*x11364))+(((0.02349986)*x11378))+(((0.02349986)*x11379))+((x11360*x11372))+((cj0*py))+(((3.5e-7)*r11*x11368))+((cj0*r10*x11359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x11381=(r21*sj5);
IkReal x11382=(cj3*r22);
IkReal x11383=(sj1*sj4);
IkReal x11384=(cj5*r20);
IkReal x11385=((1.0)*cj4);
IkReal x11386=(cj1*cj3);
IkReal x11387=(cj3*sj1);
IkReal x11388=((1.0)*cj1*sj4);
CheckValue<IkReal> x11389=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x11389.valid){
continue;
}
CheckValue<IkReal> x11390 = IKatan2WithCheck(IkReal(((((-1.0)*r22*sj1*x11385))+(((-1.0)*x11382*x11388))+((x11381*x11383))+((cj4*x11384*x11386))+(((-1.0)*x11381*x11385*x11386))+(((-1.0)*x11383*x11384)))),IkReal(((((-1.0)*x11381*x11388))+((cj1*cj4*r22))+((cj1*sj4*x11384))+((cj4*x11384*x11387))+(((-1.0)*x11381*x11385*x11387))+(((-1.0)*x11382*x11383)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11390.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11389.value)))+(x11390.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x11391=IKcos(j2);
IkReal x11392=IKsin(j2);
IkReal x11393=((0.0008)*sj5);
IkReal x11394=(r00*sj0);
IkReal x11395=(cj0*cj5);
IkReal x11396=((1.0)*cj4);
IkReal x11397=(cj5*r21);
IkReal x11398=((1.0)*sj0);
IkReal x11399=(r01*sj5);
IkReal x11400=(cj0*sj4);
IkReal x11401=(r21*sj5);
IkReal x11402=(cj0*sj5);
IkReal x11403=((1.0)*sj3);
IkReal x11404=((1.0)*r10);
IkReal x11405=(cj4*cj5);
IkReal x11406=((3.5e-7)*cj5);
IkReal x11407=((1.0)*cj3);
IkReal x11408=(cj5*sj4);
IkReal x11409=((1.0)*sj4);
IkReal x11410=(cj1*x11391);
IkReal x11411=(sj1*x11392);
IkReal x11412=(sj1*x11391);
IkReal x11413=(cj1*x11392);
IkReal x11414=(cj5*r01*sj0);
evalcond[0]=(x11397+(((-1.0)*x11403*x11410))+((sj3*x11411))+((r20*sj5)));
evalcond[1]=((((-1.0)*x11396*x11401))+(((-1.0)*x11413))+(((-1.0)*x11412))+((r20*x11405))+(((-1.0)*r22*x11409)));
evalcond[2]=(((cj3*x11411))+((cj4*r22))+(((-1.0)*x11407*x11410))+((r20*x11408))+(((-1.0)*x11401*x11409)));
evalcond[3]=((((-1.0)*x11402*x11404))+x11414+(((-1.0)*x11403*x11412))+(((-1.0)*x11403*x11413))+(((-1.0)*r11*x11395))+((sj5*x11394)));
evalcond[4]=((((-1.0)*r02*sj4*x11398))+x11410+((r12*x11400))+(((-1.0)*x11411))+(((-1.0)*sj0*x11396*x11399))+((cj4*r11*x11402))+((x11394*x11405))+(((-1.0)*r10*x11395*x11396)));
evalcond[5]=((((-1.0)*cj0*r12*x11396))+((r11*sj5*x11400))+(((-1.0)*x11407*x11412))+(((-1.0)*x11407*x11413))+(((-1.0)*sj4*x11395*x11404))+((x11394*x11408))+((cj4*r02*sj0))+(((-1.0)*sj4*x11398*x11399)));
evalcond[6]=((((0.16)*cj1))+(((-0.02349986)*x11411))+(((-3.5e-7)*x11401))+(((-1.0)*pz))+((r20*x11406))+(((7.7e-7)*sj1))+(((0.16085006)*x11412))+(((0.16085006)*x11413))+(((-1.0)*r20*x11393))+(((0.02349986)*x11410))+(((-0.0008)*x11397)));
evalcond[7]=((((-3.5e-7)*r10*x11395))+(((-1.0)*x11393*x11394))+(((-1.0)*px*x11398))+(((-3.5e-7)*sj0*x11399))+(((3.5e-7)*r11*x11402))+(((-0.0008)*x11414))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.16085006)*x11410))+(((0.0008)*r11*x11395))+((x11394*x11406))+(((0.16085006)*x11411))+(((0.02349986)*x11412))+(((0.02349986)*x11413))+((cj0*py))+((cj0*r10*x11393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x11415=(r20*sj1);
IkReal x11416=((1.0)*sj5);
IkReal x11417=(cj1*r20);
IkReal x11418=(r21*sj1);
IkReal x11419=(cj1*sj3);
IkReal x11420=(cj4*cj5*sj3);
IkReal x11421=((1.0)*r22*sj4);
CheckValue<IkReal> x11422=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x11422.valid){
continue;
}
CheckValue<IkReal> x11423 = IKatan2WithCheck(IkReal(((((-1.0)*x11415*x11416))+(((-1.0)*x11419*x11421))+((x11417*x11420))+(((-1.0)*cj5*x11418))+(((-1.0)*cj4*r21*x11416*x11419)))),IkReal((((cj1*cj5*r21))+(((-1.0)*sj1*sj3*x11421))+((sj5*x11417))+(((-1.0)*cj4*sj3*x11416*x11418))+((x11415*x11420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11423.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11422.value)))+(x11423.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x11424=IKcos(j2);
IkReal x11425=IKsin(j2);
IkReal x11426=((0.0008)*sj5);
IkReal x11427=(r00*sj0);
IkReal x11428=(cj0*cj5);
IkReal x11429=((1.0)*cj4);
IkReal x11430=(cj5*r21);
IkReal x11431=((1.0)*sj0);
IkReal x11432=(r01*sj5);
IkReal x11433=(cj0*sj4);
IkReal x11434=(r21*sj5);
IkReal x11435=(cj0*sj5);
IkReal x11436=((1.0)*sj3);
IkReal x11437=((1.0)*r10);
IkReal x11438=(cj4*cj5);
IkReal x11439=((3.5e-7)*cj5);
IkReal x11440=((1.0)*cj3);
IkReal x11441=(cj5*sj4);
IkReal x11442=((1.0)*sj4);
IkReal x11443=(cj1*x11424);
IkReal x11444=(sj1*x11425);
IkReal x11445=(sj1*x11424);
IkReal x11446=(cj1*x11425);
IkReal x11447=(cj5*r01*sj0);
evalcond[0]=(x11430+((sj3*x11444))+(((-1.0)*x11436*x11443))+((r20*sj5)));
evalcond[1]=(((r20*x11438))+(((-1.0)*x11446))+(((-1.0)*x11445))+(((-1.0)*x11429*x11434))+(((-1.0)*r22*x11442)));
evalcond[2]=((((-1.0)*x11440*x11443))+((cj3*x11444))+((cj4*r22))+((r20*x11441))+(((-1.0)*x11434*x11442)));
evalcond[3]=(((sj5*x11427))+(((-1.0)*r11*x11428))+x11447+(((-1.0)*x11435*x11437))+(((-1.0)*x11436*x11445))+(((-1.0)*x11436*x11446)));
evalcond[4]=((((-1.0)*x11444))+(((-1.0)*r10*x11428*x11429))+x11443+((x11427*x11438))+(((-1.0)*sj0*x11429*x11432))+((cj4*r11*x11435))+((r12*x11433))+(((-1.0)*r02*sj4*x11431)));
evalcond[5]=((((-1.0)*x11440*x11446))+(((-1.0)*x11440*x11445))+(((-1.0)*sj4*x11431*x11432))+(((-1.0)*cj0*r12*x11429))+(((-1.0)*sj4*x11428*x11437))+((r11*sj5*x11433))+((cj4*r02*sj0))+((x11427*x11441)));
evalcond[6]=(((r20*x11439))+(((-3.5e-7)*x11434))+(((-0.02349986)*x11444))+(((0.16)*cj1))+(((0.02349986)*x11443))+(((0.16085006)*x11446))+(((0.16085006)*x11445))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-0.0008)*x11430))+(((-1.0)*r20*x11426)));
evalcond[7]=((((-0.0008)*x11447))+(((-3.5e-7)*sj0*x11432))+(((3.5e-7)*r11*x11435))+(((0.02349986)*x11446))+(((0.02349986)*x11445))+((cj0*r10*x11426))+(((-1.0)*x11426*x11427))+(((-0.16085006)*x11443))+(((-1.0)*px*x11431))+(((0.16)*sj1))+(((0.0008)*r11*x11428))+(((-7.7e-7)*cj1))+(((-3.5e-7)*r10*x11428))+(((0.16085006)*x11444))+((x11427*x11439))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11448=(cj3*cj4);
IkReal x11449=(cj3*sj4);
IkReal x11450=((1.0)*cj5);
CheckValue<IkReal> x11451 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x11449))+(((-1.0)*r01*sj5*x11448))+((cj5*r00*x11448)))),IkReal((((r12*x11449))+(((-1.0)*r10*x11448*x11450))+((r11*sj5*x11448)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11451.valid){
continue;
}
CheckValue<IkReal> x11452=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+(((-1.0)*r20*sj4*x11450))+(((-1.0)*cj4*r22)))),-1);
if(!x11452.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x11451.value)+(((1.5707963267949)*(x11452.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x11453=IKcos(j0);
IkReal x11454=IKsin(j0);
IkReal x11455=((1.0)*sj4);
IkReal x11456=(r01*sj5);
IkReal x11457=(r12*x11454);
IkReal x11458=((1.0)*x11453);
IkReal x11459=(cj5*x11454);
IkReal x11460=(r00*x11453);
IkReal x11461=(sj5*x11454);
IkReal x11462=(cj5*r01*x11453);
evalcond[0]=(x11462+cj3+((r10*x11461))+((sj5*x11460))+((r11*x11459)));
evalcond[1]=((((-1.0)*cj4*r11*x11461))+(((-1.0)*r02*x11453*x11455))+(((-1.0)*x11455*x11457))+(((-1.0)*cj4*x11456*x11458))+((cj4*cj5*x11460))+((cj4*r10*x11459)));
evalcond[2]=(((cj5*sj4*x11460))+(((-1.0)*sj3))+((cj4*x11457))+(((-1.0)*r11*x11455*x11461))+((r10*sj4*x11459))+((cj4*r02*x11453))+(((-1.0)*x11453*x11455*x11456)));
evalcond[3]=((((-0.0008)*x11462))+(((-0.0008)*r10*x11461))+(((3.5e-7)*r10*x11459))+(((-3.5e-7)*x11453*x11456))+(((-1.0)*px*x11458))+(((-3.5e-7)*r11*x11461))+(((-0.0008)*r11*x11459))+(((3.5e-7)*cj5*x11460))+(((-0.0008)*sj5*x11460))+(((-1.0)*py*x11454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x11463=((0.64)*cj3);
IkReal x11464=((0.64)*sj3);
IkReal x11465=(cj5*r21);
IkReal x11466=((0.64340024)*cj4);
IkReal x11467=(r21*sj5);
IkReal x11468=((4.2e-6)*sj3);
IkReal x11469=((0.0096)*cj3);
IkReal x11470=(cj5*r20);
IkReal x11471=((0.0096)*sj3);
IkReal x11472=((0.28199832)*sj4);
IkReal x11473=((0.09399944)*sj4);
IkReal x11474=(r20*sj5);
IkReal x11475=(cj4*r22);
IkReal x11476=((0.0032)*cj3);
IkReal x11477=((0.0032)*sj3);
IkReal x11478=((1.4e-6)*sj3);
IkReal x11479=((12.0)*pz);
IkReal x11480=((4.0)*pz);
IkReal x11481=((1.93020072)*cj4);
IkReal x11482=((0.28199832)*x11465);
IkReal x11483=((0.28199832)*x11474);
IkReal x11484=(sj3*x11479);
IkReal x11485=((0.28199832)*x11475);
IkReal x11486=(cj3*x11479);
IkReal x11487=(cj3*x11467);
IkReal x11488=(cj3*r22*sj4);
IkReal x11489=(sj3*x11481);
IkReal x11490=(r22*sj3*sj4);
IkReal x11491=(x11468*x11470);
IkReal x11492=(x11467*x11468);
IkReal x11493=((1.93020072)*x11490);
IkReal x11494=(x11465*x11471);
IkReal x11495=(x11471*x11474);
IkReal x11496=(x11470*x11472);
IkReal x11497=((4.2e-6)*cj3*x11470);
IkReal x11498=((4.2e-6)*x11487);
IkReal x11499=(x11469*x11474);
IkReal x11500=(x11467*x11472);
IkReal x11501=((1.93020072)*x11488);
IkReal x11502=(x11465*x11469);
IkReal x11503=(x11470*x11489);
IkReal x11504=(x11467*x11489);
IkReal x11505=(cj3*x11470*x11481);
IkReal x11506=(x11481*x11487);
IkReal x11507=(x11491+x11483+x11482+x11503);
IkReal x11508=(x11496+x11497+x11485+x11505);
IkReal x11509=(x11492+x11493+x11494+x11495+x11484+x11504);
IkReal x11510=(x11498+x11499+x11486+x11506+x11500+x11501+x11502);
j1eval[0]=((((40584.4155844156)*(IKabs(((((-1.0)*x11466*x11487))+(((-1.0)*x11474*x11476))+(((-1.0)*x11463))+((cj3*x11466*x11470))+(((1.4e-6)*cj3*x11470))+(((-1.0)*x11467*x11473))+(((0.09399944)*x11475))+(((-1.0)*cj3*x11480))+(((-0.64340024)*x11488))+((x11470*x11473))+(((-1.0)*x11465*x11476))+(((-1.4e-6)*x11487)))))))+(((40584.4155844156)*(IKabs((x11508+(((-1.0)*x11463))+(((-1.0)*x11510)))))))+(((40584.4155844156)*(IKabs(((((-1.0)*x11509))+x11507+(((-1.0)*x11464)))))))+(IKabs(cj3))+(IKabs(sj3))+(((40584.4155844156)*(IKabs(((((-1.0)*x11509))+x11464+x11507)))))+(((40584.4155844156)*(IKabs((x11463+x11508+(((-1.0)*x11510)))))))+(((40584.4155844156)*(IKabs(((((-1.0)*x11474*x11477))+(((-1.0)*sj3*x11480))+(((-1.0)*sj3*x11466*x11467))+(((-0.64340024)*x11490))+(((-1.0)*x11464))+((sj3*x11466*x11470))+(((-1.0)*x11467*x11478))+(((0.09399944)*x11474))+(((0.09399944)*x11465))+((x11470*x11478))+(((-1.0)*x11465*x11477))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x11511=((0.64)*sj3);
IkReal x11512=((6.16e-6)*sj3);
IkReal x11513=((0.64340024)*sj3);
IkReal x11514=(r22*sj4);
IkReal x11515=(r21*sj3);
IkReal x11516=(r20*sj5);
IkReal x11517=(cj5*r21);
IkReal x11518=(cj4*sj5);
IkReal x11519=((1.93020072)*sj3);
IkReal x11520=(pz*sj3);
IkReal x11521=((0.28199832)*x11517);
IkReal x11522=((0.28199832)*x11516);
IkReal x11523=((12.0)*x11520);
IkReal x11524=((0.09399944)*x11516);
IkReal x11525=((0.09399944)*x11517);
IkReal x11526=((4.0)*x11520);
IkReal x11527=(cj4*cj5*r20);
IkReal x11528=(cj5*r20*sj3);
IkReal x11529=((4.2e-6)*x11528);
IkReal x11530=((4.2e-6)*sj5*x11515);
IkReal x11531=(x11514*x11519);
IkReal x11532=((0.0096)*cj5*x11515);
IkReal x11533=((0.0096)*sj3*x11516);
IkReal x11534=((1.4e-6)*x11528);
IkReal x11535=((0.0032)*sj3*x11516);
IkReal x11536=((1.4e-6)*sj5*x11515);
IkReal x11537=((0.0032)*cj5*x11515);
IkReal x11538=(x11513*x11514);
IkReal x11539=(x11519*x11527);
IkReal x11540=((1.93020072)*x11515*x11518);
IkReal x11541=(x11513*x11527);
IkReal x11542=(r21*x11513*x11518);
IkReal x11543=(x11541+x11534+x11524+x11525);
IkReal x11544=(x11539+x11522+x11521+x11529);
IkReal x11545=(x11542+x11538+x11535+x11537+x11536+x11526);
IkReal x11546=(x11540+x11531+x11530+x11533+x11532+x11523);
op[0]=(x11543+(((-1.0)*x11511))+(((-1.0)*x11545)));
op[1]=x11512;
op[2]=(x11544+(((-1.0)*x11511))+(((-1.0)*x11546)));
op[3]=((1.232e-5)*sj3);
op[4]=(x11544+x11511+(((-1.0)*x11546)));
op[5]=x11512;
op[6]=(x11543+x11511+(((-1.0)*x11545)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x11547=((0.64)*cj3);
IkReal x11548=((0.64340024)*cj4);
IkReal x11549=((0.28199832)*sj4);
IkReal x11550=(cj5*r20);
IkReal x11551=(r21*sj5);
IkReal x11552=((0.09399944)*sj4);
IkReal x11553=(cj4*r22);
IkReal x11554=((6.16e-6)*cj3);
IkReal x11555=(cj3*pz);
IkReal x11556=((1.93020072)*cj4);
IkReal x11557=((0.09399944)*x11553);
IkReal x11558=((0.28199832)*x11553);
IkReal x11559=((12.0)*x11555);
IkReal x11560=((4.0)*x11555);
IkReal x11561=(cj3*x11551);
IkReal x11562=(cj3*cj5*r21);
IkReal x11563=(cj3*r22*sj4);
IkReal x11564=(cj3*r20*sj5);
IkReal x11565=(x11550*x11552);
IkReal x11566=((1.4e-6)*cj3*x11550);
IkReal x11567=(x11549*x11550);
IkReal x11568=((4.2e-6)*cj3*x11550);
IkReal x11569=((4.2e-6)*x11561);
IkReal x11570=((0.0096)*x11564);
IkReal x11571=(x11549*x11551);
IkReal x11572=((1.93020072)*x11563);
IkReal x11573=((0.0096)*x11562);
IkReal x11574=((0.0032)*x11562);
IkReal x11575=((0.0032)*x11564);
IkReal x11576=((1.4e-6)*x11561);
IkReal x11577=((0.64340024)*x11563);
IkReal x11578=(x11551*x11552);
IkReal x11579=(cj3*x11548*x11550);
IkReal x11580=(cj3*x11550*x11556);
IkReal x11581=(x11556*x11561);
IkReal x11582=(x11548*x11561);
IkReal x11583=(x11580+x11568+x11567+x11558);
IkReal x11584=(x11579+x11566+x11565+x11557);
IkReal x11585=(x11582+x11578+x11575+x11574+x11577+x11576+x11560);
IkReal x11586=(x11581+x11571+x11570+x11573+x11572+x11569+x11559);
j1evalpoly[0]=(x11584+x11547+(((htj1*htj1)*((x11583+x11547+(((-1.0)*x11586))))))+(((-1.0)*x11585))+((x11554*(htj1*htj1*htj1*htj1*htj1)))+(((1.232e-5)*cj3*(htj1*htj1*htj1)))+((htj1*x11554))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x11584+(((-1.0)*x11585))+(((-1.0)*x11547))))))+(((htj1*htj1*htj1*htj1)*((x11583+(((-1.0)*x11586))+(((-1.0)*x11547)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x11587=(cj3*sj3);
j2eval[0]=x11587;
j2eval[1]=IKsign(x11587);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x11588=(r21*sj5);
IkReal x11589=((1.0)*cj4);
IkReal x11590=(sj1*sj4);
IkReal x11591=((1.0)*r22);
IkReal x11592=(cj1*sj4);
IkReal x11593=(cj1*cj4);
IkReal x11594=(cj5*r20);
IkReal x11595=(sj4*x11594);
if( IKabs(((((-1.0)*x11590*x11594))+(((-1.0)*r22*sj1*x11589))+((x11588*x11590))+(((-1.0)*x11591*x11592))+(((-1.0)*cj1*x11588*x11589))+((x11593*x11594)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x11590*x11591))+((cj4*sj1*x11594))+((x11592*x11594))+((r22*x11593))+(((-1.0)*x11588*x11592))+(((-1.0)*sj1*x11588*x11589)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x11590*x11594))+(((-1.0)*r22*sj1*x11589))+((x11588*x11590))+(((-1.0)*x11591*x11592))+(((-1.0)*cj1*x11588*x11589))+((x11593*x11594))))+IKsqr(((((-1.0)*x11590*x11591))+((cj4*sj1*x11594))+((x11592*x11594))+((r22*x11593))+(((-1.0)*x11588*x11592))+(((-1.0)*sj1*x11588*x11589))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x11590*x11594))+(((-1.0)*r22*sj1*x11589))+((x11588*x11590))+(((-1.0)*x11591*x11592))+(((-1.0)*cj1*x11588*x11589))+((x11593*x11594))), ((((-1.0)*x11590*x11591))+((cj4*sj1*x11594))+((x11592*x11594))+((r22*x11593))+(((-1.0)*x11588*x11592))+(((-1.0)*sj1*x11588*x11589))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x11596=IKcos(j2);
IkReal x11597=IKsin(j2);
IkReal x11598=((3.5e-7)*cj5);
IkReal x11599=(sj0*sj5);
IkReal x11600=((1.0)*cj4);
IkReal x11601=(cj0*r10);
IkReal x11602=((1.0)*sj4);
IkReal x11603=(cj0*sj4);
IkReal x11604=(r11*sj5);
IkReal x11605=((0.02349986)*sj1);
IkReal x11606=(cj4*sj0);
IkReal x11607=(cj5*r00);
IkReal x11608=(r21*sj5);
IkReal x11609=((0.0008)*cj5);
IkReal x11610=(cj5*r20);
IkReal x11611=(cj1*x11596);
IkReal x11612=(sj1*x11596);
IkReal x11613=(sj1*x11597);
IkReal x11614=(cj1*x11597);
IkReal x11615=((1.0)*x11612);
IkReal x11616=((1.0)*x11614);
IkReal x11617=(x11615+x11616);
evalcond[0]=((((-1.0)*x11602*x11608))+x11613+((cj4*r22))+((sj4*x11610))+(((-1.0)*x11611)));
evalcond[1]=((((-1.0)*r22*x11602))+(((-1.0)*x11617))+(((-1.0)*x11600*x11608))+((cj4*x11610)));
evalcond[2]=((((-1.0)*cj5*x11600*x11601))+x11611+(((-1.0)*x11613))+((cj0*cj4*x11604))+((x11606*x11607))+(((-1.0)*r01*x11599*x11600))+(((-1.0)*r02*sj0*x11602))+((r12*x11603)));
evalcond[3]=((((-1.0)*x11617))+((x11603*x11604))+((sj0*sj4*x11607))+((r02*x11606))+(((-1.0)*cj5*x11601*x11602))+(((-1.0)*r01*x11599*x11602))+(((-1.0)*cj0*r12*x11600)));
CheckValue<IkReal> x11618=IKPowWithIntegerCheck(r20,-1);
if(!x11618.valid){
continue;
}
evalcond[4]=((((0.16)*cj1))+(((0.02349986)*x11611))+((r20*x11598))+((x11598*(x11618.value)*(r21*r21)))+(((-1.0)*x11597*x11605))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.16085006)*x11614))+(((0.16085006)*x11612)));
evalcond[5]=((((-0.0008)*r00*x11599))+(((-1.0)*x11598*x11601))+(((0.02349986)*x11614))+(((-0.16085006)*x11611))+(((3.5e-7)*cj0*x11604))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((cj0*r11*x11609))+(((0.0008)*sj5*x11601))+(((-1.0)*r01*sj0*x11609))+((x11596*x11605))+((r00*sj0*x11598))+(((0.16085006)*x11613))+(((-1.0)*px*sj0))+((cj0*py))+(((-3.5e-7)*r01*x11599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x11619=((1.0)*sj5);
IkReal x11620=(cj1*r21);
IkReal x11621=(r20*sj1);
IkReal x11622=((1.0)*sj1);
IkReal x11623=(r22*sj4);
IkReal x11624=(cj4*cj5);
IkReal x11625=(cj1*r20);
if( IKabs(((((-1.0)*x11619*x11621))+((x11624*x11625))+(((-1.0)*cj1*x11623))+(((-1.0)*cj4*x11619*x11620))+(((-1.0)*cj5*r21*x11622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x11625))+(((-1.0)*x11622*x11623))+((x11621*x11624))+(((-1.0)*cj4*r21*sj1*x11619))+((cj5*x11620)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x11619*x11621))+((x11624*x11625))+(((-1.0)*cj1*x11623))+(((-1.0)*cj4*x11619*x11620))+(((-1.0)*cj5*r21*x11622))))+IKsqr((((sj5*x11625))+(((-1.0)*x11622*x11623))+((x11621*x11624))+(((-1.0)*cj4*r21*sj1*x11619))+((cj5*x11620))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x11619*x11621))+((x11624*x11625))+(((-1.0)*cj1*x11623))+(((-1.0)*cj4*x11619*x11620))+(((-1.0)*cj5*r21*x11622))), (((sj5*x11625))+(((-1.0)*x11622*x11623))+((x11621*x11624))+(((-1.0)*cj4*r21*sj1*x11619))+((cj5*x11620))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x11626=IKcos(j2);
IkReal x11627=IKsin(j2);
IkReal x11628=(r20*sj5);
IkReal x11629=((1.0)*cj4);
IkReal x11630=(cj5*r21);
IkReal x11631=((3.5e-7)*sj5);
IkReal x11632=((1.0)*sj0);
IkReal x11633=(r01*sj0);
IkReal x11634=((1.0)*cj0);
IkReal x11635=(cj5*r11);
IkReal x11636=(r00*sj0);
IkReal x11637=((0.0008)*sj5);
IkReal x11638=(cj4*cj5);
IkReal x11639=((3.5e-7)*cj5);
IkReal x11640=(cj0*r11);
IkReal x11641=(cj1*x11626);
IkReal x11642=(cj0*cj5*r10);
IkReal x11643=(sj1*x11626);
IkReal x11644=(sj1*x11627);
IkReal x11645=(cj1*x11627);
IkReal x11646=((1.0)*x11643);
IkReal x11647=((1.0)*x11645);
IkReal x11648=(x11647+x11646);
evalcond[0]=(x11628+x11630+x11644+(((-1.0)*x11641)));
evalcond[1]=(((r20*x11638))+(((-1.0)*r22*sj4))+(((-1.0)*r21*sj5*x11629))+(((-1.0)*x11648)));
evalcond[2]=((((-1.0)*r10*sj5*x11634))+(((-1.0)*x11634*x11635))+((sj5*x11636))+((cj5*x11633))+(((-1.0)*x11648)));
evalcond[3]=((((-1.0)*x11629*x11642))+x11641+((x11636*x11638))+(((-1.0)*sj5*x11629*x11633))+((cj4*sj5*x11640))+(((-1.0)*x11644))+(((-1.0)*r02*sj4*x11632))+((cj0*r12*sj4)));
evalcond[4]=((((-0.02349986)*x11644))+(((0.16)*cj1))+(((0.02349986)*x11641))+(((-1.0)*pz))+(((7.7e-7)*sj1))+((r20*x11639))+(((-1.0)*r21*x11631))+(((0.16085006)*x11643))+(((0.16085006)*x11645))+(((-0.0008)*x11628))+(((-0.0008)*x11630)));
evalcond[5]=(((cj0*r10*x11637))+(((-1.0)*cj0*r10*x11639))+((x11636*x11639))+(((-1.0)*px*x11632))+(((-1.0)*x11631*x11633))+(((-1.0)*x11636*x11637))+(((0.02349986)*x11643))+(((0.02349986)*x11645))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.0008)*cj5*x11633))+(((-0.16085006)*x11641))+((x11631*x11640))+(((0.0008)*cj0*x11635))+(((0.16085006)*x11644))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x11649=((1.0)*cj4);
IkReal x11650=(r22*sj1);
IkReal x11651=((1.0)*sj4);
IkReal x11652=(cj1*r22);
IkReal x11653=(cj1*r21*sj5);
IkReal x11654=(cj5*r20*sj1);
IkReal x11655=(r21*sj1*sj5);
IkReal x11656=(cj1*cj5*r20);
if( IKabs((((sj4*x11654))+((cj4*x11656))+((cj4*x11650))+(((-1.0)*x11649*x11653))+(((-1.0)*x11651*x11652))+(((-1.0)*x11651*x11655)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x11653))+(((-1.0)*x11650*x11651))+((cj4*x11654))+(((-1.0)*x11649*x11655))+(((-1.0)*x11649*x11652))+(((-1.0)*x11651*x11656)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x11654))+((cj4*x11656))+((cj4*x11650))+(((-1.0)*x11649*x11653))+(((-1.0)*x11651*x11652))+(((-1.0)*x11651*x11655))))+IKsqr((((sj4*x11653))+(((-1.0)*x11650*x11651))+((cj4*x11654))+(((-1.0)*x11649*x11655))+(((-1.0)*x11649*x11652))+(((-1.0)*x11651*x11656))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj4*x11654))+((cj4*x11656))+((cj4*x11650))+(((-1.0)*x11649*x11653))+(((-1.0)*x11651*x11652))+(((-1.0)*x11651*x11655))), (((sj4*x11653))+(((-1.0)*x11650*x11651))+((cj4*x11654))+(((-1.0)*x11649*x11655))+(((-1.0)*x11649*x11652))+(((-1.0)*x11651*x11656))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x11657=IKcos(j2);
IkReal x11658=IKsin(j2);
IkReal x11659=((3.5e-7)*cj5);
IkReal x11660=(sj0*sj5);
IkReal x11661=(cj0*cj5);
IkReal x11662=((1.0)*cj4);
IkReal x11663=((1.0)*sj4);
IkReal x11664=(cj0*sj4);
IkReal x11665=(cj0*r10);
IkReal x11666=(r11*sj5);
IkReal x11667=((0.02349986)*sj1);
IkReal x11668=(cj4*sj0);
IkReal x11669=(cj5*r00);
IkReal x11670=(cj5*r20);
IkReal x11671=(r21*sj5);
IkReal x11672=(cj1*x11657);
IkReal x11673=(cj1*x11658);
IkReal x11674=(sj1*x11657);
IkReal x11675=(sj1*x11658);
IkReal x11676=((1.0)*x11675);
evalcond[0]=(x11672+((cj4*r22))+(((-1.0)*x11663*x11671))+((sj4*x11670))+(((-1.0)*x11676)));
evalcond[1]=(((cj4*x11670))+(((-1.0)*x11662*x11671))+(((-1.0)*r22*x11663))+(((-1.0)*x11674))+(((-1.0)*x11673)));
evalcond[2]=(x11673+x11674+(((-1.0)*r01*x11660*x11663))+((x11664*x11666))+(((-1.0)*r10*x11661*x11663))+(((-1.0)*cj0*r12*x11662))+((sj0*sj4*x11669))+((r02*x11668)));
evalcond[3]=(x11672+(((-1.0)*r01*x11660*x11662))+((cj0*cj4*x11666))+(((-1.0)*r02*sj0*x11663))+(((-1.0)*r10*x11661*x11662))+((r12*x11664))+((x11668*x11669))+(((-1.0)*x11676)));
CheckValue<IkReal> x11677=IKPowWithIntegerCheck(r20,-1);
if(!x11677.valid){
continue;
}
evalcond[4]=((((0.16)*cj1))+(((0.16085006)*x11674))+(((0.16085006)*x11673))+(((-1.0)*pz))+(((0.02349986)*x11672))+((r20*x11659))+(((7.7e-7)*sj1))+(((-1.0)*x11658*x11667))+((x11659*(x11677.value)*(r21*r21))));
evalcond[5]=((((-1.0)*x11659*x11665))+(((-0.0008)*r00*x11660))+(((0.0008)*sj5*x11665))+(((-3.5e-7)*r01*x11660))+((r00*sj0*x11659))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.16085006)*x11675))+(((3.5e-7)*cj0*x11666))+(((0.0008)*r11*x11661))+(((0.02349986)*x11673))+(((-0.0008)*cj5*r01*sj0))+((x11657*x11667))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.16085006)*x11672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x11678=(cj4*sj5);
IkReal x11679=(r20*sj5);
IkReal x11680=(r21*sj1);
IkReal x11681=((1.0)*cj1*r21);
IkReal x11682=((1.0)*r22*sj4);
IkReal x11683=(cj4*cj5*r20);
if( IKabs((((cj1*x11683))+(((-1.0)*cj1*x11682))+((sj1*x11679))+(((-1.0)*x11678*x11681))+((cj5*x11680)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*x11681))+(((-1.0)*sj1*x11682))+(((-1.0)*cj1*x11679))+((sj1*x11683))+(((-1.0)*x11678*x11680)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x11683))+(((-1.0)*cj1*x11682))+((sj1*x11679))+(((-1.0)*x11678*x11681))+((cj5*x11680))))+IKsqr(((((-1.0)*cj5*x11681))+(((-1.0)*sj1*x11682))+(((-1.0)*cj1*x11679))+((sj1*x11683))+(((-1.0)*x11678*x11680))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x11683))+(((-1.0)*cj1*x11682))+((sj1*x11679))+(((-1.0)*x11678*x11681))+((cj5*x11680))), ((((-1.0)*cj5*x11681))+(((-1.0)*sj1*x11682))+(((-1.0)*cj1*x11679))+((sj1*x11683))+(((-1.0)*x11678*x11680))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x11684=IKcos(j2);
IkReal x11685=IKsin(j2);
IkReal x11686=(cj0*cj5);
IkReal x11687=(r20*sj5);
IkReal x11688=((1.0)*cj4);
IkReal x11689=((3.5e-7)*sj5);
IkReal x11690=((1.0)*sj0);
IkReal x11691=(r01*sj0);
IkReal x11692=(r00*sj0);
IkReal x11693=((0.0008)*sj5);
IkReal x11694=(cj4*cj5);
IkReal x11695=(cj0*r10);
IkReal x11696=((3.5e-7)*cj5);
IkReal x11697=(cj5*r21);
IkReal x11698=(cj0*r11);
IkReal x11699=(cj1*x11684);
IkReal x11700=(cj1*x11685);
IkReal x11701=(sj1*x11684);
IkReal x11702=(sj1*x11685);
IkReal x11703=((1.0)*x11702);
evalcond[0]=(x11687+x11699+x11697+(((-1.0)*x11703)));
evalcond[1]=(((r20*x11694))+(((-1.0)*x11700))+(((-1.0)*x11701))+(((-1.0)*r22*sj4))+(((-1.0)*r21*sj5*x11688)));
evalcond[2]=(x11700+x11701+(((-1.0)*sj5*x11695))+((sj5*x11692))+((cj5*x11691))+(((-1.0)*r11*x11686)));
evalcond[3]=(x11699+((x11692*x11694))+(((-1.0)*x11703))+((cj0*r12*sj4))+(((-1.0)*r10*x11686*x11688))+(((-1.0)*r02*sj4*x11690))+((cj4*sj5*x11698))+(((-1.0)*sj5*x11688*x11691)));
evalcond[4]=((((0.16085006)*x11701))+(((0.16085006)*x11700))+(((0.16)*cj1))+(((-0.0008)*x11697))+(((-1.0)*r21*x11689))+((r20*x11696))+(((-1.0)*pz))+(((-0.02349986)*x11702))+(((7.7e-7)*sj1))+(((-0.0008)*x11687))+(((0.02349986)*x11699)));
evalcond[5]=((((-1.0)*px*x11690))+(((-1.0)*x11689*x11691))+(((0.02349986)*x11701))+(((0.02349986)*x11700))+(((0.16085006)*x11702))+((x11692*x11696))+((x11689*x11698))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((x11693*x11695))+(((-0.0008)*cj5*x11691))+(((0.0008)*r11*x11686))+(((-1.0)*x11692*x11693))+((cj0*py))+(((-0.16085006)*x11699))+(((-3.5e-7)*r10*x11686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x11704=(cj5*r11);
IkReal x11705=(r10*sj5);
IkReal x11706=(cj5*r20);
IkReal x11707=(cj1*sj5);
IkReal x11708=(cj1*sj3);
IkReal x11709=(cj4*r22);
IkReal x11710=(cj3*sj0);
IkReal x11711=(cj5*r01);
IkReal x11712=(sj1*sj5);
IkReal x11713=((1.0)*cj0*cj3);
IkReal x11714=((1.0)*sj3*sj4);
CheckValue<IkReal> x11715 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*sj3*x11709))+((r21*sj3*sj4*x11712))+((r00*x11707*x11710))+(((-1.0)*cj1*x11704*x11713))+((cj1*x11710*x11711))+(((-1.0)*sj1*x11706*x11714))+(((-1.0)*cj1*x11705*x11713)))),IkReal(((((-1.0)*r21*x11707*x11714))+(((-1.0)*sj1*x11704*x11713))+((sj4*x11706*x11708))+(((-1.0)*sj1*x11705*x11713))+((r00*x11710*x11712))+((sj1*x11710*x11711))+((x11708*x11709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11715.valid){
continue;
}
CheckValue<IkReal> x11716=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x11716.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x11715.value)+(((1.5707963267949)*(x11716.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x11717=IKcos(j2);
IkReal x11718=IKsin(j2);
IkReal x11719=((0.0008)*sj5);
IkReal x11720=(r00*sj0);
IkReal x11721=(cj0*cj5);
IkReal x11722=((1.0)*cj4);
IkReal x11723=(cj5*r21);
IkReal x11724=((1.0)*sj0);
IkReal x11725=(r01*sj5);
IkReal x11726=(cj0*sj4);
IkReal x11727=(r21*sj5);
IkReal x11728=(cj0*sj5);
IkReal x11729=((1.0)*sj3);
IkReal x11730=((1.0)*r10);
IkReal x11731=(cj4*cj5);
IkReal x11732=((3.5e-7)*cj5);
IkReal x11733=((1.0)*cj3);
IkReal x11734=(cj5*sj4);
IkReal x11735=((1.0)*sj4);
IkReal x11736=(cj1*x11717);
IkReal x11737=(sj1*x11718);
IkReal x11738=(sj1*x11717);
IkReal x11739=(cj1*x11718);
IkReal x11740=(cj5*r01*sj0);
evalcond[0]=(x11723+(((-1.0)*x11729*x11736))+((r20*sj5))+((sj3*x11737)));
evalcond[1]=((((-1.0)*x11739))+(((-1.0)*x11738))+(((-1.0)*r22*x11735))+((r20*x11731))+(((-1.0)*x11722*x11727)));
evalcond[2]=(((cj4*r22))+((r20*x11734))+((cj3*x11737))+(((-1.0)*x11727*x11735))+(((-1.0)*x11733*x11736)));
evalcond[3]=((((-1.0)*x11728*x11730))+x11740+(((-1.0)*r11*x11721))+(((-1.0)*x11729*x11739))+(((-1.0)*x11729*x11738))+((sj5*x11720)));
evalcond[4]=(((r12*x11726))+x11736+((cj4*r11*x11728))+(((-1.0)*r02*sj4*x11724))+(((-1.0)*x11737))+(((-1.0)*sj0*x11722*x11725))+(((-1.0)*r10*x11721*x11722))+((x11720*x11731)));
evalcond[5]=((((-1.0)*cj0*r12*x11722))+((x11720*x11734))+((cj4*r02*sj0))+((r11*sj5*x11726))+(((-1.0)*sj4*x11724*x11725))+(((-1.0)*sj4*x11721*x11730))+(((-1.0)*x11733*x11739))+(((-1.0)*x11733*x11738)));
evalcond[6]=((((0.16)*cj1))+(((-1.0)*r20*x11719))+(((0.02349986)*x11736))+(((-1.0)*pz))+((r20*x11732))+(((-0.0008)*x11723))+(((7.7e-7)*sj1))+(((-3.5e-7)*x11727))+(((-0.02349986)*x11737))+(((0.16085006)*x11738))+(((0.16085006)*x11739)));
evalcond[7]=(((cj0*r10*x11719))+(((0.02349986)*x11738))+(((0.02349986)*x11739))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.0008)*x11740))+(((-3.5e-7)*r10*x11721))+(((-1.0)*px*x11724))+((x11720*x11732))+(((3.5e-7)*r11*x11728))+(((-3.5e-7)*sj0*x11725))+(((0.0008)*r11*x11721))+((cj0*py))+(((0.16085006)*x11737))+(((-1.0)*x11719*x11720))+(((-0.16085006)*x11736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x11741=(r21*sj5);
IkReal x11742=(cj3*r22);
IkReal x11743=(sj1*sj4);
IkReal x11744=(cj5*r20);
IkReal x11745=((1.0)*cj4);
IkReal x11746=(cj1*cj3);
IkReal x11747=(cj3*sj1);
IkReal x11748=((1.0)*cj1*sj4);
CheckValue<IkReal> x11749 = IKatan2WithCheck(IkReal((((x11741*x11743))+(((-1.0)*x11743*x11744))+(((-1.0)*x11742*x11748))+(((-1.0)*x11741*x11745*x11746))+((cj4*x11744*x11746))+(((-1.0)*r22*sj1*x11745)))),IkReal((((cj1*cj4*r22))+(((-1.0)*x11741*x11748))+(((-1.0)*x11741*x11745*x11747))+(((-1.0)*x11742*x11743))+((cj4*x11744*x11747))+((cj1*sj4*x11744)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11749.valid){
continue;
}
CheckValue<IkReal> x11750=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x11750.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x11749.value)+(((1.5707963267949)*(x11750.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x11751=IKcos(j2);
IkReal x11752=IKsin(j2);
IkReal x11753=((0.0008)*sj5);
IkReal x11754=(r00*sj0);
IkReal x11755=(cj0*cj5);
IkReal x11756=((1.0)*cj4);
IkReal x11757=(cj5*r21);
IkReal x11758=((1.0)*sj0);
IkReal x11759=(r01*sj5);
IkReal x11760=(cj0*sj4);
IkReal x11761=(r21*sj5);
IkReal x11762=(cj0*sj5);
IkReal x11763=((1.0)*sj3);
IkReal x11764=((1.0)*r10);
IkReal x11765=(cj4*cj5);
IkReal x11766=((3.5e-7)*cj5);
IkReal x11767=((1.0)*cj3);
IkReal x11768=(cj5*sj4);
IkReal x11769=((1.0)*sj4);
IkReal x11770=(cj1*x11751);
IkReal x11771=(sj1*x11752);
IkReal x11772=(sj1*x11751);
IkReal x11773=(cj1*x11752);
IkReal x11774=(cj5*r01*sj0);
evalcond[0]=(x11757+(((-1.0)*x11763*x11770))+((sj3*x11771))+((r20*sj5)));
evalcond[1]=(((r20*x11765))+(((-1.0)*x11773))+(((-1.0)*x11772))+(((-1.0)*r22*x11769))+(((-1.0)*x11756*x11761)));
evalcond[2]=(((r20*x11768))+(((-1.0)*x11767*x11770))+((cj4*r22))+((cj3*x11771))+(((-1.0)*x11761*x11769)));
evalcond[3]=(x11774+(((-1.0)*r11*x11755))+((sj5*x11754))+(((-1.0)*x11763*x11772))+(((-1.0)*x11763*x11773))+(((-1.0)*x11762*x11764)));
evalcond[4]=((((-1.0)*r10*x11755*x11756))+x11770+((cj4*r11*x11762))+(((-1.0)*x11771))+((r12*x11760))+(((-1.0)*r02*sj4*x11758))+((x11754*x11765))+(((-1.0)*sj0*x11756*x11759)));
evalcond[5]=((((-1.0)*sj4*x11758*x11759))+(((-1.0)*x11767*x11772))+(((-1.0)*x11767*x11773))+(((-1.0)*sj4*x11755*x11764))+((x11754*x11768))+((cj4*r02*sj0))+((r11*sj5*x11760))+(((-1.0)*cj0*r12*x11756)));
evalcond[6]=(((r20*x11766))+(((0.16)*cj1))+(((-0.0008)*x11757))+(((-1.0)*pz))+(((0.16085006)*x11772))+(((0.16085006)*x11773))+(((7.7e-7)*sj1))+(((0.02349986)*x11770))+(((-3.5e-7)*x11761))+(((-0.02349986)*x11771))+(((-1.0)*r20*x11753)));
evalcond[7]=((((0.0008)*r11*x11755))+(((-3.5e-7)*sj0*x11759))+(((-3.5e-7)*r10*x11755))+((cj0*r10*x11753))+(((-0.0008)*x11774))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-1.0)*px*x11758))+(((3.5e-7)*r11*x11762))+(((0.16085006)*x11771))+(((0.02349986)*x11772))+(((0.02349986)*x11773))+((x11754*x11766))+(((-1.0)*x11753*x11754))+(((-0.16085006)*x11770))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x11775=(r20*sj1);
IkReal x11776=((1.0)*sj5);
IkReal x11777=(cj1*r20);
IkReal x11778=(r21*sj1);
IkReal x11779=(cj1*sj3);
IkReal x11780=(cj4*cj5*sj3);
IkReal x11781=((1.0)*r22*sj4);
CheckValue<IkReal> x11782=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x11782.valid){
continue;
}
CheckValue<IkReal> x11783 = IKatan2WithCheck(IkReal(((((-1.0)*x11779*x11781))+(((-1.0)*x11775*x11776))+(((-1.0)*cj4*r21*x11776*x11779))+((x11777*x11780))+(((-1.0)*cj5*x11778)))),IkReal((((cj1*cj5*r21))+(((-1.0)*sj1*sj3*x11781))+(((-1.0)*cj4*sj3*x11776*x11778))+((sj5*x11777))+((x11775*x11780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11783.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11782.value)))+(x11783.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x11784=IKcos(j2);
IkReal x11785=IKsin(j2);
IkReal x11786=((0.0008)*sj5);
IkReal x11787=(r00*sj0);
IkReal x11788=(cj0*cj5);
IkReal x11789=((1.0)*cj4);
IkReal x11790=(cj5*r21);
IkReal x11791=((1.0)*sj0);
IkReal x11792=(r01*sj5);
IkReal x11793=(cj0*sj4);
IkReal x11794=(r21*sj5);
IkReal x11795=(cj0*sj5);
IkReal x11796=((1.0)*sj3);
IkReal x11797=((1.0)*r10);
IkReal x11798=(cj4*cj5);
IkReal x11799=((3.5e-7)*cj5);
IkReal x11800=((1.0)*cj3);
IkReal x11801=(cj5*sj4);
IkReal x11802=((1.0)*sj4);
IkReal x11803=(cj1*x11784);
IkReal x11804=(sj1*x11785);
IkReal x11805=(sj1*x11784);
IkReal x11806=(cj1*x11785);
IkReal x11807=(cj5*r01*sj0);
evalcond[0]=(x11790+((sj3*x11804))+(((-1.0)*x11796*x11803))+((r20*sj5)));
evalcond[1]=(((r20*x11798))+(((-1.0)*r22*x11802))+(((-1.0)*x11806))+(((-1.0)*x11805))+(((-1.0)*x11789*x11794)));
evalcond[2]=((((-1.0)*x11794*x11802))+((cj4*r22))+((r20*x11801))+(((-1.0)*x11800*x11803))+((cj3*x11804)));
evalcond[3]=((((-1.0)*x11795*x11797))+(((-1.0)*r11*x11788))+(((-1.0)*x11796*x11805))+(((-1.0)*x11796*x11806))+((sj5*x11787))+x11807);
evalcond[4]=(((r12*x11793))+(((-1.0)*r10*x11788*x11789))+(((-1.0)*sj0*x11789*x11792))+(((-1.0)*r02*sj4*x11791))+((cj4*r11*x11795))+(((-1.0)*x11804))+((x11787*x11798))+x11803);
evalcond[5]=((((-1.0)*sj4*x11788*x11797))+(((-1.0)*cj0*r12*x11789))+((x11787*x11801))+(((-1.0)*sj4*x11791*x11792))+((cj4*r02*sj0))+(((-1.0)*x11800*x11806))+(((-1.0)*x11800*x11805))+((r11*sj5*x11793)));
evalcond[6]=((((-0.0008)*x11790))+(((-1.0)*r20*x11786))+(((0.16)*cj1))+((r20*x11799))+(((-3.5e-7)*x11794))+(((-1.0)*pz))+(((0.16085006)*x11805))+(((0.16085006)*x11806))+(((-0.02349986)*x11804))+(((7.7e-7)*sj1))+(((0.02349986)*x11803)));
evalcond[7]=((((3.5e-7)*r11*x11795))+(((0.0008)*r11*x11788))+(((-0.16085006)*x11803))+(((-1.0)*x11786*x11787))+((cj0*r10*x11786))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.16085006)*x11804))+(((-3.5e-7)*sj0*x11792))+(((-1.0)*px*x11791))+(((-3.5e-7)*r10*x11788))+((cj0*py))+((x11787*x11799))+(((-0.0008)*x11807))+(((0.02349986)*x11805))+(((0.02349986)*x11806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11808=(cj4*sj3);
IkReal x11809=((1.0)*cj5);
IkReal x11810=(sj3*sj4);
IkReal x11811=((1.0)*sj5);
CheckValue<IkReal> x11812=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11811))+(((-1.0)*r21*x11809)))),-1);
if(!x11812.valid){
continue;
}
CheckValue<IkReal> x11813 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x11810))+((cj5*r00*x11808))+(((-1.0)*r01*x11808*x11811)))),IkReal(((((-1.0)*r10*x11808*x11809))+((r11*sj5*x11808))+((r12*x11810)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11813.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11812.value)))+(x11813.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x11814=IKcos(j0);
IkReal x11815=IKsin(j0);
IkReal x11816=((1.0)*sj4);
IkReal x11817=(r01*sj5);
IkReal x11818=(r12*x11815);
IkReal x11819=((1.0)*x11814);
IkReal x11820=(cj5*x11815);
IkReal x11821=(r00*x11814);
IkReal x11822=(sj5*x11815);
IkReal x11823=(cj5*r01*x11814);
evalcond[0]=(cj3+((sj5*x11821))+((r10*x11822))+((r11*x11820))+x11823);
evalcond[1]=(((cj4*cj5*x11821))+(((-1.0)*cj4*r11*x11822))+(((-1.0)*x11816*x11818))+(((-1.0)*r02*x11814*x11816))+(((-1.0)*cj4*x11817*x11819))+((cj4*r10*x11820)));
evalcond[2]=((((-1.0)*sj3))+((cj5*sj4*x11821))+(((-1.0)*r11*x11816*x11822))+(((-1.0)*x11814*x11816*x11817))+((cj4*x11818))+((cj4*r02*x11814))+((r10*sj4*x11820)));
evalcond[3]=((((3.5e-7)*cj5*x11821))+(((-3.5e-7)*r11*x11822))+(((-0.0008)*r10*x11822))+(((-3.5e-7)*x11814*x11817))+(((-1.0)*px*x11819))+(((-0.0008)*x11823))+(((-0.0008)*sj5*x11821))+(((-1.0)*py*x11815))+(((3.5e-7)*r10*x11820))+(((-0.0008)*r11*x11820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x11824=((0.64)*cj3);
IkReal x11825=((0.64)*sj3);
IkReal x11826=(cj5*r21);
IkReal x11827=((0.64340024)*cj4);
IkReal x11828=(r21*sj5);
IkReal x11829=((4.2e-6)*sj3);
IkReal x11830=((0.0096)*cj3);
IkReal x11831=(cj5*r20);
IkReal x11832=((0.0096)*sj3);
IkReal x11833=((0.28199832)*sj4);
IkReal x11834=((0.09399944)*sj4);
IkReal x11835=(r20*sj5);
IkReal x11836=(cj4*r22);
IkReal x11837=((0.0032)*cj3);
IkReal x11838=((0.0032)*sj3);
IkReal x11839=((1.4e-6)*sj3);
IkReal x11840=((12.0)*pz);
IkReal x11841=((4.0)*pz);
IkReal x11842=((1.93020072)*cj4);
IkReal x11843=((0.28199832)*x11826);
IkReal x11844=((0.28199832)*x11835);
IkReal x11845=(sj3*x11840);
IkReal x11846=((0.28199832)*x11836);
IkReal x11847=(cj3*x11840);
IkReal x11848=(cj3*x11828);
IkReal x11849=(cj3*r22*sj4);
IkReal x11850=(sj3*x11842);
IkReal x11851=(r22*sj3*sj4);
IkReal x11852=(x11829*x11831);
IkReal x11853=(x11828*x11829);
IkReal x11854=((1.93020072)*x11851);
IkReal x11855=(x11826*x11832);
IkReal x11856=(x11832*x11835);
IkReal x11857=(x11831*x11833);
IkReal x11858=((4.2e-6)*cj3*x11831);
IkReal x11859=((4.2e-6)*x11848);
IkReal x11860=(x11830*x11835);
IkReal x11861=(x11828*x11833);
IkReal x11862=((1.93020072)*x11849);
IkReal x11863=(x11826*x11830);
IkReal x11864=(x11831*x11850);
IkReal x11865=(x11828*x11850);
IkReal x11866=(cj3*x11831*x11842);
IkReal x11867=(x11842*x11848);
IkReal x11868=(x11864+x11844+x11843+x11852);
IkReal x11869=(x11866+x11846+x11858+x11857);
IkReal x11870=(x11865+x11845+x11853+x11856+x11854+x11855);
IkReal x11871=(x11863+x11862+x11861+x11860+x11867+x11847+x11859);
j1eval[0]=((((40584.4155844156)*(IKabs(((((-1.0)*x11870))+(((-1.0)*x11825))+x11868)))))+(((40584.4155844156)*(IKabs(((((-1.0)*x11871))+(((-1.0)*x11824))+x11869)))))+(((40584.4155844156)*(IKabs(((((-1.0)*x11871))+x11869+x11824)))))+(IKabs(cj3))+(IKabs(sj3))+(((40584.4155844156)*(IKabs(((((-1.4e-6)*x11848))+(((1.4e-6)*cj3*x11831))+(((0.09399944)*x11836))+((cj3*x11827*x11831))+(((-1.0)*x11835*x11837))+(((-1.0)*cj3*x11841))+(((-1.0)*x11827*x11848))+(((-1.0)*x11826*x11837))+((x11831*x11834))+(((-0.64340024)*x11849))+(((-1.0)*x11828*x11834))+(((-1.0)*x11824)))))))+(((40584.4155844156)*(IKabs(((((-1.0)*sj3*x11841))+(((0.09399944)*x11835))+(((-1.0)*x11835*x11838))+((sj3*x11827*x11831))+(((-0.64340024)*x11851))+(((-1.0)*x11826*x11838))+(((-1.0)*sj3*x11827*x11828))+((x11831*x11839))+(((-1.0)*x11828*x11839))+(((-1.0)*x11825))+(((0.09399944)*x11826)))))))+(((40584.4155844156)*(IKabs(((((-1.0)*x11870))+x11868+x11825))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x11872=((0.64)*sj3);
IkReal x11873=((6.16e-6)*sj3);
IkReal x11874=((0.64340024)*sj3);
IkReal x11875=(r22*sj4);
IkReal x11876=(r21*sj3);
IkReal x11877=(r20*sj5);
IkReal x11878=(cj5*r21);
IkReal x11879=(cj4*sj5);
IkReal x11880=((1.93020072)*sj3);
IkReal x11881=(pz*sj3);
IkReal x11882=((0.28199832)*x11878);
IkReal x11883=((0.28199832)*x11877);
IkReal x11884=((12.0)*x11881);
IkReal x11885=((0.09399944)*x11877);
IkReal x11886=((0.09399944)*x11878);
IkReal x11887=((4.0)*x11881);
IkReal x11888=(cj4*cj5*r20);
IkReal x11889=(cj5*r20*sj3);
IkReal x11890=((4.2e-6)*x11889);
IkReal x11891=((4.2e-6)*sj5*x11876);
IkReal x11892=(x11875*x11880);
IkReal x11893=((0.0096)*cj5*x11876);
IkReal x11894=((0.0096)*sj3*x11877);
IkReal x11895=((1.4e-6)*x11889);
IkReal x11896=((0.0032)*sj3*x11877);
IkReal x11897=((1.4e-6)*sj5*x11876);
IkReal x11898=((0.0032)*cj5*x11876);
IkReal x11899=(x11874*x11875);
IkReal x11900=(x11880*x11888);
IkReal x11901=((1.93020072)*x11876*x11879);
IkReal x11902=(x11874*x11888);
IkReal x11903=(r21*x11874*x11879);
IkReal x11904=(x11902+x11885+x11886+x11895);
IkReal x11905=(x11900+x11883+x11882+x11890);
IkReal x11906=(x11903+x11887+x11898+x11899+x11896+x11897);
IkReal x11907=(x11901+x11884+x11894+x11892+x11893+x11891);
op[0]=(x11904+(((-1.0)*x11872))+(((-1.0)*x11906)));
op[1]=x11873;
op[2]=(x11905+(((-1.0)*x11872))+(((-1.0)*x11907)));
op[3]=((1.232e-5)*sj3);
op[4]=(x11905+(((-1.0)*x11907))+x11872);
op[5]=x11873;
op[6]=(x11904+(((-1.0)*x11906))+x11872);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x11908=((0.64)*cj3);
IkReal x11909=((0.64340024)*cj4);
IkReal x11910=((0.28199832)*sj4);
IkReal x11911=(cj5*r20);
IkReal x11912=(r21*sj5);
IkReal x11913=((0.09399944)*sj4);
IkReal x11914=(cj4*r22);
IkReal x11915=((6.16e-6)*cj3);
IkReal x11916=(cj3*pz);
IkReal x11917=((1.93020072)*cj4);
IkReal x11918=((0.09399944)*x11914);
IkReal x11919=((0.28199832)*x11914);
IkReal x11920=((12.0)*x11916);
IkReal x11921=((4.0)*x11916);
IkReal x11922=(cj3*x11912);
IkReal x11923=(cj3*cj5*r21);
IkReal x11924=(cj3*r22*sj4);
IkReal x11925=(cj3*r20*sj5);
IkReal x11926=(x11911*x11913);
IkReal x11927=((1.4e-6)*cj3*x11911);
IkReal x11928=(x11910*x11911);
IkReal x11929=((4.2e-6)*cj3*x11911);
IkReal x11930=((4.2e-6)*x11922);
IkReal x11931=((0.0096)*x11925);
IkReal x11932=(x11910*x11912);
IkReal x11933=((1.93020072)*x11924);
IkReal x11934=((0.0096)*x11923);
IkReal x11935=((0.0032)*x11923);
IkReal x11936=((0.0032)*x11925);
IkReal x11937=((1.4e-6)*x11922);
IkReal x11938=((0.64340024)*x11924);
IkReal x11939=(x11912*x11913);
IkReal x11940=(cj3*x11909*x11911);
IkReal x11941=(cj3*x11911*x11917);
IkReal x11942=(x11917*x11922);
IkReal x11943=(x11909*x11922);
IkReal x11944=(x11928+x11929+x11919+x11941);
IkReal x11945=(x11926+x11927+x11918+x11940);
IkReal x11946=(x11939+x11938+x11935+x11937+x11936+x11921+x11943);
IkReal x11947=(x11934+x11931+x11930+x11933+x11932+x11920+x11942);
j1evalpoly[0]=(x11908+x11945+((htj1*x11915))+(((-1.0)*x11946))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x11945+(((-1.0)*x11946))+(((-1.0)*x11908))))))+((x11915*(htj1*htj1*htj1*htj1*htj1)))+(((1.232e-5)*cj3*(htj1*htj1*htj1)))+(((htj1*htj1)*((x11908+x11944+(((-1.0)*x11947))))))+(((htj1*htj1*htj1*htj1)*((x11944+(((-1.0)*x11947))+(((-1.0)*x11908)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x11948=(cj3*sj3);
j2eval[0]=x11948;
j2eval[1]=IKsign(x11948);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x11949=(r21*sj5);
IkReal x11950=((1.0)*cj4);
IkReal x11951=(sj1*sj4);
IkReal x11952=((1.0)*r22);
IkReal x11953=(cj1*sj4);
IkReal x11954=(cj1*cj4);
IkReal x11955=(cj5*r20);
IkReal x11956=(sj4*x11955);
if( IKabs(((((-1.0)*x11951*x11955))+((x11949*x11951))+(((-1.0)*r22*sj1*x11950))+(((-1.0)*x11952*x11953))+((x11954*x11955))+(((-1.0)*cj1*x11949*x11950)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x11949*x11950))+((cj4*sj1*x11955))+((x11953*x11955))+(((-1.0)*x11951*x11952))+(((-1.0)*x11949*x11953))+((r22*x11954)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x11951*x11955))+((x11949*x11951))+(((-1.0)*r22*sj1*x11950))+(((-1.0)*x11952*x11953))+((x11954*x11955))+(((-1.0)*cj1*x11949*x11950))))+IKsqr(((((-1.0)*sj1*x11949*x11950))+((cj4*sj1*x11955))+((x11953*x11955))+(((-1.0)*x11951*x11952))+(((-1.0)*x11949*x11953))+((r22*x11954))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x11951*x11955))+((x11949*x11951))+(((-1.0)*r22*sj1*x11950))+(((-1.0)*x11952*x11953))+((x11954*x11955))+(((-1.0)*cj1*x11949*x11950))), ((((-1.0)*sj1*x11949*x11950))+((cj4*sj1*x11955))+((x11953*x11955))+(((-1.0)*x11951*x11952))+(((-1.0)*x11949*x11953))+((r22*x11954))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x11957=IKcos(j2);
IkReal x11958=IKsin(j2);
IkReal x11959=((3.5e-7)*cj5);
IkReal x11960=(sj0*sj5);
IkReal x11961=((1.0)*cj4);
IkReal x11962=(cj0*r10);
IkReal x11963=((1.0)*sj4);
IkReal x11964=(cj0*sj4);
IkReal x11965=(r11*sj5);
IkReal x11966=((0.02349986)*sj1);
IkReal x11967=(cj4*sj0);
IkReal x11968=(cj5*r00);
IkReal x11969=(r21*sj5);
IkReal x11970=((0.0008)*cj5);
IkReal x11971=(cj5*r20);
IkReal x11972=(cj1*x11957);
IkReal x11973=(sj1*x11957);
IkReal x11974=(sj1*x11958);
IkReal x11975=(cj1*x11958);
IkReal x11976=((1.0)*x11973);
IkReal x11977=((1.0)*x11975);
IkReal x11978=(x11977+x11976);
evalcond[0]=(x11974+(((-1.0)*x11972))+((cj4*r22))+((sj4*x11971))+(((-1.0)*x11963*x11969)));
evalcond[1]=((((-1.0)*x11961*x11969))+(((-1.0)*x11978))+(((-1.0)*r22*x11963))+((cj4*x11971)));
evalcond[2]=(x11972+(((-1.0)*x11974))+(((-1.0)*r02*sj0*x11963))+((cj0*cj4*x11965))+((r12*x11964))+(((-1.0)*r01*x11960*x11961))+(((-1.0)*cj5*x11961*x11962))+((x11967*x11968)));
evalcond[3]=((((-1.0)*cj5*x11962*x11963))+(((-1.0)*cj0*r12*x11961))+((r02*x11967))+(((-1.0)*r01*x11960*x11963))+(((-1.0)*x11978))+((sj0*sj4*x11968))+((x11964*x11965)));
CheckValue<IkReal> x11979=IKPowWithIntegerCheck(r20,-1);
if(!x11979.valid){
continue;
}
evalcond[4]=((((0.16)*cj1))+(((-1.0)*x11958*x11966))+((x11959*(x11979.value)*(r21*r21)))+((r20*x11959))+(((0.16085006)*x11975))+(((0.16085006)*x11973))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.02349986)*x11972)));
evalcond[5]=(((x11957*x11966))+((cj0*r11*x11970))+(((-1.0)*x11959*x11962))+(((-3.5e-7)*r01*x11960))+(((3.5e-7)*cj0*x11965))+(((-0.0008)*r00*x11960))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.16085006)*x11972))+(((0.16085006)*x11974))+((r00*sj0*x11959))+(((0.02349986)*x11975))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0008)*sj5*x11962))+(((-1.0)*r01*sj0*x11970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x11980=((1.0)*sj5);
IkReal x11981=(cj1*r21);
IkReal x11982=(r20*sj1);
IkReal x11983=((1.0)*sj1);
IkReal x11984=(r22*sj4);
IkReal x11985=(cj4*cj5);
IkReal x11986=(cj1*r20);
if( IKabs(((((-1.0)*x11980*x11982))+(((-1.0)*cj1*x11984))+(((-1.0)*cj5*r21*x11983))+(((-1.0)*cj4*x11980*x11981))+((x11985*x11986)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*x11981))+((x11982*x11985))+(((-1.0)*x11983*x11984))+(((-1.0)*cj4*r21*sj1*x11980))+((sj5*x11986)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x11980*x11982))+(((-1.0)*cj1*x11984))+(((-1.0)*cj5*r21*x11983))+(((-1.0)*cj4*x11980*x11981))+((x11985*x11986))))+IKsqr((((cj5*x11981))+((x11982*x11985))+(((-1.0)*x11983*x11984))+(((-1.0)*cj4*r21*sj1*x11980))+((sj5*x11986))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x11980*x11982))+(((-1.0)*cj1*x11984))+(((-1.0)*cj5*r21*x11983))+(((-1.0)*cj4*x11980*x11981))+((x11985*x11986))), (((cj5*x11981))+((x11982*x11985))+(((-1.0)*x11983*x11984))+(((-1.0)*cj4*r21*sj1*x11980))+((sj5*x11986))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x11987=IKcos(j2);
IkReal x11988=IKsin(j2);
IkReal x11989=(r20*sj5);
IkReal x11990=((1.0)*cj4);
IkReal x11991=(cj5*r21);
IkReal x11992=((3.5e-7)*sj5);
IkReal x11993=((1.0)*sj0);
IkReal x11994=(r01*sj0);
IkReal x11995=((1.0)*cj0);
IkReal x11996=(cj5*r11);
IkReal x11997=(r00*sj0);
IkReal x11998=((0.0008)*sj5);
IkReal x11999=(cj4*cj5);
IkReal x12000=((3.5e-7)*cj5);
IkReal x12001=(cj0*r11);
IkReal x12002=(cj1*x11987);
IkReal x12003=(cj0*cj5*r10);
IkReal x12004=(sj1*x11987);
IkReal x12005=(sj1*x11988);
IkReal x12006=(cj1*x11988);
IkReal x12007=((1.0)*x12004);
IkReal x12008=((1.0)*x12006);
IkReal x12009=(x12008+x12007);
evalcond[0]=(x11991+x11989+(((-1.0)*x12002))+x12005);
evalcond[1]=(((r20*x11999))+(((-1.0)*x12009))+(((-1.0)*r22*sj4))+(((-1.0)*r21*sj5*x11990)));
evalcond[2]=(((cj5*x11994))+(((-1.0)*x12009))+(((-1.0)*x11995*x11996))+((sj5*x11997))+(((-1.0)*r10*sj5*x11995)));
evalcond[3]=((((-1.0)*x12005))+(((-1.0)*sj5*x11990*x11994))+((cj4*sj5*x12001))+(((-1.0)*r02*sj4*x11993))+((cj0*r12*sj4))+x12002+(((-1.0)*x11990*x12003))+((x11997*x11999)));
evalcond[4]=((((0.16085006)*x12004))+(((0.16085006)*x12006))+(((0.16)*cj1))+(((-0.02349986)*x12005))+(((-0.0008)*x11991))+((r20*x12000))+(((-0.0008)*x11989))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((-1.0)*r21*x11992))+(((0.02349986)*x12002)));
evalcond[5]=((((-1.0)*x11992*x11994))+(((0.16085006)*x12005))+(((0.0008)*cj0*x11996))+((cj0*r10*x11998))+((x11992*x12001))+(((0.16)*sj1))+(((-0.16085006)*x12002))+(((-7.7e-7)*cj1))+(((-0.0008)*cj5*x11994))+((x11997*x12000))+(((-1.0)*cj0*r10*x12000))+((cj0*py))+(((-1.0)*px*x11993))+(((0.02349986)*x12004))+(((0.02349986)*x12006))+(((-1.0)*x11997*x11998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x12010=((1.0)*cj4);
IkReal x12011=(r22*sj1);
IkReal x12012=((1.0)*sj4);
IkReal x12013=(cj1*r22);
IkReal x12014=(cj1*r21*sj5);
IkReal x12015=(cj5*r20*sj1);
IkReal x12016=(r21*sj1*sj5);
IkReal x12017=(cj1*cj5*r20);
if( IKabs(((((-1.0)*x12010*x12014))+(((-1.0)*x12012*x12013))+(((-1.0)*x12012*x12016))+((cj4*x12011))+((cj4*x12017))+((sj4*x12015)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x12011*x12012))+(((-1.0)*x12010*x12013))+(((-1.0)*x12010*x12016))+(((-1.0)*x12012*x12017))+((cj4*x12015))+((sj4*x12014)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x12010*x12014))+(((-1.0)*x12012*x12013))+(((-1.0)*x12012*x12016))+((cj4*x12011))+((cj4*x12017))+((sj4*x12015))))+IKsqr(((((-1.0)*x12011*x12012))+(((-1.0)*x12010*x12013))+(((-1.0)*x12010*x12016))+(((-1.0)*x12012*x12017))+((cj4*x12015))+((sj4*x12014))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x12010*x12014))+(((-1.0)*x12012*x12013))+(((-1.0)*x12012*x12016))+((cj4*x12011))+((cj4*x12017))+((sj4*x12015))), ((((-1.0)*x12011*x12012))+(((-1.0)*x12010*x12013))+(((-1.0)*x12010*x12016))+(((-1.0)*x12012*x12017))+((cj4*x12015))+((sj4*x12014))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x12018=IKcos(j2);
IkReal x12019=IKsin(j2);
IkReal x12020=((3.5e-7)*cj5);
IkReal x12021=(sj0*sj5);
IkReal x12022=(cj0*cj5);
IkReal x12023=((1.0)*cj4);
IkReal x12024=((1.0)*sj4);
IkReal x12025=(cj0*sj4);
IkReal x12026=(cj0*r10);
IkReal x12027=(r11*sj5);
IkReal x12028=((0.02349986)*sj1);
IkReal x12029=(cj4*sj0);
IkReal x12030=(cj5*r00);
IkReal x12031=(cj5*r20);
IkReal x12032=(r21*sj5);
IkReal x12033=(cj1*x12018);
IkReal x12034=(cj1*x12019);
IkReal x12035=(sj1*x12018);
IkReal x12036=(sj1*x12019);
IkReal x12037=((1.0)*x12036);
evalcond[0]=(((cj4*r22))+(((-1.0)*x12037))+(((-1.0)*x12024*x12032))+((sj4*x12031))+x12033);
evalcond[1]=((((-1.0)*x12035))+(((-1.0)*x12034))+((cj4*x12031))+(((-1.0)*x12023*x12032))+(((-1.0)*r22*x12024)));
evalcond[2]=(((sj0*sj4*x12030))+(((-1.0)*r10*x12022*x12024))+x12035+x12034+(((-1.0)*r01*x12021*x12024))+((x12025*x12027))+((r02*x12029))+(((-1.0)*cj0*r12*x12023)));
evalcond[3]=((((-1.0)*x12037))+(((-1.0)*r10*x12022*x12023))+x12033+(((-1.0)*r01*x12021*x12023))+((cj0*cj4*x12027))+((x12029*x12030))+((r12*x12025))+(((-1.0)*r02*sj0*x12024)));
CheckValue<IkReal> x12038=IKPowWithIntegerCheck(r20,-1);
if(!x12038.valid){
continue;
}
evalcond[4]=((((0.16085006)*x12034))+(((0.16085006)*x12035))+(((0.16)*cj1))+((r20*x12020))+((x12020*(x12038.value)*(r21*r21)))+(((-1.0)*pz))+(((7.7e-7)*sj1))+(((0.02349986)*x12033))+(((-1.0)*x12019*x12028)));
evalcond[5]=(((r00*sj0*x12020))+(((0.16085006)*x12036))+((x12018*x12028))+(((-0.0008)*r00*x12021))+(((3.5e-7)*cj0*x12027))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-3.5e-7)*r01*x12021))+(((-1.0)*x12020*x12026))+(((-0.16085006)*x12033))+(((0.0008)*r11*x12022))+(((-0.0008)*cj5*r01*sj0))+(((0.0008)*sj5*x12026))+(((0.02349986)*x12034))+(((-1.0)*px*sj0))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x12039=(cj4*sj5);
IkReal x12040=(r20*sj5);
IkReal x12041=(r21*sj1);
IkReal x12042=((1.0)*cj1*r21);
IkReal x12043=((1.0)*r22*sj4);
IkReal x12044=(cj4*cj5*r20);
if( IKabs(((((-1.0)*cj1*x12043))+((sj1*x12040))+((cj1*x12044))+(((-1.0)*x12039*x12042))+((cj5*x12041)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x12044))+(((-1.0)*x12039*x12041))+(((-1.0)*cj5*x12042))+(((-1.0)*sj1*x12043))+(((-1.0)*cj1*x12040)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x12043))+((sj1*x12040))+((cj1*x12044))+(((-1.0)*x12039*x12042))+((cj5*x12041))))+IKsqr((((sj1*x12044))+(((-1.0)*x12039*x12041))+(((-1.0)*cj5*x12042))+(((-1.0)*sj1*x12043))+(((-1.0)*cj1*x12040))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x12043))+((sj1*x12040))+((cj1*x12044))+(((-1.0)*x12039*x12042))+((cj5*x12041))), (((sj1*x12044))+(((-1.0)*x12039*x12041))+(((-1.0)*cj5*x12042))+(((-1.0)*sj1*x12043))+(((-1.0)*cj1*x12040))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x12045=IKcos(j2);
IkReal x12046=IKsin(j2);
IkReal x12047=(cj0*cj5);
IkReal x12048=(r20*sj5);
IkReal x12049=((1.0)*cj4);
IkReal x12050=((3.5e-7)*sj5);
IkReal x12051=((1.0)*sj0);
IkReal x12052=(r01*sj0);
IkReal x12053=(r00*sj0);
IkReal x12054=((0.0008)*sj5);
IkReal x12055=(cj4*cj5);
IkReal x12056=(cj0*r10);
IkReal x12057=((3.5e-7)*cj5);
IkReal x12058=(cj5*r21);
IkReal x12059=(cj0*r11);
IkReal x12060=(cj1*x12045);
IkReal x12061=(cj1*x12046);
IkReal x12062=(sj1*x12045);
IkReal x12063=(sj1*x12046);
IkReal x12064=((1.0)*x12063);
evalcond[0]=(x12060+x12058+x12048+(((-1.0)*x12064)));
evalcond[1]=(((r20*x12055))+(((-1.0)*x12061))+(((-1.0)*x12062))+(((-1.0)*r21*sj5*x12049))+(((-1.0)*r22*sj4)));
evalcond[2]=((((-1.0)*sj5*x12056))+(((-1.0)*r11*x12047))+((cj5*x12052))+x12062+x12061+((sj5*x12053)));
evalcond[3]=(((cj4*sj5*x12059))+(((-1.0)*r02*sj4*x12051))+((x12053*x12055))+(((-1.0)*sj5*x12049*x12052))+((cj0*r12*sj4))+x12060+(((-1.0)*x12064))+(((-1.0)*r10*x12047*x12049)));
evalcond[4]=(((r20*x12057))+(((-0.02349986)*x12063))+(((-1.0)*r21*x12050))+(((0.16)*cj1))+(((0.02349986)*x12060))+(((-1.0)*pz))+(((-0.0008)*x12058))+(((7.7e-7)*sj1))+(((-0.0008)*x12048))+(((0.16085006)*x12062))+(((0.16085006)*x12061)));
evalcond[5]=((((0.02349986)*x12062))+(((0.02349986)*x12061))+(((-0.16085006)*x12060))+((x12053*x12057))+(((-0.0008)*cj5*x12052))+(((-3.5e-7)*r10*x12047))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+((x12050*x12059))+(((0.0008)*r11*x12047))+(((-1.0)*x12050*x12052))+((cj0*py))+(((0.16085006)*x12063))+(((-1.0)*x12053*x12054))+(((-1.0)*px*x12051))+((x12054*x12056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x12065=(cj5*r11);
IkReal x12066=(r10*sj5);
IkReal x12067=(cj5*r20);
IkReal x12068=(cj1*sj5);
IkReal x12069=(cj1*sj3);
IkReal x12070=(cj4*r22);
IkReal x12071=(cj3*sj0);
IkReal x12072=(cj5*r01);
IkReal x12073=(sj1*sj5);
IkReal x12074=((1.0)*cj0*cj3);
IkReal x12075=((1.0)*sj3*sj4);
CheckValue<IkReal> x12076=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x12076.valid){
continue;
}
CheckValue<IkReal> x12077 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x12067*x12075))+((r00*x12068*x12071))+(((-1.0)*cj1*x12066*x12074))+((cj1*x12071*x12072))+((r21*sj3*sj4*x12073))+(((-1.0)*cj1*x12065*x12074))+(((-1.0)*sj1*sj3*x12070)))),IkReal(((((-1.0)*sj1*x12065*x12074))+((r00*x12071*x12073))+(((-1.0)*sj1*x12066*x12074))+(((-1.0)*r21*x12068*x12075))+((sj1*x12071*x12072))+((x12069*x12070))+((sj4*x12067*x12069)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12077.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12076.value)))+(x12077.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x12078=IKcos(j2);
IkReal x12079=IKsin(j2);
IkReal x12080=((0.0008)*sj5);
IkReal x12081=(r00*sj0);
IkReal x12082=(cj0*cj5);
IkReal x12083=((1.0)*cj4);
IkReal x12084=(cj5*r21);
IkReal x12085=((1.0)*sj0);
IkReal x12086=(r01*sj5);
IkReal x12087=(cj0*sj4);
IkReal x12088=(r21*sj5);
IkReal x12089=(cj0*sj5);
IkReal x12090=((1.0)*sj3);
IkReal x12091=((1.0)*r10);
IkReal x12092=(cj4*cj5);
IkReal x12093=((3.5e-7)*cj5);
IkReal x12094=((1.0)*cj3);
IkReal x12095=(cj5*sj4);
IkReal x12096=((1.0)*sj4);
IkReal x12097=(cj1*x12078);
IkReal x12098=(sj1*x12079);
IkReal x12099=(sj1*x12078);
IkReal x12100=(cj1*x12079);
IkReal x12101=(cj5*r01*sj0);
evalcond[0]=(((sj3*x12098))+(((-1.0)*x12090*x12097))+x12084+((r20*sj5)));
evalcond[1]=((((-1.0)*x12099))+((r20*x12092))+(((-1.0)*r22*x12096))+(((-1.0)*x12083*x12088))+(((-1.0)*x12100)));
evalcond[2]=(((cj4*r22))+(((-1.0)*x12088*x12096))+((r20*x12095))+(((-1.0)*x12094*x12097))+((cj3*x12098)));
evalcond[3]=((((-1.0)*x12089*x12091))+(((-1.0)*r11*x12082))+x12101+(((-1.0)*x12090*x12099))+((sj5*x12081))+(((-1.0)*x12090*x12100)));
evalcond[4]=((((-1.0)*r02*sj4*x12085))+(((-1.0)*x12098))+(((-1.0)*sj0*x12083*x12086))+x12097+((cj4*r11*x12089))+((r12*x12087))+((x12081*x12092))+(((-1.0)*r10*x12082*x12083)));
evalcond[5]=(((r11*sj5*x12087))+(((-1.0)*x12094*x12100))+((cj4*r02*sj0))+(((-1.0)*sj4*x12082*x12091))+(((-1.0)*cj0*r12*x12083))+(((-1.0)*x12094*x12099))+((x12081*x12095))+(((-1.0)*sj4*x12085*x12086)));
evalcond[6]=((((-0.02349986)*x12098))+(((0.16085006)*x12100))+(((0.02349986)*x12097))+(((0.16)*cj1))+(((-1.0)*pz))+((r20*x12093))+(((-0.0008)*x12084))+(((7.7e-7)*sj1))+(((-1.0)*r20*x12080))+(((-3.5e-7)*x12088))+(((0.16085006)*x12099)));
evalcond[7]=((((-0.0008)*x12101))+(((-3.5e-7)*r10*x12082))+(((0.02349986)*x12099))+(((0.02349986)*x12100))+(((-0.16085006)*x12097))+((cj0*r10*x12080))+(((-1.0)*x12080*x12081))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-3.5e-7)*sj0*x12086))+(((-1.0)*px*x12085))+(((0.0008)*r11*x12082))+(((0.16085006)*x12098))+((x12081*x12093))+((cj0*py))+(((3.5e-7)*r11*x12089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x12102=(r21*sj5);
IkReal x12103=(cj3*r22);
IkReal x12104=(sj1*sj4);
IkReal x12105=(cj5*r20);
IkReal x12106=((1.0)*cj4);
IkReal x12107=(cj1*cj3);
IkReal x12108=(cj3*sj1);
IkReal x12109=((1.0)*cj1*sj4);
CheckValue<IkReal> x12110=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x12110.valid){
continue;
}
CheckValue<IkReal> x12111 = IKatan2WithCheck(IkReal((((cj4*x12105*x12107))+(((-1.0)*x12103*x12109))+(((-1.0)*r22*sj1*x12106))+(((-1.0)*x12104*x12105))+((x12102*x12104))+(((-1.0)*x12102*x12106*x12107)))),IkReal((((cj4*x12105*x12108))+((cj1*cj4*r22))+((cj1*sj4*x12105))+(((-1.0)*x12102*x12109))+(((-1.0)*x12103*x12104))+(((-1.0)*x12102*x12106*x12108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12111.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12110.value)))+(x12111.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x12112=IKcos(j2);
IkReal x12113=IKsin(j2);
IkReal x12114=((0.0008)*sj5);
IkReal x12115=(r00*sj0);
IkReal x12116=(cj0*cj5);
IkReal x12117=((1.0)*cj4);
IkReal x12118=(cj5*r21);
IkReal x12119=((1.0)*sj0);
IkReal x12120=(r01*sj5);
IkReal x12121=(cj0*sj4);
IkReal x12122=(r21*sj5);
IkReal x12123=(cj0*sj5);
IkReal x12124=((1.0)*sj3);
IkReal x12125=((1.0)*r10);
IkReal x12126=(cj4*cj5);
IkReal x12127=((3.5e-7)*cj5);
IkReal x12128=((1.0)*cj3);
IkReal x12129=(cj5*sj4);
IkReal x12130=((1.0)*sj4);
IkReal x12131=(cj1*x12112);
IkReal x12132=(sj1*x12113);
IkReal x12133=(sj1*x12112);
IkReal x12134=(cj1*x12113);
IkReal x12135=(cj5*r01*sj0);
evalcond[0]=(((sj3*x12132))+(((-1.0)*x12124*x12131))+x12118+((r20*sj5)));
evalcond[1]=((((-1.0)*r22*x12130))+(((-1.0)*x12133))+(((-1.0)*x12134))+(((-1.0)*x12117*x12122))+((r20*x12126)));
evalcond[2]=(((cj4*r22))+((cj3*x12132))+(((-1.0)*x12128*x12131))+(((-1.0)*x12122*x12130))+((r20*x12129)));
evalcond[3]=((((-1.0)*x12124*x12133))+(((-1.0)*x12124*x12134))+x12135+((sj5*x12115))+(((-1.0)*x12123*x12125))+(((-1.0)*r11*x12116)));
evalcond[4]=(((x12115*x12126))+((r12*x12121))+((cj4*r11*x12123))+x12131+(((-1.0)*r10*x12116*x12117))+(((-1.0)*sj0*x12117*x12120))+(((-1.0)*r02*sj4*x12119))+(((-1.0)*x12132)));
evalcond[5]=(((x12115*x12129))+(((-1.0)*sj4*x12116*x12125))+((cj4*r02*sj0))+(((-1.0)*x12128*x12134))+(((-1.0)*x12128*x12133))+(((-1.0)*sj4*x12119*x12120))+(((-1.0)*cj0*r12*x12117))+((r11*sj5*x12121)));
evalcond[6]=((((-0.02349986)*x12132))+(((0.16)*cj1))+(((-3.5e-7)*x12122))+(((-1.0)*r20*x12114))+(((-1.0)*pz))+(((0.02349986)*x12131))+(((7.7e-7)*sj1))+(((0.16085006)*x12134))+(((0.16085006)*x12133))+(((-0.0008)*x12118))+((r20*x12127)));
evalcond[7]=(((cj0*r10*x12114))+((x12115*x12127))+(((-1.0)*x12114*x12115))+(((-1.0)*px*x12119))+(((3.5e-7)*r11*x12123))+(((-0.16085006)*x12131))+(((-3.5e-7)*r10*x12116))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((0.02349986)*x12134))+(((0.02349986)*x12133))+(((0.0008)*r11*x12116))+(((-3.5e-7)*sj0*x12120))+((cj0*py))+(((-0.0008)*x12135))+(((0.16085006)*x12132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x12136=(r20*sj1);
IkReal x12137=((1.0)*sj5);
IkReal x12138=(cj1*r20);
IkReal x12139=(r21*sj1);
IkReal x12140=(cj1*sj3);
IkReal x12141=(cj4*cj5*sj3);
IkReal x12142=((1.0)*r22*sj4);
CheckValue<IkReal> x12143=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x12143.valid){
continue;
}
CheckValue<IkReal> x12144 = IKatan2WithCheck(IkReal(((((-1.0)*x12140*x12142))+(((-1.0)*x12136*x12137))+(((-1.0)*cj5*x12139))+((x12138*x12141))+(((-1.0)*cj4*r21*x12137*x12140)))),IkReal((((cj1*cj5*r21))+((sj5*x12138))+(((-1.0)*sj1*sj3*x12142))+((x12136*x12141))+(((-1.0)*cj4*sj3*x12137*x12139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12144.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12143.value)))+(x12144.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x12145=IKcos(j2);
IkReal x12146=IKsin(j2);
IkReal x12147=((0.0008)*sj5);
IkReal x12148=(r00*sj0);
IkReal x12149=(cj0*cj5);
IkReal x12150=((1.0)*cj4);
IkReal x12151=(cj5*r21);
IkReal x12152=((1.0)*sj0);
IkReal x12153=(r01*sj5);
IkReal x12154=(cj0*sj4);
IkReal x12155=(r21*sj5);
IkReal x12156=(cj0*sj5);
IkReal x12157=((1.0)*sj3);
IkReal x12158=((1.0)*r10);
IkReal x12159=(cj4*cj5);
IkReal x12160=((3.5e-7)*cj5);
IkReal x12161=((1.0)*cj3);
IkReal x12162=(cj5*sj4);
IkReal x12163=((1.0)*sj4);
IkReal x12164=(cj1*x12145);
IkReal x12165=(sj1*x12146);
IkReal x12166=(sj1*x12145);
IkReal x12167=(cj1*x12146);
IkReal x12168=(cj5*r01*sj0);
evalcond[0]=((((-1.0)*x12157*x12164))+x12151+((sj3*x12165))+((r20*sj5)));
evalcond[1]=((((-1.0)*x12167))+(((-1.0)*x12166))+(((-1.0)*r22*x12163))+((r20*x12159))+(((-1.0)*x12150*x12155)));
evalcond[2]=(((cj4*r22))+(((-1.0)*x12161*x12164))+((r20*x12162))+(((-1.0)*x12155*x12163))+((cj3*x12165)));
evalcond[3]=((((-1.0)*x12156*x12158))+(((-1.0)*r11*x12149))+(((-1.0)*x12157*x12166))+(((-1.0)*x12157*x12167))+x12168+((sj5*x12148)));
evalcond[4]=((((-1.0)*r02*sj4*x12152))+((cj4*r11*x12156))+(((-1.0)*x12165))+(((-1.0)*r10*x12149*x12150))+(((-1.0)*sj0*x12150*x12153))+((r12*x12154))+x12164+((x12148*x12159)));
evalcond[5]=((((-1.0)*x12161*x12166))+(((-1.0)*x12161*x12167))+((x12148*x12162))+((r11*sj5*x12154))+((cj4*r02*sj0))+(((-1.0)*sj4*x12149*x12158))+(((-1.0)*sj4*x12152*x12153))+(((-1.0)*cj0*r12*x12150)));
evalcond[6]=((((-0.0008)*x12151))+(((0.16)*cj1))+(((0.16085006)*x12166))+(((0.16085006)*x12167))+((r20*x12160))+(((0.02349986)*x12164))+(((-1.0)*pz))+(((-3.5e-7)*x12155))+(((7.7e-7)*sj1))+(((-1.0)*r20*x12147))+(((-0.02349986)*x12165)));
evalcond[7]=((((-3.5e-7)*r10*x12149))+(((-0.0008)*x12168))+(((0.16085006)*x12165))+((x12148*x12160))+(((0.02349986)*x12166))+(((0.02349986)*x12167))+(((3.5e-7)*r11*x12156))+(((0.16)*sj1))+(((-7.7e-7)*cj1))+(((-0.16085006)*x12164))+(((0.0008)*r11*x12149))+(((-1.0)*x12147*x12148))+(((-1.0)*px*x12152))+((cj0*r10*x12147))+((cj0*py))+(((-3.5e-7)*sj0*x12153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - robothand (2104fdb657b6add484a7d31f247006cc)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
